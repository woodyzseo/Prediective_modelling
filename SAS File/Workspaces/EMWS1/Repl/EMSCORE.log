MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   call symput('NLDATE', strip(put(date(), NLDATE.)));
MPRINT(EM_DIAGRAM):   call symput('NLTIME', strip(put(datetime(), NLTIME.)));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   nldate= sasmsg("sashelp.dmine", "log_date_note", 'N', "April 05, 2021" );
MPRINT(EM_DIAGRAM):   nltime= sasmsg("sashelp.dmine", "log_time_note", 'N', "13:09:40 o'clock" );
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "* Score Log";
MPRINT(EM_DIAGRAM):   put nldate;
MPRINT(EM_DIAGRAM):   put nltime;
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   run;
*------------------------------------------------------------*
* Score Log
Date:                April 05, 2021
Time:                13:09:40 o'clock
*------------------------------------------------------------*
MPRINT(EM_DIAGRAM):    filename O2GLGAIT "H:\746\Decision Tree test\Workspaces\EMWS1\Repl\EMSCORE.out" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):   proc printto print=O2GLGAIT new;
MPRINT(EM_DIAGRAM):   run;
42872      %let EMEXCEPTIONSTRING=;
42873      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
42874      * SCORE: Repl;
MPRINT(EM_DIAGRAM):   * SCORE: Repl;
42875      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
42876      %let EM_ACTION = SCORE;
42877      %let syscc = 0;
42878      filename x CATALOG 'SASHELP.EMUTIL.EM_VARMACRO.SOURCE';
MPRINT(EM_DIAGRAM):     filename x CATALOG 'SASHELP.EMUTIL.EM_VARMACRO.SOURCE';
42879      %inc x;
NOTE: %INCLUDE (level 1) file X is file SASHELP.EMUTIL.EM_VARMACRO.SOURCE.
42880     +
42881     +%macro em_varMacro(name=emMacro, metadata=, where=, key=NAME, nummacro=);
42882     +
42883     +   filename macFile catalog 'work.emutil.macro.source';
42884     +   %let _METAOBS = 0;
42885     +
42886     +   %if (%sysfunc(exist(&metadata))<1 and %sysfunc(exist(&metadata, VIEW))<1)
42887     +                   or (&metadata eq ) %then %do;
42888     +       %put * No metadata data set defined;
42889     +       %goto doend;
42890     +   %end;
42891     +
42892     +   data _null_;
42893     +      length _STRING_ $80;
42894     +      retain _STRING_;
42895     +      set &metadata end=eof;
42896     +      file macFile;
42897     +      %if %nrbquote(&where) ne %then %do;
42898     +          %let whereClause = where (%nrbquote(&where));
42899     +          %unquote(&whereClause);
42900     +      %end;
42901     +      if _N_=1 then do;
42902     +         string = "%"!!"macro &name;";
42903     +         put string;
42904     +      end;
42905     +      if (length(_STRING_) + length(trim(&key))+ 1 < 80) then do;
42906     +         _STRING_ = trim(_STRING_)!!' '!!trim(&key);
42907     +         if eof then do;
42908     +            put _STRING_;
42909     +            string = "%"!!"mend &name;";
42910     +            put string;
42911     +            %if (&nummacro ne ) %then %do;
42912     +                string = strip(put(_N_, best.));
42913     +                put "%" "global &nummacro;";
42914     +                put "%" "let &nummacro = " string ";";
42915     +                call symput('_METAOBS', string);
42916     +            %end;
42917     +         end;
42918     +      end;
42919     +      else do;
42920     +         put _STRING_;
42921     +         _string_ = TRIM(&key);
42922     +         if eof then do;
42923     +            put _STRING_;
42924     +            string = "%"!!"mend &name;";
42925     +            put string;
42926     +        end;
42927     +      end;
42928     +      if eof then do;
42929     +         string = strip(put(_N_, best.));
42930     +         call symput('_METAOBS', string);
42931     +         %if (&nummacro ne ) %then %do;
42932     +             put "%" "global &nummacro;";
42933     +             put "%" "let &nummacro = " string ";";
42934     +         %end;
42935     +      end;
42936     +   run;
42937     +
42938     +   %doend:
42939     +   %if ^&_METAOBS %then %do;
42940     +       data _null_;
42941     +          file macFile;
42942     +          put "%" "macro &name;";
42943     +          put "%" "mend &name;";
42944     +          %if (&nummacro ne ) %then %do;
42945     +              put "%" "global &nummacro;";
42946     +              put "%" "let &nummacro = 0;";
42947     +          %end;
42948     +      run;
42949     +   %end;
42950     +   %inc macFile;
42951     +   filename macFile;
42952     +%mend em_varMacro;
NOTE: %INCLUDE (level 1) ending.
42953      filename X;
MPRINT(EM_DIAGRAM):   filename X;
NOTE: Fileref X has been deassigned.
42954       %macro main;
42955      
42956         filename temp catalog 'sashelp.emmdfy.Replace_macros.source';
42957         %include temp;
42958         filename temp;
42959      
42960         %if %upcase(&EM_ACTION) = CREATE %then %do;
42961      
42962             filename temp catalog 'sashelp.emmdfy.Replace_create.source';
42963             %include temp;
42964             filename temp;
42965             %create;
42966         %end;
42967         %else
42968         %if %upcase(&EM_ACTION) = TRAIN %then %do;
42969      
42970             filename temp catalog 'sashelp.emmdfy.Replace_train.source';
42971             %include temp;
42972             filename temp;
42973             %train;
42974         %end;
42975         %else
42976         %if %upcase(&EM_ACTION) = SCORE %then %do;
42977      
42978             filename temp catalog 'sashelp.emmdfy.Replace_score.source';
42979             %include temp;
42980             filename temp;
42981             %score;
42982         %end;
42983         %if %upcase(&EM_ACTION) = REPORT %then %do;
42984      
42985             filename temp catalog 'sashelp.emmdfy.Replace_report.source';
42986             %include temp;
42987             filename temp;
42988             %report;
42989         %end;
42990         %if %upcase(&EM_ACTION) = OPENOUTCLASSTABLE %then %do;
42991             filename temp catalog 'sashelp.emmdfy.replace_makeoutclass.source';
42992             %include temp;
42993             filename temp;
42994             %em_replace_openoutclass;
42995         %end;
42996         %if %upcase(&EM_ACTION) = CLOSEOUTCLASSTABLE %then %do;
42997             filename temp catalog 'sashelp.emmdfy.replace_makeoutclass.source';
42998             %include temp;
42999             filename temp;
43000             %em_replace_closeoutclass;
43001         %end;
43002      %mend main;
43003      
43004      %main;
MPRINT(MAIN):   filename temp catalog 'sashelp.emmdfy.Replace_macros.source';
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMMDFY.REPLACE_MACROS.SOURCE.
43005     +%macro SetProperties;
43006     +   %em_checkmacro(name=EM_PROPERTY_UNKNOWNLEVEL,    global=Y, value=MODE);
43007     +   %em_checkmacro(name=EM_PROPERTY_CALCMETHOD,      global=Y, value=NONE);
43008     +   %em_checkmacro(name=EM_PROPERTY_PERCENTSCUTOFF,  global=Y, value=0.5);
43009     +   %em_checkmacro(name=EM_PROPERTY_SPACINGSCUTOFF,  global=Y, value=9);
43010     +   %em_checkMacro(name=EM_PROPERTY_MADSCUTOFF,      global=Y, value=9);
43011     +   %em_checkMacro(name=EM_PROPERTY_STDDEVCUTOFF,    global=Y, value=3);
43012     +   %em_checkmacro(name=EM_PROPERTY_REPLACEMETHOD,   global=Y, value=COMPUTED);
43013     +   %em_checkmacro(name=EM_PROPERTY_HIDEVARIABLE,    global=Y, value=N);
43014     +   %em_checkmacro(name=EM_PROPERTY_INTERVALMETHOD,  global=Y, value=NONE);
43015     +   %em_checkmacro(name=EM_PROPERTY_REPORTCOUNT,     global=Y, value=Y);
43016     +
43017     +%mend SetProperties;
43018     +
NOTE: %INCLUDE (level 1) ending.
MPRINT(MAIN):   filename temp;
NOTE: Fileref TEMP has been deassigned.
MPRINT(MAIN):   filename temp catalog 'sashelp.emmdfy.Replace_score.source';
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMMDFY.REPLACE_SCORE.SOURCE.
43019     +%macro makeLevelData(data=, outclass=);
43020     +   data REPLACE_MODE;
43021     +      set &OUTCLASS;
43022     +      by NAME;
43023     +      if first.name then do;
43024     +         MODEC    = CRAW;
43025     +         MODEN    = NRAW;
43026     +         NORMMODE = LEVEL;
43027     +         output;
43028     +      end;
43029     +      keep NAME MODEC MODEN NORMMODE UNKWOWNDEFAULT;
43030     +   run;
43031     +
43032     +   proc sort data=&EM_DATA_VARIABLESET;
43033     +      by NAME;
43034     +   run;
43035     +   data &data;
43036     +      length UNKWOWNDEFAULT $8;
43037     +      merge &OUTCLASS(in=_a) REPLACE_MODE &EM_DATA_VARIABLESET(keep=LABEL LENGTH NAME ROLE LEVEL LABEL FORMAT RENAME=(LEVEL=MLEVEL) where=(MLEVEL ne 'INTERVAL'));
43038     +      by NAME;
43039     +      if LEVEL = '_UNKNOWN_' then UNKWOWNDEFAULT = "&EM_PROPERTY_UNKNOWNLEVEL";
43040     +      if _a then output;
43041     +   run;
43042     +   proc datasets lib=work nolist;
43043     +      delete REPLACE_MODE;
43044     +   run;
43045     +   quit;
43046     +%mend makeLevelData;
43047     +
43048     +%macro makeNewNames(limitDs=, classValue=, className=);
43049     +     %let varname = invarname;
43050     +     %let newname = outname;
43051     +     proc sort data=&classValue out=&varname nodupkey;
43052     +        by NAME;
43053     +        where REPLACE_VALUE ^in('', '_DEFAULT_') or (REPLACE_VALUE eq '_DEFAULT_' and UNKWOWNDEFAULT ne 'NONE');
43054     +     run;
43055     +     %let classnum=0;
43056     +     %let dsid = %sysfunc(open(&varname));
43057     +     %if &dsid>0 %then %do;
43058     +         %let classnum = %sysfunc(attrn(&dsid, NOBS));
43059     +         %let dsid = %sysfunc(close(&dsid));
43060     +     %end;
43061     +
43062     +     %let varnum=0;
43063     +     %let dsid = %sysfunc(open(&LimitDs));
43064     +     %if &dsid>0 %then %do;
43065     +         %let varnum = %sysfunc(attrn(&dsid, NOBS));
43066     +         %let dsid = %sysfunc(close(&dsid));
43067     +     %end;
43068     +
43069     +     %if ^&classnum and ^&varnum and ^%sysfunc(exist(&classname)) %then %do;
43070     +         %let lib    = %scan(&classname, 1, .);
43071     +         %let member = %scan(&classname, 2, .);
43072     +          proc datasets lib=&lib nolist;
43073     +             delete &member;
43074     +          run;
43075     +          quit;
43076     +         %goto doendmn;
43077     +     %end;
43078     +
43079     +     data &varname;
43080     +        set
43081     +        %if &classnum %then %do;
43082     +            &varname(keep=NAME)
43083     +        %end;
43084     +        %if &varnum %then %do;
43085     +            &limitDs(keep=NAME)
43086     +        %end;
43087     +        ;
43088     +     run;
43089     +     proc dmdb data=&varname outtable=&newname(rename=(REP=NEWNAME)) nameserver;
43090     +        names NAME;
43091     +        prefix REP_;
43092     +     run;
43093     +     proc sort data=&newname;
43094     +        by NAME;
43095     +     run;
43096     +
43097     +     /* Merge the new names with the limits data set */
43098     +     %if %sysfunc(exist(&limitDs)) %then %do;
43099     +         data &limitDs;
43100     +            merge &newname &limitDs(in=a);
43101     +            by NAME;
43102     +            if a then output;
43103     +         run;
43104     +
43105     +         %let lib    = %scan(&limitDs, 1, .);
43106     +         %let member = %scan(&limitDs, 2, .);
43107     +          proc datasets lib=&lib nolist;
43108     +             modify &member;
43109     +             label NAME    =     "%sysfunc(sasmsg(sashelp.dmine, rpt_variable_vlabel, NOQUOTE))"
43110     +              NEWNAME =     "%sysfunc(sasmsg(sashelp.dmine, rpt_replacevar_vlabel, NOQUOTE))"
43111     +              CALCMETHOD =  "%sysfunc(sasmsg(sashelp.dmine, rpt_calcmethod_vlabel , NOQUOTE))"
43112     +              REPLACEMETHODUSED =  "%sysfunc(sasmsg(sashelp.dmine, rpt_replacemethodused_vlabel, NOQUOTE))"
43113     +              LOWERLIMIT        =  "%sysfunc(sasmsg(sashelp.dmine, meta_lowerLimit_vlabel, NOQUOTE))"
43114     +              REPLACEMINUSED    =  "%sysfunc(sasmsg(sashelp.dmine, rpt_replacemin_vlabel, NOQUOTE))"
43115     +              UPPERLIMIT        =  "%sysfunc(sasmsg(sashelp.dmine, meta_upperLimit_vlabel, NOQUOTE))"
43116     +              REPLACEDMAXUSED   =  "%sysfunc(sasmsg(sashelp.dmine, rpt_replacemax_vlabel, NOQUOTE))"
43117     +              REPLACEMETHOD     =  "%sysfunc(sasmsg(sashelp.dmine, rpt_replacemethod_vlabel, NOQUOTE))"
43118     +              REPLACEMIN =  "%sysfunc(sasmsg(sashelp.dmine, rpt_userreplacemin_vlabel, NOQUOTE))"
43119     +              REPLACEMAX =  "%sysfunc(sasmsg(sashelp.dmine, rpt_userreplacemax_vlabel, NOQUOTE))"
43120     +              ROLE       =  "%sysfunc(sasmsg(sashelp.dmine, meta_role_vlabel, NOQUOTE))"
43121     +              LEVEL      =  "%sysfunc(sasmsg(sashelp.dmine, meta_level_vlabel, NOQUOTE))"
43122     +              LABEL      =  "%sysfunc(sasmsg(sashelp.dmine, meta_label_vlabel, NOQUOTE))";
43123     +         run;
43124     +         quit;
43125     +     %end;
43126     +
43127     +     /* Merge the new names with the Class Value data set */
43128     +     %if %sysfunc(exist(&classValue)) %then %do;
43129     +         data length;
43130     +            retain newlen 0;
43131     +            set &classValue;
43132     +            by NAME;
43133     +            if type eq 'C' then do;
43134     +               if first.name then do;
43135     +                  if REPLACE_VALUE ^in('_DEFAULT_', '_MODE_', '_MISSING_') then
43136     +                     newlen = max(length, length(strip(replace_value)));
43137     +                  else
43138     +                     newlen = length;
43139     +               end;
43140     +               else do;
43141     +                  if REPLACE_VALUE ^in('_DEFAULT_', '_MODE_', '_MISSING_') then
43142     +                     newlen = max(newlen, length(strip(replace_value)));
43143     +               end;
43144     +            end;
43145     +            else newlen = length;
43146     +            len=length;
43147     +            if last.name then output;
43148     +            keep name len newlen role format type label mlevel;
43149     +         run;
43150     +         data &className;
43151     +            length rformat formatroot $32;
43152     +            merge &newname(in=a) length(in=b);
43153     +            by NAME;
43154     +            length=len;
43155     +            if newlen > len then do;
43156     +               if type eq 'C' and format ne '' then do;
43157     +                  rformat = strip(reverse(format));
43158     +                  do while(indexc(rformat, '.0123456789')=1);
43159     +                     rformat = substr(rformat, 2);
43160     +                  end;
43161     +                  formatroot= upcase(reverse(rformat));
43162     +                  if strip(formatRoot) in('$','$F','$UPCASE','$CHAR') then do;
43163     +                     format = strip(formatroot)!!strip(put(newlen, best.))!!'.';
43164     +                  end;
43165     +               end;
43166     +               length = newlen;
43167     +            end;
43168     +            if a and b then output;
43169     +            KEEP name newname role format mlevel type label length;
43170     +         run;
43171     +     %end;
43172     +
43173     +     proc datasets lib=work nolist;
43174     +        delete length &varname &newname;
43175     +     run;
43176     +     quit;
43177     +
43178     +     %doendmn:
43179     +
43180     +%mend makeNewNames;
43181     +
43182     +%macro makeVarDeltaCode(LimitDs=);
43183     +    %if ^%sysfunc(exist(&LimitDs)) %then %goto doendd;
43184     +
43185     +    filename _F1 "&EM_FILE_CDELTA_TRAIN";
43186     +     data _null_;
43187     +        set &LimitDs end=eof;
43188     +        length string $400;
43189     +        file _F1;
43190     +        %if &EM_PROPERTY_HIDEVARIABLE eq Y %then %do;
43191     +            string = 'if NAME="'!!strip(NAME)!!'" then delete;';  put string;
43192     +        %end;
43193     +        %else %do;
43194     +            string = 'if NAME="'!!strip(NAME)!!'" then do;';        put string;
43195     +            string = '   ROLE="REJECTED";';                         put string;
43196     +            string = '   COMMENT= "Replaced by '!!"&EM_NODEID"!!'";'; put string;
43197     +            string = 'end;';                                        put string;
43198     +        %end;
43199     +        put 'else';
43200     +        string = '   if NAME="'!!strip(NEWNAME)!!'" then do;'; put string;
43201     +        string = '      ROLE="'!!strip(ROLE)!!'";';            put string;
43202     +        string = '      LEVEL="'!!strip(LEVEL)!!'";';          put string;
43203     +        put      'end;';
43204     +        if ^eof then
43205     +           put 'else';
43206     +   run;
43207     +   filename _F1;
43208     +
43209     +    %doendd:
43210     +%mend makeVarDeltaCode;
43211     +
43212     +%macro makeVarScoreCode(LimitDs=, File=);
43213     +    %if ^%sysfunc(exist(&LimitDs)) or "&File" eq "" %then %goto doendm;
43214     +
43215     +     filename sFile "&file";
43216     +     data &LimitDs;
43217     +        set &LimitDs end=eof;
43218     +        length REPLACEMETHODUSED $8 string $400;
43219     +        file sFile;
43220     +        put'* ;';
43221     +        put'* Variable: ' name ';';
43222     +        put '* ;';
43223     +        if strip(label) = '' then label = name;
43224     +        string= 'Label '!!strip(newname)!!"='Replacement: "!!strip(tranwrd(label, "'","''"))!!"';";
43225     +        put string;
43226     +        put newname '=' name ';';
43227     +        REPLACEMETHODUSED = REPLACEMETHOD;
43228     +        if REPLACEMETHOD = 'DEFAULT' then
43229     +            %if "&EM_PROPERTY_REPLACEMETHOD" = "COMPUTED" %then %do;
43230     +                REPLACEMETHODUSED = 'COMPUTED';
43231     +            %end;
43232     +            %else
43233     +            %if "&EM_PROPERTY_REPLACEMETHOD" = "MISSING" %then %do;
43234     +                REPLACEMETHODUSED = 'MISSING';
43235     +            %end;
43236     +            %else %do;
43237     +                REPLACEMETHODUSED = 'MANUAL';
43238     +            %end;
43239     +
43240     +        put 'if ' name ' eq . then ' newname  '= . ;';
43241     +        if LowerLimit ne . then do;
43242     +           select(REPLACEMETHODUSED);
43243     +              when('COMPUTED') REPLACEMINUSED = lowerLimit;
43244     +              when('MISSING')  REPLACEMINUSED = .;
43245     +              when('MANUAL')   REPLACEMINUSED = replaceMin;
43246     +              otherwise;
43247     +           end;
43248     +           put 'else';
43249     +           put 'if ' name '<' lowerLimit ' then ' newname ' = ' REPLACEMINUSED ';';
43250     +        end;
43251     +        if upperLimit ne . then do;
43252     +           select(REPLACEMETHODUSED);
43253     +              when('COMPUTED') REPLACEMAXUSED = upperLimit;
43254     +              when('MISSING')  REPLACEMAXUSED = .;
43255     +              when('MANUAL')   REPLACEMAXUSED = replaceMax;
43256     +              otherwise;
43257     +           end;
43258     +           put 'else';
43259     +           put 'if ' name '>' upperLimit  ' then ' newname ' = ' REPLACEMAXUSED ';';
43260     +        end;
43261     +        drop string;
43262     +    run;
43263     +    filename sfile;
43264     +    %doendm:
43265     +%mend makeVarScoreCode;
43266     +
43267     +
43268     +%macro makeUnknownOptCode(Folder=, Data=);
43269     +    %if ^%sysfunc(exist(&Data)) %then %goto doendu;
43270     +
43271     +    %let dsid = %sysfunc(open(&data));
43272     +    %let nameNum    = %sysfunc(varnum(&dsid, Name));
43273     +    %let newnameNum = %sysfunc(varnum(&dsid, NewName));
43274     +
43275     +    %let oldname=;
43276     +    %do %while(^%sysfunc(fetch(&dsid)));
43277     +        %let name    = %sysfunc(getvarc(&dsid, &nameNum));
43278     +        %let newName = %sysfunc(getvarc(&dsid, &newnameNum));
43279     +
43280     +        %if &name ne &oldname %then %do;
43281     +            filename _F1 "&Folder&em_dsep.&newname..sas" MOD;
43282     +            data _null_;
43283     +               set &Data end=eof;
43284     +               where NAME ="&name";
43285     +               length string $400;
43286     +               length newlevel replaceLevel $400;
43287     +               retain string missingFlag;
43288     +               file _F1;
43289     +               if _N_=1 then do;
43290     +                  put '*;';
43291     +                  if format ne '' then do;
43292     +                     string = '_UFORMAT200 = '!!'strip(put('!!strip(NAME)!!','!!strip(format)!!'));';
43293     +                     put string;
43294     +                     put 'if ^(_UFORMAT200 in(';
43295     +                  end;
43296     +                  else do;
43297     +                     if type eq 'C' then do;
43298     +                        string = '_UFORMAT200 = '!!'strip('!!strip(NAME)!!');';
43299     +                        put string;
43300     +                        put 'if ^(_UFORMAT200 in(';
43301     +                     end;
43302     +                     else
43303     +                        put 'if (';
43304     +                  end;
43305     +                  string='';
43306     +                  missingFlag = 0;
43307     +               end;
43308     +
43309     +               if ^eof and LEVEL ne '_UNKNOWN_' then do;
43310     +                  if format ne '' or type eq 'C' then do;
43311     +                     newlevel = tranwrd(strip(LEVEL),'"','""');
43312     +                     if strip(newLevel) = '' then missingFlag = 1;
43313     +                     if length(strip(newlevel))+length(strip(string))+4<80 then do;
43314     +                        if string='' then
43315     +                           string = strip(string)!!' "'!!strip(newlevel)!!'" ';
43316     +                        else
43317     +                           string = strip(string)!!', "'!!strip(newlevel)!!'" ';
43318     +                     end;
43319     +                     else do;
43320     +                        put string;
43321     +                        string =', "'!!tranwrd(strip(LEVEL),'"','""')!!'"';
43322     +                     end;
43323     +                  end;
43324     +                  else do;
43325     +                     string = strip(name)!!' ne '!!strip(level)!!' and ';
43326     +                     put string;
43327     +                  end;
43328     +                  newlevel = ' ';
43329     +               end;
43330     +               else do;
43331     +                  if format ne '' or type eq 'C' then do;
43332     +                     put string;
43333     +                     if ^missingFlag then
43334     +                        string = ', "" )) then ';
43335     +                     else
43336     +                        string = ')) then ';
43337     +                  end;
43338     +                  else
43339     +                     string = strip(name)!!' ne . ) then ';
43340     +                  put string;
43341     +
43342     +                 select(REPLACE_VALUE);
43343     +                 when('_MODE_') do;
43344     +                    if type eq 'C' then
43345     +                       replaceLevel = NORMMODE;
43346     +                    else
43347     +                       replaceLevel =strip(put(MODEN,BEST.));
43348     +                 end;
43349     +                 when('_MISSING_') do;
43350     +                    if type eq 'C' then replaceLevel = '';
43351     +                    else replaceLevel = '.';
43352     +                 end;
43353     +                 when('_DEFAULT_') do;
43354     +                    %if &EM_PROPERTY_UNKNOWNLEVEL = MODE %then %do;
43355     +                        if type eq 'C' then
43356     +                           replaceLevel = NORMMODE;
43357     +                        else
43358     +                           replaceLevel = strip(put(MODEN,BEST.));
43359     +                    %end;
43360     +                    %else %do;
43361     +                        if type eq 'C' then replaceLevel = '';
43362     +                         else replaceLevel = '.';
43363     +                    %end;
43364     +                  end;
43365     +                  when('') do;
43366     +                  end;
43367     +                  otherwise do;
43368     +                     if type eq 'C' then replaceLevel= replace_Value;
43369     +                     else replaceLevel = replace_Value;
43370     +                  end;
43371     +               end;
43372     +               if type eq 'C' then do;
43373     +                  string = strip(newname)!!'= "'!!tranwrd(strip(replaceLevel),'"','""')!!'";';
43374     +               end;
43375     +               else do;
43376     +                  string = strip(newname)!!'= '!!strip(replaceLevel)!!';';
43377     +               end;
43378     +               put string;
43379     +            end;
43380     +
43381     +           run;
43382     +           filename _F1;
43383     +           proc datasets lib=work nolist;
43384     +              delete _temp;
43385     +           run;
43386     +           quit;
43387     +
43388     +           %let oldname = &name;
43389     +        %end;
43390     +    %end;
43391     +    %let dsid = %sysfunc(close(&dsid));
43392     +
43393     +    %doendu:
43394     +%mend makeUnknownOptCode;
43395     +
43396     +%macro makeUnknownCode(ScoreFile=, Data=);
43397     +   %if ^%sysfunc(exist(&Data)) %then %goto doendm;
43398     +
43399     +   filename _F1 "&ScoreFile" MOD;
43400     +   data _null_;
43401     +      set &Data;
43402     +      length string $400;
43403     +      length newlevel replaceLevel $200;
43404     +      retain string missingFlag;
43405     +      file _F1;
43406     +      by NAME;
43407     +
43408     +      if _N_=1 then do;
43409     +         put '* ;';
43410     +         put '* Replace Unknown Class Levels ;';
43411     +         put '* ;';
43412     +         put 'length _UFORMAT200 $200;';
43413     +         put 'drop   _UFORMAT200;';
43414     +         put '_UFORMAT200 = " ";';
43415     +      end;
43416     +
43417     +      if first.name then do;
43418     +         missingFlag = 0;
43419     +         put '*;';
43420     +
43421     +         if format ne '' then do;
43422     +            call symput('UFormatFlag', '1');
43423     +            string = '_UFORMAT200 = '!!'strip(put('!!strip(NAME)!!','!!strip(format)!!'));';
43424     +            put string;
43425     +            put 'if ^(_UFORMAT200 in(';
43426     +         end;
43427     +         else do;
43428     +            if type eq 'C' then do;
43429     +               call symput('UFormatFlag', '1');
43430     +               string = '_UFORMAT200 = '!!'strip('!!strip(NAME)!!');';
43431     +               put string;
43432     +               put 'if ^(_UFORMAT200 in(';
43433     +            end;
43434     +            else
43435     +               put 'if (';
43436     +         end;
43437     +         string='';
43438     +      end;
43439     +
43440     +      if ^last.name and LEVEL ne '_UNKNOWN_' then do;
43441     +        if format ne '' or type eq 'C' then do;
43442     +           newlevel = tranwrd(strip(LEVEL),'"','""');
43443     +           if strip(newLevel) = '' then missingFlag = 1;
43444     +           if length(strip(newlevel))+length(strip(string))+4<80 then do;
43445     +              if string='' then
43446     +                 string = strip(string)!!' "'!!strip(newlevel)!!'" ';
43447     +              else
43448     +                 string = strip(string)!!', "'!!strip(newlevel)!!'" ';
43449     +           end;
43450     +           else do;
43451     +              put string;
43452     +              string =', "'!!tranwrd(strip(LEVEL),'"','""')!!'"';
43453     +           end;
43454     +        end;
43455     +        else do;
43456     +           string = strip(name)!!' ne '!!strip(level)!!' and ';
43457     +           put string;
43458     +        end;
43459     +        newlevel = ' ';
43460     +     end;
43461     +     else do;
43462     +        if format ne '' or type eq 'C' then do;
43463     +           put string;
43464     +           if ^missingFlag then
43465     +              string = ', "" )) then ';
43466     +           else
43467     +              string = ')) then ';
43468     +        end;
43469     +        else
43470     +           string = strip(name)!!' ne . ) then ';
43471     +        put string;
43472     +
43473     +        select(REPLACE_VALUE);
43474     +           when('_MODE_') do;
43475     +              if type eq 'C' then
43476     +                 replaceLevel = NORMMODE;
43477     +              else
43478     +                 replaceLevel =strip(put(MODEN,BEST.));
43479     +           end;
43480     +           when('_MISSING_') do;
43481     +              if type eq 'C' then replaceLevel = '';
43482     +              else replaceLevel = '.';
43483     +           end;
43484     +           when('_DEFAULT_') do;
43485     +              %if &EM_PROPERTY_UNKNOWNLEVEL = MODE %then %do;
43486     +                  if type eq 'C' then
43487     +                     replaceLevel = NORMMODE;
43488     +                  else
43489     +                     replaceLevel = strip(put(MODEN,BEST.));
43490     +              %end;
43491     +              %else %do;
43492     +                  if type eq 'C' then replaceLevel = '';
43493     +                  else replaceLevel = '.';
43494     +              %end;
43495     +           end;
43496     +           when('') do;
43497     +           end;
43498     +           otherwise do;
43499     +               if type eq 'C' then replaceLevel= replace_Value;
43500     +               else replaceLevel = replace_Value;
43501     +           end;
43502     +        end;
43503     +        if type eq 'C' then do;
43504     +           string = strip(newname)!!'= "'!!tranwrd(strip(replaceLevel),'"','""')!!'";';
43505     +        end;
43506     +        else do;
43507     +           string = strip(newname)!!'= '!!strip(replaceLevel)!!';';
43508     +        end;
43509     +        put string;
43510     +     end;
43511     +
43512     +     run;
43513     +     filename _F1;
43514     +    %doendm:
43515     +%mend makeUnknownCode;
43516     +
43517     +%macro makeReplaceCode(ScoreFile=, Data=);
43518     +   filename _F1 "&ScoreFile"  MOD;
43519     +   data _null_;
43520     +      length string $400;
43521     +      set &data end=eof;
43522     +      file _F1;
43523     +      by NAME;
43524     +      if _N_=1 then do;
43525     +         put '   ';
43526     +         put '* ;';
43527     +         put '* Replace Specific Class Levels ;';
43528     +         put '* ;';
43529     +         put 'length _UFormat200 $200;';
43530     +         put 'drop   _UFORMAT200;';
43531     +         put '_UFORMAT200 = " ";';
43532     +      end;
43533     +      if first.name then do;
43534     +         put '* ;';
43535     +         string = '* Variable: '!!strip(NAME)!!';';
43536     +         put string;
43537     +         put '* ;';
43538     +         if format ne '' then do;
43539     +            call symput('UFormatFlag', '1');
43540     +            string = "_UFORMAT200 = strip("; put string;
43541     +            string ='put('!!strip(NAME)!!','!!strip(format)!!'));';
43542     +            put string;
43543     +         end;
43544     +         else
43545     +           if type eq 'C' then do;
43546     +              call symput('UFormatFlag', '1');
43547     +              string = "_UFORMAT200 = strip("!!strip(NAME)!!');';
43548     +              put string;
43549     +           end;
43550     +      end;
43551     +      if ^first.name then
43552     +         put 'else';
43553     +      if format ne '' then do;
43554     +         string = tranwrd(strip(LEVEL),'"','""');
43555     +         string =' if _UFORMAT200 =  "'!!strip(string)!!'" then ';
43556     +         put string;
43557     +      end;
43558     +      else do;
43559     +         if type eq 'N' then do;
43560     +            string = 'if '!!strip(name)!!' = '!!strip(put(nraw, BEST.))!!' then ';
43561     +            put string;
43562     +         end;
43563     +         else do;
43564     +            string = tranwrd(strip(craw),'"','""');
43565     +            string = ' if _UFORMAT200 =  "'!!strip(string)!!'" then ';
43566     +            put string;
43567     +         end;
43568     +      end;
43569     +      string = strip(newname)!!'=';
43570     +      if type eq 'C' then do;
43571     +         if upcase(replace_value) eq '_MISSING_' or
43572     +            (upcase(replace_value) eq '_DEFAULT_' and (upcase(UNKWOWNDEFAULT)= 'MISSING')) then replace_Value ='';
43573     +         else
43574     +           if upcase(replace_value) eq '_MODE_' or
43575     +            (upcase(replace_value) eq '_DEFAULT_' and (upcase(UNKWOWNDEFAULT)= 'MODE'))
43576     +            then replace_Value =modec;
43577     +           string = strip(string)!!'"'!!tranwrd(strip(replace_Value),'"','""')!!'";';
43578     +      end;
43579     +      else do;
43580     +         if upcase(replace_value) eq '_MISSING_' or
43581     +            (upcase(replace_value) eq '_DEFAULT_' and (upcase(UNKWOWNDEFAULT) = 'MISSING')) then replace_Value ='.';
43582     +         else
43583     +           if upcase(replace_value) eq '_MODE_' or
43584     +            (upcase(replace_value) eq '_DEFAULT_' and (upcase(UNKWOWNDEFAULT) = 'MODE')) then
43585     +                  replace_Value =strip(put(moden, BEST.));
43586     +
43587     +         string = strip(string)!!''!!strip(replace_value)!!';';
43588     +      end;
43589     +      put string;
43590     +    run;
43591     +    filename _F1;
43592     +
43593     +%mend makeReplaceCode;
43594     +
43595     +%macro makeReplaceOptCode(Folder=, Data=);
43596     +    %if ^%sysfunc(exist(&Data)) %then %goto doendr;
43597     +
43598     +    %let dsid = %sysfunc(open(&data));
43599     +    %let nameNum    = %sysfunc(varnum(&dsid, Name));
43600     +    %let newnameNum = %sysfunc(varnum(&dsid, NewName));
43601     +
43602     +    %let oldname=;
43603     +    %do %while(^%sysfunc(fetch(&dsid)));
43604     +        %let name    = %sysfunc(getvarc(&dsid, &nameNum));
43605     +        %let newName = %sysfunc(getvarc(&dsid, &newnameNum));
43606     +
43607     +        %if &name ne &oldname %then %do;
43608     +            filename _F1 "&Folder&em_dsep.&newname..sas" MOD;
43609     +            data _null_;
43610     +               length string $400;
43611     +               set &Data end=eof;
43612     +               by NAME;
43613     +               where NAME ="&name";
43614     +               file _F1;
43615     +               if _N_=1 then do;
43616     +                  put '* ;';
43617     +                  string = '* Variable: '!!strip(NAME)!!';';
43618     +                  put string;
43619     +                  put '* ;';
43620     +                  if format ne '' then do;
43621     +                     string = "_UFORMAT200 = strip("; put string;
43622     +                     string ='put('!!strip(NAME)!!','!!strip(format)!!'));';
43623     +                     put string;
43624     +                  end;
43625     +                  else
43626     +                     if type eq 'C' then do;
43627     +                        call symput('UFormatFlag', '1');
43628     +                        string = "_UFORMAT200 = strip("!!strip(NAME)!!');';
43629     +                        put string;
43630     +                    end;
43631     +               end;
43632     +               if ^first.name then
43633     +                  put 'else';
43634     +               if format ne '' then do;
43635     +                  string = tranwrd(strip(LEVEL),'"','""');
43636     +                  string =' if _UFORMAT200 =  "'!!strip(string)!!'" then ';
43637     +                  put string;
43638     +               end;
43639     +               else do;
43640     +                  if type eq 'N' then do;
43641     +                     string = 'if '!!strip(name)!!' = '!!strip(put(nraw, BEST.))!!' then ';
43642     +                     put string;
43643     +                  end;
43644     +                  else do;
43645     +                     string = tranwrd(strip(craw),'"','""');
43646     +                     string = ' if _UFORMAT200 =  "'!!strip(string)!!'" then ';
43647     +                     put string;
43648     +                  end;
43649     +               end;
43650     +               string = strip(newname)!!'=';
43651     +               if type eq 'C' then do;
43652     +                  if upcase(replace_value) eq '_MISSING_' or
43653     +                     (upcase(replace_value) eq '_DEFAULT_' and (upcase(UNKWOWNDEFAULT)= 'MISSING')) then replace_Value ='';
43654     +                  else
43655     +                     if upcase(replace_value) eq '_MODE_' or
43656     +                       (upcase(replace_value) eq '_DEFAULT_' and (upcase(UNKWOWNDEFAULT)= 'MODE'))
43657     +                       then replace_Value =modec;
43658     +                          string = strip(string)!!'"'!!tranwrd(strip(replace_Value),'"','""')!!'";';
43659     +               end;
43660     +              else do;
43661     +                 if upcase(replace_value) eq '_MISSING_' or
43662     +                    (upcase(replace_value) eq '_DEFAULT_' and (upcase(UNKWOWNDEFAULT) = 'MISSING')) then replace_Value ='.';
43663     +                 else
43664     +                    if upcase(replace_value) eq '_MODE_' or
43665     +                       (upcase(replace_value) eq '_DEFAULT_' and (upcase(UNKWOWNDEFAULT) = 'MODE')) then
43666     +                        replace_Value =strip(put(moden, BEST.));
43667     +
43668     +                 string = strip(string)!!''!!strip(replace_value)!!';';
43669     +              end;
43670     +             put string;
43671     +          run;
43672     +          filename _F1;
43673     +
43674     +           %let oldname = &name;
43675     +        %end;
43676     +    %end;
43677     +    %let dsid = %sysfunc(close(&dsid));
43678     +
43679     +    %doendr:
43680     +
43681     +%mend makeReplaceOptCode;
43682     +
43683     +
43684     +%macro makeNewVarCode(ScoreFile=, Data=);
43685     +   filename _F1 "&ScoreFile"  MOD;
43686     +   data _null_;
43687     +     length string $400;
43688     +      set &data end=eof;
43689     +      file _F1;
43690     +      if _N_=1 then do;
43691     +         put '   ';
43692     +         put '* ;';
43693     +         put '* Defining New Variables;';
43694     +         put '* ;';
43695     +      end;
43696     +      if type eq 'C' then do;
43697     +         string = 'Length '!!strip(newname)!!' $'!!strip(put(length,BEST12.))!!';';
43698     +         put string;
43699     +      end;
43700     +      if strip(label) = '' then label = name;
43701     +      string= 'Label '!!strip(newname)!!"='Replacement: "!!strip(tranwrd(label, "'","''"))!!"';";
43702     +      put string;
43703     +
43704     +      if format ne '' then do;
43705     +         string ='format '!!strip(newname)!!' '!!strip(format)!!';';
43706     +         put string;
43707     +      end;
43708     +      string = strip(newname)!!'= '!!strip(NAME)!!';';
43709     +      put string;
43710     +   run;
43711     +%mend makeNewVarCode;
43712     +
43713     +%macro makeNewVarOptCode(Folder=, Data=);
43714     +    %if ^%sysfunc(exist(&data)) or "&Folder" eq "" %then %goto doendo;
43715     +    data _temp_;set &data;run;
43716     +    %let dsid = %sysfunc(open(_temp_));
43717     +    %let nobs  = %sysfunc(attrn(&dsid, NLOBS));
43718     +    %do %while(^%sysfunc(fetch(&dsid)));
43719     +        %let newNum     = %sysfunc(varnum(&dsid, NewName));
43720     +        %let newname = %sysfunc(getvarc(&dsid, &newNum));
43721     +
43722     +        filename _F1 "&Folder.&em_dsep.&newname..sas";
43723     +        data _null_;
43724     +           length string $400;
43725     +           set &data;
43726     +           where NEWNAME="&newname";
43727     +           file _F1;
43728     +           put '   ';
43729     +           put '* ;';
43730     +           put "* Defining: &newname;";
43731     +           put '* ;';
43732     +           if type eq 'C' then  do;
43733     +              string = 'Length '!!strip(newname)!!'$'!!strip(put(length, best.))!!';';
43734     +              put string;
43735     +           end;
43736     +           if strip(label) = '' then label = name;
43737     +           string= 'Label '!!strip(newname)!!"='Replacement: "!!strip(tranwrd(label, "'","''"))!!"';";
43738     +           put string;
43739     +           if format ne '' then do;
43740     +              string= 'format '!!strip(newname)!!' '!!strip(format)!!';';
43741     +              put string;
43742     +           end;
43743     +           string = strip(newname)!!'='!!strip(name)!!';';
43744     +           put string;
43745     +        run;
43746     +    %end;
43747     +    %let dsid = %sysfunc(close(&dsid));
43748     +   %doendo:
43749     +%mend makeNewVarOptCode;
43750     +
43751     +%macro makeClassScoreCode(LevelData=, nameData=_newNames);
43752     +   %let UFormatFlag = 0;
43753     +
43754     +   %em_register(key=REPLACECODE, type=FOLDER);
43755     +
43756     +   /* Generating New Variable Score Code */
43757     +   %makeNewVarCode(ScoreFile=&EM_FILE_EMFLOWSCORECODE,  Data=&nameData);
43758     +
43759     +   data _tempNewVars;
43760     +      set &nameData;
43761     +      where ROLE ne 'TARGET';
43762     +   run;
43763     +   %makeNewVarCode(ScoreFile=&EM_FILE_EMPUBLISHSCORECODE, Data=_tempNewVars);
43764     +   %makeNewVarOptCode(Folder=&em_user_replacecode, Data=_tempNewVars);
43765     +
43766     +   proc datasets lib=WORK nolist;
43767     +      delete _tempNewVars;
43768     +   run;
43769     +   quit;
43770     +
43771     +   /* Generating Publish Score Code */
43772     +   data _temp;
43773     +      set &LevelData;
43774     +      where ROLE ne 'TARGET' and LEVEL='_UNKNOWN_' and (REPLACE_VALUE ^in('', '_DEFAULT_') or
43775     +                             (REPLACE_VALUE='_DEFAULT_' and UNKWOWNDEFAULT ne 'NONE'));
43776     +      keep NAME;
43777     +   run;
43778     +
43779     +   data _temp;
43780     +      merge _temp(in=_a) &Leveldata &nameData;
43781     +      by NAME;
43782     +      if _a then output;
43783     +   run;
43784     +
43785     +   %makeUnknownCode(ScoreFile=&EM_FILE_EMPUBLISHSCORECODE, Data=_temp);
43786     +   %makeUnknownOptCode(Folder=&em_user_replacecode,        Data=_temp);
43787     +   proc datasets lib=work nolist;
43788     +      delete _temp;
43789     +   run;
43790     +   quit;
43791     +
43792     +   data _temp;
43793     +      merge &LevelData(in=_a where=( ROLE ne 'TARGET' and LEVEL ne '_UNKNOWN_' and
43794     +        (REPLACE_VALUE ^in('', '_DEFAULT_') or (REPLACE_VALUE='_DEFAULT_' and UNKWOWNDEFAULT ne 'NONE')) ))  &nameData;
43795     +      by NAME;
43796     +      if _a then output;
43797     +   run;
43798     +
43799     +   %makeReplaceCode(ScoreFile=&EM_FILE_EMPUBLISHSCORECODE, Data=_temp);
43800     +   %makeReplaceOptCode(Folder=&em_user_replacecode,        Data=_temp);
43801     +
43802     +   /* Generating Flow Score Code */
43803     +   data _temp;
43804     +      set &LevelData;
43805     +      where LEVEL='_UNKNOWN_' and (REPLACE_VALUE ^in('', '_DEFAULT_') or
43806     +                             (REPLACE_VALUE='_DEFAULT_' and UNKWOWNDEFAULT ne 'NONE'));
43807     +      keep NAME;
43808     +   run;
43809     +
43810     +   data _temp;
43811     +      merge _temp(in=_a) &Leveldata &nameData;
43812     +      by NAME;
43813     +      if _a then output;
43814     +   run;
43815     +   %makeUnknownCode(ScoreFile=&EM_FILE_EMFLOWSCORECODE, Data=_temp);
43816     +
43817     +   data _temp;
43818     +      merge &LevelData(in=_a where=(LEVEL ne '_UNKNOWN_' and (REPLACE_VALUE ^in('', '_DEFAULT_') or
43819     +                             (REPLACE_VALUE='_DEFAULT_' and UNKWOWNDEFAULT ne 'NONE')) )) &nameData;
43820     +      by NAME;
43821     +      if _a then output;
43822     +   run;
43823     +
43824     +   %makeReplaceCode(ScoreFile=&EM_FILE_EMFLOWSCORECODE, Data=_temp);
43825     +
43826     +   %if "&UFormatFlag" = "1" %then %do;
43827     +       filename _F1 "&em_user_replacecode&em_dsep._ALL_.sas" MOD;
43828     +       data _null_;
43829     +          file _F1;
43830     +          put 'length _UFormat200 $200;';
43831     +          put 'drop   _UFORMAT200;';
43832     +          put '_UFORMAT200 = " ";';
43833     +       run;
43834     +       filename _F1;
43835     +   %end;
43836     +
43837     +%mend makeClassScoreCode;
43838     +
43839     +%macro makeClassDeltaCode(nameData=_newNames);
43840     +   %if ^%sysfunc(exist(&nameData)) %then %goto doendm;
43841     +
43842     +   filename _F1 "&EM_FILE_CDELTA_TRAIN" MOD;
43843     +   data _null_;
43844     +        set &nameData end=eof;
43845     +        length string $400;
43846     +        file _F1;
43847     +        %if &EM_PROPERTY_HIDEVARIABLE eq Y %then %do;
43848     +            string = 'if NAME="'!!strip(NAME)!!'" then delete;';  put string;
43849     +        %end;
43850     +        %else %do;
43851     +            string = 'if NAME="'!!strip(NAME)!!'" then ROLE="REJECTED";'; put string;
43852     +        %end;
43853     +        put 'else';
43854     +        string = '   if NAME="'!!strip(NEWNAME)!!'" then do;'; put string;
43855     +        string = '      ROLE="'!!strip(ROLE)!!'";';            put string;
43856     +        string = '      LEVEL="'!!strip(MLEVEL)!!'";';         put string;
43857     +        put      'end;';
43858     +        if ^eof then
43859     +           put 'else';
43860     +   run;
43861     +   %doendm:
43862     +   filename _F1;
43863     +%mend makeClassDeltaCode;
43864     +
43865     +%macro makeValueReport(Data=, outData=);
43866     +   data &outData;
43867     +      set &data;
43868     +      where REPLACE_VALUE ^in('', '_DEFAULT_') or (REPLACE_VALUE eq '_DEFAULT_' and UNKWOWNDEFAULT ne 'NONE');
43869     +      if LEVEL = '_UNKNOWN_' then do;
43870     +         LEVEL='Unknown';
43871     +         %if &EM_PROPERTY_UNKNOWNLEVEL = MODE %then %do;
43872     +         if REPLACE_VALUE in('_MODE_', '_DEFAULT_') then REPLACE_VALUE = strip(NORMMODE);
43873     +         else
43874     +            if REPLACE_VALUE ='_MISSING_' then do;
43875     +               if type eq 'N' then REPLACE_VALUE='.';
43876     +               else REPLACE_VALUE='_blank_';
43877     +            end;
43878     +         %end;
43879     +         %else  %do;
43880     +         if REPLACE_VALUE = '_MODE_' then REPLACE_VALUE = strip(NORMMODE);
43881     +         else
43882     +            if REPLACE_VALUE in('_MISSING_', '_DEFAULT_') then do;
43883     +               if type eq 'N' then REPLACE_VALUE='.';
43884     +               else REPLACE_VALUE='_blank_';
43885     +            end;
43886     +         %end;
43887     +      end;
43888     +      else do;
43889     +         if REPLACE_VALUE ='_MISSING_' then do;
43890     +            if type eq 'N' then REPLACE_VALUE='.';
43891     +            else REPLACE_VALUE='_blank_';
43892     +         end;
43893     +         else
43894     +            if REPLACE_VALUE = '_MODE_' then REPLACE_VALUE = strip(NORMMODE);
43895     +      end;
43896     +      keep NAME LEVEL CRAW NRAW REPLACE_VALUE TYPE LABEL ;
43897     +   run;
43898     +%mend makeValueReport;
43899     +
43900     +%macro makeVarOptCode(LimitDs=, Folder=);
43901     +    %if ^%sysfunc(exist(&LimitDs)) or "&Folder" eq "" %then %goto doendo;
43902     +
43903     +    %let dsid = %sysfunc(open(&limitDs));
43904     +    %do %while(^%sysfunc(fetch(&dsid)));
43905     +        %let newNum     = %sysfunc(varnum(&dsid, NewName));
43906     +        %let newname = %sysfunc(getvarc(&dsid, &newNum));
43907     +
43908     +    filename sfile "&Folder.&em_dsep.&newname..sas";
43909     +    data _null_;
43910     +       length string $400;
43911     +       set &LimitDs;
43912     +       where NEWNAME="&newname";
43913     +       file sfile;
43914     +       put '* ;';
43915     +       string = '*Variable: '!!strip(name)!!';';
43916     +       put string;
43917     +       put '* ;';
43918     +       if label eq '' then
43919     +          string = 'Label '!!strip(newname)!!"= 'Replacement: "!!strip(name)!!"';";
43920     +       else
43921     +          string = 'Label '!!strip(newname)!!"= 'Replacement: "!!strip(tranwrd(label, "'", "''"))!!"';";
43922     +       put string;
43923     +       string = strip(newname)!!'= '!!strip(NAME)!!';';
43924     +       put string;
43925     +       replacemin = .;
43926     +       string = 'if '!!strip(name)!!' eq . then '!!strip(newname)!!' = .;';
43927     +       put string;
43928     +       if LowerLimit ne . then do;
43929     +          if ReplaceMethodUsed="COMPUTED" then replaceMin=LowerLimit;
43930     +          if ReplaceMethodUsed="MANUAL"   then replaceMin = ReplaceMinUsed;
43931     +          put 'else';
43932     +          string = 'if '!!strip(name)!!'<'!!strip(put(lowerlimit,best.))
43933     +                    !!' then '!!strip(newname)!!'='!!strip(put(replaceMin,best.))!!';';
43934     +          put string;
43935     +       end;
43936     +       if UpperLimit ne . then do;
43937     +          if ReplaceMethodUsed="COMPUTED" then replaceMax=UpperLimit;
43938     +          if ReplaceMethodUsed="MANUAL"   then replaceMax = ReplaceMaxUsed;
43939     +          put 'else';
43940     +          string = 'if '!!strip(name)!!'>'!!strip(put(upperlimit,best.))
43941     +                    !!' then '!!strip(newname)!!'='!!strip(put(replaceMax,best.))!!';';
43942     +          put string;
43943     +       end;
43944     +        run;
43945     +        filename sfile;
43946     +    %end;
43947     +    %let dsid = %sysfunc(close(&dsid));
43948     +
43949     +    %doendo:
43950     +%mend makeVarOptCode;
43951     +
43952     +%macro score;
43953     +   %em_register(key=REPLACECODE, type=FOLDER);
43954     +
43955     +   filename x catalog 'sashelp.emutil.em_deldir.source';
43956     +   %inc x;
43957     +   filename x;
43958     +   %delDir(folder=%nrbquote(&em_user_replacecode));
43959     +
43960     +   data _null_; length rc $200;
43961     +      rc = dcreate('REPLACECODE', "&EM_NODEDIR");
43962     +   run;
43963     +
43964     +   filename _F1 "&EM_FILE_EMFLOWSCORECODE";
43965     +   filename _F2 "&EM_FILE_EMPUBLISHSCORECODE";
43966     +   filename _F3 "&EM_FILE_CDELTA_TRAIN";
43967     +   data _null_;
43968     +      rc=fdelete('_F1');
43969     +      rc=fdelete('_F2');
43970     +      rc=fdelete('_F3');
43971     +   run;
43972     +   filename _F1;
43973     +   filename _F2;
43974     +   filename _F3;
43975     +
43976     +   %em_getname(key=OUTCLASS,  type=DATA);
43977     +   %em_getname(key=LIMITS, type=DATA);
43978     +   %em_getname(key=CLASSINFO, type=DATA);
43979     +
43980     +   /* Retrieve Replacement Values for Class Variables */
43981     +   %makeLevelData(outclass=&em_user_outclass, data=CLASSTEMP);
43982     +
43983     +   /* Generate Names for Replaced Variables */
43984     +   %makeNewNames(limitDs =&em_user_limits, classValue=CLASSTEMP, classname=&em_user_classinfo);
43985     +
43986     +   /* Generate score and delta code for Var Variables */
43987     +   %if %sysfunc(exist(&EM_USER_LIMITS)) %then %do;
43988     +       %makeVarScoreCode(LimitDs = &EM_USER_LIMITS, File=&EM_FILE_EMFLOWSCORECODE);
43989     +       %makeVarScoreCode(LimitDs = &EM_USER_LIMITS, File=&EM_FILE_EMPUBLISHSCORECODE);
43990     +       %makeVarOptCode(LimitDs= &EM_USER_LIMITS,    Folder=&em_user_replacecode);
43991     +       %makeVarDeltaCode(LimitDs = &EM_USER_LIMITS);
43992     +
43993     +       proc print data=&EM_USER_LIMITS label noobs;
43994     +          var Name newname lowerLimit REPLACEMINUSED UpperLimit REPLACEMAXUSED;
43995     +          label REPLACEMINUSED  =  "%sysfunc(sasmsg(sashelp.dmine, rpt_replacemin_vlabel, NOQUOTE))"
43996     +                REPLACEMAXUSED  =  "%sysfunc(sasmsg(sashelp.dmine, rpt_replacemax_vlabel, NOQUOTE))";
43997     +          title9  ' ';
43998     +          title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_varlimits_title, NOQUOTE))";
43999     +       run;
44000     +       title10;
44001     +  %end;
44002     +
44003     +   %if %sysfunc(exist(&EM_USER_CLASSINFO)) %then %do;
44004     +       %makeClassScoreCode(LevelData=CLASSTEMP, nameData=&em_user_classinfo);
44005     +       %makeClassDeltaCode(nameData=&em_user_classinfo);
44006     +   %end;
44007     +
44008     +   %em_getname(key=VALUES, type=DATA);
44009     +   %makeValueReport(data=CLASSTEMP, outData=&EM_USER_VALUES);
44010     +   %if %sysfunc(exist(&EM_USER_VALUES)) %then %do;
44011     +       %let nobs = 0;
44012     +       %let dsid = %sysfunc(open(&EM_USER_VALUES));
44013     +       %if &dsid %then %do;
44014     +           %let nobs =  %sysfunc(attrn(&dsid, NOBS));
44015     +           %let dsid = %sysfunc(close(&dsid));
44016     +       %end;
44017     +       %if &nobs %then
44018     +           %EM_REPORT(key=VALUES, viewtype=DATA, block=MODEL, description=ReplaceLevels,autoDisplay=N);
44019     +   %end;
44020     +
44021     +   %if %sysfunc(exist(&EM_USER_VALUES)) %then %do;
44022     +       proc print data=&EM_USER_VALUES label noobs;
44023     +          title9  ' ';
44024     +          title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_classreplacement_title, NOQUOTE))";
44025     +      run;
44026     +      title10;
44027     +  %end;
44028     +
44029     +   proc datasets lib=work nolist;
44030     +      delete CLASSTEMP;
44031     +   run;
44032     +   quit;
44033     +
44034     +   %em_register(key=EMSCOREVAR, type=DATA);
44035     +   %let scorevarDs = %scan(&em_user_emscorevar, 2, .);
44036     +   proc datasets lib=&em_lib nolist;
44037     +      delete &scorevarDs;
44038     +   run;
44039     +   quit;
44040     +
44041     +   %let filrf=mydir;
44042     +   %let rc=%sysfunc(filename(filrf,&em_user_replacecode));
44043     +   %let did=%sysfunc(dopen(&filrf));
44044     +
44045     +   %if &did %then %do;
44046     +       %let memcount=%sysfunc(dnum(&did));
44047     +       %if &memcount > 0 %then %do;
44048     +           data &em_user_emscorevar;
44049     +              length Name $32 formula $70 file $200;
44050     +              keep NAME Formula file;
44051     +
44052     +           %if %sysfunc(fileexist(&em_user_replacecode&em_dsep._ALL_.sas)) %then %do;
44053     +               name=''; file="REPLACECODE&em_dsep._ALL_.sas";
44054     +               output;
44055     +           %end;
44056     +           %do i=1 %to &memcount;
44057     +               %let name =%nrbquote(%sysfunc(dread(&did,&i)));
44058     +               %let newvar = %scan(&name, 1, .);
44059     +               %if "&newvar" ne "_ALL_" %then %do;
44060     +                   name = "&newvar"; file="REPLACECODE&em_dsep&name";
44061     +                   output;
44062     +               %end;
44063     +           %end;
44064     +           run;
44065     +       %end;
44066     +  %end;
44067     +  %if &did %then %let did = %sysfunc(dclose(&did));
44068     +
44069     +
44070     +%mend score;
NOTE: %INCLUDE (level 1) ending.
MPRINT(MAIN):   filename temp;
NOTE: Fileref TEMP has been deassigned.
MPRINT(EM_REGISTER):   data WORK.EM_USER_KEY;
MPRINT(EM_REGISTER):   length KEY $32 TYPE $10 FILE $200 FOLDER $32 EXTENSION $8 AUTODELETE $1 property $1 action $8;
MPRINT(EM_REGISTER):   key = upcase("REPLACECODE");
MPRINT(EM_REGISTER):   type = upcase("FOLDER");
MPRINT(EM_REGISTER):   file = "REPLACECODE";
MPRINT(EM_REGISTER):   folder = "";
MPRINT(EM_REGISTER):   extension = "";
MPRINT(EM_REGISTER):   AUTODELETE = "Y";
MPRINT(EM_REGISTER):   property = "N";
MPRINT(EM_REGISTER):   action = "";
MPRINT(EM_REGISTER):   run;

NOTE: The data set WORK.EM_USER_KEY has 1 observations and 8 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
      

MPRINT(SCORE):  ;
MPRINT(SCORE):   filename x catalog 'sashelp.emutil.em_deldir.source';
NOTE: %INCLUDE (level 1) file X is file SASHELP.EMUTIL.EM_DELDIR.SOURCE.
44071     +%macro delDir(folder=);
44072     +   %let filrf=mydir;
44073     +   %let rc=%sysfunc(filename(filrf,&folder));
44074     +   %let did=%sysfunc(dopen(&filrf));
44075     +
44076     +   %if &did %then %do;
44077     +       %let memcount=%sysfunc(dnum(&did));
44078     +       %if &memcount > 0 %then %do;
44079     +           %do i=1 %to &memcount;
44080     +               %let name =%nrbquote(%sysfunc(dread(&did,&i)));
44081     +               data _null_;
44082     +                  fname="_temp&i";
44083     +                  rc=filename(fname,"&folder&em_dsep.&name");
44084     +                  if rc = 0 and fexist(fname) then
44085     +                     rc=fdelete(fname);
44086     +                  rc=filename(fname);
44087     +               run;
44088     +           %end;
44089     +       %end;
44090     +       %let rc=%sysfunc(dclose(&did));
44091     +   %end;
44092     +   %let rc = %sysfunc(fdelete(&filrf));
44093     +   %let rc=%sysfunc(filename(filrf));
44094     +%mend delDir;
NOTE: %INCLUDE (level 1) ending.
MPRINT(SCORE):   filename x;
NOTE: Fileref X has been deassigned.
MPRINT(DELDIR):   data _null_;
MPRINT(DELDIR):   fname="_temp1";
MPRINT(DELDIR):   rc=filename(fname,"H:\746\Decision Tree test\Workspaces\EMWS1\Repl\REPLACECODE\REP_city_mpg.sas");
MPRINT(DELDIR):   if rc = 0 and fexist(fname) then rc=fdelete(fname);
MPRINT(DELDIR):   rc=filename(fname);
MPRINT(DELDIR):   run;

NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
      

MPRINT(DELDIR):   data _null_;
MPRINT(DELDIR):   fname="_temp2";
MPRINT(DELDIR):   rc=filename(fname,"H:\746\Decision Tree test\Workspaces\EMWS1\Repl\REPLACECODE\REP_compression_ratio.sas");
MPRINT(DELDIR):   if rc = 0 and fexist(fname) then rc=fdelete(fname);
MPRINT(DELDIR):   rc=filename(fname);
MPRINT(DELDIR):   run;

NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
      

MPRINT(DELDIR):   data _null_;
MPRINT(DELDIR):   fname="_temp3";
MPRINT(DELDIR):   rc=filename(fname,"H:\746\Decision Tree test\Workspaces\EMWS1\Repl\REPLACECODE\REP_curb_weight.sas");
MPRINT(DELDIR):   if rc = 0 and fexist(fname) then rc=fdelete(fname);
MPRINT(DELDIR):   rc=filename(fname);
MPRINT(DELDIR):   run;

NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(DELDIR):   data _null_;
MPRINT(DELDIR):   fname="_temp4";
MPRINT(DELDIR):   rc=filename(fname,"H:\746\Decision Tree test\Workspaces\EMWS1\Repl\REPLACECODE\REP_engine_size.sas");
MPRINT(DELDIR):   if rc = 0 and fexist(fname) then rc=fdelete(fname);
MPRINT(DELDIR):   rc=filename(fname);
MPRINT(DELDIR):   run;

NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
      

MPRINT(DELDIR):   data _null_;
MPRINT(DELDIR):   fname="_temp5";
MPRINT(DELDIR):   rc=filename(fname,"H:\746\Decision Tree test\Workspaces\EMWS1\Repl\REPLACECODE\REP_height.sas");
MPRINT(DELDIR):   if rc = 0 and fexist(fname) then rc=fdelete(fname);
MPRINT(DELDIR):   rc=filename(fname);
MPRINT(DELDIR):   run;

NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
      

MPRINT(DELDIR):   data _null_;
MPRINT(DELDIR):   fname="_temp6";
MPRINT(DELDIR):   rc=filename(fname,"H:\746\Decision Tree test\Workspaces\EMWS1\Repl\REPLACECODE\REP_highway_mpg.sas");
MPRINT(DELDIR):   if rc = 0 and fexist(fname) then rc=fdelete(fname);
MPRINT(DELDIR):   rc=filename(fname);
MPRINT(DELDIR):   run;

NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
      

MPRINT(DELDIR):   data _null_;
MPRINT(DELDIR):   fname="_temp7";
MPRINT(DELDIR):   rc=filename(fname,"H:\746\Decision Tree test\Workspaces\EMWS1\Repl\REPLACECODE\REP_IMP_bore.sas");
MPRINT(DELDIR):   if rc = 0 and fexist(fname) then rc=fdelete(fname);
MPRINT(DELDIR):   rc=filename(fname);
MPRINT(DELDIR):   run;

NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

MPRINT(DELDIR):   data _null_;
MPRINT(DELDIR):   fname="_temp8";
MPRINT(DELDIR):   rc=filename(fname,"H:\746\Decision Tree test\Workspaces\EMWS1\Repl\REPLACECODE\REP_IMP_horsepower.sas");
MPRINT(DELDIR):   if rc = 0 and fexist(fname) then rc=fdelete(fname);
MPRINT(DELDIR):   rc=filename(fname);
MPRINT(DELDIR):   run;

NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
      

MPRINT(DELDIR):   data _null_;
MPRINT(DELDIR):   fname="_temp9";
MPRINT(DELDIR):   rc=filename(fname,"H:\746\Decision Tree test\Workspaces\EMWS1\Repl\REPLACECODE\REP_IMP_peak_rpm.sas");
MPRINT(DELDIR):   if rc = 0 and fexist(fname) then rc=fdelete(fname);
MPRINT(DELDIR):   rc=filename(fname);
MPRINT(DELDIR):   run;

NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

MPRINT(DELDIR):   data _null_;
MPRINT(DELDIR):   fname="_temp10";
MPRINT(DELDIR):   rc=filename(fname,"H:\746\Decision Tree test\Workspaces\EMWS1\Repl\REPLACECODE\REP_IMP_price.sas");
MPRINT(DELDIR):   if rc = 0 and fexist(fname) then rc=fdelete(fname);
MPRINT(DELDIR):   rc=filename(fname);
MPRINT(DELDIR):   run;

NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
      

MPRINT(DELDIR):   data _null_;
MPRINT(DELDIR):   fname="_temp11";
MPRINT(DELDIR):   rc=filename(fname,"H:\746\Decision Tree test\Workspaces\EMWS1\Repl\REPLACECODE\REP_IMP_stroke.sas");
MPRINT(DELDIR):   if rc = 0 and fexist(fname) then rc=fdelete(fname);
MPRINT(DELDIR):   rc=filename(fname);
MPRINT(DELDIR):   run;

NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
      

MPRINT(DELDIR):   data _null_;
MPRINT(DELDIR):   fname="_temp12";
MPRINT(DELDIR):   rc=filename(fname,"H:\746\Decision Tree test\Workspaces\EMWS1\Repl\REPLACECODE\REP_length.sas");
MPRINT(DELDIR):   if rc = 0 and fexist(fname) then rc=fdelete(fname);
MPRINT(DELDIR):   rc=filename(fname);
MPRINT(DELDIR):   run;

NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
      

MPRINT(DELDIR):   data _null_;
MPRINT(DELDIR):   fname="_temp13";
MPRINT(DELDIR):   rc=filename(fname,"H:\746\Decision Tree test\Workspaces\EMWS1\Repl\REPLACECODE\REP_wheel_base.sas");
MPRINT(DELDIR):   if rc = 0 and fexist(fname) then rc=fdelete(fname);
MPRINT(DELDIR):   rc=filename(fname);
MPRINT(DELDIR):   run;

NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

MPRINT(DELDIR):   data _null_;
MPRINT(DELDIR):   fname="_temp14";
MPRINT(DELDIR):   rc=filename(fname,"H:\746\Decision Tree test\Workspaces\EMWS1\Repl\REPLACECODE\REP_width.sas");
MPRINT(DELDIR):   if rc = 0 and fexist(fname) then rc=fdelete(fname);
MPRINT(DELDIR):   rc=filename(fname);
MPRINT(DELDIR):   run;

NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
      

MPRINT(SCORE):  ;
MPRINT(SCORE):   data _null_;
MPRINT(SCORE):   length rc $200;
MPRINT(SCORE):   rc = dcreate('REPLACECODE', "H:\746\Decision Tree test\Workspaces\EMWS1\Repl");
MPRINT(SCORE):   run;

NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(SCORE):   filename _F1 "H:\746\Decision Tree test\Workspaces\EMWS1\Repl\EMFLOWSCORE.sas";
MPRINT(SCORE):   filename _F2 "H:\746\Decision Tree test\Workspaces\EMWS1\Repl\EMPUBLISHSCORE.sas";
MPRINT(SCORE):   filename _F3 "H:\746\Decision Tree test\Workspaces\EMWS1\Repl\CDELTA_TRAIN.sas";
MPRINT(SCORE):   data _null_;
MPRINT(SCORE):   rc=fdelete('_F1');
MPRINT(SCORE):   rc=fdelete('_F2');
MPRINT(SCORE):   rc=fdelete('_F3');
MPRINT(SCORE):   run;

NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(SCORE):   filename _F1;
NOTE: Fileref _F1 has been deassigned.
MPRINT(SCORE):   filename _F2;
NOTE: Fileref _F2 has been deassigned.
MPRINT(SCORE):   filename _F3;
NOTE: Fileref _F3 has been deassigned.
MPRINT(SCORE):  ;
MPRINT(SCORE):  ;
MPRINT(SCORE):  ;
MPRINT(MAKELEVELDATA):   data REPLACE_MODE;
MPRINT(MAKELEVELDATA):   set EMWS1.Repl_OUTCLASS;
MPRINT(MAKELEVELDATA):   by NAME;
MPRINT(MAKELEVELDATA):   if first.name then do;
MPRINT(MAKELEVELDATA):   MODEC = CRAW;
MPRINT(MAKELEVELDATA):   MODEN = NRAW;
MPRINT(MAKELEVELDATA):   NORMMODE = LEVEL;
MPRINT(MAKELEVELDATA):   output;
MPRINT(MAKELEVELDATA):   end;
MPRINT(MAKELEVELDATA):   keep NAME MODEC MODEN NORMMODE UNKWOWNDEFAULT;
MPRINT(MAKELEVELDATA):   run;

WARNING: The variable UNKWOWNDEFAULT in the DROP, KEEP, or RENAME list has never been referenced.
NOTE: There were 56 observations read from the data set EMWS1.REPL_OUTCLASS.
NOTE: The data set WORK.REPLACE_MODE has 14 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
      

MPRINT(MAKELEVELDATA):   proc sort data=EMWS1.Repl_VariableSet;
MPRINT(MAKELEVELDATA):   by NAME;
MPRINT(MAKELEVELDATA):   run;

NOTE: There were 31 observations read from the data set EMWS1.REPL_VARIABLESET.
NOTE: The data set EMWS1.REPL_VARIABLESET has 31 observations and 35 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.06 seconds
      cpu time            0.01 seconds
      

MPRINT(MAKELEVELDATA):   data CLASSTEMP;
MPRINT(MAKELEVELDATA):   length UNKWOWNDEFAULT $8;
MPRINT(MAKELEVELDATA):   merge EMWS1.Repl_OUTCLASS(in=_a) REPLACE_MODE EMWS1.Repl_VariableSet(keep=LABEL LENGTH NAME ROLE LEVEL LABEL FORMAT RENAME=(LEVEL=MLEVEL) where=(MLEVEL ne 'INTERVAL'));
MPRINT(MAKELEVELDATA):   by NAME;
MPRINT(MAKELEVELDATA):   if LEVEL = '_UNKNOWN_' then UNKWOWNDEFAULT = "NONE";
MPRINT(MAKELEVELDATA):   if _a then output;
MPRINT(MAKELEVELDATA):   run;

WARNING: Multiple lengths were specified for the BY variable Name by input data sets. This might cause unexpected results.
NOTE: There were 56 observations read from the data set EMWS1.REPL_OUTCLASS.
NOTE: There were 14 observations read from the data set WORK.REPLACE_MODE.
NOTE: There were 16 observations read from the data set EMWS1.REPL_VARIABLESET.
      WHERE MLEVEL not = 'INTERVAL';
NOTE: The data set WORK.CLASSTEMP has 56 observations and 16 variables.
NOTE: DATA statement used (Total process time):
      real time           0.02 seconds
      cpu time            0.01 seconds
      

MPRINT(MAKELEVELDATA):   proc datasets lib=work nolist;
MPRINT(MAKELEVELDATA):   delete REPLACE_MODE;
MPRINT(MAKELEVELDATA):   run;
NOTE: Deleting WORK.REPLACE_MODE (memtype=DATA).
MPRINT(MAKELEVELDATA):   quit;
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
      

MPRINT(SCORE):  ;
MPRINT(MAKENEWNAMES):   proc sort data=CLASSTEMP out=invarname nodupkey;
MPRINT(MAKENEWNAMES):   by NAME;
MPRINT(MAKENEWNAMES):   where REPLACE_VALUE ^in('', '_DEFAULT_') or (REPLACE_VALUE eq '_DEFAULT_' and UNKWOWNDEFAULT ne 'NONE');
MPRINT(MAKENEWNAMES):   run;

NOTE: Input data set is empty.
NOTE: 0 observations with duplicate key values were deleted.
NOTE: There were 0 observations read from the data set WORK.CLASSTEMP.
      WHERE REPLACE_VALUE not in (' ', '_DEFAULT_') or ((REPLACE_VALUE='_DEFAULT_') and (UNKWOWNDEFAULT not = 'NONE'));
NOTE: The data set WORK.INVARNAME has 0 observations and 16 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
      

MPRINT(MAKENEWNAMES):   data invarname;
MPRINT(MAKENEWNAMES):   set EMWS1.Repl_LIMITS(keep=NAME) ;
MPRINT(MAKENEWNAMES):   run;

NOTE: There were 14 observations read from the data set EMWS1.REPL_LIMITS.
NOTE: The data set WORK.INVARNAME has 14 observations and 1 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

MPRINT(MAKENEWNAMES):   proc dmdb data=invarname outtable=outname(rename=(REP=NEWNAME)) nameserver;
MPRINT(MAKENEWNAMES):   names NAME;
MPRINT(MAKENEWNAMES):   prefix REP_;
MPRINT(MAKENEWNAMES):   run;

NOTE: There were 14 observations read from the data set WORK.INVARNAME.
NOTE: The data set WORK.OUTNAME has 14 observations and 2 variables.
NOTE: PROCEDURE DMDB used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
      

MPRINT(MAKENEWNAMES):   proc sort data=outname;
MPRINT(MAKENEWNAMES):   by NAME;
MPRINT(MAKENEWNAMES):   run;

NOTE: There were 14 observations read from the data set WORK.OUTNAME.
NOTE: The data set WORK.OUTNAME has 14 observations and 2 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(MAKENEWNAMES):   data EMWS1.Repl_LIMITS;
MPRINT(MAKENEWNAMES):   merge outname EMWS1.Repl_LIMITS(in=a);
MPRINT(MAKENEWNAMES):   by NAME;
MPRINT(MAKENEWNAMES):   if a then output;
MPRINT(MAKENEWNAMES):   run;

NOTE: There were 14 observations read from the data set WORK.OUTNAME.
NOTE: There were 14 observations read from the data set EMWS1.REPL_LIMITS.
NOTE: The data set EMWS1.REPL_LIMITS has 14 observations and 11 variables.
NOTE: DATA statement used (Total process time):
      real time           0.08 seconds
      cpu time            0.01 seconds
      

MPRINT(MAKENEWNAMES):   proc datasets lib=EMWS1 nolist;
MPRINT(MAKENEWNAMES):   modify Repl_LIMITS;
WARNING: Variable REPLACEMETHODUSED not found in data set EMWS1.REPL_LIMITS.
WARNING: Variable REPLACEMINUSED not found in data set EMWS1.REPL_LIMITS.
WARNING: Variable REPLACEDMAXUSED not found in data set EMWS1.REPL_LIMITS.
MPRINT(MAKENEWNAMES):   label NAME = "Variable" NEWNAME = "Replace Variable" CALCMETHOD = "Limits Method" REPLACEMETHODUSED = "Replacement Method Used" LOWERLIMIT = "Lower limit" REPLACEMINUSED = "Lower Replacement Value" UPPERLIMIT = "Upper Limit" 
REPLACEDMAXUSED = "Upper Replacement Value" REPLACEMETHOD = "Replacement Method" REPLACEMIN = "User-Specified Lower Replacement Value" REPLACEMAX = "User-Specified Upper Replacement Value" ROLE = "Role" LEVEL = "Measurement Level" LABEL = "Label";
MPRINT(MAKENEWNAMES):   run;

NOTE: MODIFY was successful for EMWS1.REPL_LIMITS.DATA.
MPRINT(MAKENEWNAMES):   quit;

NOTE: PROCEDURE DATASETS used (Total process time):
      real time           3.30 seconds
      cpu time            0.56 seconds
      

MPRINT(MAKENEWNAMES):   data length;
MPRINT(MAKENEWNAMES):   retain newlen 0;
MPRINT(MAKENEWNAMES):   set CLASSTEMP;
MPRINT(MAKENEWNAMES):   by NAME;
MPRINT(MAKENEWNAMES):   if type eq 'C' then do;
MPRINT(MAKENEWNAMES):   if first.name then do;
MPRINT(MAKENEWNAMES):   if REPLACE_VALUE ^in('_DEFAULT_', '_MODE_', '_MISSING_') then newlen = max(length, length(strip(replace_value)));
MPRINT(MAKENEWNAMES):   else newlen = length;
MPRINT(MAKENEWNAMES):   end;
MPRINT(MAKENEWNAMES):   else do;
MPRINT(MAKENEWNAMES):   if REPLACE_VALUE ^in('_DEFAULT_', '_MODE_', '_MISSING_') then newlen = max(newlen, length(strip(replace_value)));
MPRINT(MAKENEWNAMES):   end;
MPRINT(MAKENEWNAMES):   end;
MPRINT(MAKENEWNAMES):   else newlen = length;
MPRINT(MAKENEWNAMES):   len=length;
MPRINT(MAKENEWNAMES):   if last.name then output;
MPRINT(MAKENEWNAMES):   keep name len newlen role format type label mlevel;
MPRINT(MAKENEWNAMES):   run;

NOTE: There were 56 observations read from the data set WORK.CLASSTEMP.
NOTE: The data set WORK.LENGTH has 14 observations and 8 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(MAKENEWNAMES):   data EMWS1.Repl_CLASSINFO;
MPRINT(MAKENEWNAMES):   length rformat formatroot $32;
MPRINT(MAKENEWNAMES):   merge outname(in=a) length(in=b);
MPRINT(MAKENEWNAMES):   by NAME;
MPRINT(MAKENEWNAMES):   length=len;
MPRINT(MAKENEWNAMES):   if newlen > len then do;
MPRINT(MAKENEWNAMES):   if type eq 'C' and format ne '' then do;
MPRINT(MAKENEWNAMES):   rformat = strip(reverse(format));
MPRINT(MAKENEWNAMES):   do while(indexc(rformat, '.0123456789')=1);
MPRINT(MAKENEWNAMES):   rformat = substr(rformat, 2);
MPRINT(MAKENEWNAMES):   end;
MPRINT(MAKENEWNAMES):   formatroot= upcase(reverse(rformat));
MPRINT(MAKENEWNAMES):   if strip(formatRoot) in('$','$F','$UPCASE','$CHAR') then do;
MPRINT(MAKENEWNAMES):   format = strip(formatroot)!!strip(put(newlen, best.))!!'.';
MPRINT(MAKENEWNAMES):   end;
MPRINT(MAKENEWNAMES):   end;
MPRINT(MAKENEWNAMES):   length = newlen;
MPRINT(MAKENEWNAMES):   end;
MPRINT(MAKENEWNAMES):   if a and b then output;
MPRINT(MAKENEWNAMES):   KEEP name newname role format mlevel type label length;
MPRINT(MAKENEWNAMES):   run;

WARNING: Multiple lengths were specified for the BY variable NAME by input data sets. This might cause unexpected results.
NOTE: There were 14 observations read from the data set WORK.OUTNAME.
NOTE: There were 14 observations read from the data set WORK.LENGTH.
NOTE: The data set EMWS1.REPL_CLASSINFO has 0 observations and 8 variables.
NOTE: DATA statement used (Total process time):
      real time           0.08 seconds
      cpu time            0.03 seconds
      

MPRINT(MAKENEWNAMES):   proc datasets lib=work nolist;
MPRINT(MAKENEWNAMES):   delete length invarname outname;
MPRINT(MAKENEWNAMES):   run;

NOTE: Deleting WORK.LENGTH (memtype=DATA).
NOTE: Deleting WORK.INVARNAME (memtype=DATA).
NOTE: Deleting WORK.OUTNAME (memtype=DATA).
MPRINT(MAKENEWNAMES):   quit;
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

MPRINT(SCORE):  ;
MPRINT(MAKEVARSCORECODE):   filename sFile "H:\746\Decision Tree test\Workspaces\EMWS1\Repl\EMFLOWSCORE.sas";
MPRINT(MAKEVARSCORECODE):   data EMWS1.Repl_LIMITS;
MPRINT(MAKEVARSCORECODE):   set EMWS1.Repl_LIMITS end=eof;
MPRINT(MAKEVARSCORECODE):   length REPLACEMETHODUSED $8 string $400;
MPRINT(MAKEVARSCORECODE):   file sFile;
MPRINT(MAKEVARSCORECODE):   put'* ;';
MPRINT(MAKEVARSCORECODE):   put'* Variable: ' name ';';
MPRINT(MAKEVARSCORECODE):   put '* ;';
MPRINT(MAKEVARSCORECODE):   if strip(label) = '' then label = name;
MPRINT(MAKEVARSCORECODE):   string= 'Label '!!strip(newname)!!"='Replacement: "!!strip(tranwrd(label, "'","''"))!!"';";
MPRINT(MAKEVARSCORECODE):   put string;
MPRINT(MAKEVARSCORECODE):   put newname '=' name ';';
MPRINT(MAKEVARSCORECODE):   REPLACEMETHODUSED = REPLACEMETHOD;
MPRINT(MAKEVARSCORECODE):   if REPLACEMETHOD = 'DEFAULT' then REPLACEMETHODUSED = 'COMPUTED';
MPRINT(MAKEVARSCORECODE):   put 'if ' name ' eq . then ' newname '= . ;';
MPRINT(MAKEVARSCORECODE):   if LowerLimit ne . then do;
MPRINT(MAKEVARSCORECODE):   select(REPLACEMETHODUSED);
MPRINT(MAKEVARSCORECODE):   when('COMPUTED') REPLACEMINUSED = lowerLimit;
MPRINT(MAKEVARSCORECODE):   when('MISSING') REPLACEMINUSED = .;
MPRINT(MAKEVARSCORECODE):   when('MANUAL') REPLACEMINUSED = replaceMin;
MPRINT(MAKEVARSCORECODE):   otherwise;
MPRINT(MAKEVARSCORECODE):   end;
MPRINT(MAKEVARSCORECODE):   put 'else';
MPRINT(MAKEVARSCORECODE):   put 'if ' name '<' lowerLimit ' then ' newname ' = ' REPLACEMINUSED ';';
MPRINT(MAKEVARSCORECODE):   end;
MPRINT(MAKEVARSCORECODE):   if upperLimit ne . then do;
MPRINT(MAKEVARSCORECODE):   select(REPLACEMETHODUSED);
MPRINT(MAKEVARSCORECODE):   when('COMPUTED') REPLACEMAXUSED = upperLimit;
MPRINT(MAKEVARSCORECODE):   when('MISSING') REPLACEMAXUSED = .;
MPRINT(MAKEVARSCORECODE):   when('MANUAL') REPLACEMAXUSED = replaceMax;
MPRINT(MAKEVARSCORECODE):   otherwise;
MPRINT(MAKEVARSCORECODE):   end;
MPRINT(MAKEVARSCORECODE):   put 'else';
MPRINT(MAKEVARSCORECODE):   put 'if ' name '>' upperLimit ' then ' newname ' = ' REPLACEMAXUSED ';';
MPRINT(MAKEVARSCORECODE):   end;
MPRINT(MAKEVARSCORECODE):   drop string;
MPRINT(MAKEVARSCORECODE):   run;

NOTE: The file SFILE is:
      Filename=H:\746\Decision Tree test\Workspaces\EMWS1\Repl\EMFLOWSCORE.sas,
      RECFM=V,LRECL=32767,File Size (bytes)=0,
      Last Modified=April 05, 2021 13:09:44 o'cloc,
      Create Time=April 05, 2021 13:09:44 o'cloc

NOTE: 140 records were written to the file SFILE.
      The minimum record length was 3.
      The maximum record length was 80.
NOTE: There were 14 observations read from the data set EMWS1.REPL_LIMITS.
NOTE: The data set EMWS1.REPL_LIMITS has 14 observations and 14 variables.
NOTE: DATA statement used (Total process time):
      real time           0.16 seconds
      cpu time            0.01 seconds
      

MPRINT(MAKEVARSCORECODE):   filename sfile;
NOTE: Fileref SFILE has been deassigned.
MPRINT(SCORE):  ;
MPRINT(MAKEVARSCORECODE):   filename sFile "H:\746\Decision Tree test\Workspaces\EMWS1\Repl\EMPUBLISHSCORE.sas";
MPRINT(MAKEVARSCORECODE):   data EMWS1.Repl_LIMITS;
MPRINT(MAKEVARSCORECODE):   set EMWS1.Repl_LIMITS end=eof;
MPRINT(MAKEVARSCORECODE):   length REPLACEMETHODUSED $8 string $400;
MPRINT(MAKEVARSCORECODE):   file sFile;
MPRINT(MAKEVARSCORECODE):   put'* ;';
MPRINT(MAKEVARSCORECODE):   put'* Variable: ' name ';';
MPRINT(MAKEVARSCORECODE):   put '* ;';
MPRINT(MAKEVARSCORECODE):   if strip(label) = '' then label = name;
MPRINT(MAKEVARSCORECODE):   string= 'Label '!!strip(newname)!!"='Replacement: "!!strip(tranwrd(label, "'","''"))!!"';";
MPRINT(MAKEVARSCORECODE):   put string;
MPRINT(MAKEVARSCORECODE):   put newname '=' name ';';
MPRINT(MAKEVARSCORECODE):   REPLACEMETHODUSED = REPLACEMETHOD;
MPRINT(MAKEVARSCORECODE):   if REPLACEMETHOD = 'DEFAULT' then REPLACEMETHODUSED = 'COMPUTED';
MPRINT(MAKEVARSCORECODE):   put 'if ' name ' eq . then ' newname '= . ;';
MPRINT(MAKEVARSCORECODE):   if LowerLimit ne . then do;
MPRINT(MAKEVARSCORECODE):   select(REPLACEMETHODUSED);
MPRINT(MAKEVARSCORECODE):   when('COMPUTED') REPLACEMINUSED = lowerLimit;
MPRINT(MAKEVARSCORECODE):   when('MISSING') REPLACEMINUSED = .;
MPRINT(MAKEVARSCORECODE):   when('MANUAL') REPLACEMINUSED = replaceMin;
MPRINT(MAKEVARSCORECODE):   otherwise;
MPRINT(MAKEVARSCORECODE):   end;
MPRINT(MAKEVARSCORECODE):   put 'else';
MPRINT(MAKEVARSCORECODE):   put 'if ' name '<' lowerLimit ' then ' newname ' = ' REPLACEMINUSED ';';
MPRINT(MAKEVARSCORECODE):   end;
MPRINT(MAKEVARSCORECODE):   if upperLimit ne . then do;
MPRINT(MAKEVARSCORECODE):   select(REPLACEMETHODUSED);
MPRINT(MAKEVARSCORECODE):   when('COMPUTED') REPLACEMAXUSED = upperLimit;
MPRINT(MAKEVARSCORECODE):   when('MISSING') REPLACEMAXUSED = .;
MPRINT(MAKEVARSCORECODE):   when('MANUAL') REPLACEMAXUSED = replaceMax;
MPRINT(MAKEVARSCORECODE):   otherwise;
MPRINT(MAKEVARSCORECODE):   end;
MPRINT(MAKEVARSCORECODE):   put 'else';
MPRINT(MAKEVARSCORECODE):   put 'if ' name '>' upperLimit ' then ' newname ' = ' REPLACEMAXUSED ';';
MPRINT(MAKEVARSCORECODE):   end;
MPRINT(MAKEVARSCORECODE):   drop string;
MPRINT(MAKEVARSCORECODE):   run;

NOTE: The file SFILE is:
      Filename=H:\746\Decision Tree test\Workspaces\EMWS1\Repl\EMPUBLISHSCORE.sas,
      RECFM=V,LRECL=32767,File Size (bytes)=0,
      Last Modified=April 05, 2021 13:09:44 o'cloc,
      Create Time=April 05, 2021 13:09:44 o'cloc

NOTE: 140 records were written to the file SFILE.
      The minimum record length was 3.
      The maximum record length was 80.
NOTE: There were 14 observations read from the data set EMWS1.REPL_LIMITS.
NOTE: The data set EMWS1.REPL_LIMITS has 14 observations and 14 variables.
NOTE: DATA statement used (Total process time):
      real time           0.08 seconds
      cpu time            0.00 seconds
      

MPRINT(MAKEVARSCORECODE):   filename sfile;
NOTE: Fileref SFILE has been deassigned.
MPRINT(SCORE):  ;
MPRINT(MAKEVAROPTCODE):   filename sfile "H:\746\Decision Tree test\Workspaces\EMWS1\Repl\REPLACECODE\REP_IMP_bore.sas";
MPRINT(MAKEVAROPTCODE):   data _null_;
MPRINT(MAKEVAROPTCODE):   length string $400;
MPRINT(MAKEVAROPTCODE):   set EMWS1.Repl_LIMITS;
MPRINT(MAKEVAROPTCODE):   where NEWNAME="REP_IMP_bore";
MPRINT(MAKEVAROPTCODE):   file sfile;
MPRINT(MAKEVAROPTCODE):   put '* ;';
MPRINT(MAKEVAROPTCODE):   string = '*Variable: '!!strip(name)!!';';
MPRINT(MAKEVAROPTCODE):   put string;
MPRINT(MAKEVAROPTCODE):   put '* ;';
MPRINT(MAKEVAROPTCODE):   if label eq '' then string = 'Label '!!strip(newname)!!"= 'Replacement: "!!strip(name)!!"';";
MPRINT(MAKEVAROPTCODE):   else string = 'Label '!!strip(newname)!!"= 'Replacement: "!!strip(tranwrd(label, "'", "''"))!!"';";
MPRINT(MAKEVAROPTCODE):   put string;
MPRINT(MAKEVAROPTCODE):   string = strip(newname)!!'= '!!strip(NAME)!!';';
MPRINT(MAKEVAROPTCODE):   put string;
MPRINT(MAKEVAROPTCODE):   replacemin = .;
MPRINT(MAKEVAROPTCODE):   string = 'if '!!strip(name)!!' eq . then '!!strip(newname)!!' = .;';
MPRINT(MAKEVAROPTCODE):   put string;
MPRINT(MAKEVAROPTCODE):   if LowerLimit ne . then do;
MPRINT(MAKEVAROPTCODE):   if ReplaceMethodUsed="COMPUTED" then replaceMin=LowerLimit;
MPRINT(MAKEVAROPTCODE):   if ReplaceMethodUsed="MANUAL" then replaceMin = ReplaceMinUsed;
MPRINT(MAKEVAROPTCODE):   put 'else';
MPRINT(MAKEVAROPTCODE):   string = 'if '!!strip(name)!!'<'!!strip(put(lowerlimit,best.)) !!' then '!!strip(newname)!!'='!!strip(put(replaceMin,best.))!!';';
MPRINT(MAKEVAROPTCODE):   put string;
MPRINT(MAKEVAROPTCODE):   end;
MPRINT(MAKEVAROPTCODE):   if UpperLimit ne . then do;
MPRINT(MAKEVAROPTCODE):   if ReplaceMethodUsed="COMPUTED" then replaceMax=UpperLimit;
MPRINT(MAKEVAROPTCODE):   if ReplaceMethodUsed="MANUAL" then replaceMax = ReplaceMaxUsed;
MPRINT(MAKEVAROPTCODE):   put 'else';
MPRINT(MAKEVAROPTCODE):   string = 'if '!!strip(name)!!'>'!!strip(put(upperlimit,best.)) !!' then '!!strip(newname)!!'='!!strip(put(replaceMax,best.))!!';';
MPRINT(MAKEVAROPTCODE):   put string;
MPRINT(MAKEVAROPTCODE):   end;
MPRINT(MAKEVAROPTCODE):   run;

NOTE: The file SFILE is:
      Filename=H:\746\Decision Tree test\Workspaces\EMWS1\Repl\REPLACECODE\REP_IMP_bore.sas,
      RECFM=V,LRECL=32767,File Size (bytes)=0,
      Last Modified=April 05, 2021 13:09:44 o'cloc,
      Create Time=April 05, 2021 13:09:44 o'cloc

NOTE: 10 records were written to the file SFILE.
      The minimum record length was 3.
      The maximum record length was 56.
NOTE: There were 1 observations read from the data set EMWS1.REPL_LIMITS.
      WHERE NEWNAME='REP_IMP_bore';
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
      

MPRINT(MAKEVAROPTCODE):   filename sfile;
NOTE: Fileref SFILE has been deassigned.
MPRINT(MAKEVAROPTCODE):   filename sfile "H:\746\Decision Tree test\Workspaces\EMWS1\Repl\REPLACECODE\REP_IMP_price.sas";
MPRINT(MAKEVAROPTCODE):   data _null_;
MPRINT(MAKEVAROPTCODE):   length string $400;
MPRINT(MAKEVAROPTCODE):   set EMWS1.Repl_LIMITS;
MPRINT(MAKEVAROPTCODE):   where NEWNAME="REP_IMP_price";
MPRINT(MAKEVAROPTCODE):   file sfile;
MPRINT(MAKEVAROPTCODE):   put '* ;';
MPRINT(MAKEVAROPTCODE):   string = '*Variable: '!!strip(name)!!';';
MPRINT(MAKEVAROPTCODE):   put string;
MPRINT(MAKEVAROPTCODE):   put '* ;';
MPRINT(MAKEVAROPTCODE):   if label eq '' then string = 'Label '!!strip(newname)!!"= 'Replacement: "!!strip(name)!!"';";
MPRINT(MAKEVAROPTCODE):   else string = 'Label '!!strip(newname)!!"= 'Replacement: "!!strip(tranwrd(label, "'", "''"))!!"';";
MPRINT(MAKEVAROPTCODE):   put string;
MPRINT(MAKEVAROPTCODE):   string = strip(newname)!!'= '!!strip(NAME)!!';';
MPRINT(MAKEVAROPTCODE):   put string;
MPRINT(MAKEVAROPTCODE):   replacemin = .;
MPRINT(MAKEVAROPTCODE):   string = 'if '!!strip(name)!!' eq . then '!!strip(newname)!!' = .;';
MPRINT(MAKEVAROPTCODE):   put string;
MPRINT(MAKEVAROPTCODE):   if LowerLimit ne . then do;
MPRINT(MAKEVAROPTCODE):   if ReplaceMethodUsed="COMPUTED" then replaceMin=LowerLimit;
MPRINT(MAKEVAROPTCODE):   if ReplaceMethodUsed="MANUAL" then replaceMin = ReplaceMinUsed;
MPRINT(MAKEVAROPTCODE):   put 'else';
MPRINT(MAKEVAROPTCODE):   string = 'if '!!strip(name)!!'<'!!strip(put(lowerlimit,best.)) !!' then '!!strip(newname)!!'='!!strip(put(replaceMin,best.))!!';';
MPRINT(MAKEVAROPTCODE):   put string;
MPRINT(MAKEVAROPTCODE):   end;
MPRINT(MAKEVAROPTCODE):   if UpperLimit ne . then do;
MPRINT(MAKEVAROPTCODE):   if ReplaceMethodUsed="COMPUTED" then replaceMax=UpperLimit;
MPRINT(MAKEVAROPTCODE):   if ReplaceMethodUsed="MANUAL" then replaceMax = ReplaceMaxUsed;
MPRINT(MAKEVAROPTCODE):   put 'else';
MPRINT(MAKEVAROPTCODE):   string = 'if '!!strip(name)!!'>'!!strip(put(upperlimit,best.)) !!' then '!!strip(newname)!!'='!!strip(put(replaceMax,best.))!!';';
MPRINT(MAKEVAROPTCODE):   put string;
MPRINT(MAKEVAROPTCODE):   end;
MPRINT(MAKEVAROPTCODE):   run;

NOTE: The file SFILE is:
      Filename=H:\746\Decision Tree test\Workspaces\EMWS1\Repl\REPLACECODE\REP_IMP_price.sas,
      RECFM=V,LRECL=32767,File Size (bytes)=0,
      Last Modified=April 05, 2021 13:09:44 o'cloc,
      Create Time=April 05, 2021 13:09:44 o'cloc

NOTE: 10 records were written to the file SFILE.
      The minimum record length was 3.
      The maximum record length was 58.
NOTE: There were 1 observations read from the data set EMWS1.REPL_LIMITS.
      WHERE NEWNAME='REP_IMP_price';
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

MPRINT(MAKEVAROPTCODE):   filename sfile;
NOTE: Fileref SFILE has been deassigned.
MPRINT(MAKEVAROPTCODE):   filename sfile "H:\746\Decision Tree test\Workspaces\EMWS1\Repl\REPLACECODE\REP_IMP_stroke.sas";
MPRINT(MAKEVAROPTCODE):   data _null_;
MPRINT(MAKEVAROPTCODE):   length string $400;
MPRINT(MAKEVAROPTCODE):   set EMWS1.Repl_LIMITS;
MPRINT(MAKEVAROPTCODE):   where NEWNAME="REP_IMP_stroke";
MPRINT(MAKEVAROPTCODE):   file sfile;
MPRINT(MAKEVAROPTCODE):   put '* ;';
MPRINT(MAKEVAROPTCODE):   string = '*Variable: '!!strip(name)!!';';
MPRINT(MAKEVAROPTCODE):   put string;
MPRINT(MAKEVAROPTCODE):   put '* ;';
MPRINT(MAKEVAROPTCODE):   if label eq '' then string = 'Label '!!strip(newname)!!"= 'Replacement: "!!strip(name)!!"';";
MPRINT(MAKEVAROPTCODE):   else string = 'Label '!!strip(newname)!!"= 'Replacement: "!!strip(tranwrd(label, "'", "''"))!!"';";
MPRINT(MAKEVAROPTCODE):   put string;
MPRINT(MAKEVAROPTCODE):   string = strip(newname)!!'= '!!strip(NAME)!!';';
MPRINT(MAKEVAROPTCODE):   put string;
MPRINT(MAKEVAROPTCODE):   replacemin = .;
MPRINT(MAKEVAROPTCODE):   string = 'if '!!strip(name)!!' eq . then '!!strip(newname)!!' = .;';
MPRINT(MAKEVAROPTCODE):   put string;
MPRINT(MAKEVAROPTCODE):   if LowerLimit ne . then do;
MPRINT(MAKEVAROPTCODE):   if ReplaceMethodUsed="COMPUTED" then replaceMin=LowerLimit;
MPRINT(MAKEVAROPTCODE):   if ReplaceMethodUsed="MANUAL" then replaceMin = ReplaceMinUsed;
MPRINT(MAKEVAROPTCODE):   put 'else';
MPRINT(MAKEVAROPTCODE):   string = 'if '!!strip(name)!!'<'!!strip(put(lowerlimit,best.)) !!' then '!!strip(newname)!!'='!!strip(put(replaceMin,best.))!!';';
MPRINT(MAKEVAROPTCODE):   put string;
MPRINT(MAKEVAROPTCODE):   end;
MPRINT(MAKEVAROPTCODE):   if UpperLimit ne . then do;
MPRINT(MAKEVAROPTCODE):   if ReplaceMethodUsed="COMPUTED" then replaceMax=UpperLimit;
MPRINT(MAKEVAROPTCODE):   if ReplaceMethodUsed="MANUAL" then replaceMax = ReplaceMaxUsed;
MPRINT(MAKEVAROPTCODE):   put 'else';
MPRINT(MAKEVAROPTCODE):   string = 'if '!!strip(name)!!'>'!!strip(put(upperlimit,best.)) !!' then '!!strip(newname)!!'='!!strip(put(replaceMax,best.))!!';';
MPRINT(MAKEVAROPTCODE):   put string;
MPRINT(MAKEVAROPTCODE):   end;
MPRINT(MAKEVAROPTCODE):   run;

NOTE: The file SFILE is:
      Filename=H:\746\Decision Tree test\Workspaces\EMWS1\Repl\REPLACECODE\REP_IMP_stroke.sas,
      RECFM=V,LRECL=32767,File Size (bytes)=0,
      Last Modified=April 05, 2021 13:09:44 o'cloc,
      Create Time=April 05, 2021 13:09:44 o'cloc

NOTE: 10 records were written to the file SFILE.
      The minimum record length was 3.
      The maximum record length was 60.
NOTE: There were 1 observations read from the data set EMWS1.REPL_LIMITS.
      WHERE NEWNAME='REP_IMP_stroke';
NOTE: DATA statement used (Total process time):
      real time           0.02 seconds
      cpu time            0.00 seconds
      

MPRINT(MAKEVAROPTCODE):   filename sfile;
NOTE: Fileref SFILE has been deassigned.
MPRINT(MAKEVAROPTCODE):   filename sfile "H:\746\Decision Tree test\Workspaces\EMWS1\Repl\REPLACECODE\REP_city_mpg.sas";
MPRINT(MAKEVAROPTCODE):   data _null_;
MPRINT(MAKEVAROPTCODE):   length string $400;
MPRINT(MAKEVAROPTCODE):   set EMWS1.Repl_LIMITS;
MPRINT(MAKEVAROPTCODE):   where NEWNAME="REP_city_mpg";
MPRINT(MAKEVAROPTCODE):   file sfile;
MPRINT(MAKEVAROPTCODE):   put '* ;';
MPRINT(MAKEVAROPTCODE):   string = '*Variable: '!!strip(name)!!';';
MPRINT(MAKEVAROPTCODE):   put string;
MPRINT(MAKEVAROPTCODE):   put '* ;';
MPRINT(MAKEVAROPTCODE):   if label eq '' then string = 'Label '!!strip(newname)!!"= 'Replacement: "!!strip(name)!!"';";
MPRINT(MAKEVAROPTCODE):   else string = 'Label '!!strip(newname)!!"= 'Replacement: "!!strip(tranwrd(label, "'", "''"))!!"';";
MPRINT(MAKEVAROPTCODE):   put string;
MPRINT(MAKEVAROPTCODE):   string = strip(newname)!!'= '!!strip(NAME)!!';';
MPRINT(MAKEVAROPTCODE):   put string;
MPRINT(MAKEVAROPTCODE):   replacemin = .;
MPRINT(MAKEVAROPTCODE):   string = 'if '!!strip(name)!!' eq . then '!!strip(newname)!!' = .;';
MPRINT(MAKEVAROPTCODE):   put string;
MPRINT(MAKEVAROPTCODE):   if LowerLimit ne . then do;
MPRINT(MAKEVAROPTCODE):   if ReplaceMethodUsed="COMPUTED" then replaceMin=LowerLimit;
MPRINT(MAKEVAROPTCODE):   if ReplaceMethodUsed="MANUAL" then replaceMin = ReplaceMinUsed;
MPRINT(MAKEVAROPTCODE):   put 'else';
MPRINT(MAKEVAROPTCODE):   string = 'if '!!strip(name)!!'<'!!strip(put(lowerlimit,best.)) !!' then '!!strip(newname)!!'='!!strip(put(replaceMin,best.))!!';';
MPRINT(MAKEVAROPTCODE):   put string;
MPRINT(MAKEVAROPTCODE):   end;
MPRINT(MAKEVAROPTCODE):   if UpperLimit ne . then do;
MPRINT(MAKEVAROPTCODE):   if ReplaceMethodUsed="COMPUTED" then replaceMax=UpperLimit;
MPRINT(MAKEVAROPTCODE):   if ReplaceMethodUsed="MANUAL" then replaceMax = ReplaceMaxUsed;
MPRINT(MAKEVAROPTCODE):   put 'else';
MPRINT(MAKEVAROPTCODE):   string = 'if '!!strip(name)!!'>'!!strip(put(upperlimit,best.)) !!' then '!!strip(newname)!!'='!!strip(put(replaceMax,best.))!!';';
MPRINT(MAKEVAROPTCODE):   put string;
MPRINT(MAKEVAROPTCODE):   end;
MPRINT(MAKEVAROPTCODE):   run;

NOTE: The file SFILE is:
      Filename=H:\746\Decision Tree test\Workspaces\EMWS1\Repl\REPLACECODE\REP_city_mpg.sas,
      RECFM=V,LRECL=32767,File Size (bytes)=0,
      Last Modified=April 05, 2021 13:09:44 o'cloc,
      Create Time=April 05, 2021 13:09:44 o'cloc

NOTE: 10 records were written to the file SFILE.
      The minimum record length was 3.
      The maximum record length was 56.
NOTE: There were 1 observations read from the data set EMWS1.REPL_LIMITS.
      WHERE NEWNAME='REP_city_mpg';
NOTE: DATA statement used (Total process time):
      real time           0.02 seconds
      cpu time            0.00 seconds
      

MPRINT(MAKEVAROPTCODE):   filename sfile;
NOTE: Fileref SFILE has been deassigned.
MPRINT(MAKEVAROPTCODE):   filename sfile "H:\746\Decision Tree test\Workspaces\EMWS1\Repl\REPLACECODE\REP_compression_ratio.sas";
MPRINT(MAKEVAROPTCODE):   data _null_;
MPRINT(MAKEVAROPTCODE):   length string $400;
MPRINT(MAKEVAROPTCODE):   set EMWS1.Repl_LIMITS;
MPRINT(MAKEVAROPTCODE):   where NEWNAME="REP_compression_ratio";
MPRINT(MAKEVAROPTCODE):   file sfile;
MPRINT(MAKEVAROPTCODE):   put '* ;';
MPRINT(MAKEVAROPTCODE):   string = '*Variable: '!!strip(name)!!';';
MPRINT(MAKEVAROPTCODE):   put string;
MPRINT(MAKEVAROPTCODE):   put '* ;';
MPRINT(MAKEVAROPTCODE):   if label eq '' then string = 'Label '!!strip(newname)!!"= 'Replacement: "!!strip(name)!!"';";
MPRINT(MAKEVAROPTCODE):   else string = 'Label '!!strip(newname)!!"= 'Replacement: "!!strip(tranwrd(label, "'", "''"))!!"';";
MPRINT(MAKEVAROPTCODE):   put string;
MPRINT(MAKEVAROPTCODE):   string = strip(newname)!!'= '!!strip(NAME)!!';';
MPRINT(MAKEVAROPTCODE):   put string;
MPRINT(MAKEVAROPTCODE):   replacemin = .;
MPRINT(MAKEVAROPTCODE):   string = 'if '!!strip(name)!!' eq . then '!!strip(newname)!!' = .;';
MPRINT(MAKEVAROPTCODE):   put string;
MPRINT(MAKEVAROPTCODE):   if LowerLimit ne . then do;
MPRINT(MAKEVAROPTCODE):   if ReplaceMethodUsed="COMPUTED" then replaceMin=LowerLimit;
MPRINT(MAKEVAROPTCODE):   if ReplaceMethodUsed="MANUAL" then replaceMin = ReplaceMinUsed;
MPRINT(MAKEVAROPTCODE):   put 'else';
MPRINT(MAKEVAROPTCODE):   string = 'if '!!strip(name)!!'<'!!strip(put(lowerlimit,best.)) !!' then '!!strip(newname)!!'='!!strip(put(replaceMin,best.))!!';';
MPRINT(MAKEVAROPTCODE):   put string;
MPRINT(MAKEVAROPTCODE):   end;
MPRINT(MAKEVAROPTCODE):   if UpperLimit ne . then do;
MPRINT(MAKEVAROPTCODE):   if ReplaceMethodUsed="COMPUTED" then replaceMax=UpperLimit;
MPRINT(MAKEVAROPTCODE):   if ReplaceMethodUsed="MANUAL" then replaceMax = ReplaceMaxUsed;
MPRINT(MAKEVAROPTCODE):   put 'else';
MPRINT(MAKEVAROPTCODE):   string = 'if '!!strip(name)!!'>'!!strip(put(upperlimit,best.)) !!' then '!!strip(newname)!!'='!!strip(put(replaceMax,best.))!!';';
MPRINT(MAKEVAROPTCODE):   put string;
MPRINT(MAKEVAROPTCODE):   end;
MPRINT(MAKEVAROPTCODE):   run;

NOTE: The file SFILE is:
      Filename=H:\746\Decision Tree test\Workspaces\EMWS1\Repl\REPLACECODE\REP_compression_ratio.sas,
      RECFM=V,LRECL=32767,File Size (bytes)=0,
      Last Modified=April 05, 2021 13:09:44 o'cloc,
      Create Time=April 05, 2021 13:09:44 o'cloc

NOTE: 10 records were written to the file SFILE.
      The minimum record length was 3.
      The maximum record length was 74.
NOTE: There were 1 observations read from the data set EMWS1.REPL_LIMITS.
      WHERE NEWNAME='REP_compression_ratio';
NOTE: DATA statement used (Total process time):
      real time           0.02 seconds
      cpu time            0.00 seconds
      

MPRINT(MAKEVAROPTCODE):   filename sfile;
NOTE: Fileref SFILE has been deassigned.
MPRINT(MAKEVAROPTCODE):   filename sfile "H:\746\Decision Tree test\Workspaces\EMWS1\Repl\REPLACECODE\REP_curb_weight.sas";
MPRINT(MAKEVAROPTCODE):   data _null_;
MPRINT(MAKEVAROPTCODE):   length string $400;
MPRINT(MAKEVAROPTCODE):   set EMWS1.Repl_LIMITS;
MPRINT(MAKEVAROPTCODE):   where NEWNAME="REP_curb_weight";
MPRINT(MAKEVAROPTCODE):   file sfile;
MPRINT(MAKEVAROPTCODE):   put '* ;';
MPRINT(MAKEVAROPTCODE):   string = '*Variable: '!!strip(name)!!';';
MPRINT(MAKEVAROPTCODE):   put string;
MPRINT(MAKEVAROPTCODE):   put '* ;';
MPRINT(MAKEVAROPTCODE):   if label eq '' then string = 'Label '!!strip(newname)!!"= 'Replacement: "!!strip(name)!!"';";
MPRINT(MAKEVAROPTCODE):   else string = 'Label '!!strip(newname)!!"= 'Replacement: "!!strip(tranwrd(label, "'", "''"))!!"';";
MPRINT(MAKEVAROPTCODE):   put string;
MPRINT(MAKEVAROPTCODE):   string = strip(newname)!!'= '!!strip(NAME)!!';';
MPRINT(MAKEVAROPTCODE):   put string;
MPRINT(MAKEVAROPTCODE):   replacemin = .;
MPRINT(MAKEVAROPTCODE):   string = 'if '!!strip(name)!!' eq . then '!!strip(newname)!!' = .;';
MPRINT(MAKEVAROPTCODE):   put string;
MPRINT(MAKEVAROPTCODE):   if LowerLimit ne . then do;
MPRINT(MAKEVAROPTCODE):   if ReplaceMethodUsed="COMPUTED" then replaceMin=LowerLimit;
MPRINT(MAKEVAROPTCODE):   if ReplaceMethodUsed="MANUAL" then replaceMin = ReplaceMinUsed;
MPRINT(MAKEVAROPTCODE):   put 'else';
MPRINT(MAKEVAROPTCODE):   string = 'if '!!strip(name)!!'<'!!strip(put(lowerlimit,best.)) !!' then '!!strip(newname)!!'='!!strip(put(replaceMin,best.))!!';';
MPRINT(MAKEVAROPTCODE):   put string;
MPRINT(MAKEVAROPTCODE):   end;
MPRINT(MAKEVAROPTCODE):   if UpperLimit ne . then do;
MPRINT(MAKEVAROPTCODE):   if ReplaceMethodUsed="COMPUTED" then replaceMax=UpperLimit;
MPRINT(MAKEVAROPTCODE):   if ReplaceMethodUsed="MANUAL" then replaceMax = ReplaceMaxUsed;
MPRINT(MAKEVAROPTCODE):   put 'else';
MPRINT(MAKEVAROPTCODE):   string = 'if '!!strip(name)!!'>'!!strip(put(upperlimit,best.)) !!' then '!!strip(newname)!!'='!!strip(put(replaceMax,best.))!!';';
MPRINT(MAKEVAROPTCODE):   put string;
MPRINT(MAKEVAROPTCODE):   end;
MPRINT(MAKEVAROPTCODE):   run;

NOTE: The file SFILE is:
      Filename=H:\746\Decision Tree test\Workspaces\EMWS1\Repl\REPLACECODE\REP_curb_weight.sas,
      RECFM=V,LRECL=32767,File Size (bytes)=0,
      Last Modified=April 05, 2021 13:09:44 o'cloc,
      Create Time=April 05, 2021 13:09:44 o'cloc

NOTE: 10 records were written to the file SFILE.
      The minimum record length was 3.
      The maximum record length was 62.
NOTE: There were 1 observations read from the data set EMWS1.REPL_LIMITS.
      WHERE NEWNAME='REP_curb_weight';
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
      

MPRINT(MAKEVAROPTCODE):   filename sfile;
NOTE: Fileref SFILE has been deassigned.
MPRINT(MAKEVAROPTCODE):   filename sfile "H:\746\Decision Tree test\Workspaces\EMWS1\Repl\REPLACECODE\REP_engine_size.sas";
MPRINT(MAKEVAROPTCODE):   data _null_;
MPRINT(MAKEVAROPTCODE):   length string $400;
MPRINT(MAKEVAROPTCODE):   set EMWS1.Repl_LIMITS;
MPRINT(MAKEVAROPTCODE):   where NEWNAME="REP_engine_size";
MPRINT(MAKEVAROPTCODE):   file sfile;
MPRINT(MAKEVAROPTCODE):   put '* ;';
MPRINT(MAKEVAROPTCODE):   string = '*Variable: '!!strip(name)!!';';
MPRINT(MAKEVAROPTCODE):   put string;
MPRINT(MAKEVAROPTCODE):   put '* ;';
MPRINT(MAKEVAROPTCODE):   if label eq '' then string = 'Label '!!strip(newname)!!"= 'Replacement: "!!strip(name)!!"';";
MPRINT(MAKEVAROPTCODE):   else string = 'Label '!!strip(newname)!!"= 'Replacement: "!!strip(tranwrd(label, "'", "''"))!!"';";
MPRINT(MAKEVAROPTCODE):   put string;
MPRINT(MAKEVAROPTCODE):   string = strip(newname)!!'= '!!strip(NAME)!!';';
MPRINT(MAKEVAROPTCODE):   put string;
MPRINT(MAKEVAROPTCODE):   replacemin = .;
MPRINT(MAKEVAROPTCODE):   string = 'if '!!strip(name)!!' eq . then '!!strip(newname)!!' = .;';
MPRINT(MAKEVAROPTCODE):   put string;
MPRINT(MAKEVAROPTCODE):   if LowerLimit ne . then do;
MPRINT(MAKEVAROPTCODE):   if ReplaceMethodUsed="COMPUTED" then replaceMin=LowerLimit;
MPRINT(MAKEVAROPTCODE):   if ReplaceMethodUsed="MANUAL" then replaceMin = ReplaceMinUsed;
MPRINT(MAKEVAROPTCODE):   put 'else';
MPRINT(MAKEVAROPTCODE):   string = 'if '!!strip(name)!!'<'!!strip(put(lowerlimit,best.)) !!' then '!!strip(newname)!!'='!!strip(put(replaceMin,best.))!!';';
MPRINT(MAKEVAROPTCODE):   put string;
MPRINT(MAKEVAROPTCODE):   end;
MPRINT(MAKEVAROPTCODE):   if UpperLimit ne . then do;
MPRINT(MAKEVAROPTCODE):   if ReplaceMethodUsed="COMPUTED" then replaceMax=UpperLimit;
MPRINT(MAKEVAROPTCODE):   if ReplaceMethodUsed="MANUAL" then replaceMax = ReplaceMaxUsed;
MPRINT(MAKEVAROPTCODE):   put 'else';
MPRINT(MAKEVAROPTCODE):   string = 'if '!!strip(name)!!'>'!!strip(put(upperlimit,best.)) !!' then '!!strip(newname)!!'='!!strip(put(replaceMax,best.))!!';';
MPRINT(MAKEVAROPTCODE):   put string;
MPRINT(MAKEVAROPTCODE):   end;
MPRINT(MAKEVAROPTCODE):   run;

NOTE: The file SFILE is:
      Filename=H:\746\Decision Tree test\Workspaces\EMWS1\Repl\REPLACECODE\REP_engine_size.sas,
      RECFM=V,LRECL=32767,File Size (bytes)=0,
      Last Modified=April 05, 2021 13:09:44 o'cloc,
      Create Time=April 05, 2021 13:09:44 o'cloc

NOTE: 10 records were written to the file SFILE.
      The minimum record length was 3.
      The maximum record length was 62.
NOTE: There were 1 observations read from the data set EMWS1.REPL_LIMITS.
      WHERE NEWNAME='REP_engine_size';
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

MPRINT(MAKEVAROPTCODE):   filename sfile;
NOTE: Fileref SFILE has been deassigned.
MPRINT(MAKEVAROPTCODE):   filename sfile "H:\746\Decision Tree test\Workspaces\EMWS1\Repl\REPLACECODE\REP_height.sas";
MPRINT(MAKEVAROPTCODE):   data _null_;
MPRINT(MAKEVAROPTCODE):   length string $400;
MPRINT(MAKEVAROPTCODE):   set EMWS1.Repl_LIMITS;
MPRINT(MAKEVAROPTCODE):   where NEWNAME="REP_height";
MPRINT(MAKEVAROPTCODE):   file sfile;
MPRINT(MAKEVAROPTCODE):   put '* ;';
MPRINT(MAKEVAROPTCODE):   string = '*Variable: '!!strip(name)!!';';
MPRINT(MAKEVAROPTCODE):   put string;
MPRINT(MAKEVAROPTCODE):   put '* ;';
MPRINT(MAKEVAROPTCODE):   if label eq '' then string = 'Label '!!strip(newname)!!"= 'Replacement: "!!strip(name)!!"';";
MPRINT(MAKEVAROPTCODE):   else string = 'Label '!!strip(newname)!!"= 'Replacement: "!!strip(tranwrd(label, "'", "''"))!!"';";
MPRINT(MAKEVAROPTCODE):   put string;
MPRINT(MAKEVAROPTCODE):   string = strip(newname)!!'= '!!strip(NAME)!!';';
MPRINT(MAKEVAROPTCODE):   put string;
MPRINT(MAKEVAROPTCODE):   replacemin = .;
MPRINT(MAKEVAROPTCODE):   string = 'if '!!strip(name)!!' eq . then '!!strip(newname)!!' = .;';
MPRINT(MAKEVAROPTCODE):   put string;
MPRINT(MAKEVAROPTCODE):   if LowerLimit ne . then do;
MPRINT(MAKEVAROPTCODE):   if ReplaceMethodUsed="COMPUTED" then replaceMin=LowerLimit;
MPRINT(MAKEVAROPTCODE):   if ReplaceMethodUsed="MANUAL" then replaceMin = ReplaceMinUsed;
MPRINT(MAKEVAROPTCODE):   put 'else';
MPRINT(MAKEVAROPTCODE):   string = 'if '!!strip(name)!!'<'!!strip(put(lowerlimit,best.)) !!' then '!!strip(newname)!!'='!!strip(put(replaceMin,best.))!!';';
MPRINT(MAKEVAROPTCODE):   put string;
MPRINT(MAKEVAROPTCODE):   end;
MPRINT(MAKEVAROPTCODE):   if UpperLimit ne . then do;
MPRINT(MAKEVAROPTCODE):   if ReplaceMethodUsed="COMPUTED" then replaceMax=UpperLimit;
MPRINT(MAKEVAROPTCODE):   if ReplaceMethodUsed="MANUAL" then replaceMax = ReplaceMaxUsed;
MPRINT(MAKEVAROPTCODE):   put 'else';
MPRINT(MAKEVAROPTCODE):   string = 'if '!!strip(name)!!'>'!!strip(put(upperlimit,best.)) !!' then '!!strip(newname)!!'='!!strip(put(replaceMax,best.))!!';';
MPRINT(MAKEVAROPTCODE):   put string;
MPRINT(MAKEVAROPTCODE):   end;
MPRINT(MAKEVAROPTCODE):   run;

NOTE: The file SFILE is:
      Filename=H:\746\Decision Tree test\Workspaces\EMWS1\Repl\REPLACECODE\REP_height.sas,
      RECFM=V,LRECL=32767,File Size (bytes)=0,
      Last Modified=April 05, 2021 13:09:44 o'cloc,
      Create Time=April 05, 2021 13:09:44 o'cloc

NOTE: 10 records were written to the file SFILE.
      The minimum record length was 3.
      The maximum record length was 52.
NOTE: There were 1 observations read from the data set EMWS1.REPL_LIMITS.
      WHERE NEWNAME='REP_height';
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
      

MPRINT(MAKEVAROPTCODE):   filename sfile;
NOTE: Fileref SFILE has been deassigned.
MPRINT(MAKEVAROPTCODE):   filename sfile "H:\746\Decision Tree test\Workspaces\EMWS1\Repl\REPLACECODE\REP_highway_mpg.sas";
MPRINT(MAKEVAROPTCODE):   data _null_;
MPRINT(MAKEVAROPTCODE):   length string $400;
MPRINT(MAKEVAROPTCODE):   set EMWS1.Repl_LIMITS;
MPRINT(MAKEVAROPTCODE):   where NEWNAME="REP_highway_mpg";
MPRINT(MAKEVAROPTCODE):   file sfile;
MPRINT(MAKEVAROPTCODE):   put '* ;';
MPRINT(MAKEVAROPTCODE):   string = '*Variable: '!!strip(name)!!';';
MPRINT(MAKEVAROPTCODE):   put string;
MPRINT(MAKEVAROPTCODE):   put '* ;';
MPRINT(MAKEVAROPTCODE):   if label eq '' then string = 'Label '!!strip(newname)!!"= 'Replacement: "!!strip(name)!!"';";
MPRINT(MAKEVAROPTCODE):   else string = 'Label '!!strip(newname)!!"= 'Replacement: "!!strip(tranwrd(label, "'", "''"))!!"';";
MPRINT(MAKEVAROPTCODE):   put string;
MPRINT(MAKEVAROPTCODE):   string = strip(newname)!!'= '!!strip(NAME)!!';';
MPRINT(MAKEVAROPTCODE):   put string;
MPRINT(MAKEVAROPTCODE):   replacemin = .;
MPRINT(MAKEVAROPTCODE):   string = 'if '!!strip(name)!!' eq . then '!!strip(newname)!!' = .;';
MPRINT(MAKEVAROPTCODE):   put string;
MPRINT(MAKEVAROPTCODE):   if LowerLimit ne . then do;
MPRINT(MAKEVAROPTCODE):   if ReplaceMethodUsed="COMPUTED" then replaceMin=LowerLimit;
MPRINT(MAKEVAROPTCODE):   if ReplaceMethodUsed="MANUAL" then replaceMin = ReplaceMinUsed;
MPRINT(MAKEVAROPTCODE):   put 'else';
MPRINT(MAKEVAROPTCODE):   string = 'if '!!strip(name)!!'<'!!strip(put(lowerlimit,best.)) !!' then '!!strip(newname)!!'='!!strip(put(replaceMin,best.))!!';';
MPRINT(MAKEVAROPTCODE):   put string;
MPRINT(MAKEVAROPTCODE):   end;
MPRINT(MAKEVAROPTCODE):   if UpperLimit ne . then do;
MPRINT(MAKEVAROPTCODE):   if ReplaceMethodUsed="COMPUTED" then replaceMax=UpperLimit;
MPRINT(MAKEVAROPTCODE):   if ReplaceMethodUsed="MANUAL" then replaceMax = ReplaceMaxUsed;
MPRINT(MAKEVAROPTCODE):   put 'else';
MPRINT(MAKEVAROPTCODE):   string = 'if '!!strip(name)!!'>'!!strip(put(upperlimit,best.)) !!' then '!!strip(newname)!!'='!!strip(put(replaceMax,best.))!!';';
MPRINT(MAKEVAROPTCODE):   put string;
MPRINT(MAKEVAROPTCODE):   end;
MPRINT(MAKEVAROPTCODE):   run;

NOTE: The file SFILE is:
      Filename=H:\746\Decision Tree test\Workspaces\EMWS1\Repl\REPLACECODE\REP_highway_mpg.sas,
      RECFM=V,LRECL=32767,File Size (bytes)=0,
      Last Modified=April 05, 2021 13:09:44 o'cloc,
      Create Time=April 05, 2021 13:09:44 o'cloc

NOTE: 10 records were written to the file SFILE.
      The minimum record length was 3.
      The maximum record length was 62.
NOTE: There were 1 observations read from the data set EMWS1.REPL_LIMITS.
      WHERE NEWNAME='REP_highway_mpg';
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.03 seconds
      

MPRINT(MAKEVAROPTCODE):   filename sfile;
NOTE: Fileref SFILE has been deassigned.
MPRINT(MAKEVAROPTCODE):   filename sfile "H:\746\Decision Tree test\Workspaces\EMWS1\Repl\REPLACECODE\REP_horsepower.sas";
MPRINT(MAKEVAROPTCODE):   data _null_;
MPRINT(MAKEVAROPTCODE):   length string $400;
MPRINT(MAKEVAROPTCODE):   set EMWS1.Repl_LIMITS;
MPRINT(MAKEVAROPTCODE):   where NEWNAME="REP_horsepower";
MPRINT(MAKEVAROPTCODE):   file sfile;
MPRINT(MAKEVAROPTCODE):   put '* ;';
MPRINT(MAKEVAROPTCODE):   string = '*Variable: '!!strip(name)!!';';
MPRINT(MAKEVAROPTCODE):   put string;
MPRINT(MAKEVAROPTCODE):   put '* ;';
MPRINT(MAKEVAROPTCODE):   if label eq '' then string = 'Label '!!strip(newname)!!"= 'Replacement: "!!strip(name)!!"';";
MPRINT(MAKEVAROPTCODE):   else string = 'Label '!!strip(newname)!!"= 'Replacement: "!!strip(tranwrd(label, "'", "''"))!!"';";
MPRINT(MAKEVAROPTCODE):   put string;
MPRINT(MAKEVAROPTCODE):   string = strip(newname)!!'= '!!strip(NAME)!!';';
MPRINT(MAKEVAROPTCODE):   put string;
MPRINT(MAKEVAROPTCODE):   replacemin = .;
MPRINT(MAKEVAROPTCODE):   string = 'if '!!strip(name)!!' eq . then '!!strip(newname)!!' = .;';
MPRINT(MAKEVAROPTCODE):   put string;
MPRINT(MAKEVAROPTCODE):   if LowerLimit ne . then do;
MPRINT(MAKEVAROPTCODE):   if ReplaceMethodUsed="COMPUTED" then replaceMin=LowerLimit;
MPRINT(MAKEVAROPTCODE):   if ReplaceMethodUsed="MANUAL" then replaceMin = ReplaceMinUsed;
MPRINT(MAKEVAROPTCODE):   put 'else';
MPRINT(MAKEVAROPTCODE):   string = 'if '!!strip(name)!!'<'!!strip(put(lowerlimit,best.)) !!' then '!!strip(newname)!!'='!!strip(put(replaceMin,best.))!!';';
MPRINT(MAKEVAROPTCODE):   put string;
MPRINT(MAKEVAROPTCODE):   end;
MPRINT(MAKEVAROPTCODE):   if UpperLimit ne . then do;
MPRINT(MAKEVAROPTCODE):   if ReplaceMethodUsed="COMPUTED" then replaceMax=UpperLimit;
MPRINT(MAKEVAROPTCODE):   if ReplaceMethodUsed="MANUAL" then replaceMax = ReplaceMaxUsed;
MPRINT(MAKEVAROPTCODE):   put 'else';
MPRINT(MAKEVAROPTCODE):   string = 'if '!!strip(name)!!'>'!!strip(put(upperlimit,best.)) !!' then '!!strip(newname)!!'='!!strip(put(replaceMax,best.))!!';';
MPRINT(MAKEVAROPTCODE):   put string;
MPRINT(MAKEVAROPTCODE):   end;
MPRINT(MAKEVAROPTCODE):   run;

NOTE: The file SFILE is:
      Filename=H:\746\Decision Tree test\Workspaces\EMWS1\Repl\REPLACECODE\REP_horsepower.sas,
      RECFM=V,LRECL=32767,File Size (bytes)=0,
      Last Modified=April 05, 2021 13:09:44 o'cloc,
      Create Time=April 05, 2021 13:09:44 o'cloc

NOTE: 10 records were written to the file SFILE.
      The minimum record length was 3.
      The maximum record length was 60.
NOTE: There were 1 observations read from the data set EMWS1.REPL_LIMITS.
      WHERE NEWNAME='REP_horsepower';
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
      

MPRINT(MAKEVAROPTCODE):   filename sfile;
NOTE: Fileref SFILE has been deassigned.
MPRINT(MAKEVAROPTCODE):   filename sfile "H:\746\Decision Tree test\Workspaces\EMWS1\Repl\REPLACECODE\REP_length.sas";
MPRINT(MAKEVAROPTCODE):   data _null_;
MPRINT(MAKEVAROPTCODE):   length string $400;
MPRINT(MAKEVAROPTCODE):   set EMWS1.Repl_LIMITS;
MPRINT(MAKEVAROPTCODE):   where NEWNAME="REP_length";
MPRINT(MAKEVAROPTCODE):   file sfile;
MPRINT(MAKEVAROPTCODE):   put '* ;';
MPRINT(MAKEVAROPTCODE):   string = '*Variable: '!!strip(name)!!';';
MPRINT(MAKEVAROPTCODE):   put string;
MPRINT(MAKEVAROPTCODE):   put '* ;';
MPRINT(MAKEVAROPTCODE):   if label eq '' then string = 'Label '!!strip(newname)!!"= 'Replacement: "!!strip(name)!!"';";
MPRINT(MAKEVAROPTCODE):   else string = 'Label '!!strip(newname)!!"= 'Replacement: "!!strip(tranwrd(label, "'", "''"))!!"';";
MPRINT(MAKEVAROPTCODE):   put string;
MPRINT(MAKEVAROPTCODE):   string = strip(newname)!!'= '!!strip(NAME)!!';';
MPRINT(MAKEVAROPTCODE):   put string;
MPRINT(MAKEVAROPTCODE):   replacemin = .;
MPRINT(MAKEVAROPTCODE):   string = 'if '!!strip(name)!!' eq . then '!!strip(newname)!!' = .;';
MPRINT(MAKEVAROPTCODE):   put string;
MPRINT(MAKEVAROPTCODE):   if LowerLimit ne . then do;
MPRINT(MAKEVAROPTCODE):   if ReplaceMethodUsed="COMPUTED" then replaceMin=LowerLimit;
MPRINT(MAKEVAROPTCODE):   if ReplaceMethodUsed="MANUAL" then replaceMin = ReplaceMinUsed;
MPRINT(MAKEVAROPTCODE):   put 'else';
MPRINT(MAKEVAROPTCODE):   string = 'if '!!strip(name)!!'<'!!strip(put(lowerlimit,best.)) !!' then '!!strip(newname)!!'='!!strip(put(replaceMin,best.))!!';';
MPRINT(MAKEVAROPTCODE):   put string;
MPRINT(MAKEVAROPTCODE):   end;
MPRINT(MAKEVAROPTCODE):   if UpperLimit ne . then do;
MPRINT(MAKEVAROPTCODE):   if ReplaceMethodUsed="COMPUTED" then replaceMax=UpperLimit;
MPRINT(MAKEVAROPTCODE):   if ReplaceMethodUsed="MANUAL" then replaceMax = ReplaceMaxUsed;
MPRINT(MAKEVAROPTCODE):   put 'else';
MPRINT(MAKEVAROPTCODE):   string = 'if '!!strip(name)!!'>'!!strip(put(upperlimit,best.)) !!' then '!!strip(newname)!!'='!!strip(put(replaceMax,best.))!!';';
MPRINT(MAKEVAROPTCODE):   put string;
MPRINT(MAKEVAROPTCODE):   end;
MPRINT(MAKEVAROPTCODE):   run;

NOTE: The file SFILE is:
      Filename=H:\746\Decision Tree test\Workspaces\EMWS1\Repl\REPLACECODE\REP_length.sas,
      RECFM=V,LRECL=32767,File Size (bytes)=0,
      Last Modified=April 05, 2021 13:09:44 o'cloc,
      Create Time=April 05, 2021 13:09:44 o'cloc

NOTE: 10 records were written to the file SFILE.
      The minimum record length was 3.
      The maximum record length was 52.
NOTE: There were 1 observations read from the data set EMWS1.REPL_LIMITS.
      WHERE NEWNAME='REP_length';
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
      

MPRINT(MAKEVAROPTCODE):   filename sfile;
NOTE: Fileref SFILE has been deassigned.
MPRINT(MAKEVAROPTCODE):   filename sfile "H:\746\Decision Tree test\Workspaces\EMWS1\Repl\REPLACECODE\REP_peak_rpm.sas";
MPRINT(MAKEVAROPTCODE):   data _null_;
MPRINT(MAKEVAROPTCODE):   length string $400;
MPRINT(MAKEVAROPTCODE):   set EMWS1.Repl_LIMITS;
MPRINT(MAKEVAROPTCODE):   where NEWNAME="REP_peak_rpm";
MPRINT(MAKEVAROPTCODE):   file sfile;
MPRINT(MAKEVAROPTCODE):   put '* ;';
MPRINT(MAKEVAROPTCODE):   string = '*Variable: '!!strip(name)!!';';
MPRINT(MAKEVAROPTCODE):   put string;
MPRINT(MAKEVAROPTCODE):   put '* ;';
MPRINT(MAKEVAROPTCODE):   if label eq '' then string = 'Label '!!strip(newname)!!"= 'Replacement: "!!strip(name)!!"';";
MPRINT(MAKEVAROPTCODE):   else string = 'Label '!!strip(newname)!!"= 'Replacement: "!!strip(tranwrd(label, "'", "''"))!!"';";
MPRINT(MAKEVAROPTCODE):   put string;
MPRINT(MAKEVAROPTCODE):   string = strip(newname)!!'= '!!strip(NAME)!!';';
MPRINT(MAKEVAROPTCODE):   put string;
MPRINT(MAKEVAROPTCODE):   replacemin = .;
MPRINT(MAKEVAROPTCODE):   string = 'if '!!strip(name)!!' eq . then '!!strip(newname)!!' = .;';
MPRINT(MAKEVAROPTCODE):   put string;
MPRINT(MAKEVAROPTCODE):   if LowerLimit ne . then do;
MPRINT(MAKEVAROPTCODE):   if ReplaceMethodUsed="COMPUTED" then replaceMin=LowerLimit;
MPRINT(MAKEVAROPTCODE):   if ReplaceMethodUsed="MANUAL" then replaceMin = ReplaceMinUsed;
MPRINT(MAKEVAROPTCODE):   put 'else';
MPRINT(MAKEVAROPTCODE):   string = 'if '!!strip(name)!!'<'!!strip(put(lowerlimit,best.)) !!' then '!!strip(newname)!!'='!!strip(put(replaceMin,best.))!!';';
MPRINT(MAKEVAROPTCODE):   put string;
MPRINT(MAKEVAROPTCODE):   end;
MPRINT(MAKEVAROPTCODE):   if UpperLimit ne . then do;
MPRINT(MAKEVAROPTCODE):   if ReplaceMethodUsed="COMPUTED" then replaceMax=UpperLimit;
MPRINT(MAKEVAROPTCODE):   if ReplaceMethodUsed="MANUAL" then replaceMax = ReplaceMaxUsed;
MPRINT(MAKEVAROPTCODE):   put 'else';
MPRINT(MAKEVAROPTCODE):   string = 'if '!!strip(name)!!'>'!!strip(put(upperlimit,best.)) !!' then '!!strip(newname)!!'='!!strip(put(replaceMax,best.))!!';';
MPRINT(MAKEVAROPTCODE):   put string;
MPRINT(MAKEVAROPTCODE):   end;
MPRINT(MAKEVAROPTCODE):   run;

NOTE: The file SFILE is:
      Filename=H:\746\Decision Tree test\Workspaces\EMWS1\Repl\REPLACECODE\REP_peak_rpm.sas,
      RECFM=V,LRECL=32767,File Size (bytes)=0,
      Last Modified=April 05, 2021 13:09:44 o'cloc,
      Create Time=April 05, 2021 13:09:44 o'cloc

NOTE: 10 records were written to the file SFILE.
      The minimum record length was 3.
      The maximum record length was 56.
NOTE: There were 1 observations read from the data set EMWS1.REPL_LIMITS.
      WHERE NEWNAME='REP_peak_rpm';
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.03 seconds
      

MPRINT(MAKEVAROPTCODE):   filename sfile;
NOTE: Fileref SFILE has been deassigned.
MPRINT(MAKEVAROPTCODE):   filename sfile "H:\746\Decision Tree test\Workspaces\EMWS1\Repl\REPLACECODE\REP_wheel_base.sas";
MPRINT(MAKEVAROPTCODE):   data _null_;
MPRINT(MAKEVAROPTCODE):   length string $400;
MPRINT(MAKEVAROPTCODE):   set EMWS1.Repl_LIMITS;
MPRINT(MAKEVAROPTCODE):   where NEWNAME="REP_wheel_base";
MPRINT(MAKEVAROPTCODE):   file sfile;
MPRINT(MAKEVAROPTCODE):   put '* ;';
MPRINT(MAKEVAROPTCODE):   string = '*Variable: '!!strip(name)!!';';
MPRINT(MAKEVAROPTCODE):   put string;
MPRINT(MAKEVAROPTCODE):   put '* ;';
MPRINT(MAKEVAROPTCODE):   if label eq '' then string = 'Label '!!strip(newname)!!"= 'Replacement: "!!strip(name)!!"';";
MPRINT(MAKEVAROPTCODE):   else string = 'Label '!!strip(newname)!!"= 'Replacement: "!!strip(tranwrd(label, "'", "''"))!!"';";
MPRINT(MAKEVAROPTCODE):   put string;
MPRINT(MAKEVAROPTCODE):   string = strip(newname)!!'= '!!strip(NAME)!!';';
MPRINT(MAKEVAROPTCODE):   put string;
MPRINT(MAKEVAROPTCODE):   replacemin = .;
MPRINT(MAKEVAROPTCODE):   string = 'if '!!strip(name)!!' eq . then '!!strip(newname)!!' = .;';
MPRINT(MAKEVAROPTCODE):   put string;
MPRINT(MAKEVAROPTCODE):   if LowerLimit ne . then do;
MPRINT(MAKEVAROPTCODE):   if ReplaceMethodUsed="COMPUTED" then replaceMin=LowerLimit;
MPRINT(MAKEVAROPTCODE):   if ReplaceMethodUsed="MANUAL" then replaceMin = ReplaceMinUsed;
MPRINT(MAKEVAROPTCODE):   put 'else';
MPRINT(MAKEVAROPTCODE):   string = 'if '!!strip(name)!!'<'!!strip(put(lowerlimit,best.)) !!' then '!!strip(newname)!!'='!!strip(put(replaceMin,best.))!!';';
MPRINT(MAKEVAROPTCODE):   put string;
MPRINT(MAKEVAROPTCODE):   end;
MPRINT(MAKEVAROPTCODE):   if UpperLimit ne . then do;
MPRINT(MAKEVAROPTCODE):   if ReplaceMethodUsed="COMPUTED" then replaceMax=UpperLimit;
MPRINT(MAKEVAROPTCODE):   if ReplaceMethodUsed="MANUAL" then replaceMax = ReplaceMaxUsed;
MPRINT(MAKEVAROPTCODE):   put 'else';
MPRINT(MAKEVAROPTCODE):   string = 'if '!!strip(name)!!'>'!!strip(put(upperlimit,best.)) !!' then '!!strip(newname)!!'='!!strip(put(replaceMax,best.))!!';';
MPRINT(MAKEVAROPTCODE):   put string;
MPRINT(MAKEVAROPTCODE):   end;
MPRINT(MAKEVAROPTCODE):   run;

NOTE: The file SFILE is:
      Filename=H:\746\Decision Tree test\Workspaces\EMWS1\Repl\REPLACECODE\REP_wheel_base.sas,
      RECFM=V,LRECL=32767,File Size (bytes)=0,
      Last Modified=April 05, 2021 13:09:44 o'cloc,
      Create Time=April 05, 2021 13:09:44 o'cloc

NOTE: 10 records were written to the file SFILE.
      The minimum record length was 3.
      The maximum record length was 60.
NOTE: There were 1 observations read from the data set EMWS1.REPL_LIMITS.
      WHERE NEWNAME='REP_wheel_base';
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
      

MPRINT(MAKEVAROPTCODE):   filename sfile;
NOTE: Fileref SFILE has been deassigned.
MPRINT(MAKEVAROPTCODE):   filename sfile "H:\746\Decision Tree test\Workspaces\EMWS1\Repl\REPLACECODE\REP_width.sas";
MPRINT(MAKEVAROPTCODE):   data _null_;
MPRINT(MAKEVAROPTCODE):   length string $400;
MPRINT(MAKEVAROPTCODE):   set EMWS1.Repl_LIMITS;
MPRINT(MAKEVAROPTCODE):   where NEWNAME="REP_width";
MPRINT(MAKEVAROPTCODE):   file sfile;
MPRINT(MAKEVAROPTCODE):   put '* ;';
MPRINT(MAKEVAROPTCODE):   string = '*Variable: '!!strip(name)!!';';
MPRINT(MAKEVAROPTCODE):   put string;
MPRINT(MAKEVAROPTCODE):   put '* ;';
MPRINT(MAKEVAROPTCODE):   if label eq '' then string = 'Label '!!strip(newname)!!"= 'Replacement: "!!strip(name)!!"';";
MPRINT(MAKEVAROPTCODE):   else string = 'Label '!!strip(newname)!!"= 'Replacement: "!!strip(tranwrd(label, "'", "''"))!!"';";
MPRINT(MAKEVAROPTCODE):   put string;
MPRINT(MAKEVAROPTCODE):   string = strip(newname)!!'= '!!strip(NAME)!!';';
MPRINT(MAKEVAROPTCODE):   put string;
MPRINT(MAKEVAROPTCODE):   replacemin = .;
MPRINT(MAKEVAROPTCODE):   string = 'if '!!strip(name)!!' eq . then '!!strip(newname)!!' = .;';
MPRINT(MAKEVAROPTCODE):   put string;
MPRINT(MAKEVAROPTCODE):   if LowerLimit ne . then do;
MPRINT(MAKEVAROPTCODE):   if ReplaceMethodUsed="COMPUTED" then replaceMin=LowerLimit;
MPRINT(MAKEVAROPTCODE):   if ReplaceMethodUsed="MANUAL" then replaceMin = ReplaceMinUsed;
MPRINT(MAKEVAROPTCODE):   put 'else';
MPRINT(MAKEVAROPTCODE):   string = 'if '!!strip(name)!!'<'!!strip(put(lowerlimit,best.)) !!' then '!!strip(newname)!!'='!!strip(put(replaceMin,best.))!!';';
MPRINT(MAKEVAROPTCODE):   put string;
MPRINT(MAKEVAROPTCODE):   end;
MPRINT(MAKEVAROPTCODE):   if UpperLimit ne . then do;
MPRINT(MAKEVAROPTCODE):   if ReplaceMethodUsed="COMPUTED" then replaceMax=UpperLimit;
MPRINT(MAKEVAROPTCODE):   if ReplaceMethodUsed="MANUAL" then replaceMax = ReplaceMaxUsed;
MPRINT(MAKEVAROPTCODE):   put 'else';
MPRINT(MAKEVAROPTCODE):   string = 'if '!!strip(name)!!'>'!!strip(put(upperlimit,best.)) !!' then '!!strip(newname)!!'='!!strip(put(replaceMax,best.))!!';';
MPRINT(MAKEVAROPTCODE):   put string;
MPRINT(MAKEVAROPTCODE):   end;
MPRINT(MAKEVAROPTCODE):   run;

NOTE: The file SFILE is:
      Filename=H:\746\Decision Tree test\Workspaces\EMWS1\Repl\REPLACECODE\REP_width.sas,
      RECFM=V,LRECL=32767,File Size (bytes)=0,
      Last Modified=April 05, 2021 13:09:44 o'cloc,
      Create Time=April 05, 2021 13:09:44 o'cloc

NOTE: 10 records were written to the file SFILE.
      The minimum record length was 3.
      The maximum record length was 50.
NOTE: There were 1 observations read from the data set EMWS1.REPL_LIMITS.
      WHERE NEWNAME='REP_width';
NOTE: DATA statement used (Total process time):
      real time           0.02 seconds
      cpu time            0.00 seconds
      

MPRINT(MAKEVAROPTCODE):   filename sfile;
NOTE: Fileref SFILE has been deassigned.
MPRINT(SCORE):  ;
MPRINT(MAKEVARDELTACODE):   filename _F1 "H:\746\Decision Tree test\Workspaces\EMWS1\Repl\CDELTA_TRAIN.sas";
MPRINT(MAKEVARDELTACODE):   data _null_;
MPRINT(MAKEVARDELTACODE):   set EMWS1.Repl_LIMITS end=eof;
MPRINT(MAKEVARDELTACODE):   length string $400;
MPRINT(MAKEVARDELTACODE):   file _F1;
MPRINT(MAKEVARDELTACODE):   string = 'if NAME="'!!strip(NAME)!!'" then do;';
MPRINT(MAKEVARDELTACODE):   put string;
MPRINT(MAKEVARDELTACODE):   string = '   ROLE="REJECTED";';
MPRINT(MAKEVARDELTACODE):   put string;
MPRINT(MAKEVARDELTACODE):   string = '   COMMENT= "Replaced by '!!"Repl"!!'";';
MPRINT(MAKEVARDELTACODE):   put string;
MPRINT(MAKEVARDELTACODE):   string = 'end;';
MPRINT(MAKEVARDELTACODE):   put string;
MPRINT(MAKEVARDELTACODE):   put 'else';
MPRINT(MAKEVARDELTACODE):   string = '   if NAME="'!!strip(NEWNAME)!!'" then do;';
MPRINT(MAKEVARDELTACODE):   put string;
MPRINT(MAKEVARDELTACODE):   string = '      ROLE="'!!strip(ROLE)!!'";';
MPRINT(MAKEVARDELTACODE):   put string;
MPRINT(MAKEVARDELTACODE):   string = '      LEVEL="'!!strip(LEVEL)!!'";';
MPRINT(MAKEVARDELTACODE):   put string;
MPRINT(MAKEVARDELTACODE):   put 'end;';
MPRINT(MAKEVARDELTACODE):   if ^eof then put 'else';
MPRINT(MAKEVARDELTACODE):   run;

NOTE: The file _F1 is:
      Filename=H:\746\Decision Tree test\Workspaces\EMWS1\Repl\CDELTA_TRAIN.sas,
      RECFM=V,LRECL=32767,File Size (bytes)=0,
      Last Modified=April 05, 2021 13:09:44 o'cloc,
      Create Time=April 05, 2021 13:09:44 o'cloc

NOTE: 139 records were written to the file _F1.
      The minimum record length was 4.
      The maximum record length was 40.
NOTE: There were 14 observations read from the data set EMWS1.REPL_LIMITS.
NOTE: DATA statement used (Total process time):
      real time           0.02 seconds
      cpu time            0.00 seconds
      

MPRINT(MAKEVARDELTACODE):   filename _F1;
NOTE: Fileref _F1 has been deassigned.
MPRINT(SCORE):  ;
MPRINT(SCORE):   proc print data=EMWS1.Repl_LIMITS label noobs;
MPRINT(SCORE):   var Name newname lowerLimit REPLACEMINUSED UpperLimit REPLACEMAXUSED;
MPRINT(SCORE):   label REPLACEMINUSED = "Lower Replacement Value" REPLACEMAXUSED = "Upper Replacement Value";
MPRINT(SCORE):   title9 ' ';
MPRINT(SCORE):   title10 "Limits and Replacement Values for Interval Variables";
MPRINT(SCORE):   run;
NOTE: There were 14 observations read from the data set EMWS1.REPL_LIMITS.
NOTE: The PROCEDURE PRINT printed page 13.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
      

MPRINT(SCORE):   title10;
MPRINT(EM_REGISTER):   data WORK.EM_USER_KEY;
MPRINT(EM_REGISTER):   set WORK.EM_USER_KEY end=eof;
MPRINT(EM_REGISTER):   output;
MPRINT(EM_REGISTER):   if eof then do;
MPRINT(EM_REGISTER):   key = upcase("REPLACECODE");
MPRINT(EM_REGISTER):   type = upcase("FOLDER");
MPRINT(EM_REGISTER):   file = "REPLACECODE";
MPRINT(EM_REGISTER):   folder = "";
MPRINT(EM_REGISTER):   extension = "";
MPRINT(EM_REGISTER):   AUTODELETE = "Y";
MPRINT(EM_REGISTER):   property = "N";
MPRINT(EM_REGISTER):   action = "";
MPRINT(EM_REGISTER):   output;
MPRINT(EM_REGISTER):   end;
MPRINT(EM_REGISTER):   run;

NOTE: There were 1 observations read from the data set WORK.EM_USER_KEY.
NOTE: The data set WORK.EM_USER_KEY has 2 observations and 8 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
      

MPRINT(MAKECLASSSCORECODE):  ;
MPRINT(MAKENEWVARCODE):   filename _F1 "H:\746\Decision Tree test\Workspaces\EMWS1\Repl\EMFLOWSCORE.sas" MOD;
MPRINT(MAKENEWVARCODE):   data _null_;
MPRINT(MAKENEWVARCODE):   length string $400;
MPRINT(MAKENEWVARCODE):   set EMWS1.Repl_CLASSINFO end=eof;
MPRINT(MAKENEWVARCODE):   file _F1;
MPRINT(MAKENEWVARCODE):   if _N_=1 then do;
MPRINT(MAKENEWVARCODE):   put '   ';
MPRINT(MAKENEWVARCODE):   put '* ;';
MPRINT(MAKENEWVARCODE):   put '* Defining New Variables;';
MPRINT(MAKENEWVARCODE):   put '* ;';
MPRINT(MAKENEWVARCODE):   end;
MPRINT(MAKENEWVARCODE):   if type eq 'C' then do;
MPRINT(MAKENEWVARCODE):   string = 'Length '!!strip(newname)!!' $'!!strip(put(length,BEST12.))!!';';
MPRINT(MAKENEWVARCODE):   put string;
MPRINT(MAKENEWVARCODE):   end;
MPRINT(MAKENEWVARCODE):   if strip(label) = '' then label = name;
MPRINT(MAKENEWVARCODE):   string= 'Label '!!strip(newname)!!"='Replacement: "!!strip(tranwrd(label, "'","''"))!!"';";
MPRINT(MAKENEWVARCODE):   put string;
MPRINT(MAKENEWVARCODE):   if format ne '' then do;
MPRINT(MAKENEWVARCODE):   string ='format '!!strip(newname)!!' '!!strip(format)!!';';
MPRINT(MAKENEWVARCODE):   put string;
MPRINT(MAKENEWVARCODE):   end;
MPRINT(MAKENEWVARCODE):   string = strip(newname)!!'= '!!strip(NAME)!!';';
MPRINT(MAKENEWVARCODE):   put string;
MPRINT(MAKENEWVARCODE):   run;

NOTE: The file _F1 is:
      Filename=H:\746\Decision Tree test\Workspaces\EMWS1\Repl\EMFLOWSCORE.sas,
      RECFM=V,LRECL=32767,File Size (bytes)=4240,
      Last Modified=April 05, 2021 13:09:44 o'cloc,
      Create Time=April 05, 2021 13:09:44 o'cloc

NOTE: 0 records were written to the file _F1.
NOTE: There were 0 observations read from the data set EMWS1.REPL_CLASSINFO.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
      

MPRINT(MAKECLASSSCORECODE):  ;
MPRINT(MAKECLASSSCORECODE):   data _tempNewVars;
MPRINT(MAKECLASSSCORECODE):   set EMWS1.Repl_CLASSINFO;
MPRINT(MAKECLASSSCORECODE):   where ROLE ne 'TARGET';
MPRINT(MAKECLASSSCORECODE):   run;

NOTE: There were 0 observations read from the data set EMWS1.REPL_CLASSINFO.
      WHERE ROLE not = 'TARGET';
NOTE: The data set WORK._TEMPNEWVARS has 0 observations and 8 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(MAKENEWVARCODE):   filename _F1 "H:\746\Decision Tree test\Workspaces\EMWS1\Repl\EMPUBLISHSCORE.sas" MOD;
MPRINT(MAKENEWVARCODE):   data _null_;
MPRINT(MAKENEWVARCODE):   length string $400;
MPRINT(MAKENEWVARCODE):   set _tempNewVars end=eof;
MPRINT(MAKENEWVARCODE):   file _F1;
MPRINT(MAKENEWVARCODE):   if _N_=1 then do;
MPRINT(MAKENEWVARCODE):   put '   ';
MPRINT(MAKENEWVARCODE):   put '* ;';
MPRINT(MAKENEWVARCODE):   put '* Defining New Variables;';
MPRINT(MAKENEWVARCODE):   put '* ;';
MPRINT(MAKENEWVARCODE):   end;
MPRINT(MAKENEWVARCODE):   if type eq 'C' then do;
MPRINT(MAKENEWVARCODE):   string = 'Length '!!strip(newname)!!' $'!!strip(put(length,BEST12.))!!';';
MPRINT(MAKENEWVARCODE):   put string;
MPRINT(MAKENEWVARCODE):   end;
MPRINT(MAKENEWVARCODE):   if strip(label) = '' then label = name;
MPRINT(MAKENEWVARCODE):   string= 'Label '!!strip(newname)!!"='Replacement: "!!strip(tranwrd(label, "'","''"))!!"';";
MPRINT(MAKENEWVARCODE):   put string;
MPRINT(MAKENEWVARCODE):   if format ne '' then do;
MPRINT(MAKENEWVARCODE):   string ='format '!!strip(newname)!!' '!!strip(format)!!';';
MPRINT(MAKENEWVARCODE):   put string;
MPRINT(MAKENEWVARCODE):   end;
MPRINT(MAKENEWVARCODE):   string = strip(newname)!!'= '!!strip(NAME)!!';';
MPRINT(MAKENEWVARCODE):   put string;
MPRINT(MAKENEWVARCODE):   run;

NOTE: The file _F1 is:
      Filename=H:\746\Decision Tree test\Workspaces\EMWS1\Repl\EMPUBLISHSCORE.sas,
      RECFM=V,LRECL=32767,File Size (bytes)=4240,
      Last Modified=April 05, 2021 13:09:44 o'cloc,
      Create Time=April 05, 2021 13:09:44 o'cloc

NOTE: 0 records were written to the file _F1.
NOTE: There were 0 observations read from the data set WORK._TEMPNEWVARS.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
      

MPRINT(MAKECLASSSCORECODE):  ;
MPRINT(MAKENEWVAROPTCODE):   data _temp_;
MPRINT(MAKENEWVAROPTCODE):  set _tempNewVars;
MPRINT(MAKENEWVAROPTCODE):  run;

NOTE: There were 0 observations read from the data set WORK._TEMPNEWVARS.
NOTE: The data set WORK._TEMP_ has 0 observations and 8 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
      

MPRINT(MAKECLASSSCORECODE):  ;
MPRINT(MAKECLASSSCORECODE):   proc datasets lib=WORK nolist;
MPRINT(MAKECLASSSCORECODE):   delete _tempNewVars;
MPRINT(MAKECLASSSCORECODE):   run;
NOTE: Deleting WORK._TEMPNEWVARS (memtype=DATA).
MPRINT(MAKECLASSSCORECODE):   quit;
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
      

MPRINT(MAKECLASSSCORECODE):   data _temp;
MPRINT(MAKECLASSSCORECODE):   set CLASSTEMP;
MPRINT(MAKECLASSSCORECODE):   where ROLE ne 'TARGET' and LEVEL='_UNKNOWN_' and (REPLACE_VALUE ^in('', '_DEFAULT_') or (REPLACE_VALUE='_DEFAULT_' and UNKWOWNDEFAULT ne 'NONE'));
MPRINT(MAKECLASSSCORECODE):   keep NAME;
MPRINT(MAKECLASSSCORECODE):   run;

NOTE: There were 0 observations read from the data set WORK.CLASSTEMP.
      WHERE (ROLE not = 'TARGET') and (LEVEL='_UNKNOWN_') and (REPLACE_VALUE not in (' ', '_DEFAULT_') or ((REPLACE_VALUE='_DEFAULT_') and (UNKWOWNDEFAULT not = 'NONE')));
NOTE: The data set WORK._TEMP has 0 observations and 1 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(MAKECLASSSCORECODE):   data _temp;
MPRINT(MAKECLASSSCORECODE):   merge _temp(in=_a) CLASSTEMP EMWS1.Repl_CLASSINFO;
MPRINT(MAKECLASSSCORECODE):   by NAME;
MPRINT(MAKECLASSSCORECODE):   if _a then output;
MPRINT(MAKECLASSSCORECODE):   run;

NOTE: There were 0 observations read from the data set WORK._TEMP.
NOTE: There were 56 observations read from the data set WORK.CLASSTEMP.
NOTE: There were 0 observations read from the data set EMWS1.REPL_CLASSINFO.
NOTE: The data set WORK._TEMP has 0 observations and 17 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
      

MPRINT(MAKEUNKNOWNCODE):   filename _F1 "H:\746\Decision Tree test\Workspaces\EMWS1\Repl\EMPUBLISHSCORE.sas" MOD;
MPRINT(MAKEUNKNOWNCODE):   data _null_;
MPRINT(MAKEUNKNOWNCODE):   set _temp;
MPRINT(MAKEUNKNOWNCODE):   length string $400;
MPRINT(MAKEUNKNOWNCODE):   length newlevel replaceLevel $200;
MPRINT(MAKEUNKNOWNCODE):   retain string missingFlag;
MPRINT(MAKEUNKNOWNCODE):   file _F1;
MPRINT(MAKEUNKNOWNCODE):   by NAME;
MPRINT(MAKEUNKNOWNCODE):   if _N_=1 then do;
MPRINT(MAKEUNKNOWNCODE):   put '* ;';
MPRINT(MAKEUNKNOWNCODE):   put '* Replace Unknown Class Levels ;';
MPRINT(MAKEUNKNOWNCODE):   put '* ;';
MPRINT(MAKEUNKNOWNCODE):   put 'length _UFORMAT200 $200;';
MPRINT(MAKEUNKNOWNCODE):   put 'drop   _UFORMAT200;';
MPRINT(MAKEUNKNOWNCODE):   put '_UFORMAT200 = " ";';
MPRINT(MAKEUNKNOWNCODE):   end;
MPRINT(MAKEUNKNOWNCODE):   if first.name then do;
MPRINT(MAKEUNKNOWNCODE):   missingFlag = 0;
MPRINT(MAKEUNKNOWNCODE):   put '*;';
MPRINT(MAKEUNKNOWNCODE):   if format ne '' then do;
MPRINT(MAKEUNKNOWNCODE):   call symput('UFormatFlag', '1');
MPRINT(MAKEUNKNOWNCODE):   string = '_UFORMAT200 = '!!'strip(put('!!strip(NAME)!!','!!strip(format)!!'));';
MPRINT(MAKEUNKNOWNCODE):   put string;
MPRINT(MAKEUNKNOWNCODE):   put 'if ^(_UFORMAT200 in(';
MPRINT(MAKEUNKNOWNCODE):   end;
MPRINT(MAKEUNKNOWNCODE):   else do;
MPRINT(MAKEUNKNOWNCODE):   if type eq 'C' then do;
MPRINT(MAKEUNKNOWNCODE):   call symput('UFormatFlag', '1');
MPRINT(MAKEUNKNOWNCODE):   string = '_UFORMAT200 = '!!'strip('!!strip(NAME)!!');';
MPRINT(MAKEUNKNOWNCODE):   put string;
MPRINT(MAKEUNKNOWNCODE):   put 'if ^(_UFORMAT200 in(';
MPRINT(MAKEUNKNOWNCODE):   end;
MPRINT(MAKEUNKNOWNCODE):   else put 'if (';
MPRINT(MAKEUNKNOWNCODE):   end;
MPRINT(MAKEUNKNOWNCODE):   string='';
MPRINT(MAKEUNKNOWNCODE):   end;
MPRINT(MAKEUNKNOWNCODE):   if ^last.name and LEVEL ne '_UNKNOWN_' then do;
MPRINT(MAKEUNKNOWNCODE):   if format ne '' or type eq 'C' then do;
MPRINT(MAKEUNKNOWNCODE):   newlevel = tranwrd(strip(LEVEL),'"','""');
MPRINT(MAKEUNKNOWNCODE):   if strip(newLevel) = '' then missingFlag = 1;
MPRINT(MAKEUNKNOWNCODE):   if length(strip(newlevel))+length(strip(string))+4<80 then do;
MPRINT(MAKEUNKNOWNCODE):   if string='' then string = strip(string)!!' "'!!strip(newlevel)!!'" ';
MPRINT(MAKEUNKNOWNCODE):   else string = strip(string)!!', "'!!strip(newlevel)!!'" ';
MPRINT(MAKEUNKNOWNCODE):   end;
MPRINT(MAKEUNKNOWNCODE):   else do;
MPRINT(MAKEUNKNOWNCODE):   put string;
MPRINT(MAKEUNKNOWNCODE):   string =', "'!!tranwrd(strip(LEVEL),'"','""')!!'"';
MPRINT(MAKEUNKNOWNCODE):   end;
MPRINT(MAKEUNKNOWNCODE):   end;
MPRINT(MAKEUNKNOWNCODE):   else do;
MPRINT(MAKEUNKNOWNCODE):   string = strip(name)!!' ne '!!strip(level)!!' and ';
MPRINT(MAKEUNKNOWNCODE):   put string;
MPRINT(MAKEUNKNOWNCODE):   end;
MPRINT(MAKEUNKNOWNCODE):   newlevel = ' ';
MPRINT(MAKEUNKNOWNCODE):   end;
MPRINT(MAKEUNKNOWNCODE):   else do;
MPRINT(MAKEUNKNOWNCODE):   if format ne '' or type eq 'C' then do;
MPRINT(MAKEUNKNOWNCODE):   put string;
MPRINT(MAKEUNKNOWNCODE):   if ^missingFlag then string = ', "" )) then ';
MPRINT(MAKEUNKNOWNCODE):   else string = ')) then ';
MPRINT(MAKEUNKNOWNCODE):   end;
MPRINT(MAKEUNKNOWNCODE):   else string = strip(name)!!' ne . ) then ';
MPRINT(MAKEUNKNOWNCODE):   put string;
MPRINT(MAKEUNKNOWNCODE):   select(REPLACE_VALUE);
MPRINT(MAKEUNKNOWNCODE):   when('_MODE_') do;
MPRINT(MAKEUNKNOWNCODE):   if type eq 'C' then replaceLevel = NORMMODE;
MPRINT(MAKEUNKNOWNCODE):   else replaceLevel =strip(put(MODEN,BEST.));
MPRINT(MAKEUNKNOWNCODE):   end;
MPRINT(MAKEUNKNOWNCODE):   when('_MISSING_') do;
MPRINT(MAKEUNKNOWNCODE):   if type eq 'C' then replaceLevel = '';
MPRINT(MAKEUNKNOWNCODE):   else replaceLevel = '.';
MPRINT(MAKEUNKNOWNCODE):   end;
MPRINT(MAKEUNKNOWNCODE):   when('_DEFAULT_') do;
MPRINT(MAKEUNKNOWNCODE):   if type eq 'C' then replaceLevel = '';
MPRINT(MAKEUNKNOWNCODE):   else replaceLevel = '.';
MPRINT(MAKEUNKNOWNCODE):   end;
MPRINT(MAKEUNKNOWNCODE):   when('') do;
MPRINT(MAKEUNKNOWNCODE):   end;
MPRINT(MAKEUNKNOWNCODE):   otherwise do;
MPRINT(MAKEUNKNOWNCODE):   if type eq 'C' then replaceLevel= replace_Value;
MPRINT(MAKEUNKNOWNCODE):   else replaceLevel = replace_Value;
MPRINT(MAKEUNKNOWNCODE):   end;
MPRINT(MAKEUNKNOWNCODE):   end;
MPRINT(MAKEUNKNOWNCODE):   if type eq 'C' then do;
MPRINT(MAKEUNKNOWNCODE):   string = strip(newname)!!'= "'!!tranwrd(strip(replaceLevel),'"','""')!!'";';
MPRINT(MAKEUNKNOWNCODE):   end;
MPRINT(MAKEUNKNOWNCODE):   else do;
MPRINT(MAKEUNKNOWNCODE):   string = strip(newname)!!'= '!!strip(replaceLevel)!!';';
MPRINT(MAKEUNKNOWNCODE):   end;
MPRINT(MAKEUNKNOWNCODE):   put string;
MPRINT(MAKEUNKNOWNCODE):   end;
MPRINT(MAKEUNKNOWNCODE):   run;

NOTE: The file _F1 is:
      Filename=H:\746\Decision Tree test\Workspaces\EMWS1\Repl\EMPUBLISHSCORE.sas,
      RECFM=V,LRECL=32767,File Size (bytes)=4240,
      Last Modified=April 05, 2021 13:09:44 o'cloc,
      Create Time=April 05, 2021 13:09:44 o'cloc

NOTE: 0 records were written to the file _F1.
NOTE: There were 0 observations read from the data set WORK._TEMP.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(MAKEUNKNOWNCODE):   filename _F1;
NOTE: Fileref _F1 has been deassigned.
MPRINT(MAKECLASSSCORECODE):  ;
MPRINT(MAKECLASSSCORECODE):  ;
MPRINT(MAKECLASSSCORECODE):   proc datasets lib=work nolist;
MPRINT(MAKECLASSSCORECODE):   delete _temp;
MPRINT(MAKECLASSSCORECODE):   run;

NOTE: Deleting WORK._TEMP (memtype=DATA).
MPRINT(MAKECLASSSCORECODE):   quit;

NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

MPRINT(MAKECLASSSCORECODE):   data _temp;
MPRINT(MAKECLASSSCORECODE):   merge CLASSTEMP(in=_a where=( ROLE ne 'TARGET' and LEVEL ne '_UNKNOWN_' and (REPLACE_VALUE ^in('', '_DEFAULT_') or (REPLACE_VALUE='_DEFAULT_' and UNKWOWNDEFAULT ne 'NONE')) )) EMWS1.Repl_CLASSINFO;
MPRINT(MAKECLASSSCORECODE):   by NAME;
MPRINT(MAKECLASSSCORECODE):   if _a then output;
MPRINT(MAKECLASSSCORECODE):   run;

NOTE: There were 0 observations read from the data set WORK.CLASSTEMP.
      WHERE (ROLE not = 'TARGET') and (LEVEL not = '_UNKNOWN_') and (REPLACE_VALUE not in (' ', '_DEFAULT_') or ((REPLACE_VALUE='_DEFAULT_') and (UNKWOWNDEFAULT not = 'NONE')));
NOTE: There were 0 observations read from the data set EMWS1.REPL_CLASSINFO.
NOTE: The data set WORK._TEMP has 0 observations and 17 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

MPRINT(MAKEREPLACECODE):   filename _F1 "H:\746\Decision Tree test\Workspaces\EMWS1\Repl\EMPUBLISHSCORE.sas" MOD;
MPRINT(MAKEREPLACECODE):   data _null_;
MPRINT(MAKEREPLACECODE):   length string $400;
MPRINT(MAKEREPLACECODE):   set _temp end=eof;
MPRINT(MAKEREPLACECODE):   file _F1;
MPRINT(MAKEREPLACECODE):   by NAME;
MPRINT(MAKEREPLACECODE):   if _N_=1 then do;
MPRINT(MAKEREPLACECODE):   put '   ';
MPRINT(MAKEREPLACECODE):   put '* ;';
MPRINT(MAKEREPLACECODE):   put '* Replace Specific Class Levels ;';
MPRINT(MAKEREPLACECODE):   put '* ;';
MPRINT(MAKEREPLACECODE):   put 'length _UFormat200 $200;';
MPRINT(MAKEREPLACECODE):   put 'drop   _UFORMAT200;';
MPRINT(MAKEREPLACECODE):   put '_UFORMAT200 = " ";';
MPRINT(MAKEREPLACECODE):   end;
MPRINT(MAKEREPLACECODE):   if first.name then do;
MPRINT(MAKEREPLACECODE):   put '* ;';
MPRINT(MAKEREPLACECODE):   string = '* Variable: '!!strip(NAME)!!';';
MPRINT(MAKEREPLACECODE):   put string;
MPRINT(MAKEREPLACECODE):   put '* ;';
MPRINT(MAKEREPLACECODE):   if format ne '' then do;
MPRINT(MAKEREPLACECODE):   call symput('UFormatFlag', '1');
MPRINT(MAKEREPLACECODE):   string = "_UFORMAT200 = strip(";
MPRINT(MAKEREPLACECODE):   put string;
MPRINT(MAKEREPLACECODE):   string ='put('!!strip(NAME)!!','!!strip(format)!!'));';
MPRINT(MAKEREPLACECODE):   put string;
MPRINT(MAKEREPLACECODE):   end;
MPRINT(MAKEREPLACECODE):   else if type eq 'C' then do;
MPRINT(MAKEREPLACECODE):   call symput('UFormatFlag', '1');
MPRINT(MAKEREPLACECODE):   string = "_UFORMAT200 = strip("!!strip(NAME)!!');';
MPRINT(MAKEREPLACECODE):   put string;
MPRINT(MAKEREPLACECODE):   end;
MPRINT(MAKEREPLACECODE):   end;
MPRINT(MAKEREPLACECODE):   if ^first.name then put 'else';
MPRINT(MAKEREPLACECODE):   if format ne '' then do;
MPRINT(MAKEREPLACECODE):   string = tranwrd(strip(LEVEL),'"','""');
MPRINT(MAKEREPLACECODE):   string =' if _UFORMAT200 =  "'!!strip(string)!!'" then ';
MPRINT(MAKEREPLACECODE):   put string;
MPRINT(MAKEREPLACECODE):   end;
MPRINT(MAKEREPLACECODE):   else do;
MPRINT(MAKEREPLACECODE):   if type eq 'N' then do;
MPRINT(MAKEREPLACECODE):   string = 'if '!!strip(name)!!' = '!!strip(put(nraw, BEST.))!!' then ';
MPRINT(MAKEREPLACECODE):   put string;
MPRINT(MAKEREPLACECODE):   end;
MPRINT(MAKEREPLACECODE):   else do;
MPRINT(MAKEREPLACECODE):   string = tranwrd(strip(craw),'"','""');
MPRINT(MAKEREPLACECODE):   string = ' if _UFORMAT200 =  "'!!strip(string)!!'" then ';
MPRINT(MAKEREPLACECODE):   put string;
MPRINT(MAKEREPLACECODE):   end;
MPRINT(MAKEREPLACECODE):   end;
MPRINT(MAKEREPLACECODE):   string = strip(newname)!!'=';
MPRINT(MAKEREPLACECODE):   if type eq 'C' then do;
MPRINT(MAKEREPLACECODE):   if upcase(replace_value) eq '_MISSING_' or (upcase(replace_value) eq '_DEFAULT_' and (upcase(UNKWOWNDEFAULT)= 'MISSING')) then replace_Value ='';
MPRINT(MAKEREPLACECODE):   else if upcase(replace_value) eq '_MODE_' or (upcase(replace_value) eq '_DEFAULT_' and (upcase(UNKWOWNDEFAULT)= 'MODE')) then replace_Value =modec;
MPRINT(MAKEREPLACECODE):   string = strip(string)!!'"'!!tranwrd(strip(replace_Value),'"','""')!!'";';
MPRINT(MAKEREPLACECODE):   end;
MPRINT(MAKEREPLACECODE):   else do;
MPRINT(MAKEREPLACECODE):   if upcase(replace_value) eq '_MISSING_' or (upcase(replace_value) eq '_DEFAULT_' and (upcase(UNKWOWNDEFAULT) = 'MISSING')) then replace_Value ='.';
MPRINT(MAKEREPLACECODE):   else if upcase(replace_value) eq '_MODE_' or (upcase(replace_value) eq '_DEFAULT_' and (upcase(UNKWOWNDEFAULT) = 'MODE')) then replace_Value =strip(put(moden, BEST.));
MPRINT(MAKEREPLACECODE):   string = strip(string)!!''!!strip(replace_value)!!';';
MPRINT(MAKEREPLACECODE):   end;
MPRINT(MAKEREPLACECODE):   put string;
MPRINT(MAKEREPLACECODE):   run;

NOTE: The file _F1 is:
      Filename=H:\746\Decision Tree test\Workspaces\EMWS1\Repl\EMPUBLISHSCORE.sas,
      RECFM=V,LRECL=32767,File Size (bytes)=4240,
      Last Modified=April 05, 2021 13:09:44 o'cloc,
      Create Time=April 05, 2021 13:09:44 o'cloc

NOTE: 0 records were written to the file _F1.
NOTE: There were 0 observations read from the data set WORK._TEMP.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

MPRINT(MAKEREPLACECODE):   filename _F1;
NOTE: Fileref _F1 has been deassigned.
MPRINT(MAKECLASSSCORECODE):  ;
MPRINT(MAKECLASSSCORECODE):  ;
MPRINT(MAKECLASSSCORECODE):   data _temp;
MPRINT(MAKECLASSSCORECODE):   set CLASSTEMP;
MPRINT(MAKECLASSSCORECODE):   where LEVEL='_UNKNOWN_' and (REPLACE_VALUE ^in('', '_DEFAULT_') or (REPLACE_VALUE='_DEFAULT_' and UNKWOWNDEFAULT ne 'NONE'));
MPRINT(MAKECLASSSCORECODE):   keep NAME;
MPRINT(MAKECLASSSCORECODE):   run;

NOTE: There were 0 observations read from the data set WORK.CLASSTEMP.
      WHERE (LEVEL='_UNKNOWN_') and (REPLACE_VALUE not in (' ', '_DEFAULT_') or ((REPLACE_VALUE='_DEFAULT_') and (UNKWOWNDEFAULT not = 'NONE')));
NOTE: The data set WORK._TEMP has 0 observations and 1 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
      

MPRINT(MAKECLASSSCORECODE):   data _temp;
MPRINT(MAKECLASSSCORECODE):   merge _temp(in=_a) CLASSTEMP EMWS1.Repl_CLASSINFO;
MPRINT(MAKECLASSSCORECODE):   by NAME;
MPRINT(MAKECLASSSCORECODE):   if _a then output;
MPRINT(MAKECLASSSCORECODE):   run;

NOTE: There were 0 observations read from the data set WORK._TEMP.
NOTE: There were 56 observations read from the data set WORK.CLASSTEMP.
NOTE: There were 0 observations read from the data set EMWS1.REPL_CLASSINFO.
NOTE: The data set WORK._TEMP has 0 observations and 17 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
      

MPRINT(MAKEUNKNOWNCODE):   filename _F1 "H:\746\Decision Tree test\Workspaces\EMWS1\Repl\EMFLOWSCORE.sas" MOD;
MPRINT(MAKEUNKNOWNCODE):   data _null_;
MPRINT(MAKEUNKNOWNCODE):   set _temp;
MPRINT(MAKEUNKNOWNCODE):   length string $400;
MPRINT(MAKEUNKNOWNCODE):   length newlevel replaceLevel $200;
MPRINT(MAKEUNKNOWNCODE):   retain string missingFlag;
MPRINT(MAKEUNKNOWNCODE):   file _F1;
MPRINT(MAKEUNKNOWNCODE):   by NAME;
MPRINT(MAKEUNKNOWNCODE):   if _N_=1 then do;
MPRINT(MAKEUNKNOWNCODE):   put '* ;';
MPRINT(MAKEUNKNOWNCODE):   put '* Replace Unknown Class Levels ;';
MPRINT(MAKEUNKNOWNCODE):   put '* ;';
MPRINT(MAKEUNKNOWNCODE):   put 'length _UFORMAT200 $200;';
MPRINT(MAKEUNKNOWNCODE):   put 'drop   _UFORMAT200;';
MPRINT(MAKEUNKNOWNCODE):   put '_UFORMAT200 = " ";';
MPRINT(MAKEUNKNOWNCODE):   end;
MPRINT(MAKEUNKNOWNCODE):   if first.name then do;
MPRINT(MAKEUNKNOWNCODE):   missingFlag = 0;
MPRINT(MAKEUNKNOWNCODE):   put '*;';
MPRINT(MAKEUNKNOWNCODE):   if format ne '' then do;
MPRINT(MAKEUNKNOWNCODE):   call symput('UFormatFlag', '1');
MPRINT(MAKEUNKNOWNCODE):   string = '_UFORMAT200 = '!!'strip(put('!!strip(NAME)!!','!!strip(format)!!'));';
MPRINT(MAKEUNKNOWNCODE):   put string;
MPRINT(MAKEUNKNOWNCODE):   put 'if ^(_UFORMAT200 in(';
MPRINT(MAKEUNKNOWNCODE):   end;
MPRINT(MAKEUNKNOWNCODE):   else do;
MPRINT(MAKEUNKNOWNCODE):   if type eq 'C' then do;
MPRINT(MAKEUNKNOWNCODE):   call symput('UFormatFlag', '1');
MPRINT(MAKEUNKNOWNCODE):   string = '_UFORMAT200 = '!!'strip('!!strip(NAME)!!');';
MPRINT(MAKEUNKNOWNCODE):   put string;
MPRINT(MAKEUNKNOWNCODE):   put 'if ^(_UFORMAT200 in(';
MPRINT(MAKEUNKNOWNCODE):   end;
MPRINT(MAKEUNKNOWNCODE):   else put 'if (';
MPRINT(MAKEUNKNOWNCODE):   end;
MPRINT(MAKEUNKNOWNCODE):   string='';
MPRINT(MAKEUNKNOWNCODE):   end;
MPRINT(MAKEUNKNOWNCODE):   if ^last.name and LEVEL ne '_UNKNOWN_' then do;
MPRINT(MAKEUNKNOWNCODE):   if format ne '' or type eq 'C' then do;
MPRINT(MAKEUNKNOWNCODE):   newlevel = tranwrd(strip(LEVEL),'"','""');
MPRINT(MAKEUNKNOWNCODE):   if strip(newLevel) = '' then missingFlag = 1;
MPRINT(MAKEUNKNOWNCODE):   if length(strip(newlevel))+length(strip(string))+4<80 then do;
MPRINT(MAKEUNKNOWNCODE):   if string='' then string = strip(string)!!' "'!!strip(newlevel)!!'" ';
MPRINT(MAKEUNKNOWNCODE):   else string = strip(string)!!', "'!!strip(newlevel)!!'" ';
MPRINT(MAKEUNKNOWNCODE):   end;
MPRINT(MAKEUNKNOWNCODE):   else do;
MPRINT(MAKEUNKNOWNCODE):   put string;
MPRINT(MAKEUNKNOWNCODE):   string =', "'!!tranwrd(strip(LEVEL),'"','""')!!'"';
MPRINT(MAKEUNKNOWNCODE):   end;
MPRINT(MAKEUNKNOWNCODE):   end;
MPRINT(MAKEUNKNOWNCODE):   else do;
MPRINT(MAKEUNKNOWNCODE):   string = strip(name)!!' ne '!!strip(level)!!' and ';
MPRINT(MAKEUNKNOWNCODE):   put string;
MPRINT(MAKEUNKNOWNCODE):   end;
MPRINT(MAKEUNKNOWNCODE):   newlevel = ' ';
MPRINT(MAKEUNKNOWNCODE):   end;
MPRINT(MAKEUNKNOWNCODE):   else do;
MPRINT(MAKEUNKNOWNCODE):   if format ne '' or type eq 'C' then do;
MPRINT(MAKEUNKNOWNCODE):   put string;
MPRINT(MAKEUNKNOWNCODE):   if ^missingFlag then string = ', "" )) then ';
MPRINT(MAKEUNKNOWNCODE):   else string = ')) then ';
MPRINT(MAKEUNKNOWNCODE):   end;
MPRINT(MAKEUNKNOWNCODE):   else string = strip(name)!!' ne . ) then ';
MPRINT(MAKEUNKNOWNCODE):   put string;
MPRINT(MAKEUNKNOWNCODE):   select(REPLACE_VALUE);
MPRINT(MAKEUNKNOWNCODE):   when('_MODE_') do;
MPRINT(MAKEUNKNOWNCODE):   if type eq 'C' then replaceLevel = NORMMODE;
MPRINT(MAKEUNKNOWNCODE):   else replaceLevel =strip(put(MODEN,BEST.));
MPRINT(MAKEUNKNOWNCODE):   end;
MPRINT(MAKEUNKNOWNCODE):   when('_MISSING_') do;
MPRINT(MAKEUNKNOWNCODE):   if type eq 'C' then replaceLevel = '';
MPRINT(MAKEUNKNOWNCODE):   else replaceLevel = '.';
MPRINT(MAKEUNKNOWNCODE):   end;
MPRINT(MAKEUNKNOWNCODE):   when('_DEFAULT_') do;
MPRINT(MAKEUNKNOWNCODE):   if type eq 'C' then replaceLevel = '';
MPRINT(MAKEUNKNOWNCODE):   else replaceLevel = '.';
MPRINT(MAKEUNKNOWNCODE):   end;
MPRINT(MAKEUNKNOWNCODE):   when('') do;
MPRINT(MAKEUNKNOWNCODE):   end;
MPRINT(MAKEUNKNOWNCODE):   otherwise do;
MPRINT(MAKEUNKNOWNCODE):   if type eq 'C' then replaceLevel= replace_Value;
MPRINT(MAKEUNKNOWNCODE):   else replaceLevel = replace_Value;
MPRINT(MAKEUNKNOWNCODE):   end;
MPRINT(MAKEUNKNOWNCODE):   end;
MPRINT(MAKEUNKNOWNCODE):   if type eq 'C' then do;
MPRINT(MAKEUNKNOWNCODE):   string = strip(newname)!!'= "'!!tranwrd(strip(replaceLevel),'"','""')!!'";';
MPRINT(MAKEUNKNOWNCODE):   end;
MPRINT(MAKEUNKNOWNCODE):   else do;
MPRINT(MAKEUNKNOWNCODE):   string = strip(newname)!!'= '!!strip(replaceLevel)!!';';
MPRINT(MAKEUNKNOWNCODE):   end;
MPRINT(MAKEUNKNOWNCODE):   put string;
MPRINT(MAKEUNKNOWNCODE):   end;
MPRINT(MAKEUNKNOWNCODE):   run;

NOTE: The file _F1 is:
      Filename=H:\746\Decision Tree test\Workspaces\EMWS1\Repl\EMFLOWSCORE.sas,
      RECFM=V,LRECL=32767,File Size (bytes)=4240,
      Last Modified=April 05, 2021 13:09:44 o'cloc,
      Create Time=April 05, 2021 13:09:44 o'cloc

NOTE: 0 records were written to the file _F1.
NOTE: There were 0 observations read from the data set WORK._TEMP.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
      

MPRINT(MAKEUNKNOWNCODE):   filename _F1;
NOTE: Fileref _F1 has been deassigned.
MPRINT(MAKECLASSSCORECODE):  ;
MPRINT(MAKECLASSSCORECODE):   data _temp;
MPRINT(MAKECLASSSCORECODE):   merge CLASSTEMP(in=_a where=(LEVEL ne '_UNKNOWN_' and (REPLACE_VALUE ^in('', '_DEFAULT_') or (REPLACE_VALUE='_DEFAULT_' and UNKWOWNDEFAULT ne 'NONE')) )) EMWS1.Repl_CLASSINFO;
MPRINT(MAKECLASSSCORECODE):   by NAME;
MPRINT(MAKECLASSSCORECODE):   if _a then output;
MPRINT(MAKECLASSSCORECODE):   run;

NOTE: There were 0 observations read from the data set WORK.CLASSTEMP.
      WHERE (LEVEL not = '_UNKNOWN_') and (REPLACE_VALUE not in (' ', '_DEFAULT_') or ((REPLACE_VALUE='_DEFAULT_') and (UNKWOWNDEFAULT not = 'NONE')));
NOTE: There were 0 observations read from the data set EMWS1.REPL_CLASSINFO.
NOTE: The data set WORK._TEMP has 0 observations and 17 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

MPRINT(MAKEREPLACECODE):   filename _F1 "H:\746\Decision Tree test\Workspaces\EMWS1\Repl\EMFLOWSCORE.sas" MOD;
MPRINT(MAKEREPLACECODE):   data _null_;
MPRINT(MAKEREPLACECODE):   length string $400;
MPRINT(MAKEREPLACECODE):   set _temp end=eof;
MPRINT(MAKEREPLACECODE):   file _F1;
MPRINT(MAKEREPLACECODE):   by NAME;
MPRINT(MAKEREPLACECODE):   if _N_=1 then do;
MPRINT(MAKEREPLACECODE):   put '   ';
MPRINT(MAKEREPLACECODE):   put '* ;';
MPRINT(MAKEREPLACECODE):   put '* Replace Specific Class Levels ;';
MPRINT(MAKEREPLACECODE):   put '* ;';
MPRINT(MAKEREPLACECODE):   put 'length _UFormat200 $200;';
MPRINT(MAKEREPLACECODE):   put 'drop   _UFORMAT200;';
MPRINT(MAKEREPLACECODE):   put '_UFORMAT200 = " ";';
MPRINT(MAKEREPLACECODE):   end;
MPRINT(MAKEREPLACECODE):   if first.name then do;
MPRINT(MAKEREPLACECODE):   put '* ;';
MPRINT(MAKEREPLACECODE):   string = '* Variable: '!!strip(NAME)!!';';
MPRINT(MAKEREPLACECODE):   put string;
MPRINT(MAKEREPLACECODE):   put '* ;';
MPRINT(MAKEREPLACECODE):   if format ne '' then do;
MPRINT(MAKEREPLACECODE):   call symput('UFormatFlag', '1');
MPRINT(MAKEREPLACECODE):   string = "_UFORMAT200 = strip(";
MPRINT(MAKEREPLACECODE):   put string;
MPRINT(MAKEREPLACECODE):   string ='put('!!strip(NAME)!!','!!strip(format)!!'));';
MPRINT(MAKEREPLACECODE):   put string;
MPRINT(MAKEREPLACECODE):   end;
MPRINT(MAKEREPLACECODE):   else if type eq 'C' then do;
MPRINT(MAKEREPLACECODE):   call symput('UFormatFlag', '1');
MPRINT(MAKEREPLACECODE):   string = "_UFORMAT200 = strip("!!strip(NAME)!!');';
MPRINT(MAKEREPLACECODE):   put string;
MPRINT(MAKEREPLACECODE):   end;
MPRINT(MAKEREPLACECODE):   end;
MPRINT(MAKEREPLACECODE):   if ^first.name then put 'else';
MPRINT(MAKEREPLACECODE):   if format ne '' then do;
MPRINT(MAKEREPLACECODE):   string = tranwrd(strip(LEVEL),'"','""');
MPRINT(MAKEREPLACECODE):   string =' if _UFORMAT200 =  "'!!strip(string)!!'" then ';
MPRINT(MAKEREPLACECODE):   put string;
MPRINT(MAKEREPLACECODE):   end;
MPRINT(MAKEREPLACECODE):   else do;
MPRINT(MAKEREPLACECODE):   if type eq 'N' then do;
MPRINT(MAKEREPLACECODE):   string = 'if '!!strip(name)!!' = '!!strip(put(nraw, BEST.))!!' then ';
MPRINT(MAKEREPLACECODE):   put string;
MPRINT(MAKEREPLACECODE):   end;
MPRINT(MAKEREPLACECODE):   else do;
MPRINT(MAKEREPLACECODE):   string = tranwrd(strip(craw),'"','""');
MPRINT(MAKEREPLACECODE):   string = ' if _UFORMAT200 =  "'!!strip(string)!!'" then ';
MPRINT(MAKEREPLACECODE):   put string;
MPRINT(MAKEREPLACECODE):   end;
MPRINT(MAKEREPLACECODE):   end;
MPRINT(MAKEREPLACECODE):   string = strip(newname)!!'=';
MPRINT(MAKEREPLACECODE):   if type eq 'C' then do;
MPRINT(MAKEREPLACECODE):   if upcase(replace_value) eq '_MISSING_' or (upcase(replace_value) eq '_DEFAULT_' and (upcase(UNKWOWNDEFAULT)= 'MISSING')) then replace_Value ='';
MPRINT(MAKEREPLACECODE):   else if upcase(replace_value) eq '_MODE_' or (upcase(replace_value) eq '_DEFAULT_' and (upcase(UNKWOWNDEFAULT)= 'MODE')) then replace_Value =modec;
MPRINT(MAKEREPLACECODE):   string = strip(string)!!'"'!!tranwrd(strip(replace_Value),'"','""')!!'";';
MPRINT(MAKEREPLACECODE):   end;
MPRINT(MAKEREPLACECODE):   else do;
MPRINT(MAKEREPLACECODE):   if upcase(replace_value) eq '_MISSING_' or (upcase(replace_value) eq '_DEFAULT_' and (upcase(UNKWOWNDEFAULT) = 'MISSING')) then replace_Value ='.';
MPRINT(MAKEREPLACECODE):   else if upcase(replace_value) eq '_MODE_' or (upcase(replace_value) eq '_DEFAULT_' and (upcase(UNKWOWNDEFAULT) = 'MODE')) then replace_Value =strip(put(moden, BEST.));
MPRINT(MAKEREPLACECODE):   string = strip(string)!!''!!strip(replace_value)!!';';
MPRINT(MAKEREPLACECODE):   end;
MPRINT(MAKEREPLACECODE):   put string;
MPRINT(MAKEREPLACECODE):   run;

NOTE: The file _F1 is:
      Filename=H:\746\Decision Tree test\Workspaces\EMWS1\Repl\EMFLOWSCORE.sas,
      RECFM=V,LRECL=32767,File Size (bytes)=4240,
      Last Modified=April 05, 2021 13:09:44 o'cloc,
      Create Time=April 05, 2021 13:09:44 o'cloc

NOTE: 0 records were written to the file _F1.
NOTE: There were 0 observations read from the data set WORK._TEMP.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
      

MPRINT(MAKEREPLACECODE):   filename _F1;
NOTE: Fileref _F1 has been deassigned.
MPRINT(MAKECLASSSCORECODE):  ;
MPRINT(SCORE):  ;
MPRINT(MAKECLASSDELTACODE):   filename _F1 "H:\746\Decision Tree test\Workspaces\EMWS1\Repl\CDELTA_TRAIN.sas" MOD;
MPRINT(MAKECLASSDELTACODE):   data _null_;
MPRINT(MAKECLASSDELTACODE):   set EMWS1.Repl_CLASSINFO end=eof;
MPRINT(MAKECLASSDELTACODE):   length string $400;
MPRINT(MAKECLASSDELTACODE):   file _F1;
MPRINT(MAKECLASSDELTACODE):   string = 'if NAME="'!!strip(NAME)!!'" then ROLE="REJECTED";';
MPRINT(MAKECLASSDELTACODE):   put string;
MPRINT(MAKECLASSDELTACODE):   put 'else';
MPRINT(MAKECLASSDELTACODE):   string = '   if NAME="'!!strip(NEWNAME)!!'" then do;';
MPRINT(MAKECLASSDELTACODE):   put string;
MPRINT(MAKECLASSDELTACODE):   string = '      ROLE="'!!strip(ROLE)!!'";';
MPRINT(MAKECLASSDELTACODE):   put string;
MPRINT(MAKECLASSDELTACODE):   string = '      LEVEL="'!!strip(MLEVEL)!!'";';
MPRINT(MAKECLASSDELTACODE):   put string;
MPRINT(MAKECLASSDELTACODE):   put 'end;';
MPRINT(MAKECLASSDELTACODE):   if ^eof then put 'else';
MPRINT(MAKECLASSDELTACODE):   run;

NOTE: The file _F1 is:
      Filename=H:\746\Decision Tree test\Workspaces\EMWS1\Repl\CDELTA_TRAIN.sas,
      RECFM=V,LRECL=32767,File Size (bytes)=2382,
      Last Modified=April 05, 2021 13:09:44 o'cloc,
      Create Time=April 05, 2021 13:09:44 o'cloc

NOTE: 0 records were written to the file _F1.
NOTE: There were 0 observations read from the data set EMWS1.REPL_CLASSINFO.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(MAKECLASSDELTACODE):   filename _F1;
NOTE: Fileref _F1 has been deassigned.
MPRINT(SCORE):  ;
MPRINT(SCORE):  ;
MPRINT(MAKEVALUEREPORT):   data EMWS1.Repl_VALUES;
MPRINT(MAKEVALUEREPORT):   set CLASSTEMP;
MPRINT(MAKEVALUEREPORT):   where REPLACE_VALUE ^in('', '_DEFAULT_') or (REPLACE_VALUE eq '_DEFAULT_' and UNKWOWNDEFAULT ne 'NONE');
MPRINT(MAKEVALUEREPORT):   if LEVEL = '_UNKNOWN_' then do;
MPRINT(MAKEVALUEREPORT):   LEVEL='Unknown';
MPRINT(MAKEVALUEREPORT):   if REPLACE_VALUE = '_MODE_' then REPLACE_VALUE = strip(NORMMODE);
MPRINT(MAKEVALUEREPORT):   else if REPLACE_VALUE in('_MISSING_', '_DEFAULT_') then do;
MPRINT(MAKEVALUEREPORT):   if type eq 'N' then REPLACE_VALUE='.';
MPRINT(MAKEVALUEREPORT):   else REPLACE_VALUE='_blank_';
MPRINT(MAKEVALUEREPORT):   end;
MPRINT(MAKEVALUEREPORT):   end;
MPRINT(MAKEVALUEREPORT):   else do;
MPRINT(MAKEVALUEREPORT):   if REPLACE_VALUE ='_MISSING_' then do;
MPRINT(MAKEVALUEREPORT):   if type eq 'N' then REPLACE_VALUE='.';
MPRINT(MAKEVALUEREPORT):   else REPLACE_VALUE='_blank_';
MPRINT(MAKEVALUEREPORT):   end;
MPRINT(MAKEVALUEREPORT):   else if REPLACE_VALUE = '_MODE_' then REPLACE_VALUE = strip(NORMMODE);
MPRINT(MAKEVALUEREPORT):   end;
MPRINT(MAKEVALUEREPORT):   keep NAME LEVEL CRAW NRAW REPLACE_VALUE TYPE LABEL ;
MPRINT(MAKEVALUEREPORT):   run;

NOTE: There were 0 observations read from the data set WORK.CLASSTEMP.
      WHERE REPLACE_VALUE not in (' ', '_DEFAULT_') or ((REPLACE_VALUE='_DEFAULT_') and (UNKWOWNDEFAULT not = 'NONE'));
NOTE: The data set EMWS1.REPL_VALUES has 0 observations and 7 variables.
NOTE: DATA statement used (Total process time):
      real time           0.07 seconds
      cpu time            0.00 seconds
      

MPRINT(SCORE):  ;
MPRINT(SCORE):   proc print data=EMWS1.Repl_VALUES label noobs;
MPRINT(SCORE):   title9 ' ';
MPRINT(SCORE):   title10 "Replacement Values for Class Variables";
MPRINT(SCORE):   run;
NOTE: No observations in data set EMWS1.REPL_VALUES.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(SCORE):   title10;
MPRINT(SCORE):   proc datasets lib=work nolist;
MPRINT(SCORE):   delete CLASSTEMP;
MPRINT(SCORE):   run;

NOTE: Deleting WORK.CLASSTEMP (memtype=DATA).
MPRINT(SCORE):   quit;

NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
      

MPRINT(EM_REGISTER):   data WORK.EM_USER_KEY;
MPRINT(EM_REGISTER):   set WORK.EM_USER_KEY end=eof;
MPRINT(EM_REGISTER):   output;
MPRINT(EM_REGISTER):   if eof then do;
MPRINT(EM_REGISTER):   key = upcase("EMSCOREVAR");
MPRINT(EM_REGISTER):   type = upcase("DATA");
MPRINT(EM_REGISTER):   file = "Repl_EMSCOREVAR";
MPRINT(EM_REGISTER):   folder = "";
MPRINT(EM_REGISTER):   extension = "";
MPRINT(EM_REGISTER):   AUTODELETE = "Y";
MPRINT(EM_REGISTER):   property = "N";
MPRINT(EM_REGISTER):   action = "";
MPRINT(EM_REGISTER):   output;
MPRINT(EM_REGISTER):   end;
MPRINT(EM_REGISTER):   run;

NOTE: There were 2 observations read from the data set WORK.EM_USER_KEY.
NOTE: The data set WORK.EM_USER_KEY has 3 observations and 8 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(SCORE):  ;
MPRINT(SCORE):   proc datasets lib=EMWS1 nolist;
MPRINT(SCORE):   delete Repl_EMSCOREVAR;
MPRINT(SCORE):   run;

NOTE: Deleting EMWS1.REPL_EMSCOREVAR (memtype=DATA).
MPRINT(SCORE):   quit;

NOTE: PROCEDURE DATASETS used (Total process time):
      real time           2.93 seconds
      cpu time            0.35 seconds
      

MPRINT(SCORE):   data EMWS1.Repl_EMSCOREVAR;
MPRINT(SCORE):   length Name $32 formula $70 file $200;
MPRINT(SCORE):   keep NAME Formula file;
MPRINT(SCORE):   name = "REP_city_mpg";
MPRINT(SCORE):   file="REPLACECODE\REP_city_mpg.sas";
MPRINT(SCORE):   output;
MPRINT(SCORE):   name = "REP_compression_ratio";
MPRINT(SCORE):   file="REPLACECODE\REP_compression_ratio.sas";
MPRINT(SCORE):   output;
MPRINT(SCORE):   name = "REP_curb_weight";
MPRINT(SCORE):   file="REPLACECODE\REP_curb_weight.sas";
MPRINT(SCORE):   output;
MPRINT(SCORE):   name = "REP_engine_size";
MPRINT(SCORE):   file="REPLACECODE\REP_engine_size.sas";
MPRINT(SCORE):   output;
MPRINT(SCORE):   name = "REP_height";
MPRINT(SCORE):   file="REPLACECODE\REP_height.sas";
MPRINT(SCORE):   output;
MPRINT(SCORE):   name = "REP_highway_mpg";
MPRINT(SCORE):   file="REPLACECODE\REP_highway_mpg.sas";
MPRINT(SCORE):   output;
MPRINT(SCORE):   name = "REP_horsepower";
MPRINT(SCORE):   file="REPLACECODE\REP_horsepower.sas";
MPRINT(SCORE):   output;
MPRINT(SCORE):   name = "REP_IMP_bore";
MPRINT(SCORE):   file="REPLACECODE\REP_IMP_bore.sas";
MPRINT(SCORE):   output;
MPRINT(SCORE):   name = "REP_IMP_price";
MPRINT(SCORE):   file="REPLACECODE\REP_IMP_price.sas";
MPRINT(SCORE):   output;
MPRINT(SCORE):   name = "REP_IMP_stroke";
MPRINT(SCORE):   file="REPLACECODE\REP_IMP_stroke.sas";
MPRINT(SCORE):   output;
MPRINT(SCORE):   name = "REP_length";
MPRINT(SCORE):   file="REPLACECODE\REP_length.sas";
MPRINT(SCORE):   output;
MPRINT(SCORE):   name = "REP_peak_rpm";
MPRINT(SCORE):   file="REPLACECODE\REP_peak_rpm.sas";
MPRINT(SCORE):   output;
MPRINT(SCORE):   name = "REP_wheel_base";
MPRINT(SCORE):   file="REPLACECODE\REP_wheel_base.sas";
MPRINT(SCORE):   output;
MPRINT(SCORE):   name = "REP_width";
MPRINT(SCORE):   file="REPLACECODE\REP_width.sas";
MPRINT(SCORE):   output;
MPRINT(SCORE):   run;

NOTE: Variable formula is uninitialized.
NOTE: The data set EMWS1.REPL_EMSCOREVAR has 14 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.05 seconds
      cpu time            0.01 seconds
      

MPRINT(MAIN):  ;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * End SCORE: Repl;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
44095      *------------------------------------------------------------*;
44096      * End SCORE: Repl;
44097      *------------------------------------------------------------*;
44098      

44099      filename emflow "H:\746\Decision Tree test\Workspaces\EMWS1\Repl\EMFLOWSCORE.sas";
MPRINT(EM_DIAGRAM):    filename emflow "H:\746\Decision Tree test\Workspaces\EMWS1\Repl\EMFLOWSCORE.sas";
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Repl: Scoring DATA data;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
44100      *------------------------------------------------------------*;
44101      * Repl: Scoring DATA data;
44102      *------------------------------------------------------------*;
44103      data EMWS1.Repl_TRAIN
44104      / view=EMWS1.Repl_TRAIN
44105      ;
MPRINT(EM_DIAGRAM):   data EMWS1.Repl_TRAIN / view=EMWS1.Repl_TRAIN ;
44106      set EMWS1.Impt_TRAIN
44107      ;
MPRINT(EM_DIAGRAM):   set EMWS1.Impt_TRAIN ;
44108      %inc emflow;
NOTE: %INCLUDE (level 1) file EMFLOW is file H:\746\Decision Tree test\Workspaces\EMWS1\Repl\EMFLOWSCORE.sas.
44109     +* ;
MPRINT(EM_DIAGRAM):   * ;
44110     +* Variable: IMP_bore ;
MPRINT(EM_DIAGRAM):   * Variable: IMP_bore ;
44111     +* ;
MPRINT(EM_DIAGRAM):   * ;
44112     +Label REP_IMP_bore='Replacement: Imputed bore';
MPRINT(EM_DIAGRAM):   Label REP_IMP_bore= 'Replacement: Imputed bore';
44113     +REP_IMP_bore =IMP_bore ;
MPRINT(EM_DIAGRAM):   REP_IMP_bore =IMP_bore ;
44114     +if IMP_bore  eq . then REP_IMP_bore = . ;
MPRINT(EM_DIAGRAM):   if IMP_bore eq . then REP_IMP_bore = . ;
44115     +else
44116     +if IMP_bore <2.5610632332  then REP_IMP_bore  = 2.5610632332 ;
MPRINT(EM_DIAGRAM):   else if IMP_bore <2.5610632332 then REP_IMP_bore = 2.5610632332 ;
44117     +else
44118     +if IMP_bore >4.0442428893  then REP_IMP_bore  = 4.0442428893 ;
MPRINT(EM_DIAGRAM):   else if IMP_bore >4.0442428893 then REP_IMP_bore = 4.0442428893 ;
44119     +* ;
MPRINT(EM_DIAGRAM):   * ;
44120     +* Variable: IMP_price ;
MPRINT(EM_DIAGRAM):   * Variable: IMP_price ;
44121     +* ;
MPRINT(EM_DIAGRAM):   * ;
44122     +Label REP_IMP_price='Replacement: Imputed price';
MPRINT(EM_DIAGRAM):   Label REP_IMP_price= 'Replacement: Imputed price';
44123     +REP_IMP_price =IMP_price ;
MPRINT(EM_DIAGRAM):   REP_IMP_price =IMP_price ;
44124     +if IMP_price  eq . then REP_IMP_price = . ;
MPRINT(EM_DIAGRAM):   if IMP_price eq . then REP_IMP_price = . ;
44125     +else
44126     +if IMP_price <-8881.562846  then REP_IMP_price  = -8881.562846 ;
MPRINT(EM_DIAGRAM):   else if IMP_price <-8881.562846 then REP_IMP_price = -8881.562846 ;
44127     +else
44128     +if IMP_price >34427.946684  then REP_IMP_price  = 34427.946684 ;
MPRINT(EM_DIAGRAM):   else if IMP_price >34427.946684 then REP_IMP_price = 34427.946684 ;
44129     +* ;
MPRINT(EM_DIAGRAM):   * ;
44130     +* Variable: IMP_stroke ;
MPRINT(EM_DIAGRAM):   * Variable: IMP_stroke ;
44131     +* ;
MPRINT(EM_DIAGRAM):   * ;
44132     +Label REP_IMP_stroke='Replacement: Imputed stroke';
MPRINT(EM_DIAGRAM):   Label REP_IMP_stroke= 'Replacement: Imputed stroke';
44133     +REP_IMP_stroke =IMP_stroke ;
MPRINT(EM_DIAGRAM):   REP_IMP_stroke =IMP_stroke ;
44134     +if IMP_stroke  eq . then REP_IMP_stroke = . ;
MPRINT(EM_DIAGRAM):   if IMP_stroke eq . then REP_IMP_stroke = . ;
44135     +else
44136     +if IMP_stroke <2.3537374593  then REP_IMP_stroke  = 2.3537374593 ;
MPRINT(EM_DIAGRAM):   else if IMP_stroke <2.3537374593 then REP_IMP_stroke = 2.3537374593 ;
44137     +else
44138     +if IMP_stroke >4.148915602  then REP_IMP_stroke  = 4.148915602 ;
MPRINT(EM_DIAGRAM):   else if IMP_stroke >4.148915602 then REP_IMP_stroke = 4.148915602 ;
44139     +* ;
MPRINT(EM_DIAGRAM):   * ;
44140     +* Variable: city_mpg ;
MPRINT(EM_DIAGRAM):   * Variable: city_mpg ;
44141     +* ;
MPRINT(EM_DIAGRAM):   * ;
44142     +Label REP_city_mpg='Replacement: city-mpg';
MPRINT(EM_DIAGRAM):   Label REP_city_mpg= 'Replacement: city-mpg';
44143     +REP_city_mpg =city_mpg ;
MPRINT(EM_DIAGRAM):   REP_city_mpg =city_mpg ;
44144     +if city_mpg  eq . then REP_city_mpg = . ;
MPRINT(EM_DIAGRAM):   if city_mpg eq . then REP_city_mpg = . ;
44145     +else
44146     +if city_mpg <7.3597447091  then REP_city_mpg  = 7.3597447091 ;
MPRINT(EM_DIAGRAM):   else if city_mpg <7.3597447091 then REP_city_mpg = 7.3597447091 ;
44147     +else
44148     +if city_mpg >43.860255291  then REP_city_mpg  = 43.860255291 ;
MPRINT(EM_DIAGRAM):   else if city_mpg >43.860255291 then REP_city_mpg = 43.860255291 ;
44149     +* ;
MPRINT(EM_DIAGRAM):   * ;
44150     +* Variable: compression_ratio ;
MPRINT(EM_DIAGRAM):   * Variable: compression_ratio ;
44151     +* ;
MPRINT(EM_DIAGRAM):   * ;
44152     +Label REP_compression_ratio='Replacement: compression-ratio';
MPRINT(EM_DIAGRAM):   Label REP_compression_ratio= 'Replacement: compression-ratio';
44153     +REP_compression_ratio =compression_ratio ;
MPRINT(EM_DIAGRAM):   REP_compression_ratio =compression_ratio ;
44154     +if compression_ratio  eq . then REP_compression_ratio = . ;
MPRINT(EM_DIAGRAM):   if compression_ratio eq . then REP_compression_ratio = . ;
44155     +else
44156     +if compression_ratio <-2.270373854  then REP_compression_ratio  = -2.270373854 ;
MPRINT(EM_DIAGRAM):   else if compression_ratio <-2.270373854 then REP_compression_ratio = -2.270373854 ;
44157     +else
44158     +if compression_ratio >23.020573854  then REP_compression_ratio  = 23.020573854 ;
MPRINT(EM_DIAGRAM):   else if compression_ratio >23.020573854 then REP_compression_ratio = 23.020573854 ;
44159     +* ;
MPRINT(EM_DIAGRAM):   * ;
44160     +* Variable: curb_weight ;
MPRINT(EM_DIAGRAM):   * Variable: curb_weight ;
44161     +* ;
MPRINT(EM_DIAGRAM):   * ;
44162     +Label REP_curb_weight='Replacement: curb-weight';
MPRINT(EM_DIAGRAM):   Label REP_curb_weight= 'Replacement: curb-weight';
44163     +REP_curb_weight =curb_weight ;
MPRINT(EM_DIAGRAM):   REP_curb_weight =curb_weight ;
44164     +if curb_weight  eq . then REP_curb_weight = . ;
MPRINT(EM_DIAGRAM):   if curb_weight eq . then REP_curb_weight = . ;
44165     +else
44166     +if curb_weight <1095.8998842  then REP_curb_weight  = 1095.8998842 ;
MPRINT(EM_DIAGRAM):   else if curb_weight <1095.8998842 then REP_curb_weight = 1095.8998842 ;
44167     +else
44168     +if curb_weight >3938.8001158  then REP_curb_weight  = 3938.8001158 ;
MPRINT(EM_DIAGRAM):   else if curb_weight >3938.8001158 then REP_curb_weight = 3938.8001158 ;
44169     +* ;
MPRINT(EM_DIAGRAM):   * ;
44170     +* Variable: engine_size ;
MPRINT(EM_DIAGRAM):   * Variable: engine_size ;
44171     +* ;
MPRINT(EM_DIAGRAM):   * ;
44172     +Label REP_engine_size='Replacement: engine-size';
MPRINT(EM_DIAGRAM):   Label REP_engine_size= 'Replacement: engine-size';
44173     +REP_engine_size =engine_size ;
MPRINT(EM_DIAGRAM):   REP_engine_size =engine_size ;
44174     +if engine_size  eq . then REP_engine_size = . ;
MPRINT(EM_DIAGRAM):   if engine_size eq . then REP_engine_size = . ;
44175     +else
44176     +if engine_size <20.507238043  then REP_engine_size  = 20.507238043 ;
MPRINT(EM_DIAGRAM):   else if engine_size <20.507238043 then REP_engine_size = 20.507238043 ;
44177     +else
44178     +if engine_size >226.83276196  then REP_engine_size  = 226.83276196 ;
MPRINT(EM_DIAGRAM):   else if engine_size >226.83276196 then REP_engine_size = 226.83276196 ;
44179     +* ;
MPRINT(EM_DIAGRAM):   * ;
44180     +* Variable: height ;
MPRINT(EM_DIAGRAM):   * Variable: height ;
44181     +* ;
MPRINT(EM_DIAGRAM):   * ;
44182     +Label REP_height='Replacement: height';
MPRINT(EM_DIAGRAM):   Label REP_height= 'Replacement: height';
44183     +REP_height =height ;
MPRINT(EM_DIAGRAM):   REP_height =height ;
44184     +if height  eq . then REP_height = . ;
MPRINT(EM_DIAGRAM):   if height eq . then REP_height = . ;
44185     +else
44186     +if height <46.545892936  then REP_height  = 46.545892936 ;
MPRINT(EM_DIAGRAM):   else if height <46.545892936 then REP_height = 46.545892936 ;
44187     +else
44188     +if height >61.328107064  then REP_height  = 61.328107064 ;
MPRINT(EM_DIAGRAM):   else if height >61.328107064 then REP_height = 61.328107064 ;
44189     +* ;
MPRINT(EM_DIAGRAM):   * ;
44190     +* Variable: highway_mpg ;
MPRINT(EM_DIAGRAM):   * Variable: highway_mpg ;
44191     +* ;
MPRINT(EM_DIAGRAM):   * ;
44192     +Label REP_highway_mpg='Replacement: highway-mpg';
MPRINT(EM_DIAGRAM):   Label REP_highway_mpg= 'Replacement: highway-mpg';
44193     +REP_highway_mpg =highway_mpg ;
MPRINT(EM_DIAGRAM):   REP_highway_mpg =highway_mpg ;
44194     +if highway_mpg  eq . then REP_highway_mpg = . ;
MPRINT(EM_DIAGRAM):   if highway_mpg eq . then REP_highway_mpg = . ;
44195     +else
44196     +if highway_mpg <12.423938514  then REP_highway_mpg  = 12.423938514 ;
MPRINT(EM_DIAGRAM):   else if highway_mpg <12.423938514 then REP_highway_mpg = 12.423938514 ;
44197     +else
44198     +if highway_mpg >49.896061486  then REP_highway_mpg  = 49.896061486 ;
MPRINT(EM_DIAGRAM):   else if highway_mpg >49.896061486 then REP_highway_mpg = 49.896061486 ;
44199     +* ;
MPRINT(EM_DIAGRAM):   * ;
44200     +* Variable: horsepower ;
MPRINT(EM_DIAGRAM):   * Variable: horsepower ;
44201     +* ;
MPRINT(EM_DIAGRAM):   * ;
44202     +Label REP_horsepower='Replacement: horsepower';
MPRINT(EM_DIAGRAM):   Label REP_horsepower= 'Replacement: horsepower';
44203     +REP_horsepower =horsepower ;
MPRINT(EM_DIAGRAM):   REP_horsepower =horsepower ;
44204     +if horsepower  eq . then REP_horsepower = . ;
MPRINT(EM_DIAGRAM):   if horsepower eq . then REP_horsepower = . ;
44205     +else
44206     +if horsepower <-9.271451561  then REP_horsepower  = -9.271451561 ;
MPRINT(EM_DIAGRAM):   else if horsepower <-9.271451561 then REP_horsepower = -9.271451561 ;
44207     +else
44208     +if horsepower >210.11145156  then REP_horsepower  = 210.11145156 ;
MPRINT(EM_DIAGRAM):   else if horsepower >210.11145156 then REP_horsepower = 210.11145156 ;
44209     +* ;
MPRINT(EM_DIAGRAM):   * ;
44210     +* Variable: length ;
MPRINT(EM_DIAGRAM):   * Variable: length ;
44211     +* ;
MPRINT(EM_DIAGRAM):   * ;
44212     +Label REP_length='Replacement: length';
MPRINT(EM_DIAGRAM):   Label REP_length= 'Replacement: length';
44213     +REP_length =length ;
MPRINT(EM_DIAGRAM):   REP_length =length ;
44214     +if length  eq . then REP_length = . ;
MPRINT(EM_DIAGRAM):   if length eq . then REP_length = . ;
44215     +else
44216     +if length <139.36573105  then REP_length  = 139.36573105 ;
MPRINT(EM_DIAGRAM):   else if length <139.36573105 then REP_length = 139.36573105 ;
44217     +else
44218     +if length >207.69426895  then REP_length  = 207.69426895 ;
MPRINT(EM_DIAGRAM):   else if length >207.69426895 then REP_length = 207.69426895 ;
44219     +* ;
MPRINT(EM_DIAGRAM):   * ;
44220     +* Variable: peak_rpm ;
MPRINT(EM_DIAGRAM):   * Variable: peak_rpm ;
44221     +* ;
MPRINT(EM_DIAGRAM):   * ;
44222     +Label REP_peak_rpm='Replacement: peak-rpm';
MPRINT(EM_DIAGRAM):   Label REP_peak_rpm= 'Replacement: peak-rpm';
44223     +REP_peak_rpm =peak_rpm ;
MPRINT(EM_DIAGRAM):   REP_peak_rpm =peak_rpm ;
44224     +if peak_rpm  eq . then REP_peak_rpm = . ;
MPRINT(EM_DIAGRAM):   if peak_rpm eq . then REP_peak_rpm = . ;
44225     +else
44226     +if peak_rpm <3690.5039457  then REP_peak_rpm  = 3690.5039457 ;
MPRINT(EM_DIAGRAM):   else if peak_rpm <3690.5039457 then REP_peak_rpm = 3690.5039457 ;
44227     +else
44228     +if peak_rpm >6570.4960543  then REP_peak_rpm  = 6570.4960543 ;
MPRINT(EM_DIAGRAM):   else if peak_rpm >6570.4960543 then REP_peak_rpm = 6570.4960543 ;
44229     +* ;
MPRINT(EM_DIAGRAM):   * ;
44230     +* Variable: wheel_base ;
MPRINT(EM_DIAGRAM):   * Variable: wheel_base ;
44231     +* ;
MPRINT(EM_DIAGRAM):   * ;
44232     +Label REP_wheel_base='Replacement: wheel-base';
MPRINT(EM_DIAGRAM):   Label REP_wheel_base= 'Replacement: wheel-base';
44233     +REP_wheel_base =wheel_base ;
MPRINT(EM_DIAGRAM):   REP_wheel_base =wheel_base ;
44234     +if wheel_base  eq . then REP_wheel_base = . ;
MPRINT(EM_DIAGRAM):   if wheel_base eq . then REP_wheel_base = . ;
44235     +else
44236     +if wheel_base <81.954600847  then REP_wheel_base  = 81.954600847 ;
MPRINT(EM_DIAGRAM):   else if wheel_base <81.954600847 then REP_wheel_base = 81.954600847 ;
44237     +else
44238     +if wheel_base >115.17739915  then REP_wheel_base  = 115.17739915 ;
MPRINT(EM_DIAGRAM):   else if wheel_base >115.17739915 then REP_wheel_base = 115.17739915 ;
44239     +* ;
MPRINT(EM_DIAGRAM):   * ;
44240     +* Variable: width ;
MPRINT(EM_DIAGRAM):   * Variable: width ;
44241     +* ;
MPRINT(EM_DIAGRAM):   * ;
44242     +Label REP_width='Replacement: width';
MPRINT(EM_DIAGRAM):   Label REP_width= 'Replacement: width';
44243     +REP_width =width ;
MPRINT(EM_DIAGRAM):   REP_width =width ;
44244     +if width  eq . then REP_width = . ;
MPRINT(EM_DIAGRAM):   if width eq . then REP_width = . ;
44245     +else
44246     +if width <60.189403674  then REP_width  = 60.189403674 ;
MPRINT(EM_DIAGRAM):   else if width <60.189403674 then REP_width = 60.189403674 ;
44247     +else
44248     +if width >71.200596326  then REP_width  = 71.200596326 ;
MPRINT(EM_DIAGRAM):   else if width >71.200596326 then REP_width = 71.200596326 ;
NOTE: %INCLUDE (level 1) ending.
MPRINT(EM_DIAGRAM):   run;
44249      run;

NOTE: DATA STEP view saved on file EMWS1.REPL_TRAIN.
NOTE: A stored DATA STEP view cannot run under a different operating system.
NOTE: View EMWS1.IMPT_TRAIN.VIEW used (Total process time):
      real time           0.09 seconds
      cpu time            0.07 seconds
      
NOTE: DATA statement used (Total process time):
      real time           0.09 seconds
      cpu time            0.07 seconds
      

MPRINT(EM_DIAGRAM):   quit;
44250      quit;
44251      filename emflow;
MPRINT(EM_DIAGRAM):   filename emflow;
NOTE: Fileref EMFLOW has been deassigned.
44252      filename emflow "H:\746\Decision Tree test\Workspaces\EMWS1\Repl\EMFLOWSCORE.sas";
MPRINT(EM_DIAGRAM):    filename emflow "H:\746\Decision Tree test\Workspaces\EMWS1\Repl\EMFLOWSCORE.sas";
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Repl: Scoring VALIDATE data;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
44253      *------------------------------------------------------------*;
44254      * Repl: Scoring VALIDATE data;
44255      *------------------------------------------------------------*;
44256      data EMWS1.Repl_VALIDATE
44257      / view=EMWS1.Repl_VALIDATE
44258      ;
MPRINT(EM_DIAGRAM):   data EMWS1.Repl_VALIDATE / view=EMWS1.Repl_VALIDATE ;
44259      set EMWS1.Impt_VALIDATE
44260      ;
MPRINT(EM_DIAGRAM):   set EMWS1.Impt_VALIDATE ;
44261      %inc emflow;
NOTE: %INCLUDE (level 1) file EMFLOW is file H:\746\Decision Tree test\Workspaces\EMWS1\Repl\EMFLOWSCORE.sas.
44262     +* ;
MPRINT(EM_DIAGRAM):   * ;
44263     +* Variable: IMP_bore ;
MPRINT(EM_DIAGRAM):   * Variable: IMP_bore ;
44264     +* ;
MPRINT(EM_DIAGRAM):   * ;
44265     +Label REP_IMP_bore='Replacement: Imputed bore';
MPRINT(EM_DIAGRAM):   Label REP_IMP_bore= 'Replacement: Imputed bore';
44266     +REP_IMP_bore =IMP_bore ;
MPRINT(EM_DIAGRAM):   REP_IMP_bore =IMP_bore ;
44267     +if IMP_bore  eq . then REP_IMP_bore = . ;
MPRINT(EM_DIAGRAM):   if IMP_bore eq . then REP_IMP_bore = . ;
44268     +else
44269     +if IMP_bore <2.5610632332  then REP_IMP_bore  = 2.5610632332 ;
MPRINT(EM_DIAGRAM):   else if IMP_bore <2.5610632332 then REP_IMP_bore = 2.5610632332 ;
44270     +else
44271     +if IMP_bore >4.0442428893  then REP_IMP_bore  = 4.0442428893 ;
MPRINT(EM_DIAGRAM):   else if IMP_bore >4.0442428893 then REP_IMP_bore = 4.0442428893 ;
44272     +* ;
MPRINT(EM_DIAGRAM):   * ;
44273     +* Variable: IMP_price ;
MPRINT(EM_DIAGRAM):   * Variable: IMP_price ;
44274     +* ;
MPRINT(EM_DIAGRAM):   * ;
44275     +Label REP_IMP_price='Replacement: Imputed price';
MPRINT(EM_DIAGRAM):   Label REP_IMP_price= 'Replacement: Imputed price';
44276     +REP_IMP_price =IMP_price ;
MPRINT(EM_DIAGRAM):   REP_IMP_price =IMP_price ;
44277     +if IMP_price  eq . then REP_IMP_price = . ;
MPRINT(EM_DIAGRAM):   if IMP_price eq . then REP_IMP_price = . ;
44278     +else
44279     +if IMP_price <-8881.562846  then REP_IMP_price  = -8881.562846 ;
MPRINT(EM_DIAGRAM):   else if IMP_price <-8881.562846 then REP_IMP_price = -8881.562846 ;
44280     +else
44281     +if IMP_price >34427.946684  then REP_IMP_price  = 34427.946684 ;
MPRINT(EM_DIAGRAM):   else if IMP_price >34427.946684 then REP_IMP_price = 34427.946684 ;
44282     +* ;
MPRINT(EM_DIAGRAM):   * ;
44283     +* Variable: IMP_stroke ;
MPRINT(EM_DIAGRAM):   * Variable: IMP_stroke ;
44284     +* ;
MPRINT(EM_DIAGRAM):   * ;
44285     +Label REP_IMP_stroke='Replacement: Imputed stroke';
MPRINT(EM_DIAGRAM):   Label REP_IMP_stroke= 'Replacement: Imputed stroke';
44286     +REP_IMP_stroke =IMP_stroke ;
MPRINT(EM_DIAGRAM):   REP_IMP_stroke =IMP_stroke ;
44287     +if IMP_stroke  eq . then REP_IMP_stroke = . ;
MPRINT(EM_DIAGRAM):   if IMP_stroke eq . then REP_IMP_stroke = . ;
44288     +else
44289     +if IMP_stroke <2.3537374593  then REP_IMP_stroke  = 2.3537374593 ;
MPRINT(EM_DIAGRAM):   else if IMP_stroke <2.3537374593 then REP_IMP_stroke = 2.3537374593 ;
44290     +else
44291     +if IMP_stroke >4.148915602  then REP_IMP_stroke  = 4.148915602 ;
MPRINT(EM_DIAGRAM):   else if IMP_stroke >4.148915602 then REP_IMP_stroke = 4.148915602 ;
44292     +* ;
MPRINT(EM_DIAGRAM):   * ;
44293     +* Variable: city_mpg ;
MPRINT(EM_DIAGRAM):   * Variable: city_mpg ;
44294     +* ;
MPRINT(EM_DIAGRAM):   * ;
44295     +Label REP_city_mpg='Replacement: city-mpg';
MPRINT(EM_DIAGRAM):   Label REP_city_mpg= 'Replacement: city-mpg';
44296     +REP_city_mpg =city_mpg ;
MPRINT(EM_DIAGRAM):   REP_city_mpg =city_mpg ;
44297     +if city_mpg  eq . then REP_city_mpg = . ;
MPRINT(EM_DIAGRAM):   if city_mpg eq . then REP_city_mpg = . ;
44298     +else
44299     +if city_mpg <7.3597447091  then REP_city_mpg  = 7.3597447091 ;
MPRINT(EM_DIAGRAM):   else if city_mpg <7.3597447091 then REP_city_mpg = 7.3597447091 ;
44300     +else
44301     +if city_mpg >43.860255291  then REP_city_mpg  = 43.860255291 ;
MPRINT(EM_DIAGRAM):   else if city_mpg >43.860255291 then REP_city_mpg = 43.860255291 ;
44302     +* ;
MPRINT(EM_DIAGRAM):   * ;
44303     +* Variable: compression_ratio ;
MPRINT(EM_DIAGRAM):   * Variable: compression_ratio ;
44304     +* ;
MPRINT(EM_DIAGRAM):   * ;
44305     +Label REP_compression_ratio='Replacement: compression-ratio';
MPRINT(EM_DIAGRAM):   Label REP_compression_ratio= 'Replacement: compression-ratio';
44306     +REP_compression_ratio =compression_ratio ;
MPRINT(EM_DIAGRAM):   REP_compression_ratio =compression_ratio ;
44307     +if compression_ratio  eq . then REP_compression_ratio = . ;
MPRINT(EM_DIAGRAM):   if compression_ratio eq . then REP_compression_ratio = . ;
44308     +else
44309     +if compression_ratio <-2.270373854  then REP_compression_ratio  = -2.270373854 ;
MPRINT(EM_DIAGRAM):   else if compression_ratio <-2.270373854 then REP_compression_ratio = -2.270373854 ;
44310     +else
44311     +if compression_ratio >23.020573854  then REP_compression_ratio  = 23.020573854 ;
MPRINT(EM_DIAGRAM):   else if compression_ratio >23.020573854 then REP_compression_ratio = 23.020573854 ;
44312     +* ;
MPRINT(EM_DIAGRAM):   * ;
44313     +* Variable: curb_weight ;
MPRINT(EM_DIAGRAM):   * Variable: curb_weight ;
44314     +* ;
MPRINT(EM_DIAGRAM):   * ;
44315     +Label REP_curb_weight='Replacement: curb-weight';
MPRINT(EM_DIAGRAM):   Label REP_curb_weight= 'Replacement: curb-weight';
44316     +REP_curb_weight =curb_weight ;
MPRINT(EM_DIAGRAM):   REP_curb_weight =curb_weight ;
44317     +if curb_weight  eq . then REP_curb_weight = . ;
MPRINT(EM_DIAGRAM):   if curb_weight eq . then REP_curb_weight = . ;
44318     +else
44319     +if curb_weight <1095.8998842  then REP_curb_weight  = 1095.8998842 ;
MPRINT(EM_DIAGRAM):   else if curb_weight <1095.8998842 then REP_curb_weight = 1095.8998842 ;
44320     +else
44321     +if curb_weight >3938.8001158  then REP_curb_weight  = 3938.8001158 ;
MPRINT(EM_DIAGRAM):   else if curb_weight >3938.8001158 then REP_curb_weight = 3938.8001158 ;
44322     +* ;
MPRINT(EM_DIAGRAM):   * ;
44323     +* Variable: engine_size ;
MPRINT(EM_DIAGRAM):   * Variable: engine_size ;
44324     +* ;
MPRINT(EM_DIAGRAM):   * ;
44325     +Label REP_engine_size='Replacement: engine-size';
MPRINT(EM_DIAGRAM):   Label REP_engine_size= 'Replacement: engine-size';
44326     +REP_engine_size =engine_size ;
MPRINT(EM_DIAGRAM):   REP_engine_size =engine_size ;
44327     +if engine_size  eq . then REP_engine_size = . ;
MPRINT(EM_DIAGRAM):   if engine_size eq . then REP_engine_size = . ;
44328     +else
44329     +if engine_size <20.507238043  then REP_engine_size  = 20.507238043 ;
MPRINT(EM_DIAGRAM):   else if engine_size <20.507238043 then REP_engine_size = 20.507238043 ;
44330     +else
44331     +if engine_size >226.83276196  then REP_engine_size  = 226.83276196 ;
MPRINT(EM_DIAGRAM):   else if engine_size >226.83276196 then REP_engine_size = 226.83276196 ;
44332     +* ;
MPRINT(EM_DIAGRAM):   * ;
44333     +* Variable: height ;
MPRINT(EM_DIAGRAM):   * Variable: height ;
44334     +* ;
MPRINT(EM_DIAGRAM):   * ;
44335     +Label REP_height='Replacement: height';
MPRINT(EM_DIAGRAM):   Label REP_height= 'Replacement: height';
44336     +REP_height =height ;
MPRINT(EM_DIAGRAM):   REP_height =height ;
44337     +if height  eq . then REP_height = . ;
MPRINT(EM_DIAGRAM):   if height eq . then REP_height = . ;
44338     +else
44339     +if height <46.545892936  then REP_height  = 46.545892936 ;
MPRINT(EM_DIAGRAM):   else if height <46.545892936 then REP_height = 46.545892936 ;
44340     +else
44341     +if height >61.328107064  then REP_height  = 61.328107064 ;
MPRINT(EM_DIAGRAM):   else if height >61.328107064 then REP_height = 61.328107064 ;
44342     +* ;
MPRINT(EM_DIAGRAM):   * ;
44343     +* Variable: highway_mpg ;
MPRINT(EM_DIAGRAM):   * Variable: highway_mpg ;
44344     +* ;
MPRINT(EM_DIAGRAM):   * ;
44345     +Label REP_highway_mpg='Replacement: highway-mpg';
MPRINT(EM_DIAGRAM):   Label REP_highway_mpg= 'Replacement: highway-mpg';
44346     +REP_highway_mpg =highway_mpg ;
MPRINT(EM_DIAGRAM):   REP_highway_mpg =highway_mpg ;
44347     +if highway_mpg  eq . then REP_highway_mpg = . ;
MPRINT(EM_DIAGRAM):   if highway_mpg eq . then REP_highway_mpg = . ;
44348     +else
44349     +if highway_mpg <12.423938514  then REP_highway_mpg  = 12.423938514 ;
MPRINT(EM_DIAGRAM):   else if highway_mpg <12.423938514 then REP_highway_mpg = 12.423938514 ;
44350     +else
44351     +if highway_mpg >49.896061486  then REP_highway_mpg  = 49.896061486 ;
MPRINT(EM_DIAGRAM):   else if highway_mpg >49.896061486 then REP_highway_mpg = 49.896061486 ;
44352     +* ;
MPRINT(EM_DIAGRAM):   * ;
44353     +* Variable: horsepower ;
MPRINT(EM_DIAGRAM):   * Variable: horsepower ;
44354     +* ;
MPRINT(EM_DIAGRAM):   * ;
44355     +Label REP_horsepower='Replacement: horsepower';
MPRINT(EM_DIAGRAM):   Label REP_horsepower= 'Replacement: horsepower';
44356     +REP_horsepower =horsepower ;
MPRINT(EM_DIAGRAM):   REP_horsepower =horsepower ;
44357     +if horsepower  eq . then REP_horsepower = . ;
MPRINT(EM_DIAGRAM):   if horsepower eq . then REP_horsepower = . ;
44358     +else
44359     +if horsepower <-9.271451561  then REP_horsepower  = -9.271451561 ;
MPRINT(EM_DIAGRAM):   else if horsepower <-9.271451561 then REP_horsepower = -9.271451561 ;
44360     +else
44361     +if horsepower >210.11145156  then REP_horsepower  = 210.11145156 ;
MPRINT(EM_DIAGRAM):   else if horsepower >210.11145156 then REP_horsepower = 210.11145156 ;
44362     +* ;
MPRINT(EM_DIAGRAM):   * ;
44363     +* Variable: length ;
MPRINT(EM_DIAGRAM):   * Variable: length ;
44364     +* ;
MPRINT(EM_DIAGRAM):   * ;
44365     +Label REP_length='Replacement: length';
MPRINT(EM_DIAGRAM):   Label REP_length= 'Replacement: length';
44366     +REP_length =length ;
MPRINT(EM_DIAGRAM):   REP_length =length ;
44367     +if length  eq . then REP_length = . ;
MPRINT(EM_DIAGRAM):   if length eq . then REP_length = . ;
44368     +else
44369     +if length <139.36573105  then REP_length  = 139.36573105 ;
MPRINT(EM_DIAGRAM):   else if length <139.36573105 then REP_length = 139.36573105 ;
44370     +else
44371     +if length >207.69426895  then REP_length  = 207.69426895 ;
MPRINT(EM_DIAGRAM):   else if length >207.69426895 then REP_length = 207.69426895 ;
44372     +* ;
MPRINT(EM_DIAGRAM):   * ;
44373     +* Variable: peak_rpm ;
MPRINT(EM_DIAGRAM):   * Variable: peak_rpm ;
44374     +* ;
MPRINT(EM_DIAGRAM):   * ;
44375     +Label REP_peak_rpm='Replacement: peak-rpm';
MPRINT(EM_DIAGRAM):   Label REP_peak_rpm= 'Replacement: peak-rpm';
44376     +REP_peak_rpm =peak_rpm ;
MPRINT(EM_DIAGRAM):   REP_peak_rpm =peak_rpm ;
44377     +if peak_rpm  eq . then REP_peak_rpm = . ;
MPRINT(EM_DIAGRAM):   if peak_rpm eq . then REP_peak_rpm = . ;
44378     +else
44379     +if peak_rpm <3690.5039457  then REP_peak_rpm  = 3690.5039457 ;
MPRINT(EM_DIAGRAM):   else if peak_rpm <3690.5039457 then REP_peak_rpm = 3690.5039457 ;
44380     +else
44381     +if peak_rpm >6570.4960543  then REP_peak_rpm  = 6570.4960543 ;
MPRINT(EM_DIAGRAM):   else if peak_rpm >6570.4960543 then REP_peak_rpm = 6570.4960543 ;
44382     +* ;
MPRINT(EM_DIAGRAM):   * ;
44383     +* Variable: wheel_base ;
MPRINT(EM_DIAGRAM):   * Variable: wheel_base ;
44384     +* ;
MPRINT(EM_DIAGRAM):   * ;
44385     +Label REP_wheel_base='Replacement: wheel-base';
MPRINT(EM_DIAGRAM):   Label REP_wheel_base= 'Replacement: wheel-base';
44386     +REP_wheel_base =wheel_base ;
MPRINT(EM_DIAGRAM):   REP_wheel_base =wheel_base ;
44387     +if wheel_base  eq . then REP_wheel_base = . ;
MPRINT(EM_DIAGRAM):   if wheel_base eq . then REP_wheel_base = . ;
44388     +else
44389     +if wheel_base <81.954600847  then REP_wheel_base  = 81.954600847 ;
MPRINT(EM_DIAGRAM):   else if wheel_base <81.954600847 then REP_wheel_base = 81.954600847 ;
44390     +else
44391     +if wheel_base >115.17739915  then REP_wheel_base  = 115.17739915 ;
MPRINT(EM_DIAGRAM):   else if wheel_base >115.17739915 then REP_wheel_base = 115.17739915 ;
44392     +* ;
MPRINT(EM_DIAGRAM):   * ;
44393     +* Variable: width ;
MPRINT(EM_DIAGRAM):   * Variable: width ;
44394     +* ;
MPRINT(EM_DIAGRAM):   * ;
44395     +Label REP_width='Replacement: width';
MPRINT(EM_DIAGRAM):   Label REP_width= 'Replacement: width';
44396     +REP_width =width ;
MPRINT(EM_DIAGRAM):   REP_width =width ;
44397     +if width  eq . then REP_width = . ;
MPRINT(EM_DIAGRAM):   if width eq . then REP_width = . ;
44398     +else
44399     +if width <60.189403674  then REP_width  = 60.189403674 ;
MPRINT(EM_DIAGRAM):   else if width <60.189403674 then REP_width = 60.189403674 ;
44400     +else
44401     +if width >71.200596326  then REP_width  = 71.200596326 ;
MPRINT(EM_DIAGRAM):   else if width >71.200596326 then REP_width = 71.200596326 ;
NOTE: %INCLUDE (level 1) ending.
MPRINT(EM_DIAGRAM):   run;
44402      run;

NOTE: DATA STEP view saved on file EMWS1.REPL_VALIDATE.
NOTE: A stored DATA STEP view cannot run under a different operating system.
NOTE: View EMWS1.IMPT_VALIDATE.VIEW used (Total process time):
      real time           0.10 seconds
      cpu time            0.04 seconds
      
NOTE: DATA statement used (Total process time):
      real time           0.12 seconds
      cpu time            0.06 seconds
      

MPRINT(EM_DIAGRAM):   quit;
44403      quit;
44404      filename emflow;
MPRINT(EM_DIAGRAM):   filename emflow;
NOTE: Fileref EMFLOW has been deassigned.
44406      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):     *------------------------------------------------------------*;
44407      * Repl: Computing metadata for TRAIN data;
MPRINT(EM_DIAGRAM):   * Repl: Computing metadata for TRAIN data;
44408      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;

NOTE: View EMWS1.REPL_TRAIN.VIEW used (Total process time):
      real time           0.07 seconds
      cpu time            0.06 seconds
      
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * &nodeid: Computing Metadata for TRAIN data;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   filename _delta "H:\746\Decision Tree test\Workspaces\EMWS1\Repl\CDELTA_TRAIN.sas";
MPRINT(EMADVISECOLUMNS):   proc display c=sashelp.emmeta.advisecolumns.scl;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    options validvarname=any;
MPRINT(EMADVISECOLUMNS):   proc contents data=EMWS1.Repl_TRAIN out=_tempAdvisor noprint;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):   options validvarname=V7;
MPRINT(EMADVISECOLUMNS):    data _null_;
MPRINT(EMADVISECOLUMNS):   dsid = open('EMWS1.Repl_TRAIN');
MPRINT(EMADVISECOLUMNS):   call symput('_dsidTable', strip(put(dsid, best.)));
MPRINT(EMADVISECOLUMNS):   if dsid then do;
MPRINT(EMADVISECOLUMNS):   call symput('_engineTable', attrc(dsid, 'ENGINE'));
MPRINT(EMADVISECOLUMNS):   dsid = close(dsid);
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    proc contents data=EMWS1.Repl_TRAIN out=WORK.M03WIZAC noprint;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M03WIZAC;
MPRINT(EMADVISECOLUMNS):   length NAME $ 64 TYPE $ 1 LABEL $ 200 FORMAT $ 36 INFORMAT $36 INDEX $ 1 INDEXTYPE $ 9;
MPRINT(EMADVISECOLUMNS):   label NAME =;
MPRINT(EMADVISECOLUMNS):   set WORK.M03WIZAC(keep=name type length label format formatl formatd informat informl informd idxusage rename=(type=itype));
MPRINT(EMADVISECOLUMNS):   if itype = 1 then type = 'N';
MPRINT(EMADVISECOLUMNS):   else type = 'C';
MPRINT(EMADVISECOLUMNS):   if formatl > 0 then do;
MPRINT(EMADVISECOLUMNS):   if format ne ' ' then format = strip(format)!!strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EMADVISECOLUMNS):   else format = strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if format ne '' then format = strip(format)!!'.';
MPRINT(EMADVISECOLUMNS):   if informl > 0 then do;
MPRINT(EMADVISECOLUMNS):   if informat ne ' ' then informat = strip(informat)!!strip(put(informl, best12.))!!'.'!!strip(put(informd, best12.));
MPRINT(EMADVISECOLUMNS):   else informat = strip(put(informl, best12.))!!'.'!!strip(put(informd, best12.));
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if informat ne '' then informat = strip(informat)!!'.';
MPRINT(EMADVISECOLUMNS):   if idxusage = 'NONE' then index ="N";
MPRINT(EMADVISECOLUMNS):   else index = "Y";
MPRINT(EMADVISECOLUMNS):   indextype = idxusage;
MPRINT(EMADVISECOLUMNS):   drop idxusage itype formatl formatd informl informd;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M03WIZAC;
MPRINT(EMADVISECOLUMNS):   length UNAME $64;
MPRINT(EMADVISECOLUMNS):   set WORK.M03WIZAC;
MPRINT(EMADVISECOLUMNS):   UNAME = upcase(NAME);
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    proc sort data=WORK.M0700ORJ NOTHREADS;
MPRINT(EMADVISECOLUMNS):   by UNAME;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M0700ORJ;
MPRINT(EMADVISECOLUMNS):   drop UNAME;
MPRINT(EMADVISECOLUMNS):   set WORK.M0700ORJ;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M3HC_5GB(keep=NAME ATTR);
MPRINT(EMADVISECOLUMNS):   length ATTR $ 20;
MPRINT(EMADVISECOLUMNS):   set WORK.M0700ORJ;
MPRINT(EMADVISECOLUMNS):   if level ne "INTERVAL" then do;
MPRINT(EMADVISECOLUMNS):   if order = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'ORDER';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if format ne ' ' and formattype = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'FORMATTYPE';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if role = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'ROLE';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if level = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'LEVEL';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if type = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'TYPE';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if index = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'INDEX';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if report = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'REPORT';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):   proc sort NOTHREADS;
MPRINT(EMADVISECOLUMNS):   by attr;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M0700ORJ;
MPRINT(EMADVISECOLUMNS):   length NAME $64 ROLE $ 32 LEVEL $ 10 ORDER $ 8 CREATOR $32 FORMATTYPE $ 10 FAMILY $ 10 LOWERLIMIT 8 UPPERLIMIT 8 REPORT $1 DISTRIBUTION $ 20 COMMENT $64;
MPRINT(EMADVISECOLUMNS):   length levelAssigned 8 roleAssigned 8 PRICE 8;
MPRINT(EMADVISECOLUMNS):   set WORK.M0700ORJ;
MPRINT(EMADVISECOLUMNS):   if formattype = ' ' then do;
MPRINT(EMADVISECOLUMNS):   if format ne ' ' then do;
MPRINT(EMADVISECOLUMNS):   if type = 'N' then do;
MPRINT(EMADVISECOLUMNS):   pos = indexc(format,'.1234567890');
MPRINT(EMADVISECOLUMNS):   if pos > 1 then tempfmt = substr(format,1, pos-1);
MPRINT(EMADVISECOLUMNS):   else tempfmt = ' ';
MPRINT(EMADVISECOLUMNS):   flen = length(tempfmt);
MPRINT(EMADVISECOLUMNS):   select;
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("DATE" "DAY" "DDMMYY" "DOWNAME" "JULDAY" "JULIAN" "MMDDYY" "MMDDYYD" "MMDDYYC" "MMDDYYN" "MMDDYYP" "MMDDYYS" "MONNAME" "MONTH" "MONYY" "NENGO" "QTR" "QTRR" "WEEKDATE" "WEEKDATX" "WEEKDAY" "WORDDATE" "WORDDATX" 
"YEAR" "YYMMDD" "YYMON" "YYMMDDC" "YYMMDDD" "YYMMDDN" "YYMMDDP" "YYMMDDS" "EURDFDE" "NJDATE" "NLDATE" "EURDFDD" "EURDFDWN" "EURDFMN" "EURDFMY" "EURDFWK" "EURDFWKX" "EURDFWDX" "EURDFDN" "EURDFDE" )) formattype = 'DATE';
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("DATETIME" "EURDFDT" "TOD" )) formattype = "DATETIME";
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("HHMM" "HOUR" "MMSS" "TIME" "TIMEAMPM" )) formattype = "TIME";
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("COMMA" "COMMAX" "DOLLAR" "DOLLARX" "E" "FRACT" "NEGPAREN" "PERCENT")) formattype="QUANTITY";
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("BINARY" "HEX" "IB" "OCTAL" "PD" "PIB" "PK" "RB" "SSN" "Z" "ZD")) formattype = "CODING";
MPRINT(EMADVISECOLUMNS):   otherwise do;
MPRINT(EMADVISECOLUMNS):   formattype = "USER";
MPRINT(EMADVISECOLUMNS):   if substr(tempfmt, 1, 6)='NLDATE' then formattype = "DATE";
MPRINT(EMADVISECOLUMNS):   else if substr(tempfmt, 1, 6)='NLDATM' then formattype = "DATETIME";
MPRINT(EMADVISECOLUMNS):   else if substr(tempfmt, 1, 4)='NLTIM' then formattype = "TIME";
MPRINT(EMADVISECOLUMNS):   else if flen >= 4 then do;
MPRINT(EMADVISECOLUMNS):   str = substr(tempfmt,1,4);
MPRINT(EMADVISECOLUMNS):   if str in ("MMYY" "YYMM" "YYQR") then formattype ="DATE";
MPRINT(EMADVISECOLUMNS):   else if str = "S370" then formattype = "CODING";
MPRINT(EMADVISECOLUMNS):   else if str = "BEST" then formattype = "NUM";
MPRINT(EMADVISECOLUMNS):   drop str;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if flen >=3 and substr(tempfmt,1,3) = "YYQ" then formatType = "DATE";
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   drop flen tempfmt pos;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else do;
MPRINT(EMADVISECOLUMNS):   formatType = "CATEGORY";
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if formatType = "NUM" then do;
MPRINT(EMADVISECOLUMNS):   if index = "Y" then formatType = "DISCRETE";
MPRINT(EMADVISECOLUMNS):   else formatType = "QUANTITY";
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if level = ' ' then do;
MPRINT(EMADVISECOLUMNS):   if formatType in ("CATEGORY", "CODING", "ID") or type = "C" then level = "NOMINAL";
MPRINT(EMADVISECOLUMNS):   else level = "INTERVAL";
MPRINT(EMADVISECOLUMNS):   levelAssigned = 1;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else level = upcase(level);
MPRINT(EMADVISECOLUMNS):   if role = ' ' then do;
MPRINT(EMADVISECOLUMNS):   length name_prefix $8 _uname $64;
MPRINT(EMADVISECOLUMNS):   drop name_prefix _uname _freqflag;
MPRINT(EMADVISECOLUMNS):   retain _freqflag;
MPRINT(EMADVISECOLUMNS):   if LENGTH> 80 then ROLE = 'TEXT';
MPRINT(EMADVISECOLUMNS):   _uname = upcase(NAME);
MPRINT(EMADVISECOLUMNS):   select(_uname);
MPRINT(EMADVISECOLUMNS):   when('_PARTIND_') do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'ID';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   when('_WARN_') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_SEGMENT') do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'SEGMENT';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   when('_NODE_') do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'SEGMENT';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   when('EM_CLASSTARGET') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_VALUETARGET') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_PREDICTION') ROLE = 'PREDICT';
MPRINT(EMADVISECOLUMNS):   when('EM_PROBABILITY') ROLE = 'PREDICT';
MPRINT(EMADVISECOLUMNS):   when('EM_EVENTPROBABILITY') ROLE = 'PREDICT';
MPRINT(EMADVISECOLUMNS):   when('EM_CLASSIFICATION') ROLE = 'CLASSIFICATION';
MPRINT(EMADVISECOLUMNS):   when('EM_DECISION') ROLE = 'DECISION';
MPRINT(EMADVISECOLUMNS):   when('EM_PROFIT') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_LOSS') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_ROI') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('URI') ROLE = 'URL';
MPRINT(EMADVISECOLUMNS):   when('FILTERED') ROLE = 'TEXTLOC';
MPRINT(EMADVISECOLUMNS):   otherwise do;
MPRINT(EMADVISECOLUMNS):   if upcase(NAME) =: 'ZIP' then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'REJECTED';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   COMMENT = 'Rejected by: Exceed the maximum class level of %s';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if upcase(NAME) in('FREQ', 'FREQUENCY') then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'FREQ';
MPRINT(EMADVISECOLUMNS):   if TYPE = 'C' then ROLE = 'INPUT';
MPRINT(EMADVISECOLUMNS):   else if _freqflag =1 then ROLE='REJECTED';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else do;
MPRINT(EMADVISECOLUMNS):   name_prefix = scan(_uname, 1, '_');
MPRINT(EMADVISECOLUMNS):   if scan(_uname, 2, '_') = '' then name_prefix='';
MPRINT(EMADVISECOLUMNS):   if name_prefix in('F', 'I', 'U') then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'CLASSIFICATION';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if name_prefix in('P', 'V') then ROLE = 'PREDICT';
MPRINT(EMADVISECOLUMNS):   else if name_prefix in('R', 'RS', 'RT', 'RD', 'RDS', 'RDT', 'RA', 'RAS', 'RAT') then ROLE = 'RESIDUAL';
MPRINT(EMADVISECOLUMNS):   else if name_prefix ='D' then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'DECISION';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if name_prefix ='B' then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'SEGMENT';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if name_prefix in('EP', 'BP', 'CP', 'EL', 'CL', 'BL', 'W', 'ROI', 'IC') then ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   else do;
MPRINT(EMADVISECOLUMNS):   array _ROLE_ (19) $32 _TEMPORARY_ ('ASSESS','CLASSIFICATION','CENSOR', 'COST', 'CROSSID', 'DECISION', 'ID','INPUT', 'LABEL', 'MISSING','PREDICT','REFERRER','REJECTED', 'RESIDUAL','SEGMENT', 'SEQUENCE','TARGET', 'TEXT', 'TIMEID');
MPRINT(EMADVISECOLUMNS):   drop _found_ i;
MPRINT(EMADVISECOLUMNS):   _found_=0;
MPRINT(EMADVISECOLUMNS):   do i=1 to 19 until(_found_=1);
MPRINT(EMADVISECOLUMNS):   if index(_uname, trim(_ROLE_{i}))=1 then do;
MPRINT(EMADVISECOLUMNS):   ROLE=_ROLE_{i};
MPRINT(EMADVISECOLUMNS):   if ROLE = 'ID' then LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   else if ROLE = 'SEGMENT' then LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   else if ROLE = 'TIMEID' and TYPE='N' then LEVEL = 'INTERVAL';
MPRINT(EMADVISECOLUMNS):   _found_=1;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if length(_uname)>2 then do;
MPRINT(EMADVISECOLUMNS):   if substr(reverse(trim(_uname)), 1, 3) = 'DI_' then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'ID';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if ROLE='FREQ' then _freqflag=1;
MPRINT(EMADVISECOLUMNS):   else if ROLE = 'CLASSIFICATION' then LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   if symexist('RATEMKG_ROLE') then do;
MPRINT(EMADVISECOLUMNS):   if upcase(symget('RATEMKG_ROLE')) in('Y', 'YES') then do;
MPRINT(EMADVISECOLUMNS):   if _uname =: 'POLICY' then ROLE = 'POLICYID';
MPRINT(EMADVISECOLUMNS):   else if _uname in ('PARTITION', '_PARTIND_') then ROLE = 'PARTITION';
MPRINT(EMADVISECOLUMNS):   else if type = 'N' then do;
MPRINT(EMADVISECOLUMNS):   if _uname = 'EXPOSURE' then ROLE = 'EXPOSURE';
MPRINT(EMADVISECOLUMNS):   else if _uname = 'YEAR' then ROLE = 'YEAR';
MPRINT(EMADVISECOLUMNS):   else if _uname = 'WEIGHT' then ROLE = 'WEIGHT';
MPRINT(EMADVISECOLUMNS):   else if _uname = 'OFFSET' then ROLE = 'OFFSET';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if role = ' ' then do;
MPRINT(EMADVISECOLUMNS):   if formattype in('DATE', 'DATETIME', 'TIME') then role = 'TIMEID';
MPRINT(EMADVISECOLUMNS):   else role = 'INPUT';
MPRINT(EMADVISECOLUMNS):   roleAssigned = 1;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else role = upcase(role);
MPRINT(EMADVISECOLUMNS):   if REPORT = '' then REPORT = 'N';
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M0700ORJ;
MPRINT(EMADVISECOLUMNS):   set WORK.M0700ORJ;
MPRINT(EMADVISECOLUMNS):   label NAME = "Variable Name" TYPE = "Type" ROLE = "Role" LEVEL= "Measurement Level" ORDER= "Order" CREATOR= "Creator" FORMATTYPE= "Format Type" FAMILY= "Family" DISTRIBUTION= "Distribution" PRICE= "Price" LOWERLIMIT= "Lower 
limit" UPPERLIMIT= "Upper Limit" REPORT= "Report" COMMENT= "Comment" INDEX= "Index" INDEXTYPE= "IndexType" LABEL= "Label" LENGTH= "Length";
MPRINT(EMADVISECOLUMNS):   drop levelAssigned roleAssigned;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):   
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   proc sort data=WORK.COLUMNMETA;
MPRINT(EM_DIAGRAM):   by NAME;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * &nodeid: Merge incoming metadata;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   proc contents data=EMWS1.Impt_TRAIN noprint out=_temp2(keep=NAME);
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=_temp2;
MPRINT(EM_DIAGRAM):   by NAME;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=EMWS1.Impt_CMeta_TRAIN out=_temp;
MPRINT(EM_DIAGRAM):   by NAME;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data EMWS1.Repl_CMeta_TRAIN;
MPRINT(EM_DIAGRAM):   merge WORK.COLUMNMETA(in=_a) _temp2(in=_b) _temp(drop=FORMAT INFORMAT LENGTH INDEX INDEXTYPE in=_c) end=_eof_;
MPRINT(EM_DIAGRAM):   by NAME;
MPRINT(EM_DIAGRAM):   if (^_a and _b) or (^_c and _a and _b) then delete;
MPRINT(EM_DIAGRAM):   if ^_b then CREATOR = "Repl";
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Repl: Apply Delta Code;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   if NAME="IMP_bore" then do;
MPRINT(EM_DIAGRAM):   ROLE="REJECTED";
MPRINT(EM_DIAGRAM):   COMMENT= "Replaced by Repl";
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if NAME="REP_IMP_bore" then do;
MPRINT(EM_DIAGRAM):   ROLE="INPUT";
MPRINT(EM_DIAGRAM):   LEVEL="INTERVAL";
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if NAME="IMP_price" then do;
MPRINT(EM_DIAGRAM):   ROLE="REJECTED";
MPRINT(EM_DIAGRAM):   COMMENT= "Replaced by Repl";
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if NAME="REP_IMP_price" then do;
MPRINT(EM_DIAGRAM):   ROLE="INPUT";
MPRINT(EM_DIAGRAM):   LEVEL="INTERVAL";
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if NAME="IMP_stroke" then do;
MPRINT(EM_DIAGRAM):   ROLE="REJECTED";
MPRINT(EM_DIAGRAM):   COMMENT= "Replaced by Repl";
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if NAME="REP_IMP_stroke" then do;
MPRINT(EM_DIAGRAM):   ROLE="INPUT";
MPRINT(EM_DIAGRAM):   LEVEL="INTERVAL";
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if NAME="city_mpg" then do;
MPRINT(EM_DIAGRAM):   ROLE="REJECTED";
MPRINT(EM_DIAGRAM):   COMMENT= "Replaced by Repl";
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if NAME="REP_city_mpg" then do;
MPRINT(EM_DIAGRAM):   ROLE="INPUT";
MPRINT(EM_DIAGRAM):   LEVEL="INTERVAL";
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if NAME="compression_ratio" then do;
MPRINT(EM_DIAGRAM):   ROLE="REJECTED";
MPRINT(EM_DIAGRAM):   COMMENT= "Replaced by Repl";
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if NAME="REP_compression_ratio" then do;
MPRINT(EM_DIAGRAM):   ROLE="INPUT";
MPRINT(EM_DIAGRAM):   LEVEL="INTERVAL";
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if NAME="curb_weight" then do;
MPRINT(EM_DIAGRAM):   ROLE="REJECTED";
MPRINT(EM_DIAGRAM):   COMMENT= "Replaced by Repl";
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if NAME="REP_curb_weight" then do;
MPRINT(EM_DIAGRAM):   ROLE="INPUT";
MPRINT(EM_DIAGRAM):   LEVEL="INTERVAL";
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if NAME="engine_size" then do;
MPRINT(EM_DIAGRAM):   ROLE="REJECTED";
MPRINT(EM_DIAGRAM):   COMMENT= "Replaced by Repl";
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if NAME="REP_engine_size" then do;
MPRINT(EM_DIAGRAM):   ROLE="INPUT";
MPRINT(EM_DIAGRAM):   LEVEL="INTERVAL";
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if NAME="height" then do;
MPRINT(EM_DIAGRAM):   ROLE="REJECTED";
MPRINT(EM_DIAGRAM):   COMMENT= "Replaced by Repl";
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if NAME="REP_height" then do;
MPRINT(EM_DIAGRAM):   ROLE="INPUT";
MPRINT(EM_DIAGRAM):   LEVEL="INTERVAL";
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if NAME="highway_mpg" then do;
MPRINT(EM_DIAGRAM):   ROLE="REJECTED";
MPRINT(EM_DIAGRAM):   COMMENT= "Replaced by Repl";
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if NAME="REP_highway_mpg" then do;
MPRINT(EM_DIAGRAM):   ROLE="INPUT";
MPRINT(EM_DIAGRAM):   LEVEL="INTERVAL";
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if NAME="horsepower" then do;
MPRINT(EM_DIAGRAM):   ROLE="REJECTED";
MPRINT(EM_DIAGRAM):   COMMENT= "Replaced by Repl";
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if NAME="REP_horsepower" then do;
MPRINT(EM_DIAGRAM):   ROLE="INPUT";
MPRINT(EM_DIAGRAM):   LEVEL="INTERVAL";
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if NAME="length" then do;
MPRINT(EM_DIAGRAM):   ROLE="REJECTED";
MPRINT(EM_DIAGRAM):   COMMENT= "Replaced by Repl";
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if NAME="REP_length" then do;
MPRINT(EM_DIAGRAM):   ROLE="INPUT";
MPRINT(EM_DIAGRAM):   LEVEL="INTERVAL";
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if NAME="peak_rpm" then do;
MPRINT(EM_DIAGRAM):   ROLE="REJECTED";
MPRINT(EM_DIAGRAM):   COMMENT= "Replaced by Repl";
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if NAME="REP_peak_rpm" then do;
MPRINT(EM_DIAGRAM):   ROLE="INPUT";
MPRINT(EM_DIAGRAM):   LEVEL="INTERVAL";
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if NAME="wheel_base" then do;
MPRINT(EM_DIAGRAM):   ROLE="REJECTED";
MPRINT(EM_DIAGRAM):   COMMENT= "Replaced by Repl";
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if NAME="REP_wheel_base" then do;
MPRINT(EM_DIAGRAM):   ROLE="INPUT";
MPRINT(EM_DIAGRAM):   LEVEL="INTERVAL";
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if NAME="width" then do;
MPRINT(EM_DIAGRAM):   ROLE="REJECTED";
MPRINT(EM_DIAGRAM):   COMMENT= "Replaced by Repl";
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if NAME="REP_width" then do;
MPRINT(EM_DIAGRAM):   ROLE="INPUT";
MPRINT(EM_DIAGRAM):   LEVEL="INTERVAL";
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   filename _delta;
NOTE: View EMWS1.REPL_TRAIN.VIEW used (Total process time):
      real time           0.06 seconds
      cpu time            0.07 seconds
      
NOTE: View EMWS1.REPL_VALIDATE.VIEW used (Total process time):
      real time           0.06 seconds
      cpu time            0.07 seconds
      
MPRINT(EM_DIAGRAM):    proc printto;
MPRINT(EM_DIAGRAM):   run;
