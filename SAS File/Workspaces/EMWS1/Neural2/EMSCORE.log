MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   call symput('NLDATE', strip(put(date(), NLDATE.)));
MPRINT(EM_DIAGRAM):   call symput('NLTIME', strip(put(datetime(), NLTIME.)));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   nldate= sasmsg("sashelp.dmine", "log_date_note", 'N', "April 16, 2021" );
MPRINT(EM_DIAGRAM):   nltime= sasmsg("sashelp.dmine", "log_time_note", 'N', "11:30:17 o'clock" 
);
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "* Score Log";
MPRINT(EM_DIAGRAM):   put nldate;
MPRINT(EM_DIAGRAM):   put nltime;
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   run;
*------------------------------------------------------------*
* Score Log
Date:                April 16, 2021
Time:                11:30:17 o'clock
*------------------------------------------------------------*
MPRINT(EM_DIAGRAM):    filename O1PEHQUM "H:\746\Decision Tree 
test\Workspaces\EMWS1\Neural2\EMSCORE.out" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):   proc printto print=O1PEHQUM new;
MPRINT(EM_DIAGRAM):   run;
NOTE: This SAS session is using a registry in WORK.  All changes will be lost at the end of 
      this session.
95054      data work.outkey;
MPRINT(EM_DIAGRAM):    data work.outkey;
95055      set EMWS1.Neural2_OUTKEY;
MPRINT(EM_DIAGRAM):   set EMWS1.Neural2_OUTKEY;
95056      if upcase(ROLE) = 'HIDDEN';
MPRINT(EM_DIAGRAM):   if upcase(ROLE) = 'HIDDEN';
95057      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 49 observations read from the data set EMWS1.NEURAL2_OUTKEY.
NOTE: The data set WORK.OUTKEY has 3 observations and 8 variables.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.01 seconds
      

95058      filename emflow "H:\746\Decision Tree test\Workspaces\EMWS1\Neural2\EMFLOWSCORE.sas"
95058    ! ;
MPRINT(EM_DIAGRAM):    filename emflow "H:\746\Decision Tree 
test\Workspaces\EMWS1\Neural2\EMFLOWSCORE.sas";
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Neural2: Scoring DATA data;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
95059      *------------------------------------------------------------*;
95060      * Neural2: Scoring DATA data;
95061      *------------------------------------------------------------*;
95062      data EMWS1.Neural2_TRAIN
95063      / view=EMWS1.Neural2_TRAIN
95064      ;
MPRINT(EM_DIAGRAM):   data EMWS1.Neural2_TRAIN / view=EMWS1.Neural2_TRAIN ;
95065      set EMWS1.Repl2_TRAIN
95066      ;
MPRINT(EM_DIAGRAM):   set EMWS1.Repl2_TRAIN ;
95067      %inc emflow;
NOTE: %INCLUDE (level 1) file EMFLOW is file H:\746\Decision Tree 
      test\Workspaces\EMWS1\Neural2\EMFLOWSCORE.sas.
95068     +***********************************;
MPRINT(EM_DIAGRAM):   ***********************************;
95069     +*** Begin Scoring Code for Neural;
MPRINT(EM_DIAGRAM):   *** Begin Scoring Code for Neural;
95070     +***********************************;
MPRINT(EM_DIAGRAM):   ***********************************;
95071     +DROP _DM_BAD _EPS _NOCL_ _MAX_ _MAXP_ _SUM_ _NTRIALS;
MPRINT(EM_DIAGRAM):   DROP _DM_BAD _EPS _NOCL_ _MAX_ _MAXP_ _SUM_ _NTRIALS;
95072     + _DM_BAD = 0;
MPRINT(EM_DIAGRAM):   _DM_BAD = 0;
95073     + _NOCL_ = .;
MPRINT(EM_DIAGRAM):   _NOCL_ = .;
95074     + _MAX_ = .;
MPRINT(EM_DIAGRAM):   _MAX_ = .;
95075     + _MAXP_ = .;
MPRINT(EM_DIAGRAM):   _MAXP_ = .;
95076     + _SUM_ = .;
MPRINT(EM_DIAGRAM):   _SUM_ = .;
95077     + _NTRIALS = .;
MPRINT(EM_DIAGRAM):   _NTRIALS = .;
95078     + _EPS =                1E-10;
MPRINT(EM_DIAGRAM):   _EPS = 1E-10;
95079     +LENGTH _WARN_ $4
95080     +      F_Risk  $ 12
95081     +;
MPRINT(EM_DIAGRAM):   LENGTH _WARN_ $4 F_Risk $ 12 ;
95082     +      label S_LOG_REP_IMP_price = 'Standard: LOG_REP_IMP_price' ;
MPRINT(EM_DIAGRAM):   label S_LOG_REP_IMP_price = 'Standard: LOG_REP_IMP_price' ;
95083     +
95084     +      label S_LOG_REP_compression_ratio =
95085     +'Standard: LOG_REP_compression_ratio' ;
MPRINT(EM_DIAGRAM):   label S_LOG_REP_compression_ratio = 'Standard: 
LOG_REP_compression_ratio' ;
95086     +
95087     +      label S_LOG_REP_engine_size = 'Standard: LOG_REP_engine_size' ;
MPRINT(EM_DIAGRAM):   label S_LOG_REP_engine_size = 'Standard: LOG_REP_engine_size' ;
95088     +
95089     +      label S_REP_IMP_bore = 'Standard: REP_IMP_bore' ;
MPRINT(EM_DIAGRAM):   label S_REP_IMP_bore = 'Standard: REP_IMP_bore' ;
95090     +
95091     +      label S_REP_IMP_stroke = 'Standard: REP_IMP_stroke' ;
MPRINT(EM_DIAGRAM):   label S_REP_IMP_stroke = 'Standard: REP_IMP_stroke' ;
95092     +
95093     +      label S_REP_city_mpg = 'Standard: REP_city_mpg' ;
MPRINT(EM_DIAGRAM):   label S_REP_city_mpg = 'Standard: REP_city_mpg' ;
95094     +
95095     +      label S_REP_curb_weight = 'Standard: REP_curb_weight' ;
MPRINT(EM_DIAGRAM):   label S_REP_curb_weight = 'Standard: REP_curb_weight' ;
95096     +
95097     +      label S_REP_height = 'Standard: REP_height' ;
MPRINT(EM_DIAGRAM):   label S_REP_height = 'Standard: REP_height' ;
95098     +
95099     +      label S_REP_highway_mpg = 'Standard: REP_highway_mpg' ;
MPRINT(EM_DIAGRAM):   label S_REP_highway_mpg = 'Standard: REP_highway_mpg' ;
95100     +
95101     +      label S_REP_horsepower = 'Standard: REP_horsepower' ;
MPRINT(EM_DIAGRAM):   label S_REP_horsepower = 'Standard: REP_horsepower' ;
95102     +
95103     +      label S_REP_length = 'Standard: REP_length' ;
MPRINT(EM_DIAGRAM):   label S_REP_length = 'Standard: REP_length' ;
95104     +
95105     +      label S_REP_peak_rpm = 'Standard: REP_peak_rpm' ;
MPRINT(EM_DIAGRAM):   label S_REP_peak_rpm = 'Standard: REP_peak_rpm' ;
95106     +
95107     +      label S_REP_wheel_base = 'Standard: REP_wheel_base' ;
MPRINT(EM_DIAGRAM):   label S_REP_wheel_base = 'Standard: REP_wheel_base' ;
95108     +
95109     +      label S_REP_width = 'Standard: REP_width' ;
MPRINT(EM_DIAGRAM):   label S_REP_width = 'Standard: REP_width' ;
95110     +
95111     +      label M_bore0 = 'Dummy: M_bore=0' ;
MPRINT(EM_DIAGRAM):   label M_bore0 = 'Dummy: M_bore=0' ;
95112     +
95113     +      label M_num_of_doors0 = 'Dummy: M_num_of_doors=0' ;
MPRINT(EM_DIAGRAM):   label M_num_of_doors0 = 'Dummy: M_num_of_doors=0' ;
95114     +
95115     +      label M_price0 = 'Dummy: M_price=0' ;
MPRINT(EM_DIAGRAM):   label M_price0 = 'Dummy: M_price=0' ;
95116     +
95117     +      label M_stroke0 = 'Dummy: M_stroke=0' ;
MPRINT(EM_DIAGRAM):   label M_stroke0 = 'Dummy: M_stroke=0' ;
95118     +
95119     +      label IMP_num_of_doors2 = 'Dummy: IMP_num_of_doors=2' ;
MPRINT(EM_DIAGRAM):   label IMP_num_of_doors2 = 'Dummy: IMP_num_of_doors=2' ;
95120     +
95121     +      label REP_aspirationS = 'Dummy: REP_aspiration=S' ;
MPRINT(EM_DIAGRAM):   label REP_aspirationS = 'Dummy: REP_aspiration=S' ;
95122     +
95123     +      label REP_body_styleC = 'Dummy: REP_body_style=C' ;
MPRINT(EM_DIAGRAM):   label REP_body_styleC = 'Dummy: REP_body_style=C' ;
95124     +
95125     +      label REP_body_styleH = 'Dummy: REP_body_style=H' ;
MPRINT(EM_DIAGRAM):   label REP_body_styleH = 'Dummy: REP_body_style=H' ;
95126     +
95127     +      label REP_body_styleS = 'Dummy: REP_body_style=S' ;
MPRINT(EM_DIAGRAM):   label REP_body_styleS = 'Dummy: REP_body_style=S' ;
95128     +
95129     +      label REP_drive_wheels4 = 'Dummy: REP_drive_wheels=4' ;
MPRINT(EM_DIAGRAM):   label REP_drive_wheels4 = 'Dummy: REP_drive_wheels=4' ;
95130     +
95131     +      label REP_drive_wheelsF = 'Dummy: REP_drive_wheels=F' ;
MPRINT(EM_DIAGRAM):   label REP_drive_wheelsF = 'Dummy: REP_drive_wheels=F' ;
95132     +
95133     +      label REP_engine_locationF = 'Dummy: REP_engine_location=F' ;
MPRINT(EM_DIAGRAM):   label REP_engine_locationF = 'Dummy: REP_engine_location=F' ;
95134     +
95135     +      label REP_fuel_systemnon_spdi = 'Dummy: REP_fuel_system=non-spdi' ;
MPRINT(EM_DIAGRAM):   label REP_fuel_systemnon_spdi = 'Dummy: REP_fuel_system=non-spdi' ;
95136     +
95137     +      label REP_fuel_typeD = 'Dummy: REP_fuel_type=D' ;
MPRINT(EM_DIAGRAM):   label REP_fuel_typeD = 'Dummy: REP_fuel_type=D' ;
95138     +
95139     +      label REP_num_of_cylinders__4 = 'Dummy: REP_num_of_cylinders=<=4' ;
MPRINT(EM_DIAGRAM):   label REP_num_of_cylinders__4 = 'Dummy: REP_num_of_cylinders=<=4' ;
95140     +
95141     +      label engine_typedohc = 'Dummy: engine_type=dohc' ;
MPRINT(EM_DIAGRAM):   label engine_typedohc = 'Dummy: engine_type=dohc' ;
95142     +
95143     +      label engine_typel = 'Dummy: engine_type=l' ;
MPRINT(EM_DIAGRAM):   label engine_typel = 'Dummy: engine_type=l' ;
95144     +
95145     +      label engine_typeohc = 'Dummy: engine_type=ohc' ;
MPRINT(EM_DIAGRAM):   label engine_typeohc = 'Dummy: engine_type=ohc' ;
95146     +
95147     +      label engine_typeohcf = 'Dummy: engine_type=ohcf' ;
MPRINT(EM_DIAGRAM):   label engine_typeohcf = 'Dummy: engine_type=ohcf' ;
95148     +
95149     +      label engine_typeohcv = 'Dummy: engine_type=ohcv' ;
MPRINT(EM_DIAGRAM):   label engine_typeohcv = 'Dummy: engine_type=ohcv' ;
95150     +
95151     +      label H11 = 'Hidden: H1=1' ;
MPRINT(EM_DIAGRAM):   label H11 = 'Hidden: H1=1' ;
95152     +
95153     +      label H12 = 'Hidden: H1=2' ;
MPRINT(EM_DIAGRAM):   label H12 = 'Hidden: H1=2' ;
95154     +
95155     +      label H13 = 'Hidden: H1=3' ;
MPRINT(EM_DIAGRAM):   label H13 = 'Hidden: H1=3' ;
95156     +
95157     +      label I_Risk = 'Into: Risk' ;
MPRINT(EM_DIAGRAM):   label I_Risk = 'Into: Risk' ;
95158     +
95159     +      label F_Risk = 'From: Risk' ;
MPRINT(EM_DIAGRAM):   label F_Risk = 'From: Risk' ;
95160     +
95161     +      label U_Risk = 'Unnormalized Into: Risk' ;
MPRINT(EM_DIAGRAM):   label U_Risk = 'Unnormalized Into: Risk' ;
95162     +
95163     +      label P_Risk1 = 'Predicted: Risk=1' ;
MPRINT(EM_DIAGRAM):   label P_Risk1 = 'Predicted: Risk=1' ;
95164     +
95165     +      label R_Risk1 = 'Residual: Risk=1' ;
MPRINT(EM_DIAGRAM):   label R_Risk1 = 'Residual: Risk=1' ;
95166     +
95167     +      label P_Risk0 = 'Predicted: Risk=0' ;
MPRINT(EM_DIAGRAM):   label P_Risk0 = 'Predicted: Risk=0' ;
95168     +
95169     +      label R_Risk0 = 'Residual: Risk=0' ;
MPRINT(EM_DIAGRAM):   label R_Risk0 = 'Residual: Risk=0' ;
95170     +
95171     +      label  _WARN_ = "Warnings";
MPRINT(EM_DIAGRAM):   label _WARN_ = "Warnings";
95172     +
95173     +*** Generate dummy variables for M_bore ;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for M_bore ;
95174     +drop M_bore0 ;
MPRINT(EM_DIAGRAM):   drop M_bore0 ;
95175     +if missing( M_bore ) then do;
MPRINT(EM_DIAGRAM):   if missing( M_bore ) then do;
95176     +   M_bore0 = .;
MPRINT(EM_DIAGRAM):   M_bore0 = .;
95177     +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
95178     +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
95179     +end;
MPRINT(EM_DIAGRAM):   end;
95180     +else do;
MPRINT(EM_DIAGRAM):   else do;
95181     +   length _dm12 $ 12; drop _dm12 ;
MPRINT(EM_DIAGRAM):   length _dm12 $ 12;
MPRINT(EM_DIAGRAM):   drop _dm12 ;
95182     +   _dm12 = put( M_bore , BEST12. );
MPRINT(EM_DIAGRAM):   _dm12 = put( M_bore , BEST12. );
95183     +   %DMNORMIP( _dm12 )
MPRINT(DMNORMIP):   call dmnorm(_dm12,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
95184     +   if _dm12 = '0'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 = '0' then do;
95185     +      M_bore0 = 1;
MPRINT(EM_DIAGRAM):   M_bore0 = 1;
95186     +   end;
MPRINT(EM_DIAGRAM):   end;
95187     +   else if _dm12 = '1'  then do;
MPRINT(EM_DIAGRAM):   else if _dm12 = '1' then do;
95188     +      M_bore0 = -1;
MPRINT(EM_DIAGRAM):   M_bore0 = -1;
95189     +   end;
MPRINT(EM_DIAGRAM):   end;
95190     +   else do;
MPRINT(EM_DIAGRAM):   else do;
95191     +      M_bore0 = .;
MPRINT(EM_DIAGRAM):   M_bore0 = .;
95192     +      substr(_warn_,2,1) = 'U';
MPRINT(EM_DIAGRAM):   substr(_warn_,2,1) = 'U';
95193     +      _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
95194     +   end;
MPRINT(EM_DIAGRAM):   end;
95195     +end;
MPRINT(EM_DIAGRAM):   end;
95196     +
95197     +*** Generate dummy variables for M_num_of_doors ;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for M_num_of_doors ;
95198     +drop M_num_of_doors0 ;
MPRINT(EM_DIAGRAM):   drop M_num_of_doors0 ;
95199     +if missing( M_num_of_doors ) then do;
MPRINT(EM_DIAGRAM):   if missing( M_num_of_doors ) then do;
95200     +   M_num_of_doors0 = .;
MPRINT(EM_DIAGRAM):   M_num_of_doors0 = .;
95201     +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
95202     +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
95203     +end;
MPRINT(EM_DIAGRAM):   end;
95204     +else do;
MPRINT(EM_DIAGRAM):   else do;
95205     +   length _dm12 $ 12; drop _dm12 ;
MPRINT(EM_DIAGRAM):   length _dm12 $ 12;
MPRINT(EM_DIAGRAM):   drop _dm12 ;
95206     +   _dm12 = put( M_num_of_doors , BEST12. );
MPRINT(EM_DIAGRAM):   _dm12 = put( M_num_of_doors , BEST12. );
95207     +   %DMNORMIP( _dm12 )
MPRINT(DMNORMIP):   call dmnorm(_dm12,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
95208     +   if _dm12 = '0'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 = '0' then do;
95209     +      M_num_of_doors0 = 1;
MPRINT(EM_DIAGRAM):   M_num_of_doors0 = 1;
95210     +   end;
MPRINT(EM_DIAGRAM):   end;
95211     +   else if _dm12 = '1'  then do;
MPRINT(EM_DIAGRAM):   else if _dm12 = '1' then do;
95212     +      M_num_of_doors0 = -1;
MPRINT(EM_DIAGRAM):   M_num_of_doors0 = -1;
95213     +   end;
MPRINT(EM_DIAGRAM):   end;
95214     +   else do;
MPRINT(EM_DIAGRAM):   else do;
95215     +      M_num_of_doors0 = .;
MPRINT(EM_DIAGRAM):   M_num_of_doors0 = .;
95216     +      substr(_warn_,2,1) = 'U';
MPRINT(EM_DIAGRAM):   substr(_warn_,2,1) = 'U';
95217     +      _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
95218     +   end;
MPRINT(EM_DIAGRAM):   end;
95219     +end;
MPRINT(EM_DIAGRAM):   end;
95220     +
95221     +*** Generate dummy variables for M_price ;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for M_price ;
95222     +drop M_price0 ;
MPRINT(EM_DIAGRAM):   drop M_price0 ;
95223     +if missing( M_price ) then do;
MPRINT(EM_DIAGRAM):   if missing( M_price ) then do;
95224     +   M_price0 = .;
MPRINT(EM_DIAGRAM):   M_price0 = .;
95225     +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
95226     +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
95227     +end;
MPRINT(EM_DIAGRAM):   end;
95228     +else do;
MPRINT(EM_DIAGRAM):   else do;
95229     +   length _dm12 $ 12; drop _dm12 ;
MPRINT(EM_DIAGRAM):   length _dm12 $ 12;
MPRINT(EM_DIAGRAM):   drop _dm12 ;
95230     +   _dm12 = put( M_price , BEST12. );
MPRINT(EM_DIAGRAM):   _dm12 = put( M_price , BEST12. );
95231     +   %DMNORMIP( _dm12 )
MPRINT(DMNORMIP):   call dmnorm(_dm12,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
95232     +   if _dm12 = '0'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 = '0' then do;
95233     +      M_price0 = 1;
MPRINT(EM_DIAGRAM):   M_price0 = 1;
95234     +   end;
MPRINT(EM_DIAGRAM):   end;
95235     +   else if _dm12 = '1'  then do;
MPRINT(EM_DIAGRAM):   else if _dm12 = '1' then do;
95236     +      M_price0 = -1;
MPRINT(EM_DIAGRAM):   M_price0 = -1;
95237     +   end;
MPRINT(EM_DIAGRAM):   end;
95238     +   else do;
MPRINT(EM_DIAGRAM):   else do;
95239     +      M_price0 = .;
MPRINT(EM_DIAGRAM):   M_price0 = .;
95240     +      substr(_warn_,2,1) = 'U';
MPRINT(EM_DIAGRAM):   substr(_warn_,2,1) = 'U';
95241     +      _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
95242     +   end;
MPRINT(EM_DIAGRAM):   end;
95243     +end;
MPRINT(EM_DIAGRAM):   end;
95244     +
95245     +*** Generate dummy variables for M_stroke ;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for M_stroke ;
95246     +drop M_stroke0 ;
MPRINT(EM_DIAGRAM):   drop M_stroke0 ;
95247     +if missing( M_stroke ) then do;
MPRINT(EM_DIAGRAM):   if missing( M_stroke ) then do;
95248     +   M_stroke0 = .;
MPRINT(EM_DIAGRAM):   M_stroke0 = .;
95249     +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
95250     +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
95251     +end;
MPRINT(EM_DIAGRAM):   end;
95252     +else do;
MPRINT(EM_DIAGRAM):   else do;
95253     +   length _dm12 $ 12; drop _dm12 ;
MPRINT(EM_DIAGRAM):   length _dm12 $ 12;
MPRINT(EM_DIAGRAM):   drop _dm12 ;
95254     +   _dm12 = put( M_stroke , BEST12. );
MPRINT(EM_DIAGRAM):   _dm12 = put( M_stroke , BEST12. );
95255     +   %DMNORMIP( _dm12 )
MPRINT(DMNORMIP):   call dmnorm(_dm12,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
95256     +   if _dm12 = '0'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 = '0' then do;
95257     +      M_stroke0 = 1;
MPRINT(EM_DIAGRAM):   M_stroke0 = 1;
95258     +   end;
MPRINT(EM_DIAGRAM):   end;
95259     +   else if _dm12 = '1'  then do;
MPRINT(EM_DIAGRAM):   else if _dm12 = '1' then do;
95260     +      M_stroke0 = -1;
MPRINT(EM_DIAGRAM):   M_stroke0 = -1;
95261     +   end;
MPRINT(EM_DIAGRAM):   end;
95262     +   else do;
MPRINT(EM_DIAGRAM):   else do;
95263     +      M_stroke0 = .;
MPRINT(EM_DIAGRAM):   M_stroke0 = .;
95264     +      substr(_warn_,2,1) = 'U';
MPRINT(EM_DIAGRAM):   substr(_warn_,2,1) = 'U';
95265     +      _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
95266     +   end;
MPRINT(EM_DIAGRAM):   end;
95267     +end;
MPRINT(EM_DIAGRAM):   end;
95268     +
95269     +*** Generate dummy variables for IMP_num_of_doors ;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for IMP_num_of_doors ;
95270     +drop IMP_num_of_doors2 ;
MPRINT(EM_DIAGRAM):   drop IMP_num_of_doors2 ;
95271     +if missing( IMP_num_of_doors ) then do;
MPRINT(EM_DIAGRAM):   if missing( IMP_num_of_doors ) then do;
95272     +   IMP_num_of_doors2 = .;
MPRINT(EM_DIAGRAM):   IMP_num_of_doors2 = .;
95273     +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
95274     +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
95275     +end;
MPRINT(EM_DIAGRAM):   end;
95276     +else do;
MPRINT(EM_DIAGRAM):   else do;
95277     +   length _dm12 $ 12; drop _dm12 ;
MPRINT(EM_DIAGRAM):   length _dm12 $ 12;
MPRINT(EM_DIAGRAM):   drop _dm12 ;
95278     +   _dm12 = put( IMP_num_of_doors , BEST12. );
MPRINT(EM_DIAGRAM):   _dm12 = put( IMP_num_of_doors , BEST12. );
95279     +   %DMNORMIP( _dm12 )
MPRINT(DMNORMIP):   call dmnorm(_dm12,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
95280     +   if _dm12 = '4'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 = '4' then do;
95281     +      IMP_num_of_doors2 = -1;
MPRINT(EM_DIAGRAM):   IMP_num_of_doors2 = -1;
95282     +   end;
MPRINT(EM_DIAGRAM):   end;
95283     +   else if _dm12 = '2'  then do;
MPRINT(EM_DIAGRAM):   else if _dm12 = '2' then do;
95284     +      IMP_num_of_doors2 = 1;
MPRINT(EM_DIAGRAM):   IMP_num_of_doors2 = 1;
95285     +   end;
MPRINT(EM_DIAGRAM):   end;
95286     +   else do;
MPRINT(EM_DIAGRAM):   else do;
95287     +      IMP_num_of_doors2 = .;
MPRINT(EM_DIAGRAM):   IMP_num_of_doors2 = .;
95288     +      substr(_warn_,2,1) = 'U';
MPRINT(EM_DIAGRAM):   substr(_warn_,2,1) = 'U';
95289     +      _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
95290     +   end;
MPRINT(EM_DIAGRAM):   end;
95291     +end;
MPRINT(EM_DIAGRAM):   end;
95292     +
95293     +*** Generate dummy variables for REP_aspiration ;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for REP_aspiration ;
95294     +drop REP_aspirationS ;
MPRINT(EM_DIAGRAM):   drop REP_aspirationS ;
95295     +if missing( REP_aspiration ) then do;
MPRINT(EM_DIAGRAM):   if missing( REP_aspiration ) then do;
95296     +   REP_aspirationS = .;
MPRINT(EM_DIAGRAM):   REP_aspirationS = .;
95297     +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
95298     +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
95299     +end;
MPRINT(EM_DIAGRAM):   end;
95300     +else do;
MPRINT(EM_DIAGRAM):   else do;
95301     +   length _dm5 $ 5; drop _dm5 ;
MPRINT(EM_DIAGRAM):   length _dm5 $ 5;
MPRINT(EM_DIAGRAM):   drop _dm5 ;
95302     +   _dm5 = put( REP_aspiration , $5. );
MPRINT(EM_DIAGRAM):   _dm5 = put( REP_aspiration , $5. );
95303     +   %DMNORMIP( _dm5 )
MPRINT(DMNORMIP):   call dmnorm(_dm5,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
95304     +   if _dm5 = 'S'  then do;
MPRINT(EM_DIAGRAM):   if _dm5 = 'S' then do;
95305     +      REP_aspirationS = 1;
MPRINT(EM_DIAGRAM):   REP_aspirationS = 1;
95306     +   end;
MPRINT(EM_DIAGRAM):   end;
95307     +   else if _dm5 = 'T'  then do;
MPRINT(EM_DIAGRAM):   else if _dm5 = 'T' then do;
95308     +      REP_aspirationS = -1;
MPRINT(EM_DIAGRAM):   REP_aspirationS = -1;
95309     +   end;
MPRINT(EM_DIAGRAM):   end;
95310     +   else do;
MPRINT(EM_DIAGRAM):   else do;
95311     +      REP_aspirationS = .;
MPRINT(EM_DIAGRAM):   REP_aspirationS = .;
95312     +      substr(_warn_,2,1) = 'U';
MPRINT(EM_DIAGRAM):   substr(_warn_,2,1) = 'U';
95313     +      _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
95314     +   end;
MPRINT(EM_DIAGRAM):   end;
95315     +end;
MPRINT(EM_DIAGRAM):   end;
95316     +
95317     +*** Generate dummy variables for REP_body_style ;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for REP_body_style ;
95318     +drop REP_body_styleC REP_body_styleH REP_body_styleS ;
MPRINT(EM_DIAGRAM):   drop REP_body_styleC REP_body_styleH REP_body_styleS ;
95319     +if missing( REP_body_style ) then do;
MPRINT(EM_DIAGRAM):   if missing( REP_body_style ) then do;
95320     +   REP_body_styleC = .;
MPRINT(EM_DIAGRAM):   REP_body_styleC = .;
95321     +   REP_body_styleH = .;
MPRINT(EM_DIAGRAM):   REP_body_styleH = .;
95322     +   REP_body_styleS = .;
MPRINT(EM_DIAGRAM):   REP_body_styleS = .;
95323     +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
95324     +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
95325     +end;
MPRINT(EM_DIAGRAM):   end;
95326     +else do;
MPRINT(EM_DIAGRAM):   else do;
95327     +   length _dm11 $ 11; drop _dm11 ;
MPRINT(EM_DIAGRAM):   length _dm11 $ 11;
MPRINT(EM_DIAGRAM):   drop _dm11 ;
95328     +   %DMNORMCP( REP_body_style , _dm11 )
MPRINT(DMNORMCP):   _dm11=dmnorm(REP_body_style,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMCP):  );
95329     +   if _dm11 = 'S'  then do;
MPRINT(EM_DIAGRAM):   if _dm11 = 'S' then do;
95330     +      REP_body_styleC = 0;
MPRINT(EM_DIAGRAM):   REP_body_styleC = 0;
95331     +      REP_body_styleH = 0;
MPRINT(EM_DIAGRAM):   REP_body_styleH = 0;
95332     +      REP_body_styleS = 1;
MPRINT(EM_DIAGRAM):   REP_body_styleS = 1;
95333     +   end;
MPRINT(EM_DIAGRAM):   end;
95334     +   else if _dm11 = 'H'  then do;
MPRINT(EM_DIAGRAM):   else if _dm11 = 'H' then do;
95335     +      REP_body_styleC = 0;
MPRINT(EM_DIAGRAM):   REP_body_styleC = 0;
95336     +      REP_body_styleH = 1;
MPRINT(EM_DIAGRAM):   REP_body_styleH = 1;
95337     +      REP_body_styleS = 0;
MPRINT(EM_DIAGRAM):   REP_body_styleS = 0;
95338     +   end;
MPRINT(EM_DIAGRAM):   end;
95339     +   else if _dm11 = 'W'  then do;
MPRINT(EM_DIAGRAM):   else if _dm11 = 'W' then do;
95340     +      REP_body_styleC = -1;
MPRINT(EM_DIAGRAM):   REP_body_styleC = -1;
95341     +      REP_body_styleH = -1;
MPRINT(EM_DIAGRAM):   REP_body_styleH = -1;
95342     +      REP_body_styleS = -1;
MPRINT(EM_DIAGRAM):   REP_body_styleS = -1;
95343     +   end;
MPRINT(EM_DIAGRAM):   end;
95344     +   else if _dm11 = 'C'  then do;
MPRINT(EM_DIAGRAM):   else if _dm11 = 'C' then do;
95345     +      REP_body_styleC = 1;
MPRINT(EM_DIAGRAM):   REP_body_styleC = 1;
95346     +      REP_body_styleH = 0;
MPRINT(EM_DIAGRAM):   REP_body_styleH = 0;
95347     +      REP_body_styleS = 0;
MPRINT(EM_DIAGRAM):   REP_body_styleS = 0;
95348     +   end;
MPRINT(EM_DIAGRAM):   end;
95349     +   else do;
MPRINT(EM_DIAGRAM):   else do;
95350     +      REP_body_styleC = .;
MPRINT(EM_DIAGRAM):   REP_body_styleC = .;
95351     +      REP_body_styleH = .;
MPRINT(EM_DIAGRAM):   REP_body_styleH = .;
95352     +      REP_body_styleS = .;
MPRINT(EM_DIAGRAM):   REP_body_styleS = .;
95353     +      substr(_warn_,2,1) = 'U';
MPRINT(EM_DIAGRAM):   substr(_warn_,2,1) = 'U';
95354     +      _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
95355     +   end;
MPRINT(EM_DIAGRAM):   end;
95356     +end;
MPRINT(EM_DIAGRAM):   end;
95357     +
95358     +*** Generate dummy variables for REP_drive_wheels ;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for REP_drive_wheels ;
95359     +drop REP_drive_wheels4 REP_drive_wheelsF ;
MPRINT(EM_DIAGRAM):   drop REP_drive_wheels4 REP_drive_wheelsF ;
95360     +if missing( REP_drive_wheels ) then do;
MPRINT(EM_DIAGRAM):   if missing( REP_drive_wheels ) then do;
95361     +   REP_drive_wheels4 = .;
MPRINT(EM_DIAGRAM):   REP_drive_wheels4 = .;
95362     +   REP_drive_wheelsF = .;
MPRINT(EM_DIAGRAM):   REP_drive_wheelsF = .;
95363     +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
95364     +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
95365     +end;
MPRINT(EM_DIAGRAM):   end;
95366     +else do;
MPRINT(EM_DIAGRAM):   else do;
95367     +   length _dm3 $ 3; drop _dm3 ;
MPRINT(EM_DIAGRAM):   length _dm3 $ 3;
MPRINT(EM_DIAGRAM):   drop _dm3 ;
95368     +   %DMNORMCP( REP_drive_wheels , _dm3 )
MPRINT(DMNORMCP):   _dm3=dmnorm(REP_drive_wheels,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMCP):  );
95369     +   if _dm3 = 'F'  then do;
MPRINT(EM_DIAGRAM):   if _dm3 = 'F' then do;
95370     +      REP_drive_wheels4 = 0;
MPRINT(EM_DIAGRAM):   REP_drive_wheels4 = 0;
95371     +      REP_drive_wheelsF = 1;
MPRINT(EM_DIAGRAM):   REP_drive_wheelsF = 1;
95372     +   end;
MPRINT(EM_DIAGRAM):   end;
95373     +   else if _dm3 = 'R'  then do;
MPRINT(EM_DIAGRAM):   else if _dm3 = 'R' then do;
95374     +      REP_drive_wheels4 = -1;
MPRINT(EM_DIAGRAM):   REP_drive_wheels4 = -1;
95375     +      REP_drive_wheelsF = -1;
MPRINT(EM_DIAGRAM):   REP_drive_wheelsF = -1;
95376     +   end;
MPRINT(EM_DIAGRAM):   end;
95377     +   else if _dm3 = '4'  then do;
MPRINT(EM_DIAGRAM):   else if _dm3 = '4' then do;
95378     +      REP_drive_wheels4 = 1;
MPRINT(EM_DIAGRAM):   REP_drive_wheels4 = 1;
95379     +      REP_drive_wheelsF = 0;
MPRINT(EM_DIAGRAM):   REP_drive_wheelsF = 0;
95380     +   end;
MPRINT(EM_DIAGRAM):   end;
95381     +   else do;
MPRINT(EM_DIAGRAM):   else do;
95382     +      REP_drive_wheels4 = .;
MPRINT(EM_DIAGRAM):   REP_drive_wheels4 = .;
95383     +      REP_drive_wheelsF = .;
MPRINT(EM_DIAGRAM):   REP_drive_wheelsF = .;
95384     +      substr(_warn_,2,1) = 'U';
MPRINT(EM_DIAGRAM):   substr(_warn_,2,1) = 'U';
95385     +      _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
95386     +   end;
MPRINT(EM_DIAGRAM):   end;
95387     +end;
MPRINT(EM_DIAGRAM):   end;
95388     +
95389     +*** Generate dummy variables for REP_engine_location ;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for REP_engine_location ;
95390     +drop REP_engine_locationF ;
MPRINT(EM_DIAGRAM):   drop REP_engine_locationF ;
95391     +if missing( REP_engine_location ) then do;
MPRINT(EM_DIAGRAM):   if missing( REP_engine_location ) then do;
95392     +   REP_engine_locationF = .;
MPRINT(EM_DIAGRAM):   REP_engine_locationF = .;
95393     +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
95394     +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
95395     +end;
MPRINT(EM_DIAGRAM):   end;
95396     +else do;
MPRINT(EM_DIAGRAM):   else do;
95397     +   length _dm5 $ 5; drop _dm5 ;
MPRINT(EM_DIAGRAM):   length _dm5 $ 5;
MPRINT(EM_DIAGRAM):   drop _dm5 ;
95398     +   %DMNORMCP( REP_engine_location , _dm5 )
MPRINT(DMNORMCP):   _dm5=dmnorm(REP_engine_location,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMCP):  );
95399     +   if _dm5 = 'F'  then do;
MPRINT(EM_DIAGRAM):   if _dm5 = 'F' then do;
95400     +      REP_engine_locationF = 1;
MPRINT(EM_DIAGRAM):   REP_engine_locationF = 1;
95401     +   end;
MPRINT(EM_DIAGRAM):   end;
95402     +   else if _dm5 = 'R'  then do;
MPRINT(EM_DIAGRAM):   else if _dm5 = 'R' then do;
95403     +      REP_engine_locationF = -1;
MPRINT(EM_DIAGRAM):   REP_engine_locationF = -1;
95404     +   end;
MPRINT(EM_DIAGRAM):   end;
95405     +   else do;
MPRINT(EM_DIAGRAM):   else do;
95406     +      REP_engine_locationF = .;
MPRINT(EM_DIAGRAM):   REP_engine_locationF = .;
95407     +      substr(_warn_,2,1) = 'U';
MPRINT(EM_DIAGRAM):   substr(_warn_,2,1) = 'U';
95408     +      _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
95409     +   end;
MPRINT(EM_DIAGRAM):   end;
95410     +end;
MPRINT(EM_DIAGRAM):   end;
95411     +
95412     +*** Generate dummy variables for REP_fuel_system ;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for REP_fuel_system ;
95413     +drop REP_fuel_systemnon_spdi ;
MPRINT(EM_DIAGRAM):   drop REP_fuel_systemnon_spdi ;
95414     +if missing( REP_fuel_system ) then do;
MPRINT(EM_DIAGRAM):   if missing( REP_fuel_system ) then do;
95415     +   REP_fuel_systemnon_spdi = .;
MPRINT(EM_DIAGRAM):   REP_fuel_systemnon_spdi = .;
95416     +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
95417     +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
95418     +end;
MPRINT(EM_DIAGRAM):   end;
95419     +else do;
MPRINT(EM_DIAGRAM):   else do;
95420     +   length _dm8 $ 8; drop _dm8 ;
MPRINT(EM_DIAGRAM):   length _dm8 $ 8;
MPRINT(EM_DIAGRAM):   drop _dm8 ;
95421     +   %DMNORMCP( REP_fuel_system , _dm8 )
MPRINT(DMNORMCP):   _dm8=dmnorm(REP_fuel_system,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMCP):  );
95422     +   if _dm8 = 'NON-SPDI'  then do;
MPRINT(EM_DIAGRAM):   if _dm8 = 'NON-SPDI' then do;
95423     +      REP_fuel_systemnon_spdi = 1;
MPRINT(EM_DIAGRAM):   REP_fuel_systemnon_spdi = 1;
95424     +   end;
MPRINT(EM_DIAGRAM):   end;
95425     +   else if _dm8 = 'SPDI'  then do;
MPRINT(EM_DIAGRAM):   else if _dm8 = 'SPDI' then do;
95426     +      REP_fuel_systemnon_spdi = -1;
MPRINT(EM_DIAGRAM):   REP_fuel_systemnon_spdi = -1;
95427     +   end;
MPRINT(EM_DIAGRAM):   end;
95428     +   else do;
MPRINT(EM_DIAGRAM):   else do;
95429     +      REP_fuel_systemnon_spdi = .;
MPRINT(EM_DIAGRAM):   REP_fuel_systemnon_spdi = .;
95430     +      substr(_warn_,2,1) = 'U';
MPRINT(EM_DIAGRAM):   substr(_warn_,2,1) = 'U';
95431     +      _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
95432     +   end;
MPRINT(EM_DIAGRAM):   end;
95433     +end;
MPRINT(EM_DIAGRAM):   end;
95434     +
95435     +*** Generate dummy variables for REP_fuel_type ;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for REP_fuel_type ;
95436     +drop REP_fuel_typeD ;
MPRINT(EM_DIAGRAM):   drop REP_fuel_typeD ;
95437     +if missing( REP_fuel_type ) then do;
MPRINT(EM_DIAGRAM):   if missing( REP_fuel_type ) then do;
95438     +   REP_fuel_typeD = .;
MPRINT(EM_DIAGRAM):   REP_fuel_typeD = .;
95439     +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
95440     +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
95441     +end;
MPRINT(EM_DIAGRAM):   end;
95442     +else do;
MPRINT(EM_DIAGRAM):   else do;
95443     +   length _dm6 $ 6; drop _dm6 ;
MPRINT(EM_DIAGRAM):   length _dm6 $ 6;
MPRINT(EM_DIAGRAM):   drop _dm6 ;
95444     +   %DMNORMCP( REP_fuel_type , _dm6 )
MPRINT(DMNORMCP):   _dm6=dmnorm(REP_fuel_type,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMCP):  );
95445     +   if _dm6 = 'G'  then do;
MPRINT(EM_DIAGRAM):   if _dm6 = 'G' then do;
95446     +      REP_fuel_typeD = -1;
MPRINT(EM_DIAGRAM):   REP_fuel_typeD = -1;
95447     +   end;
MPRINT(EM_DIAGRAM):   end;
95448     +   else if _dm6 = 'D'  then do;
MPRINT(EM_DIAGRAM):   else if _dm6 = 'D' then do;
95449     +      REP_fuel_typeD = 1;
MPRINT(EM_DIAGRAM):   REP_fuel_typeD = 1;
95450     +   end;
MPRINT(EM_DIAGRAM):   end;
95451     +   else do;
MPRINT(EM_DIAGRAM):   else do;
95452     +      REP_fuel_typeD = .;
MPRINT(EM_DIAGRAM):   REP_fuel_typeD = .;
95453     +      substr(_warn_,2,1) = 'U';
MPRINT(EM_DIAGRAM):   substr(_warn_,2,1) = 'U';
95454     +      _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
95455     +   end;
MPRINT(EM_DIAGRAM):   end;
95456     +end;
MPRINT(EM_DIAGRAM):   end;
95457     +
95458     +*** Generate dummy variables for REP_num_of_cylinders ;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for REP_num_of_cylinders ;
95459     +drop REP_num_of_cylinders__4 ;
MPRINT(EM_DIAGRAM):   drop REP_num_of_cylinders__4 ;
95460     +if missing( REP_num_of_cylinders ) then do;
MPRINT(EM_DIAGRAM):   if missing( REP_num_of_cylinders ) then do;
95461     +   REP_num_of_cylinders__4 = .;
MPRINT(EM_DIAGRAM):   REP_num_of_cylinders__4 = .;
95462     +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
95463     +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
95464     +end;
MPRINT(EM_DIAGRAM):   end;
95465     +else do;
MPRINT(EM_DIAGRAM):   else do;
95466     +   length _dm6 $ 6; drop _dm6 ;
MPRINT(EM_DIAGRAM):   length _dm6 $ 6;
MPRINT(EM_DIAGRAM):   drop _dm6 ;
95467     +   %DMNORMCP( REP_num_of_cylinders , _dm6 )
MPRINT(DMNORMCP):   _dm6=dmnorm(REP_num_of_cylinders,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMCP):  );
95468     +   if _dm6 = '<=4'  then do;
MPRINT(EM_DIAGRAM):   if _dm6 = '<=4' then do;
95469     +      REP_num_of_cylinders__4 = 1;
MPRINT(EM_DIAGRAM):   REP_num_of_cylinders__4 = 1;
95470     +   end;
MPRINT(EM_DIAGRAM):   end;
95471     +   else if _dm6 = '>4'  then do;
MPRINT(EM_DIAGRAM):   else if _dm6 = '>4' then do;
95472     +      REP_num_of_cylinders__4 = -1;
MPRINT(EM_DIAGRAM):   REP_num_of_cylinders__4 = -1;
95473     +   end;
MPRINT(EM_DIAGRAM):   end;
95474     +   else do;
MPRINT(EM_DIAGRAM):   else do;
95475     +      REP_num_of_cylinders__4 = .;
MPRINT(EM_DIAGRAM):   REP_num_of_cylinders__4 = .;
95476     +      substr(_warn_,2,1) = 'U';
MPRINT(EM_DIAGRAM):   substr(_warn_,2,1) = 'U';
95477     +      _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
95478     +   end;
MPRINT(EM_DIAGRAM):   end;
95479     +end;
MPRINT(EM_DIAGRAM):   end;
95480     +
95481     +*** Generate dummy variables for engine_type ;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for engine_type ;
95482     +drop engine_typedohc engine_typel engine_typeohc engine_typeohcf
95483     +        engine_typeohcv ;
MPRINT(EM_DIAGRAM):   drop engine_typedohc engine_typel engine_typeohc engine_typeohcf 
engine_typeohcv ;
95484     +*** encoding is sparse, initialize to zero;
MPRINT(EM_DIAGRAM):   *** encoding is sparse, initialize to zero;
95485     +engine_typedohc = 0;
MPRINT(EM_DIAGRAM):   engine_typedohc = 0;
95486     +engine_typel = 0;
MPRINT(EM_DIAGRAM):   engine_typel = 0;
95487     +engine_typeohc = 0;
MPRINT(EM_DIAGRAM):   engine_typeohc = 0;
95488     +engine_typeohcf = 0;
MPRINT(EM_DIAGRAM):   engine_typeohcf = 0;
95489     +engine_typeohcv = 0;
MPRINT(EM_DIAGRAM):   engine_typeohcv = 0;
95490     +if missing( engine_type ) then do;
MPRINT(EM_DIAGRAM):   if missing( engine_type ) then do;
95491     +   engine_typedohc = .;
MPRINT(EM_DIAGRAM):   engine_typedohc = .;
95492     +   engine_typel = .;
MPRINT(EM_DIAGRAM):   engine_typel = .;
95493     +   engine_typeohc = .;
MPRINT(EM_DIAGRAM):   engine_typeohc = .;
95494     +   engine_typeohcf = .;
MPRINT(EM_DIAGRAM):   engine_typeohcf = .;
95495     +   engine_typeohcv = .;
MPRINT(EM_DIAGRAM):   engine_typeohcv = .;
95496     +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
95497     +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
95498     +end;
MPRINT(EM_DIAGRAM):   end;
95499     +else do;
MPRINT(EM_DIAGRAM):   else do;
95500     +   length _dm5 $ 5; drop _dm5 ;
MPRINT(EM_DIAGRAM):   length _dm5 $ 5;
MPRINT(EM_DIAGRAM):   drop _dm5 ;
95501     +   %DMNORMCP( engine_type , _dm5 )
MPRINT(DMNORMCP):   _dm5=dmnorm(engine_type,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMCP):  );
95502     +   if _dm5 = 'OHC'  then do;
MPRINT(EM_DIAGRAM):   if _dm5 = 'OHC' then do;
95503     +      engine_typeohc = 1;
MPRINT(EM_DIAGRAM):   engine_typeohc = 1;
95504     +   end;
MPRINT(EM_DIAGRAM):   end;
95505     +   else if _dm5 = 'OHCF'  then do;
MPRINT(EM_DIAGRAM):   else if _dm5 = 'OHCF' then do;
95506     +      engine_typeohcf = 1;
MPRINT(EM_DIAGRAM):   engine_typeohcf = 1;
95507     +   end;
MPRINT(EM_DIAGRAM):   end;
95508     +   else if _dm5 = 'OHCV'  then do;
MPRINT(EM_DIAGRAM):   else if _dm5 = 'OHCV' then do;
95509     +      engine_typeohcv = 1;
MPRINT(EM_DIAGRAM):   engine_typeohcv = 1;
95510     +   end;
MPRINT(EM_DIAGRAM):   end;
95511     +   else if _dm5 = 'DOHC'  then do;
MPRINT(EM_DIAGRAM):   else if _dm5 = 'DOHC' then do;
95512     +      engine_typedohc = 1;
MPRINT(EM_DIAGRAM):   engine_typedohc = 1;
95513     +   end;
MPRINT(EM_DIAGRAM):   end;
95514     +   else if _dm5 = 'L'  then do;
MPRINT(EM_DIAGRAM):   else if _dm5 = 'L' then do;
95515     +      engine_typel = 1;
MPRINT(EM_DIAGRAM):   engine_typel = 1;
95516     +   end;
MPRINT(EM_DIAGRAM):   end;
95517     +   else if _dm5 = 'ROTOR'  then do;
MPRINT(EM_DIAGRAM):   else if _dm5 = 'ROTOR' then do;
95518     +      engine_typedohc = -1;
MPRINT(EM_DIAGRAM):   engine_typedohc = -1;
95519     +      engine_typel = -1;
MPRINT(EM_DIAGRAM):   engine_typel = -1;
95520     +      engine_typeohc = -1;
MPRINT(EM_DIAGRAM):   engine_typeohc = -1;
95521     +      engine_typeohcf = -1;
MPRINT(EM_DIAGRAM):   engine_typeohcf = -1;
95522     +      engine_typeohcv = -1;
MPRINT(EM_DIAGRAM):   engine_typeohcv = -1;
95523     +   end;
MPRINT(EM_DIAGRAM):   end;
95524     +   else do;
MPRINT(EM_DIAGRAM):   else do;
95525     +      engine_typedohc = .;
MPRINT(EM_DIAGRAM):   engine_typedohc = .;
95526     +      engine_typel = .;
MPRINT(EM_DIAGRAM):   engine_typel = .;
95527     +      engine_typeohc = .;
MPRINT(EM_DIAGRAM):   engine_typeohc = .;
95528     +      engine_typeohcf = .;
MPRINT(EM_DIAGRAM):   engine_typeohcf = .;
95529     +      engine_typeohcv = .;
MPRINT(EM_DIAGRAM):   engine_typeohcv = .;
95530     +      substr(_warn_,2,1) = 'U';
MPRINT(EM_DIAGRAM):   substr(_warn_,2,1) = 'U';
95531     +      _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
95532     +   end;
MPRINT(EM_DIAGRAM):   end;
95533     +end;
MPRINT(EM_DIAGRAM):   end;
95534     +
95535     +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
95536     +*** Checking missing input Interval
95537     +*** *************************;
MPRINT(EM_DIAGRAM):   *** Checking missing input Interval *** *************************;
95538     +
95539     +IF NMISS(
95540     +   LOG_REP_IMP_price ,
95541     +   LOG_REP_compression_ratio ,
95542     +   LOG_REP_engine_size ,
95543     +   REP_IMP_bore ,
95544     +   REP_IMP_stroke ,
95545     +   REP_city_mpg ,
95546     +   REP_curb_weight ,
95547     +   REP_height ,
95548     +   REP_highway_mpg ,
95549     +   REP_horsepower ,
95550     +   REP_length ,
95551     +   REP_peak_rpm ,
95552     +   REP_wheel_base ,
95553     +   REP_width   ) THEN DO;
MPRINT(EM_DIAGRAM):   IF NMISS( LOG_REP_IMP_price , LOG_REP_compression_ratio , 
LOG_REP_engine_size , REP_IMP_bore , REP_IMP_stroke , REP_city_mpg , REP_curb_weight , 
REP_height , REP_highway_mpg , REP_horsepower , REP_length , REP_peak_rpm , REP_wheel_base , 
REP_width ) THEN DO;
95554     +   SUBSTR(_WARN_, 1, 1) = 'M';
MPRINT(EM_DIAGRAM):   SUBSTR(_WARN_, 1, 1) = 'M';
95555     +
95556     +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
95557     +END;
MPRINT(EM_DIAGRAM):   END;
95558     +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
95559     +*** Writing the Node intvl ;
MPRINT(EM_DIAGRAM):   *** Writing the Node intvl ;
95560     +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
95561     +IF _DM_BAD EQ 0 THEN DO;
MPRINT(EM_DIAGRAM):   IF _DM_BAD EQ 0 THEN DO;
95562     +   S_LOG_REP_IMP_price  =    -20.2356185469493 +     2.16855745948401 *
95563     +        LOG_REP_IMP_price ;
MPRINT(EM_DIAGRAM):   S_LOG_REP_IMP_price = -20.2356185469493 + 2.16855745948401 * 
LOG_REP_IMP_price ;
95564     +   S_LOG_REP_compression_ratio
95565     +          =    -8.72649819321039 +     3.65742873950677 *
95566     +        LOG_REP_compression_ratio ;
MPRINT(EM_DIAGRAM):   S_LOG_REP_compression_ratio = -8.72649819321039 + 3.65742873950677 * 
LOG_REP_compression_ratio ;
95567     +   S_LOG_REP_engine_size  =    -19.3053254119757 +     4.02929302984948 *
95568     +        LOG_REP_engine_size ;
MPRINT(EM_DIAGRAM):   S_LOG_REP_engine_size = -19.3053254119757 + 4.02929302984948 * 
LOG_REP_engine_size ;
95569     +   S_REP_IMP_bore  =    -13.3604302656684 +     4.04536293034574 *
95570     +        REP_IMP_bore ;
MPRINT(EM_DIAGRAM):   S_REP_IMP_bore = -13.3604302656684 + 4.04536293034574 * REP_IMP_bore ;
95571     +   S_REP_IMP_stroke  =    -11.3205669287077 +     3.47855217496738 *
95572     +        REP_IMP_stroke ;
MPRINT(EM_DIAGRAM):   S_REP_IMP_stroke = -11.3205669287077 + 3.47855217496738 * REP_IMP_stroke 
;
95573     +   S_REP_city_mpg  =    -4.23279255832632 +     0.16535248553422 *
95574     +        REP_city_mpg ;
MPRINT(EM_DIAGRAM):   S_REP_city_mpg = -4.23279255832632 + 0.16535248553422 * REP_city_mpg ;
95575     +   S_REP_curb_weight  =    -5.35597047742979 +     0.00212869810672 *
95576     +        REP_curb_weight ;
MPRINT(EM_DIAGRAM):   S_REP_curb_weight = -5.35597047742979 + 0.00212869810672 * 
REP_curb_weight ;
95577     +   S_REP_height  =    -21.8926608140893 +     0.40589318675657 * REP_height ;
MPRINT(EM_DIAGRAM):   S_REP_height = -21.8926608140893 + 0.40589318675657 * REP_height ;
95578     +   S_REP_highway_mpg  =    -4.99166764925563 +     0.16020006928199 *
95579     +        REP_highway_mpg ;
MPRINT(EM_DIAGRAM):   S_REP_highway_mpg = -4.99166764925563 + 0.16020006928199 * 
REP_highway_mpg ;
95580     +   S_REP_horsepower  =    -2.74643097264309 +     0.02734944206973 *
95581     +        REP_horsepower ;
MPRINT(EM_DIAGRAM):   S_REP_horsepower = -2.74643097264309 + 0.02734944206973 * REP_horsepower 
;
95582     +   S_REP_length  =    -15.2378498365576 +     0.08781104037663 * REP_length ;
MPRINT(EM_DIAGRAM):   S_REP_length = -15.2378498365576 + 0.08781104037663 * REP_length ;
95583     +   S_REP_peak_rpm  =    -10.6885709541859 +     0.00208333904184 *
95584     +        REP_peak_rpm ;
MPRINT(EM_DIAGRAM):   S_REP_peak_rpm = -10.6885709541859 + 0.00208333904184 * REP_peak_rpm ;
95585     +   S_REP_wheel_base  =    -17.8009087180129 +     0.18059887504832 *
95586     +        REP_wheel_base ;
MPRINT(EM_DIAGRAM):   S_REP_wheel_base = -17.8009087180129 + 0.18059887504832 * REP_wheel_base 
;
95587     +   S_REP_width  =    -35.9167499004784 +     0.54673628301566 * REP_width ;
MPRINT(EM_DIAGRAM):   S_REP_width = -35.9167499004784 + 0.54673628301566 * REP_width ;
95588     +END;
MPRINT(EM_DIAGRAM):   END;
95589     +ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
95590     +   IF MISSING( LOG_REP_IMP_price ) THEN S_LOG_REP_IMP_price  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( LOG_REP_IMP_price ) THEN S_LOG_REP_IMP_price = . ;
95591     +   ELSE S_LOG_REP_IMP_price  =    -20.2356185469493 +     2.16855745948401 *
95592     +        LOG_REP_IMP_price ;
MPRINT(EM_DIAGRAM):   ELSE S_LOG_REP_IMP_price = -20.2356185469493 + 2.16855745948401 * 
LOG_REP_IMP_price ;
95593     +   IF MISSING( LOG_REP_compression_ratio ) THEN S_LOG_REP_compression_ratio
95594     +          = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( LOG_REP_compression_ratio ) THEN S_LOG_REP_compression_ratio 
= . ;
95595     +   ELSE S_LOG_REP_compression_ratio
95596     +          =    -8.72649819321039 +     3.65742873950677 *
95597     +        LOG_REP_compression_ratio ;
MPRINT(EM_DIAGRAM):   ELSE S_LOG_REP_compression_ratio = -8.72649819321039 + 3.65742873950677 
* LOG_REP_compression_ratio ;
95598     +   IF MISSING( LOG_REP_engine_size ) THEN S_LOG_REP_engine_size  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( LOG_REP_engine_size ) THEN S_LOG_REP_engine_size = . ;
95599     +   ELSE S_LOG_REP_engine_size
95600     +          =    -19.3053254119757 +     4.02929302984948 * LOG_REP_engine_size
95601     +         ;
MPRINT(EM_DIAGRAM):   ELSE S_LOG_REP_engine_size = -19.3053254119757 + 4.02929302984948 * 
LOG_REP_engine_size ;
95602     +   IF MISSING( REP_IMP_bore ) THEN S_REP_IMP_bore  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( REP_IMP_bore ) THEN S_REP_IMP_bore = . ;
95603     +   ELSE S_REP_IMP_bore  =    -13.3604302656684 +     4.04536293034574 *
95604     +        REP_IMP_bore ;
MPRINT(EM_DIAGRAM):   ELSE S_REP_IMP_bore = -13.3604302656684 + 4.04536293034574 * 
REP_IMP_bore ;
95605     +   IF MISSING( REP_IMP_stroke ) THEN S_REP_IMP_stroke  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( REP_IMP_stroke ) THEN S_REP_IMP_stroke = . ;
95606     +   ELSE S_REP_IMP_stroke  =    -11.3205669287077 +     3.47855217496738 *
95607     +        REP_IMP_stroke ;
MPRINT(EM_DIAGRAM):   ELSE S_REP_IMP_stroke = -11.3205669287077 + 3.47855217496738 * 
REP_IMP_stroke ;
95608     +   IF MISSING( REP_city_mpg ) THEN S_REP_city_mpg  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( REP_city_mpg ) THEN S_REP_city_mpg = . ;
95609     +   ELSE S_REP_city_mpg  =    -4.23279255832632 +     0.16535248553422 *
95610     +        REP_city_mpg ;
MPRINT(EM_DIAGRAM):   ELSE S_REP_city_mpg = -4.23279255832632 + 0.16535248553422 * 
REP_city_mpg ;
95611     +   IF MISSING( REP_curb_weight ) THEN S_REP_curb_weight  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( REP_curb_weight ) THEN S_REP_curb_weight = . ;
95612     +   ELSE S_REP_curb_weight  =    -5.35597047742979 +     0.00212869810672 *
95613     +        REP_curb_weight ;
MPRINT(EM_DIAGRAM):   ELSE S_REP_curb_weight = -5.35597047742979 + 0.00212869810672 * 
REP_curb_weight ;
95614     +   IF MISSING( REP_height ) THEN S_REP_height  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( REP_height ) THEN S_REP_height = . ;
95615     +   ELSE S_REP_height  =    -21.8926608140893 +     0.40589318675657 *
95616     +        REP_height ;
MPRINT(EM_DIAGRAM):   ELSE S_REP_height = -21.8926608140893 + 0.40589318675657 * REP_height ;
95617     +   IF MISSING( REP_highway_mpg ) THEN S_REP_highway_mpg  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( REP_highway_mpg ) THEN S_REP_highway_mpg = . ;
95618     +   ELSE S_REP_highway_mpg  =    -4.99166764925563 +     0.16020006928199 *
95619     +        REP_highway_mpg ;
MPRINT(EM_DIAGRAM):   ELSE S_REP_highway_mpg = -4.99166764925563 + 0.16020006928199 * 
REP_highway_mpg ;
95620     +   IF MISSING( REP_horsepower ) THEN S_REP_horsepower  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( REP_horsepower ) THEN S_REP_horsepower = . ;
95621     +   ELSE S_REP_horsepower  =    -2.74643097264309 +     0.02734944206973 *
95622     +        REP_horsepower ;
MPRINT(EM_DIAGRAM):   ELSE S_REP_horsepower = -2.74643097264309 + 0.02734944206973 * 
REP_horsepower ;
95623     +   IF MISSING( REP_length ) THEN S_REP_length  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( REP_length ) THEN S_REP_length = . ;
95624     +   ELSE S_REP_length  =    -15.2378498365576 +     0.08781104037663 *
95625     +        REP_length ;
MPRINT(EM_DIAGRAM):   ELSE S_REP_length = -15.2378498365576 + 0.08781104037663 * REP_length ;
95626     +   IF MISSING( REP_peak_rpm ) THEN S_REP_peak_rpm  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( REP_peak_rpm ) THEN S_REP_peak_rpm = . ;
95627     +   ELSE S_REP_peak_rpm  =    -10.6885709541859 +     0.00208333904184 *
95628     +        REP_peak_rpm ;
MPRINT(EM_DIAGRAM):   ELSE S_REP_peak_rpm = -10.6885709541859 + 0.00208333904184 * 
REP_peak_rpm ;
95629     +   IF MISSING( REP_wheel_base ) THEN S_REP_wheel_base  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( REP_wheel_base ) THEN S_REP_wheel_base = . ;
95630     +   ELSE S_REP_wheel_base  =    -17.8009087180129 +     0.18059887504832 *
95631     +        REP_wheel_base ;
MPRINT(EM_DIAGRAM):   ELSE S_REP_wheel_base = -17.8009087180129 + 0.18059887504832 * 
REP_wheel_base ;
95632     +   IF MISSING( REP_width ) THEN S_REP_width  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( REP_width ) THEN S_REP_width = . ;
95633     +   ELSE S_REP_width  =    -35.9167499004784 +     0.54673628301566 * REP_width
95634     +         ;
MPRINT(EM_DIAGRAM):   ELSE S_REP_width = -35.9167499004784 + 0.54673628301566 * REP_width ;
95635     +END;
MPRINT(EM_DIAGRAM):   END;
95636     +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
95637     +*** Writing the Node bin ;
MPRINT(EM_DIAGRAM):   *** Writing the Node bin ;
95638     +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
95639     +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
95640     +*** Writing the Node nom ;
MPRINT(EM_DIAGRAM):   *** Writing the Node nom ;
95641     +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
95642     +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
95643     +*** Writing the Node H1 ;
MPRINT(EM_DIAGRAM):   *** Writing the Node H1 ;
95644     +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
95645     +IF _DM_BAD EQ 0 THEN DO;
MPRINT(EM_DIAGRAM):   IF _DM_BAD EQ 0 THEN DO;
95646     +   H11  =     0.14114604923302 * S_LOG_REP_IMP_price
95647     +          +     0.22107710355073 * S_LOG_REP_compression_ratio
95648     +          +     0.01063730358557 * S_LOG_REP_engine_size
95649     +          +    -0.10014119004384 * S_REP_IMP_bore  +    -0.03759863264035 *
95650     +        S_REP_IMP_stroke  +     0.07482450466947 * S_REP_city_mpg
95651     +          +    -0.28536465017016 * S_REP_curb_weight
95652     +          +     0.11632138704241 * S_REP_height  +     0.24359872537276 *
95653     +        S_REP_highway_mpg  +     0.11053757208758 * S_REP_horsepower
95654     +          +    -0.07045784528695 * S_REP_length  +    -0.21762346468185 *
95655     +        S_REP_peak_rpm  +    -0.17325144725852 * S_REP_wheel_base
95656     +          +     0.37161591541424 * S_REP_width ;
MPRINT(EM_DIAGRAM):   H11 = 0.14114604923302 * S_LOG_REP_IMP_price + 0.22107710355073 * 
S_LOG_REP_compression_ratio + 0.01063730358557 * S_LOG_REP_engine_size + -0.10014119004384 * 
S_REP_IMP_bore + -0.03759863264035 * S_REP_IMP_stroke + 0.07482450466947 * S_REP_city_mpg + 
-0.28536465017016 * S_REP_curb_weight + 0.11632138704241 * S_REP_height + 0.24359872537276 * 
S_REP_highway_mpg + 0.11053757208758 * S_REP_horsepower + -0.07045784528695 * S_REP_length + 
-0.21762346468185 * S_REP_peak_rpm + -0.17325144725852 * S_REP_wheel_base + 0.37161591541424 * 
S_REP_width ;
95657     +   H12  =     0.05896220480011 * S_LOG_REP_IMP_price
95658     +          +     0.18017576649352 * S_LOG_REP_compression_ratio
95659     +          +     0.13666603498983 * S_LOG_REP_engine_size
95660     +          +     0.08905307497507 * S_REP_IMP_bore  +     0.08450123024202 *
95661     +        S_REP_IMP_stroke  +      0.0953955201221 * S_REP_city_mpg
95662     +          +     0.06997312342759 * S_REP_curb_weight
95663     +          +     0.11454978606317 * S_REP_height  +    -0.19856329211228 *
95664     +        S_REP_highway_mpg  +     0.12027932441722 * S_REP_horsepower
95665     +          +      0.2974258001212 * S_REP_length  +     0.23235745908363 *
95666     +        S_REP_peak_rpm  +    -0.16918609268289 * S_REP_wheel_base
95667     +          +    -0.23250714188118 * S_REP_width ;
MPRINT(EM_DIAGRAM):   H12 = 0.05896220480011 * S_LOG_REP_IMP_price + 0.18017576649352 * 
S_LOG_REP_compression_ratio + 0.13666603498983 * S_LOG_REP_engine_size + 0.08905307497507 * 
S_REP_IMP_bore + 0.08450123024202 * S_REP_IMP_stroke + 0.0953955201221 * S_REP_city_mpg + 
0.06997312342759 * S_REP_curb_weight + 0.11454978606317 * S_REP_height + -0.19856329211228 * 
S_REP_highway_mpg + 0.12027932441722 * S_REP_horsepower + 0.2974258001212 * S_REP_length + 
0.23235745908363 * S_REP_peak_rpm + -0.16918609268289 * S_REP_wheel_base + -0.23250714188118 * 
S_REP_width ;
95668     +   H13  =    -0.12906110115101 * S_LOG_REP_IMP_price
95669     +          +    -0.02233821917203 * S_LOG_REP_compression_ratio
95670     +          +    -0.35091523886958 * S_LOG_REP_engine_size
95671     +          +    -0.41460804807699 * S_REP_IMP_bore  +    -0.24839281719309 *
95672     +        S_REP_IMP_stroke  +    -0.70537276068634 * S_REP_city_mpg
95673     +          +    -0.58021382402741 * S_REP_curb_weight
95674     +          +    -0.22826753012592 * S_REP_height  +      0.0169914306349 *
95675     +        S_REP_highway_mpg  +     0.10463377560074 * S_REP_horsepower
95676     +          +     0.35288922545253 * S_REP_length  +    -0.19481970154693 *
95677     +        S_REP_peak_rpm  +    -0.80556145797505 * S_REP_wheel_base
95678     +          +     0.51492976697395 * S_REP_width ;
MPRINT(EM_DIAGRAM):   H13 = -0.12906110115101 * S_LOG_REP_IMP_price + -0.02233821917203 * 
S_LOG_REP_compression_ratio + -0.35091523886958 * S_LOG_REP_engine_size + -0.41460804807699 * 
S_REP_IMP_bore + -0.24839281719309 * S_REP_IMP_stroke + -0.70537276068634 * S_REP_city_mpg + 
-0.58021382402741 * S_REP_curb_weight + -0.22826753012592 * S_REP_height + 0.0169914306349 * 
S_REP_highway_mpg + 0.10463377560074 * S_REP_horsepower + 0.35288922545253 * S_REP_length + 
-0.19481970154693 * S_REP_peak_rpm + -0.80556145797505 * S_REP_wheel_base + 0.51492976697395 * 
S_REP_width ;
95679     +   H11  = H11  +    -0.09761603527807 * M_bore0  +     0.32345868357271 *
95680     +        M_num_of_doors0  +     0.20084593155895 * M_price0
95681     +          +    -0.20994977796409 * M_stroke0 ;
MPRINT(EM_DIAGRAM):   H11 = H11 + -0.09761603527807 * M_bore0 + 0.32345868357271 * 
M_num_of_doors0 + 0.20084593155895 * M_price0 + -0.20994977796409 * M_stroke0 ;
95682     +   H12  = H12  +    -0.06788596638774 * M_bore0  +     0.34399071242393 *
95683     +        M_num_of_doors0  +      0.0463196246907 * M_price0
95684     +          +    -0.26485643855048 * M_stroke0 ;
MPRINT(EM_DIAGRAM):   H12 = H12 + -0.06788596638774 * M_bore0 + 0.34399071242393 * 
M_num_of_doors0 + 0.0463196246907 * M_price0 + -0.26485643855048 * M_stroke0 ;
95685     +   H13  = H13  +    -0.35051306126484 * M_bore0  +    -0.02794915457366 *
95686     +        M_num_of_doors0  +     0.31309425299639 * M_price0
95687     +          +    -0.47776887747706 * M_stroke0 ;
MPRINT(EM_DIAGRAM):   H13 = H13 + -0.35051306126484 * M_bore0 + -0.02794915457366 * 
M_num_of_doors0 + 0.31309425299639 * M_price0 + -0.47776887747706 * M_stroke0 ;
95688     +   H11  = H11  +     0.06100363905736 * IMP_num_of_doors2
95689     +          +     0.10122536313104 * REP_aspirationS  +    -0.17959848113703 *
95690     +        REP_body_styleC  +    -0.39712858179454 * REP_body_styleH
95691     +          +     0.04767092759288 * REP_body_styleS  +     0.10233875091231 *
95692     +        REP_drive_wheels4  +    -0.09500800631183 * REP_drive_wheelsF
95693     +          +     0.07460109227871 * REP_engine_locationF
95694     +          +     0.26300770846072 * REP_fuel_systemnon_spdi
95695     +          +     0.23650863802652 * REP_fuel_typeD  +    -0.32049705686665 *
95696     +        REP_num_of_cylinders__4  +     0.06805374196668 * engine_typedohc
95697     +          +     0.16364588242528 * engine_typel  +    -0.05913911607092 *
95698     +        engine_typeohc  +     0.18536496535236 * engine_typeohcf
95699     +          +    -0.09174498568145 * engine_typeohcv ;
MPRINT(EM_DIAGRAM):   H11 = H11 + 0.06100363905736 * IMP_num_of_doors2 + 0.10122536313104 * 
REP_aspirationS + -0.17959848113703 * REP_body_styleC + -0.39712858179454 * REP_body_styleH + 
0.04767092759288 * REP_body_styleS + 0.10233875091231 * REP_drive_wheels4 + -0.09500800631183 
* REP_drive_wheelsF + 0.07460109227871 * REP_engine_locationF + 0.26300770846072 * 
REP_fuel_systemnon_spdi + 0.23650863802652 * REP_fuel_typeD + -0.32049705686665 * 
REP_num_of_cylinders__4 + 0.06805374196668 * engine_typedohc + 0.16364588242528 * engine_typel 
+ -0.05913911607092 * engine_typeohc + 0.18536496535236 * engine_typeohcf + -0.09174498568145 
* engine_typeohcv ;
95700     +   H12  = H12  +    -0.04288679296194 * IMP_num_of_doors2
95701     +          +    -0.09067917550664 * REP_aspirationS  +    -0.00898495387833 *
95702     +        REP_body_styleC  +       0.159812944318 * REP_body_styleH
95703     +          +      0.0711141581938 * REP_body_styleS  +     0.10210979168732 *
95704     +        REP_drive_wheels4  +     -0.3538576414303 * REP_drive_wheelsF
95705     +          +    -0.16393166907394 * REP_engine_locationF
95706     +          +     0.11934989985506 * REP_fuel_systemnon_spdi
95707     +          +     0.02352084105235 * REP_fuel_typeD  +    -0.11143166546072 *
95708     +        REP_num_of_cylinders__4  +    -0.10331230763277 * engine_typedohc
95709     +          +     0.09972953235323 * engine_typel  +    -0.02037020133855 *
95710     +        engine_typeohc  +    -0.10116492050927 * engine_typeohcf
95711     +          +    -0.29902685656789 * engine_typeohcv ;
MPRINT(EM_DIAGRAM):   H12 = H12 + -0.04288679296194 * IMP_num_of_doors2 + -0.09067917550664 * 
REP_aspirationS + -0.00898495387833 * REP_body_styleC + 0.159812944318 * REP_body_styleH + 
0.0711141581938 * REP_body_styleS + 0.10210979168732 * REP_drive_wheels4 + -0.3538576414303 * 
REP_drive_wheelsF + -0.16393166907394 * REP_engine_locationF + 0.11934989985506 * 
REP_fuel_systemnon_spdi + 0.02352084105235 * REP_fuel_typeD + -0.11143166546072 * 
REP_num_of_cylinders__4 + -0.10331230763277 * engine_typedohc + 0.09972953235323 * 
engine_typel + -0.02037020133855 * engine_typeohc + -0.10116492050927 * engine_typeohcf + 
-0.29902685656789 * engine_typeohcv ;
95712     +   H13  = H13  +     0.57885984374832 * IMP_num_of_doors2
95713     +          +    -0.06313012281847 * REP_aspirationS  +     0.18273714441841 *
95714     +        REP_body_styleC  +    -0.00453951283747 * REP_body_styleH
95715     +          +      0.0466508929301 * REP_body_styleS  +    -0.04931547332574 *
95716     +        REP_drive_wheels4  +     0.07528309204941 * REP_drive_wheelsF
95717     +          +    -0.01679674641439 * REP_engine_locationF
95718     +          +      -0.148583011616 * REP_fuel_systemnon_spdi
95719     +          +     0.01206718731045 * REP_fuel_typeD  +     0.01468742261582 *
95720     +        REP_num_of_cylinders__4  +     0.07027057170791 * engine_typedohc
95721     +          +     0.20558093284809 * engine_typel  +     0.55435637562404 *
95722     +        engine_typeohc  +    -0.38590829668888 * engine_typeohcf
95723     +          +      0.0022264257698 * engine_typeohcv ;
MPRINT(EM_DIAGRAM):   H13 = H13 + 0.57885984374832 * IMP_num_of_doors2 + -0.06313012281847 * 
REP_aspirationS + 0.18273714441841 * REP_body_styleC + -0.00453951283747 * REP_body_styleH + 
0.0466508929301 * REP_body_styleS + -0.04931547332574 * REP_drive_wheels4 + 0.07528309204941 * 
REP_drive_wheelsF + -0.01679674641439 * REP_engine_locationF + -0.148583011616 * 
REP_fuel_systemnon_spdi + 0.01206718731045 * REP_fuel_typeD + 0.01468742261582 * 
REP_num_of_cylinders__4 + 0.07027057170791 * engine_typedohc + 0.20558093284809 * engine_typel 
+ 0.55435637562404 * engine_typeohc + -0.38590829668888 * engine_typeohcf + 0.0022264257698 * 
engine_typeohcv ;
95724     +   H11  =    -0.54817324462785 + H11 ;
MPRINT(EM_DIAGRAM):   H11 = -0.54817324462785 + H11 ;
95725     +   H12  =    -0.46773956921898 + H12 ;
MPRINT(EM_DIAGRAM):   H12 = -0.46773956921898 + H12 ;
95726     +   H13  =     0.60022135338159 + H13 ;
MPRINT(EM_DIAGRAM):   H13 = 0.60022135338159 + H13 ;
95727     +   H11  = TANH(H11 );
MPRINT(EM_DIAGRAM):   H11 = TANH(H11 );
95728     +   H12  = TANH(H12 );
MPRINT(EM_DIAGRAM):   H12 = TANH(H12 );
95729     +   H13  = TANH(H13 );
MPRINT(EM_DIAGRAM):   H13 = TANH(H13 );
95730     +END;
MPRINT(EM_DIAGRAM):   END;
95731     +ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
95732     +   H11  = .;
MPRINT(EM_DIAGRAM):   H11 = .;
95733     +   H12  = .;
MPRINT(EM_DIAGRAM):   H12 = .;
95734     +   H13  = .;
MPRINT(EM_DIAGRAM):   H13 = .;
95735     +END;
MPRINT(EM_DIAGRAM):   END;
95736     +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
95737     +*** Writing the Node Risk ;
MPRINT(EM_DIAGRAM):   *** Writing the Node Risk ;
95738     +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
95739     +
95740     +*** Generate dummy variables for Risk ;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for Risk ;
95741     +drop Risk1 Risk0 ;
MPRINT(EM_DIAGRAM):   drop Risk1 Risk0 ;
95742     +label F_Risk = 'From: Risk' ;
MPRINT(EM_DIAGRAM):   label F_Risk = 'From: Risk' ;
95743     +length F_Risk $ 12;
MPRINT(EM_DIAGRAM):   length F_Risk $ 12;
95744     +F_Risk = put( Risk , BEST12. );
MPRINT(EM_DIAGRAM):   F_Risk = put( Risk , BEST12. );
95745     +%DMNORMIP( F_Risk )
MPRINT(DMNORMIP):   call dmnorm(F_Risk,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
95746     +if missing( Risk ) then do;
MPRINT(EM_DIAGRAM):   if missing( Risk ) then do;
95747     +   Risk1 = .;
MPRINT(EM_DIAGRAM):   Risk1 = .;
95748     +   Risk0 = .;
MPRINT(EM_DIAGRAM):   Risk0 = .;
95749     +end;
MPRINT(EM_DIAGRAM):   end;
95750     +else do;
MPRINT(EM_DIAGRAM):   else do;
95751     +   if F_Risk = '1'  then do;
MPRINT(EM_DIAGRAM):   if F_Risk = '1' then do;
95752     +      Risk1 = 1;
MPRINT(EM_DIAGRAM):   Risk1 = 1;
95753     +      Risk0 = 0;
MPRINT(EM_DIAGRAM):   Risk0 = 0;
95754     +   end;
MPRINT(EM_DIAGRAM):   end;
95755     +   else if F_Risk = '0'  then do;
MPRINT(EM_DIAGRAM):   else if F_Risk = '0' then do;
95756     +      Risk1 = 0;
MPRINT(EM_DIAGRAM):   Risk1 = 0;
95757     +      Risk0 = 1;
MPRINT(EM_DIAGRAM):   Risk0 = 1;
95758     +   end;
MPRINT(EM_DIAGRAM):   end;
95759     +   else do;
MPRINT(EM_DIAGRAM):   else do;
95760     +      Risk1 = .;
MPRINT(EM_DIAGRAM):   Risk1 = .;
95761     +      Risk0 = .;
MPRINT(EM_DIAGRAM):   Risk0 = .;
95762     +   end;
MPRINT(EM_DIAGRAM):   end;
95763     +end;
MPRINT(EM_DIAGRAM):   end;
95764     +IF _DM_BAD EQ 0 THEN DO;
MPRINT(EM_DIAGRAM):   IF _DM_BAD EQ 0 THEN DO;
95765     +   P_Risk1  =     1.21348641298657 * H11  +     0.09729650872853 * H12
95766     +          +     5.64979482539338 * H13 ;
MPRINT(EM_DIAGRAM):   P_Risk1 = 1.21348641298657 * H11 + 0.09729650872853 * H12 + 
5.64979482539338 * H13 ;
95767     +   P_Risk1  =    -0.00460119400654 + P_Risk1 ;
MPRINT(EM_DIAGRAM):   P_Risk1 = -0.00460119400654 + P_Risk1 ;
95768     +   P_Risk0  = 0;
MPRINT(EM_DIAGRAM):   P_Risk0 = 0;
95769     +   _MAX_ = MAX (P_Risk1 , P_Risk0 );
MPRINT(EM_DIAGRAM):   _MAX_ = MAX (P_Risk1 , P_Risk0 );
95770     +   _SUM_ = 0.;
MPRINT(EM_DIAGRAM):   _SUM_ = 0.;
95771     +   P_Risk1  = EXP(P_Risk1  - _MAX_);
MPRINT(EM_DIAGRAM):   P_Risk1 = EXP(P_Risk1 - _MAX_);
95772     +   _SUM_ = _SUM_ + P_Risk1 ;
MPRINT(EM_DIAGRAM):   _SUM_ = _SUM_ + P_Risk1 ;
95773     +   P_Risk0  = EXP(P_Risk0  - _MAX_);
MPRINT(EM_DIAGRAM):   P_Risk0 = EXP(P_Risk0 - _MAX_);
95774     +   _SUM_ = _SUM_ + P_Risk0 ;
MPRINT(EM_DIAGRAM):   _SUM_ = _SUM_ + P_Risk0 ;
95775     +   P_Risk1  = P_Risk1  / _SUM_;
MPRINT(EM_DIAGRAM):   P_Risk1 = P_Risk1 / _SUM_;
95776     +   P_Risk0  = P_Risk0  / _SUM_;
MPRINT(EM_DIAGRAM):   P_Risk0 = P_Risk0 / _SUM_;
95777     +END;
MPRINT(EM_DIAGRAM):   END;
95778     +ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
95779     +   P_Risk1  = .;
MPRINT(EM_DIAGRAM):   P_Risk1 = .;
95780     +   P_Risk0  = .;
MPRINT(EM_DIAGRAM):   P_Risk0 = .;
95781     +END;
MPRINT(EM_DIAGRAM):   END;
95782     +IF _DM_BAD EQ 1 THEN DO;
MPRINT(EM_DIAGRAM):   IF _DM_BAD EQ 1 THEN DO;
95783     +   P_Risk1  =                 0.54;
MPRINT(EM_DIAGRAM):   P_Risk1 = 0.54;
95784     +   P_Risk0  =                 0.46;
MPRINT(EM_DIAGRAM):   P_Risk0 = 0.46;
95785     +END;
MPRINT(EM_DIAGRAM):   END;
95786     +*** *****************************;
MPRINT(EM_DIAGRAM):   *** *****************************;
95787     +*** Writing the Residuals  of the Node Risk ;
MPRINT(EM_DIAGRAM):   *** Writing the Residuals of the Node Risk ;
95788     +*** ******************************;
MPRINT(EM_DIAGRAM):   *** ******************************;
95789     +IF MISSING( Risk1 ) THEN R_Risk1  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( Risk1 ) THEN R_Risk1 = . ;
95790     +ELSE R_Risk1  = Risk1  - P_Risk1 ;
MPRINT(EM_DIAGRAM):   ELSE R_Risk1 = Risk1 - P_Risk1 ;
95791     +IF MISSING( Risk0 ) THEN R_Risk0  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( Risk0 ) THEN R_Risk0 = . ;
95792     +ELSE R_Risk0  = Risk0  - P_Risk0 ;
MPRINT(EM_DIAGRAM):   ELSE R_Risk0 = Risk0 - P_Risk0 ;
95793     +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
95794     +*** Writing the I_Risk  AND U_Risk ;
MPRINT(EM_DIAGRAM):   *** Writing the I_Risk AND U_Risk ;
95795     +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
95796     +_MAXP_ = P_Risk1 ;
MPRINT(EM_DIAGRAM):   _MAXP_ = P_Risk1 ;
95797     +I_Risk  = "1           " ;
MPRINT(EM_DIAGRAM):   I_Risk = "1           " ;
95798     +U_Risk  =                    1;
MPRINT(EM_DIAGRAM):   U_Risk = 1;
95799     +IF( _MAXP_ LT P_Risk0  ) THEN DO;
MPRINT(EM_DIAGRAM):   IF( _MAXP_ LT P_Risk0 ) THEN DO;
95800     +   _MAXP_ = P_Risk0 ;
MPRINT(EM_DIAGRAM):   _MAXP_ = P_Risk0 ;
95801     +   I_Risk  = "0           " ;
MPRINT(EM_DIAGRAM):   I_Risk = "0           " ;
95802     +   U_Risk  =                    0;
MPRINT(EM_DIAGRAM):   U_Risk = 0;
95803     +END;
MPRINT(EM_DIAGRAM):   END;
95804     +********************************;
MPRINT(EM_DIAGRAM):   ********************************;
95805     +*** End Scoring Code for Neural;
MPRINT(EM_DIAGRAM):   *** End Scoring Code for Neural;
95806     +********************************;
MPRINT(EM_DIAGRAM):   ********************************;
95807     +drop
95808     +H11
95809     +H12
95810     +H13
95811     +;
MPRINT(EM_DIAGRAM):   drop H11 H12 H13 ;
95812     +drop S_:;
MPRINT(EM_DIAGRAM):   drop S_:;
NOTE: %INCLUDE (level 1) ending.
MPRINT(EM_DIAGRAM):   run;
95813      run;

NOTE: DATA STEP view saved on file EMWS1.NEURAL2_TRAIN.
NOTE: A stored DATA STEP view cannot run under a different operating system.
NOTE: View EMWS1.REPL2_TRAIN.VIEW used (Total process time):
      real time           0.25 seconds
      cpu time            0.18 seconds
      
NOTE: DATA statement used (Total process time):
      real time           0.27 seconds
      cpu time            0.21 seconds
      

MPRINT(EM_DIAGRAM):   quit;
95814      quit;
95815      filename emflow;
MPRINT(EM_DIAGRAM):   filename emflow;
NOTE: Fileref EMFLOW has been deassigned.
95816      filename emflow "H:\746\Decision Tree test\Workspaces\EMWS1\Neural2\EMFLOWSCORE.sas"
95816    ! ;
MPRINT(EM_DIAGRAM):    filename emflow "H:\746\Decision Tree 
test\Workspaces\EMWS1\Neural2\EMFLOWSCORE.sas";
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Neural2: Scoring VALIDATE data;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
95817      *------------------------------------------------------------*;
95818      * Neural2: Scoring VALIDATE data;
95819      *------------------------------------------------------------*;
95820      data EMWS1.Neural2_VALIDATE
95821      / view=EMWS1.Neural2_VALIDATE
95822      ;
MPRINT(EM_DIAGRAM):   data EMWS1.Neural2_VALIDATE / view=EMWS1.Neural2_VALIDATE ;
95823      set EMWS1.Repl2_VALIDATE
95824      ;
MPRINT(EM_DIAGRAM):   set EMWS1.Repl2_VALIDATE ;
95825      %inc emflow;
NOTE: %INCLUDE (level 1) file EMFLOW is file H:\746\Decision Tree 
      test\Workspaces\EMWS1\Neural2\EMFLOWSCORE.sas.
95826     +***********************************;
MPRINT(EM_DIAGRAM):   ***********************************;
95827     +*** Begin Scoring Code for Neural;
MPRINT(EM_DIAGRAM):   *** Begin Scoring Code for Neural;
95828     +***********************************;
MPRINT(EM_DIAGRAM):   ***********************************;
95829     +DROP _DM_BAD _EPS _NOCL_ _MAX_ _MAXP_ _SUM_ _NTRIALS;
MPRINT(EM_DIAGRAM):   DROP _DM_BAD _EPS _NOCL_ _MAX_ _MAXP_ _SUM_ _NTRIALS;
95830     + _DM_BAD = 0;
MPRINT(EM_DIAGRAM):   _DM_BAD = 0;
95831     + _NOCL_ = .;
MPRINT(EM_DIAGRAM):   _NOCL_ = .;
95832     + _MAX_ = .;
MPRINT(EM_DIAGRAM):   _MAX_ = .;
95833     + _MAXP_ = .;
MPRINT(EM_DIAGRAM):   _MAXP_ = .;
95834     + _SUM_ = .;
MPRINT(EM_DIAGRAM):   _SUM_ = .;
95835     + _NTRIALS = .;
MPRINT(EM_DIAGRAM):   _NTRIALS = .;
95836     + _EPS =                1E-10;
MPRINT(EM_DIAGRAM):   _EPS = 1E-10;
95837     +LENGTH _WARN_ $4
95838     +      F_Risk  $ 12
95839     +;
MPRINT(EM_DIAGRAM):   LENGTH _WARN_ $4 F_Risk $ 12 ;
95840     +      label S_LOG_REP_IMP_price = 'Standard: LOG_REP_IMP_price' ;
MPRINT(EM_DIAGRAM):   label S_LOG_REP_IMP_price = 'Standard: LOG_REP_IMP_price' ;
95841     +
95842     +      label S_LOG_REP_compression_ratio =
95843     +'Standard: LOG_REP_compression_ratio' ;
MPRINT(EM_DIAGRAM):   label S_LOG_REP_compression_ratio = 'Standard: 
LOG_REP_compression_ratio' ;
95844     +
95845     +      label S_LOG_REP_engine_size = 'Standard: LOG_REP_engine_size' ;
MPRINT(EM_DIAGRAM):   label S_LOG_REP_engine_size = 'Standard: LOG_REP_engine_size' ;
95846     +
95847     +      label S_REP_IMP_bore = 'Standard: REP_IMP_bore' ;
MPRINT(EM_DIAGRAM):   label S_REP_IMP_bore = 'Standard: REP_IMP_bore' ;
95848     +
95849     +      label S_REP_IMP_stroke = 'Standard: REP_IMP_stroke' ;
MPRINT(EM_DIAGRAM):   label S_REP_IMP_stroke = 'Standard: REP_IMP_stroke' ;
95850     +
95851     +      label S_REP_city_mpg = 'Standard: REP_city_mpg' ;
MPRINT(EM_DIAGRAM):   label S_REP_city_mpg = 'Standard: REP_city_mpg' ;
95852     +
95853     +      label S_REP_curb_weight = 'Standard: REP_curb_weight' ;
MPRINT(EM_DIAGRAM):   label S_REP_curb_weight = 'Standard: REP_curb_weight' ;
95854     +
95855     +      label S_REP_height = 'Standard: REP_height' ;
MPRINT(EM_DIAGRAM):   label S_REP_height = 'Standard: REP_height' ;
95856     +
95857     +      label S_REP_highway_mpg = 'Standard: REP_highway_mpg' ;
MPRINT(EM_DIAGRAM):   label S_REP_highway_mpg = 'Standard: REP_highway_mpg' ;
95858     +
95859     +      label S_REP_horsepower = 'Standard: REP_horsepower' ;
MPRINT(EM_DIAGRAM):   label S_REP_horsepower = 'Standard: REP_horsepower' ;
95860     +
95861     +      label S_REP_length = 'Standard: REP_length' ;
MPRINT(EM_DIAGRAM):   label S_REP_length = 'Standard: REP_length' ;
95862     +
95863     +      label S_REP_peak_rpm = 'Standard: REP_peak_rpm' ;
MPRINT(EM_DIAGRAM):   label S_REP_peak_rpm = 'Standard: REP_peak_rpm' ;
95864     +
95865     +      label S_REP_wheel_base = 'Standard: REP_wheel_base' ;
MPRINT(EM_DIAGRAM):   label S_REP_wheel_base = 'Standard: REP_wheel_base' ;
95866     +
95867     +      label S_REP_width = 'Standard: REP_width' ;
MPRINT(EM_DIAGRAM):   label S_REP_width = 'Standard: REP_width' ;
95868     +
95869     +      label M_bore0 = 'Dummy: M_bore=0' ;
MPRINT(EM_DIAGRAM):   label M_bore0 = 'Dummy: M_bore=0' ;
95870     +
95871     +      label M_num_of_doors0 = 'Dummy: M_num_of_doors=0' ;
MPRINT(EM_DIAGRAM):   label M_num_of_doors0 = 'Dummy: M_num_of_doors=0' ;
95872     +
95873     +      label M_price0 = 'Dummy: M_price=0' ;
MPRINT(EM_DIAGRAM):   label M_price0 = 'Dummy: M_price=0' ;
95874     +
95875     +      label M_stroke0 = 'Dummy: M_stroke=0' ;
MPRINT(EM_DIAGRAM):   label M_stroke0 = 'Dummy: M_stroke=0' ;
95876     +
95877     +      label IMP_num_of_doors2 = 'Dummy: IMP_num_of_doors=2' ;
MPRINT(EM_DIAGRAM):   label IMP_num_of_doors2 = 'Dummy: IMP_num_of_doors=2' ;
95878     +
95879     +      label REP_aspirationS = 'Dummy: REP_aspiration=S' ;
MPRINT(EM_DIAGRAM):   label REP_aspirationS = 'Dummy: REP_aspiration=S' ;
95880     +
95881     +      label REP_body_styleC = 'Dummy: REP_body_style=C' ;
MPRINT(EM_DIAGRAM):   label REP_body_styleC = 'Dummy: REP_body_style=C' ;
95882     +
95883     +      label REP_body_styleH = 'Dummy: REP_body_style=H' ;
MPRINT(EM_DIAGRAM):   label REP_body_styleH = 'Dummy: REP_body_style=H' ;
95884     +
95885     +      label REP_body_styleS = 'Dummy: REP_body_style=S' ;
MPRINT(EM_DIAGRAM):   label REP_body_styleS = 'Dummy: REP_body_style=S' ;
95886     +
95887     +      label REP_drive_wheels4 = 'Dummy: REP_drive_wheels=4' ;
MPRINT(EM_DIAGRAM):   label REP_drive_wheels4 = 'Dummy: REP_drive_wheels=4' ;
95888     +
95889     +      label REP_drive_wheelsF = 'Dummy: REP_drive_wheels=F' ;
MPRINT(EM_DIAGRAM):   label REP_drive_wheelsF = 'Dummy: REP_drive_wheels=F' ;
95890     +
95891     +      label REP_engine_locationF = 'Dummy: REP_engine_location=F' ;
MPRINT(EM_DIAGRAM):   label REP_engine_locationF = 'Dummy: REP_engine_location=F' ;
95892     +
95893     +      label REP_fuel_systemnon_spdi = 'Dummy: REP_fuel_system=non-spdi' ;
MPRINT(EM_DIAGRAM):   label REP_fuel_systemnon_spdi = 'Dummy: REP_fuel_system=non-spdi' ;
95894     +
95895     +      label REP_fuel_typeD = 'Dummy: REP_fuel_type=D' ;
MPRINT(EM_DIAGRAM):   label REP_fuel_typeD = 'Dummy: REP_fuel_type=D' ;
95896     +
95897     +      label REP_num_of_cylinders__4 = 'Dummy: REP_num_of_cylinders=<=4' ;
MPRINT(EM_DIAGRAM):   label REP_num_of_cylinders__4 = 'Dummy: REP_num_of_cylinders=<=4' ;
95898     +
95899     +      label engine_typedohc = 'Dummy: engine_type=dohc' ;
MPRINT(EM_DIAGRAM):   label engine_typedohc = 'Dummy: engine_type=dohc' ;
95900     +
95901     +      label engine_typel = 'Dummy: engine_type=l' ;
MPRINT(EM_DIAGRAM):   label engine_typel = 'Dummy: engine_type=l' ;
95902     +
95903     +      label engine_typeohc = 'Dummy: engine_type=ohc' ;
MPRINT(EM_DIAGRAM):   label engine_typeohc = 'Dummy: engine_type=ohc' ;
95904     +
95905     +      label engine_typeohcf = 'Dummy: engine_type=ohcf' ;
MPRINT(EM_DIAGRAM):   label engine_typeohcf = 'Dummy: engine_type=ohcf' ;
95906     +
95907     +      label engine_typeohcv = 'Dummy: engine_type=ohcv' ;
MPRINT(EM_DIAGRAM):   label engine_typeohcv = 'Dummy: engine_type=ohcv' ;
95908     +
95909     +      label H11 = 'Hidden: H1=1' ;
MPRINT(EM_DIAGRAM):   label H11 = 'Hidden: H1=1' ;
95910     +
95911     +      label H12 = 'Hidden: H1=2' ;
MPRINT(EM_DIAGRAM):   label H12 = 'Hidden: H1=2' ;
95912     +
95913     +      label H13 = 'Hidden: H1=3' ;
MPRINT(EM_DIAGRAM):   label H13 = 'Hidden: H1=3' ;
95914     +
95915     +      label I_Risk = 'Into: Risk' ;
MPRINT(EM_DIAGRAM):   label I_Risk = 'Into: Risk' ;
95916     +
95917     +      label F_Risk = 'From: Risk' ;
MPRINT(EM_DIAGRAM):   label F_Risk = 'From: Risk' ;
95918     +
95919     +      label U_Risk = 'Unnormalized Into: Risk' ;
MPRINT(EM_DIAGRAM):   label U_Risk = 'Unnormalized Into: Risk' ;
95920     +
95921     +      label P_Risk1 = 'Predicted: Risk=1' ;
MPRINT(EM_DIAGRAM):   label P_Risk1 = 'Predicted: Risk=1' ;
95922     +
95923     +      label R_Risk1 = 'Residual: Risk=1' ;
MPRINT(EM_DIAGRAM):   label R_Risk1 = 'Residual: Risk=1' ;
95924     +
95925     +      label P_Risk0 = 'Predicted: Risk=0' ;
MPRINT(EM_DIAGRAM):   label P_Risk0 = 'Predicted: Risk=0' ;
95926     +
95927     +      label R_Risk0 = 'Residual: Risk=0' ;
MPRINT(EM_DIAGRAM):   label R_Risk0 = 'Residual: Risk=0' ;
95928     +
95929     +      label  _WARN_ = "Warnings";
MPRINT(EM_DIAGRAM):   label _WARN_ = "Warnings";
95930     +
95931     +*** Generate dummy variables for M_bore ;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for M_bore ;
95932     +drop M_bore0 ;
MPRINT(EM_DIAGRAM):   drop M_bore0 ;
95933     +if missing( M_bore ) then do;
MPRINT(EM_DIAGRAM):   if missing( M_bore ) then do;
95934     +   M_bore0 = .;
MPRINT(EM_DIAGRAM):   M_bore0 = .;
95935     +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
95936     +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
95937     +end;
MPRINT(EM_DIAGRAM):   end;
95938     +else do;
MPRINT(EM_DIAGRAM):   else do;
95939     +   length _dm12 $ 12; drop _dm12 ;
MPRINT(EM_DIAGRAM):   length _dm12 $ 12;
MPRINT(EM_DIAGRAM):   drop _dm12 ;
95940     +   _dm12 = put( M_bore , BEST12. );
MPRINT(EM_DIAGRAM):   _dm12 = put( M_bore , BEST12. );
95941     +   %DMNORMIP( _dm12 )
MPRINT(DMNORMIP):   call dmnorm(_dm12,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
95942     +   if _dm12 = '0'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 = '0' then do;
95943     +      M_bore0 = 1;
MPRINT(EM_DIAGRAM):   M_bore0 = 1;
95944     +   end;
MPRINT(EM_DIAGRAM):   end;
95945     +   else if _dm12 = '1'  then do;
MPRINT(EM_DIAGRAM):   else if _dm12 = '1' then do;
95946     +      M_bore0 = -1;
MPRINT(EM_DIAGRAM):   M_bore0 = -1;
95947     +   end;
MPRINT(EM_DIAGRAM):   end;
95948     +   else do;
MPRINT(EM_DIAGRAM):   else do;
95949     +      M_bore0 = .;
MPRINT(EM_DIAGRAM):   M_bore0 = .;
95950     +      substr(_warn_,2,1) = 'U';
MPRINT(EM_DIAGRAM):   substr(_warn_,2,1) = 'U';
95951     +      _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
95952     +   end;
MPRINT(EM_DIAGRAM):   end;
95953     +end;
MPRINT(EM_DIAGRAM):   end;
95954     +
95955     +*** Generate dummy variables for M_num_of_doors ;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for M_num_of_doors ;
95956     +drop M_num_of_doors0 ;
MPRINT(EM_DIAGRAM):   drop M_num_of_doors0 ;
95957     +if missing( M_num_of_doors ) then do;
MPRINT(EM_DIAGRAM):   if missing( M_num_of_doors ) then do;
95958     +   M_num_of_doors0 = .;
MPRINT(EM_DIAGRAM):   M_num_of_doors0 = .;
95959     +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
95960     +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
95961     +end;
MPRINT(EM_DIAGRAM):   end;
95962     +else do;
MPRINT(EM_DIAGRAM):   else do;
95963     +   length _dm12 $ 12; drop _dm12 ;
MPRINT(EM_DIAGRAM):   length _dm12 $ 12;
MPRINT(EM_DIAGRAM):   drop _dm12 ;
95964     +   _dm12 = put( M_num_of_doors , BEST12. );
MPRINT(EM_DIAGRAM):   _dm12 = put( M_num_of_doors , BEST12. );
95965     +   %DMNORMIP( _dm12 )
MPRINT(DMNORMIP):   call dmnorm(_dm12,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
95966     +   if _dm12 = '0'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 = '0' then do;
95967     +      M_num_of_doors0 = 1;
MPRINT(EM_DIAGRAM):   M_num_of_doors0 = 1;
95968     +   end;
MPRINT(EM_DIAGRAM):   end;
95969     +   else if _dm12 = '1'  then do;
MPRINT(EM_DIAGRAM):   else if _dm12 = '1' then do;
95970     +      M_num_of_doors0 = -1;
MPRINT(EM_DIAGRAM):   M_num_of_doors0 = -1;
95971     +   end;
MPRINT(EM_DIAGRAM):   end;
95972     +   else do;
MPRINT(EM_DIAGRAM):   else do;
95973     +      M_num_of_doors0 = .;
MPRINT(EM_DIAGRAM):   M_num_of_doors0 = .;
95974     +      substr(_warn_,2,1) = 'U';
MPRINT(EM_DIAGRAM):   substr(_warn_,2,1) = 'U';
95975     +      _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
95976     +   end;
MPRINT(EM_DIAGRAM):   end;
95977     +end;
MPRINT(EM_DIAGRAM):   end;
95978     +
95979     +*** Generate dummy variables for M_price ;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for M_price ;
95980     +drop M_price0 ;
MPRINT(EM_DIAGRAM):   drop M_price0 ;
95981     +if missing( M_price ) then do;
MPRINT(EM_DIAGRAM):   if missing( M_price ) then do;
95982     +   M_price0 = .;
MPRINT(EM_DIAGRAM):   M_price0 = .;
95983     +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
95984     +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
95985     +end;
MPRINT(EM_DIAGRAM):   end;
95986     +else do;
MPRINT(EM_DIAGRAM):   else do;
95987     +   length _dm12 $ 12; drop _dm12 ;
MPRINT(EM_DIAGRAM):   length _dm12 $ 12;
MPRINT(EM_DIAGRAM):   drop _dm12 ;
95988     +   _dm12 = put( M_price , BEST12. );
MPRINT(EM_DIAGRAM):   _dm12 = put( M_price , BEST12. );
95989     +   %DMNORMIP( _dm12 )
MPRINT(DMNORMIP):   call dmnorm(_dm12,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
95990     +   if _dm12 = '0'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 = '0' then do;
95991     +      M_price0 = 1;
MPRINT(EM_DIAGRAM):   M_price0 = 1;
95992     +   end;
MPRINT(EM_DIAGRAM):   end;
95993     +   else if _dm12 = '1'  then do;
MPRINT(EM_DIAGRAM):   else if _dm12 = '1' then do;
95994     +      M_price0 = -1;
MPRINT(EM_DIAGRAM):   M_price0 = -1;
95995     +   end;
MPRINT(EM_DIAGRAM):   end;
95996     +   else do;
MPRINT(EM_DIAGRAM):   else do;
95997     +      M_price0 = .;
MPRINT(EM_DIAGRAM):   M_price0 = .;
95998     +      substr(_warn_,2,1) = 'U';
MPRINT(EM_DIAGRAM):   substr(_warn_,2,1) = 'U';
95999     +      _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
96000     +   end;
MPRINT(EM_DIAGRAM):   end;
96001     +end;
MPRINT(EM_DIAGRAM):   end;
96002     +
96003     +*** Generate dummy variables for M_stroke ;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for M_stroke ;
96004     +drop M_stroke0 ;
MPRINT(EM_DIAGRAM):   drop M_stroke0 ;
96005     +if missing( M_stroke ) then do;
MPRINT(EM_DIAGRAM):   if missing( M_stroke ) then do;
96006     +   M_stroke0 = .;
MPRINT(EM_DIAGRAM):   M_stroke0 = .;
96007     +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
96008     +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
96009     +end;
MPRINT(EM_DIAGRAM):   end;
96010     +else do;
MPRINT(EM_DIAGRAM):   else do;
96011     +   length _dm12 $ 12; drop _dm12 ;
MPRINT(EM_DIAGRAM):   length _dm12 $ 12;
MPRINT(EM_DIAGRAM):   drop _dm12 ;
96012     +   _dm12 = put( M_stroke , BEST12. );
MPRINT(EM_DIAGRAM):   _dm12 = put( M_stroke , BEST12. );
96013     +   %DMNORMIP( _dm12 )
MPRINT(DMNORMIP):   call dmnorm(_dm12,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
96014     +   if _dm12 = '0'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 = '0' then do;
96015     +      M_stroke0 = 1;
MPRINT(EM_DIAGRAM):   M_stroke0 = 1;
96016     +   end;
MPRINT(EM_DIAGRAM):   end;
96017     +   else if _dm12 = '1'  then do;
MPRINT(EM_DIAGRAM):   else if _dm12 = '1' then do;
96018     +      M_stroke0 = -1;
MPRINT(EM_DIAGRAM):   M_stroke0 = -1;
96019     +   end;
MPRINT(EM_DIAGRAM):   end;
96020     +   else do;
MPRINT(EM_DIAGRAM):   else do;
96021     +      M_stroke0 = .;
MPRINT(EM_DIAGRAM):   M_stroke0 = .;
96022     +      substr(_warn_,2,1) = 'U';
MPRINT(EM_DIAGRAM):   substr(_warn_,2,1) = 'U';
96023     +      _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
96024     +   end;
MPRINT(EM_DIAGRAM):   end;
96025     +end;
MPRINT(EM_DIAGRAM):   end;
96026     +
96027     +*** Generate dummy variables for IMP_num_of_doors ;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for IMP_num_of_doors ;
96028     +drop IMP_num_of_doors2 ;
MPRINT(EM_DIAGRAM):   drop IMP_num_of_doors2 ;
96029     +if missing( IMP_num_of_doors ) then do;
MPRINT(EM_DIAGRAM):   if missing( IMP_num_of_doors ) then do;
96030     +   IMP_num_of_doors2 = .;
MPRINT(EM_DIAGRAM):   IMP_num_of_doors2 = .;
96031     +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
96032     +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
96033     +end;
MPRINT(EM_DIAGRAM):   end;
96034     +else do;
MPRINT(EM_DIAGRAM):   else do;
96035     +   length _dm12 $ 12; drop _dm12 ;
MPRINT(EM_DIAGRAM):   length _dm12 $ 12;
MPRINT(EM_DIAGRAM):   drop _dm12 ;
96036     +   _dm12 = put( IMP_num_of_doors , BEST12. );
MPRINT(EM_DIAGRAM):   _dm12 = put( IMP_num_of_doors , BEST12. );
96037     +   %DMNORMIP( _dm12 )
MPRINT(DMNORMIP):   call dmnorm(_dm12,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
96038     +   if _dm12 = '4'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 = '4' then do;
96039     +      IMP_num_of_doors2 = -1;
MPRINT(EM_DIAGRAM):   IMP_num_of_doors2 = -1;
96040     +   end;
MPRINT(EM_DIAGRAM):   end;
96041     +   else if _dm12 = '2'  then do;
MPRINT(EM_DIAGRAM):   else if _dm12 = '2' then do;
96042     +      IMP_num_of_doors2 = 1;
MPRINT(EM_DIAGRAM):   IMP_num_of_doors2 = 1;
96043     +   end;
MPRINT(EM_DIAGRAM):   end;
96044     +   else do;
MPRINT(EM_DIAGRAM):   else do;
96045     +      IMP_num_of_doors2 = .;
MPRINT(EM_DIAGRAM):   IMP_num_of_doors2 = .;
96046     +      substr(_warn_,2,1) = 'U';
MPRINT(EM_DIAGRAM):   substr(_warn_,2,1) = 'U';
96047     +      _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
96048     +   end;
MPRINT(EM_DIAGRAM):   end;
96049     +end;
MPRINT(EM_DIAGRAM):   end;
96050     +
96051     +*** Generate dummy variables for REP_aspiration ;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for REP_aspiration ;
96052     +drop REP_aspirationS ;
MPRINT(EM_DIAGRAM):   drop REP_aspirationS ;
96053     +if missing( REP_aspiration ) then do;
MPRINT(EM_DIAGRAM):   if missing( REP_aspiration ) then do;
96054     +   REP_aspirationS = .;
MPRINT(EM_DIAGRAM):   REP_aspirationS = .;
96055     +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
96056     +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
96057     +end;
MPRINT(EM_DIAGRAM):   end;
96058     +else do;
MPRINT(EM_DIAGRAM):   else do;
96059     +   length _dm5 $ 5; drop _dm5 ;
MPRINT(EM_DIAGRAM):   length _dm5 $ 5;
MPRINT(EM_DIAGRAM):   drop _dm5 ;
96060     +   _dm5 = put( REP_aspiration , $5. );
MPRINT(EM_DIAGRAM):   _dm5 = put( REP_aspiration , $5. );
96061     +   %DMNORMIP( _dm5 )
MPRINT(DMNORMIP):   call dmnorm(_dm5,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
96062     +   if _dm5 = 'S'  then do;
MPRINT(EM_DIAGRAM):   if _dm5 = 'S' then do;
96063     +      REP_aspirationS = 1;
MPRINT(EM_DIAGRAM):   REP_aspirationS = 1;
96064     +   end;
MPRINT(EM_DIAGRAM):   end;
96065     +   else if _dm5 = 'T'  then do;
MPRINT(EM_DIAGRAM):   else if _dm5 = 'T' then do;
96066     +      REP_aspirationS = -1;
MPRINT(EM_DIAGRAM):   REP_aspirationS = -1;
96067     +   end;
MPRINT(EM_DIAGRAM):   end;
96068     +   else do;
MPRINT(EM_DIAGRAM):   else do;
96069     +      REP_aspirationS = .;
MPRINT(EM_DIAGRAM):   REP_aspirationS = .;
96070     +      substr(_warn_,2,1) = 'U';
MPRINT(EM_DIAGRAM):   substr(_warn_,2,1) = 'U';
96071     +      _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
96072     +   end;
MPRINT(EM_DIAGRAM):   end;
96073     +end;
MPRINT(EM_DIAGRAM):   end;
96074     +
96075     +*** Generate dummy variables for REP_body_style ;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for REP_body_style ;
96076     +drop REP_body_styleC REP_body_styleH REP_body_styleS ;
MPRINT(EM_DIAGRAM):   drop REP_body_styleC REP_body_styleH REP_body_styleS ;
96077     +if missing( REP_body_style ) then do;
MPRINT(EM_DIAGRAM):   if missing( REP_body_style ) then do;
96078     +   REP_body_styleC = .;
MPRINT(EM_DIAGRAM):   REP_body_styleC = .;
96079     +   REP_body_styleH = .;
MPRINT(EM_DIAGRAM):   REP_body_styleH = .;
96080     +   REP_body_styleS = .;
MPRINT(EM_DIAGRAM):   REP_body_styleS = .;
96081     +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
96082     +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
96083     +end;
MPRINT(EM_DIAGRAM):   end;
96084     +else do;
MPRINT(EM_DIAGRAM):   else do;
96085     +   length _dm11 $ 11; drop _dm11 ;
MPRINT(EM_DIAGRAM):   length _dm11 $ 11;
MPRINT(EM_DIAGRAM):   drop _dm11 ;
96086     +   %DMNORMCP( REP_body_style , _dm11 )
MPRINT(DMNORMCP):   _dm11=dmnorm(REP_body_style,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMCP):  );
96087     +   if _dm11 = 'S'  then do;
MPRINT(EM_DIAGRAM):   if _dm11 = 'S' then do;
96088     +      REP_body_styleC = 0;
MPRINT(EM_DIAGRAM):   REP_body_styleC = 0;
96089     +      REP_body_styleH = 0;
MPRINT(EM_DIAGRAM):   REP_body_styleH = 0;
96090     +      REP_body_styleS = 1;
MPRINT(EM_DIAGRAM):   REP_body_styleS = 1;
96091     +   end;
MPRINT(EM_DIAGRAM):   end;
96092     +   else if _dm11 = 'H'  then do;
MPRINT(EM_DIAGRAM):   else if _dm11 = 'H' then do;
96093     +      REP_body_styleC = 0;
MPRINT(EM_DIAGRAM):   REP_body_styleC = 0;
96094     +      REP_body_styleH = 1;
MPRINT(EM_DIAGRAM):   REP_body_styleH = 1;
96095     +      REP_body_styleS = 0;
MPRINT(EM_DIAGRAM):   REP_body_styleS = 0;
96096     +   end;
MPRINT(EM_DIAGRAM):   end;
96097     +   else if _dm11 = 'W'  then do;
MPRINT(EM_DIAGRAM):   else if _dm11 = 'W' then do;
96098     +      REP_body_styleC = -1;
MPRINT(EM_DIAGRAM):   REP_body_styleC = -1;
96099     +      REP_body_styleH = -1;
MPRINT(EM_DIAGRAM):   REP_body_styleH = -1;
96100     +      REP_body_styleS = -1;
MPRINT(EM_DIAGRAM):   REP_body_styleS = -1;
96101     +   end;
MPRINT(EM_DIAGRAM):   end;
96102     +   else if _dm11 = 'C'  then do;
MPRINT(EM_DIAGRAM):   else if _dm11 = 'C' then do;
96103     +      REP_body_styleC = 1;
MPRINT(EM_DIAGRAM):   REP_body_styleC = 1;
96104     +      REP_body_styleH = 0;
MPRINT(EM_DIAGRAM):   REP_body_styleH = 0;
96105     +      REP_body_styleS = 0;
MPRINT(EM_DIAGRAM):   REP_body_styleS = 0;
96106     +   end;
MPRINT(EM_DIAGRAM):   end;
96107     +   else do;
MPRINT(EM_DIAGRAM):   else do;
96108     +      REP_body_styleC = .;
MPRINT(EM_DIAGRAM):   REP_body_styleC = .;
96109     +      REP_body_styleH = .;
MPRINT(EM_DIAGRAM):   REP_body_styleH = .;
96110     +      REP_body_styleS = .;
MPRINT(EM_DIAGRAM):   REP_body_styleS = .;
96111     +      substr(_warn_,2,1) = 'U';
MPRINT(EM_DIAGRAM):   substr(_warn_,2,1) = 'U';
96112     +      _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
96113     +   end;
MPRINT(EM_DIAGRAM):   end;
96114     +end;
MPRINT(EM_DIAGRAM):   end;
96115     +
96116     +*** Generate dummy variables for REP_drive_wheels ;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for REP_drive_wheels ;
96117     +drop REP_drive_wheels4 REP_drive_wheelsF ;
MPRINT(EM_DIAGRAM):   drop REP_drive_wheels4 REP_drive_wheelsF ;
96118     +if missing( REP_drive_wheels ) then do;
MPRINT(EM_DIAGRAM):   if missing( REP_drive_wheels ) then do;
96119     +   REP_drive_wheels4 = .;
MPRINT(EM_DIAGRAM):   REP_drive_wheels4 = .;
96120     +   REP_drive_wheelsF = .;
MPRINT(EM_DIAGRAM):   REP_drive_wheelsF = .;
96121     +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
96122     +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
96123     +end;
MPRINT(EM_DIAGRAM):   end;
96124     +else do;
MPRINT(EM_DIAGRAM):   else do;
96125     +   length _dm3 $ 3; drop _dm3 ;
MPRINT(EM_DIAGRAM):   length _dm3 $ 3;
MPRINT(EM_DIAGRAM):   drop _dm3 ;
96126     +   %DMNORMCP( REP_drive_wheels , _dm3 )
MPRINT(DMNORMCP):   _dm3=dmnorm(REP_drive_wheels,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMCP):  );
96127     +   if _dm3 = 'F'  then do;
MPRINT(EM_DIAGRAM):   if _dm3 = 'F' then do;
96128     +      REP_drive_wheels4 = 0;
MPRINT(EM_DIAGRAM):   REP_drive_wheels4 = 0;
96129     +      REP_drive_wheelsF = 1;
MPRINT(EM_DIAGRAM):   REP_drive_wheelsF = 1;
96130     +   end;
MPRINT(EM_DIAGRAM):   end;
96131     +   else if _dm3 = 'R'  then do;
MPRINT(EM_DIAGRAM):   else if _dm3 = 'R' then do;
96132     +      REP_drive_wheels4 = -1;
MPRINT(EM_DIAGRAM):   REP_drive_wheels4 = -1;
96133     +      REP_drive_wheelsF = -1;
MPRINT(EM_DIAGRAM):   REP_drive_wheelsF = -1;
96134     +   end;
MPRINT(EM_DIAGRAM):   end;
96135     +   else if _dm3 = '4'  then do;
MPRINT(EM_DIAGRAM):   else if _dm3 = '4' then do;
96136     +      REP_drive_wheels4 = 1;
MPRINT(EM_DIAGRAM):   REP_drive_wheels4 = 1;
96137     +      REP_drive_wheelsF = 0;
MPRINT(EM_DIAGRAM):   REP_drive_wheelsF = 0;
96138     +   end;
MPRINT(EM_DIAGRAM):   end;
96139     +   else do;
MPRINT(EM_DIAGRAM):   else do;
96140     +      REP_drive_wheels4 = .;
MPRINT(EM_DIAGRAM):   REP_drive_wheels4 = .;
96141     +      REP_drive_wheelsF = .;
MPRINT(EM_DIAGRAM):   REP_drive_wheelsF = .;
96142     +      substr(_warn_,2,1) = 'U';
MPRINT(EM_DIAGRAM):   substr(_warn_,2,1) = 'U';
96143     +      _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
96144     +   end;
MPRINT(EM_DIAGRAM):   end;
96145     +end;
MPRINT(EM_DIAGRAM):   end;
96146     +
96147     +*** Generate dummy variables for REP_engine_location ;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for REP_engine_location ;
96148     +drop REP_engine_locationF ;
MPRINT(EM_DIAGRAM):   drop REP_engine_locationF ;
96149     +if missing( REP_engine_location ) then do;
MPRINT(EM_DIAGRAM):   if missing( REP_engine_location ) then do;
96150     +   REP_engine_locationF = .;
MPRINT(EM_DIAGRAM):   REP_engine_locationF = .;
96151     +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
96152     +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
96153     +end;
MPRINT(EM_DIAGRAM):   end;
96154     +else do;
MPRINT(EM_DIAGRAM):   else do;
96155     +   length _dm5 $ 5; drop _dm5 ;
MPRINT(EM_DIAGRAM):   length _dm5 $ 5;
MPRINT(EM_DIAGRAM):   drop _dm5 ;
96156     +   %DMNORMCP( REP_engine_location , _dm5 )
MPRINT(DMNORMCP):   _dm5=dmnorm(REP_engine_location,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMCP):  );
96157     +   if _dm5 = 'F'  then do;
MPRINT(EM_DIAGRAM):   if _dm5 = 'F' then do;
96158     +      REP_engine_locationF = 1;
MPRINT(EM_DIAGRAM):   REP_engine_locationF = 1;
96159     +   end;
MPRINT(EM_DIAGRAM):   end;
96160     +   else if _dm5 = 'R'  then do;
MPRINT(EM_DIAGRAM):   else if _dm5 = 'R' then do;
96161     +      REP_engine_locationF = -1;
MPRINT(EM_DIAGRAM):   REP_engine_locationF = -1;
96162     +   end;
MPRINT(EM_DIAGRAM):   end;
96163     +   else do;
MPRINT(EM_DIAGRAM):   else do;
96164     +      REP_engine_locationF = .;
MPRINT(EM_DIAGRAM):   REP_engine_locationF = .;
96165     +      substr(_warn_,2,1) = 'U';
MPRINT(EM_DIAGRAM):   substr(_warn_,2,1) = 'U';
96166     +      _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
96167     +   end;
MPRINT(EM_DIAGRAM):   end;
96168     +end;
MPRINT(EM_DIAGRAM):   end;
96169     +
96170     +*** Generate dummy variables for REP_fuel_system ;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for REP_fuel_system ;
96171     +drop REP_fuel_systemnon_spdi ;
MPRINT(EM_DIAGRAM):   drop REP_fuel_systemnon_spdi ;
96172     +if missing( REP_fuel_system ) then do;
MPRINT(EM_DIAGRAM):   if missing( REP_fuel_system ) then do;
96173     +   REP_fuel_systemnon_spdi = .;
MPRINT(EM_DIAGRAM):   REP_fuel_systemnon_spdi = .;
96174     +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
96175     +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
96176     +end;
MPRINT(EM_DIAGRAM):   end;
96177     +else do;
MPRINT(EM_DIAGRAM):   else do;
96178     +   length _dm8 $ 8; drop _dm8 ;
MPRINT(EM_DIAGRAM):   length _dm8 $ 8;
MPRINT(EM_DIAGRAM):   drop _dm8 ;
96179     +   %DMNORMCP( REP_fuel_system , _dm8 )
MPRINT(DMNORMCP):   _dm8=dmnorm(REP_fuel_system,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMCP):  );
96180     +   if _dm8 = 'NON-SPDI'  then do;
MPRINT(EM_DIAGRAM):   if _dm8 = 'NON-SPDI' then do;
96181     +      REP_fuel_systemnon_spdi = 1;
MPRINT(EM_DIAGRAM):   REP_fuel_systemnon_spdi = 1;
96182     +   end;
MPRINT(EM_DIAGRAM):   end;
96183     +   else if _dm8 = 'SPDI'  then do;
MPRINT(EM_DIAGRAM):   else if _dm8 = 'SPDI' then do;
96184     +      REP_fuel_systemnon_spdi = -1;
MPRINT(EM_DIAGRAM):   REP_fuel_systemnon_spdi = -1;
96185     +   end;
MPRINT(EM_DIAGRAM):   end;
96186     +   else do;
MPRINT(EM_DIAGRAM):   else do;
96187     +      REP_fuel_systemnon_spdi = .;
MPRINT(EM_DIAGRAM):   REP_fuel_systemnon_spdi = .;
96188     +      substr(_warn_,2,1) = 'U';
MPRINT(EM_DIAGRAM):   substr(_warn_,2,1) = 'U';
96189     +      _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
96190     +   end;
MPRINT(EM_DIAGRAM):   end;
96191     +end;
MPRINT(EM_DIAGRAM):   end;
96192     +
96193     +*** Generate dummy variables for REP_fuel_type ;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for REP_fuel_type ;
96194     +drop REP_fuel_typeD ;
MPRINT(EM_DIAGRAM):   drop REP_fuel_typeD ;
96195     +if missing( REP_fuel_type ) then do;
MPRINT(EM_DIAGRAM):   if missing( REP_fuel_type ) then do;
96196     +   REP_fuel_typeD = .;
MPRINT(EM_DIAGRAM):   REP_fuel_typeD = .;
96197     +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
96198     +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
96199     +end;
MPRINT(EM_DIAGRAM):   end;
96200     +else do;
MPRINT(EM_DIAGRAM):   else do;
96201     +   length _dm6 $ 6; drop _dm6 ;
MPRINT(EM_DIAGRAM):   length _dm6 $ 6;
MPRINT(EM_DIAGRAM):   drop _dm6 ;
96202     +   %DMNORMCP( REP_fuel_type , _dm6 )
MPRINT(DMNORMCP):   _dm6=dmnorm(REP_fuel_type,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMCP):  );
96203     +   if _dm6 = 'G'  then do;
MPRINT(EM_DIAGRAM):   if _dm6 = 'G' then do;
96204     +      REP_fuel_typeD = -1;
MPRINT(EM_DIAGRAM):   REP_fuel_typeD = -1;
96205     +   end;
MPRINT(EM_DIAGRAM):   end;
96206     +   else if _dm6 = 'D'  then do;
MPRINT(EM_DIAGRAM):   else if _dm6 = 'D' then do;
96207     +      REP_fuel_typeD = 1;
MPRINT(EM_DIAGRAM):   REP_fuel_typeD = 1;
96208     +   end;
MPRINT(EM_DIAGRAM):   end;
96209     +   else do;
MPRINT(EM_DIAGRAM):   else do;
96210     +      REP_fuel_typeD = .;
MPRINT(EM_DIAGRAM):   REP_fuel_typeD = .;
96211     +      substr(_warn_,2,1) = 'U';
MPRINT(EM_DIAGRAM):   substr(_warn_,2,1) = 'U';
96212     +      _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
96213     +   end;
MPRINT(EM_DIAGRAM):   end;
96214     +end;
MPRINT(EM_DIAGRAM):   end;
96215     +
96216     +*** Generate dummy variables for REP_num_of_cylinders ;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for REP_num_of_cylinders ;
96217     +drop REP_num_of_cylinders__4 ;
MPRINT(EM_DIAGRAM):   drop REP_num_of_cylinders__4 ;
96218     +if missing( REP_num_of_cylinders ) then do;
MPRINT(EM_DIAGRAM):   if missing( REP_num_of_cylinders ) then do;
96219     +   REP_num_of_cylinders__4 = .;
MPRINT(EM_DIAGRAM):   REP_num_of_cylinders__4 = .;
96220     +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
96221     +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
96222     +end;
MPRINT(EM_DIAGRAM):   end;
96223     +else do;
MPRINT(EM_DIAGRAM):   else do;
96224     +   length _dm6 $ 6; drop _dm6 ;
MPRINT(EM_DIAGRAM):   length _dm6 $ 6;
MPRINT(EM_DIAGRAM):   drop _dm6 ;
96225     +   %DMNORMCP( REP_num_of_cylinders , _dm6 )
MPRINT(DMNORMCP):   _dm6=dmnorm(REP_num_of_cylinders,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMCP):  );
96226     +   if _dm6 = '<=4'  then do;
MPRINT(EM_DIAGRAM):   if _dm6 = '<=4' then do;
96227     +      REP_num_of_cylinders__4 = 1;
MPRINT(EM_DIAGRAM):   REP_num_of_cylinders__4 = 1;
96228     +   end;
MPRINT(EM_DIAGRAM):   end;
96229     +   else if _dm6 = '>4'  then do;
MPRINT(EM_DIAGRAM):   else if _dm6 = '>4' then do;
96230     +      REP_num_of_cylinders__4 = -1;
MPRINT(EM_DIAGRAM):   REP_num_of_cylinders__4 = -1;
96231     +   end;
MPRINT(EM_DIAGRAM):   end;
96232     +   else do;
MPRINT(EM_DIAGRAM):   else do;
96233     +      REP_num_of_cylinders__4 = .;
MPRINT(EM_DIAGRAM):   REP_num_of_cylinders__4 = .;
96234     +      substr(_warn_,2,1) = 'U';
MPRINT(EM_DIAGRAM):   substr(_warn_,2,1) = 'U';
96235     +      _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
96236     +   end;
MPRINT(EM_DIAGRAM):   end;
96237     +end;
MPRINT(EM_DIAGRAM):   end;
96238     +
96239     +*** Generate dummy variables for engine_type ;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for engine_type ;
96240     +drop engine_typedohc engine_typel engine_typeohc engine_typeohcf
96241     +        engine_typeohcv ;
MPRINT(EM_DIAGRAM):   drop engine_typedohc engine_typel engine_typeohc engine_typeohcf 
engine_typeohcv ;
96242     +*** encoding is sparse, initialize to zero;
MPRINT(EM_DIAGRAM):   *** encoding is sparse, initialize to zero;
96243     +engine_typedohc = 0;
MPRINT(EM_DIAGRAM):   engine_typedohc = 0;
96244     +engine_typel = 0;
MPRINT(EM_DIAGRAM):   engine_typel = 0;
96245     +engine_typeohc = 0;
MPRINT(EM_DIAGRAM):   engine_typeohc = 0;
96246     +engine_typeohcf = 0;
MPRINT(EM_DIAGRAM):   engine_typeohcf = 0;
96247     +engine_typeohcv = 0;
MPRINT(EM_DIAGRAM):   engine_typeohcv = 0;
96248     +if missing( engine_type ) then do;
MPRINT(EM_DIAGRAM):   if missing( engine_type ) then do;
96249     +   engine_typedohc = .;
MPRINT(EM_DIAGRAM):   engine_typedohc = .;
96250     +   engine_typel = .;
MPRINT(EM_DIAGRAM):   engine_typel = .;
96251     +   engine_typeohc = .;
MPRINT(EM_DIAGRAM):   engine_typeohc = .;
96252     +   engine_typeohcf = .;
MPRINT(EM_DIAGRAM):   engine_typeohcf = .;
96253     +   engine_typeohcv = .;
MPRINT(EM_DIAGRAM):   engine_typeohcv = .;
96254     +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
96255     +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
96256     +end;
MPRINT(EM_DIAGRAM):   end;
96257     +else do;
MPRINT(EM_DIAGRAM):   else do;
96258     +   length _dm5 $ 5; drop _dm5 ;
MPRINT(EM_DIAGRAM):   length _dm5 $ 5;
MPRINT(EM_DIAGRAM):   drop _dm5 ;
96259     +   %DMNORMCP( engine_type , _dm5 )
MPRINT(DMNORMCP):   _dm5=dmnorm(engine_type,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMCP):  );
96260     +   if _dm5 = 'OHC'  then do;
MPRINT(EM_DIAGRAM):   if _dm5 = 'OHC' then do;
96261     +      engine_typeohc = 1;
The SAS System

MPRINT(EM_DIAGRAM):   engine_typeohc = 1;
96262     +   end;
MPRINT(EM_DIAGRAM):   end;
96263     +   else if _dm5 = 'OHCF'  then do;
MPRINT(EM_DIAGRAM):   else if _dm5 = 'OHCF' then do;
96264     +      engine_typeohcf = 1;
MPRINT(EM_DIAGRAM):   engine_typeohcf = 1;
96265     +   end;
MPRINT(EM_DIAGRAM):   end;
96266     +   else if _dm5 = 'OHCV'  then do;
MPRINT(EM_DIAGRAM):   else if _dm5 = 'OHCV' then do;
96267     +      engine_typeohcv = 1;
MPRINT(EM_DIAGRAM):   engine_typeohcv = 1;
96268     +   end;
MPRINT(EM_DIAGRAM):   end;
96269     +   else if _dm5 = 'DOHC'  then do;
MPRINT(EM_DIAGRAM):   else if _dm5 = 'DOHC' then do;
96270     +      engine_typedohc = 1;
MPRINT(EM_DIAGRAM):   engine_typedohc = 1;
96271     +   end;
MPRINT(EM_DIAGRAM):   end;
96272     +   else if _dm5 = 'L'  then do;
MPRINT(EM_DIAGRAM):   else if _dm5 = 'L' then do;
96273     +      engine_typel = 1;
MPRINT(EM_DIAGRAM):   engine_typel = 1;
96274     +   end;
MPRINT(EM_DIAGRAM):   end;
96275     +   else if _dm5 = 'ROTOR'  then do;
MPRINT(EM_DIAGRAM):   else if _dm5 = 'ROTOR' then do;
96276     +      engine_typedohc = -1;
MPRINT(EM_DIAGRAM):   engine_typedohc = -1;
96277     +      engine_typel = -1;
MPRINT(EM_DIAGRAM):   engine_typel = -1;
96278     +      engine_typeohc = -1;
MPRINT(EM_DIAGRAM):   engine_typeohc = -1;
96279     +      engine_typeohcf = -1;
MPRINT(EM_DIAGRAM):   engine_typeohcf = -1;
96280     +      engine_typeohcv = -1;
MPRINT(EM_DIAGRAM):   engine_typeohcv = -1;
96281     +   end;
MPRINT(EM_DIAGRAM):   end;
96282     +   else do;
MPRINT(EM_DIAGRAM):   else do;
96283     +      engine_typedohc = .;
MPRINT(EM_DIAGRAM):   engine_typedohc = .;
96284     +      engine_typel = .;
MPRINT(EM_DIAGRAM):   engine_typel = .;
96285     +      engine_typeohc = .;
MPRINT(EM_DIAGRAM):   engine_typeohc = .;
96286     +      engine_typeohcf = .;
MPRINT(EM_DIAGRAM):   engine_typeohcf = .;
96287     +      engine_typeohcv = .;
MPRINT(EM_DIAGRAM):   engine_typeohcv = .;
96288     +      substr(_warn_,2,1) = 'U';
MPRINT(EM_DIAGRAM):   substr(_warn_,2,1) = 'U';
96289     +      _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
96290     +   end;
MPRINT(EM_DIAGRAM):   end;
96291     +end;
MPRINT(EM_DIAGRAM):   end;
96292     +
96293     +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
96294     +*** Checking missing input Interval
96295     +*** *************************;
MPRINT(EM_DIAGRAM):   *** Checking missing input Interval *** *************************;
96296     +
96297     +IF NMISS(
96298     +   LOG_REP_IMP_price ,
96299     +   LOG_REP_compression_ratio ,
96300     +   LOG_REP_engine_size ,
96301     +   REP_IMP_bore ,
96302     +   REP_IMP_stroke ,
96303     +   REP_city_mpg ,
96304     +   REP_curb_weight ,
96305     +   REP_height ,
96306     +   REP_highway_mpg ,
96307     +   REP_horsepower ,
96308     +   REP_length ,
96309     +   REP_peak_rpm ,
96310     +   REP_wheel_base ,
96311     +   REP_width   ) THEN DO;
MPRINT(EM_DIAGRAM):   IF NMISS( LOG_REP_IMP_price , LOG_REP_compression_ratio , 
LOG_REP_engine_size , REP_IMP_bore , REP_IMP_stroke , REP_city_mpg , REP_curb_weight , 
REP_height , REP_highway_mpg , REP_horsepower , REP_length , REP_peak_rpm , REP_wheel_base , 
REP_width ) THEN DO;
96312     +   SUBSTR(_WARN_, 1, 1) = 'M';
MPRINT(EM_DIAGRAM):   SUBSTR(_WARN_, 1, 1) = 'M';
96313     +
96314     +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
96315     +END;
MPRINT(EM_DIAGRAM):   END;
96316     +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
96317     +*** Writing the Node intvl ;
MPRINT(EM_DIAGRAM):   *** Writing the Node intvl ;
96318     +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
96319     +IF _DM_BAD EQ 0 THEN DO;
MPRINT(EM_DIAGRAM):   IF _DM_BAD EQ 0 THEN DO;
96320     +   S_LOG_REP_IMP_price  =    -20.2356185469493 +     2.16855745948401 *
96321     +        LOG_REP_IMP_price ;
MPRINT(EM_DIAGRAM):   S_LOG_REP_IMP_price = -20.2356185469493 + 2.16855745948401 * 
LOG_REP_IMP_price ;
96322     +   S_LOG_REP_compression_ratio
96323     +          =    -8.72649819321039 +     3.65742873950677 *
96324     +        LOG_REP_compression_ratio ;
MPRINT(EM_DIAGRAM):   S_LOG_REP_compression_ratio = -8.72649819321039 + 3.65742873950677 * 
LOG_REP_compression_ratio ;
96325     +   S_LOG_REP_engine_size  =    -19.3053254119757 +     4.02929302984948 *
96326     +        LOG_REP_engine_size ;
MPRINT(EM_DIAGRAM):   S_LOG_REP_engine_size = -19.3053254119757 + 4.02929302984948 * 
LOG_REP_engine_size ;
96327     +   S_REP_IMP_bore  =    -13.3604302656684 +     4.04536293034574 *
96328     +        REP_IMP_bore ;
MPRINT(EM_DIAGRAM):   S_REP_IMP_bore = -13.3604302656684 + 4.04536293034574 * REP_IMP_bore ;
96329     +   S_REP_IMP_stroke  =    -11.3205669287077 +     3.47855217496738 *
96330     +        REP_IMP_stroke ;
MPRINT(EM_DIAGRAM):   S_REP_IMP_stroke = -11.3205669287077 + 3.47855217496738 * REP_IMP_stroke 
;
96331     +   S_REP_city_mpg  =    -4.23279255832632 +     0.16535248553422 *
96332     +        REP_city_mpg ;
MPRINT(EM_DIAGRAM):   S_REP_city_mpg = -4.23279255832632 + 0.16535248553422 * REP_city_mpg ;
96333     +   S_REP_curb_weight  =    -5.35597047742979 +     0.00212869810672 *
96334     +        REP_curb_weight ;
MPRINT(EM_DIAGRAM):   S_REP_curb_weight = -5.35597047742979 + 0.00212869810672 * 
REP_curb_weight ;
96335     +   S_REP_height  =    -21.8926608140893 +     0.40589318675657 * REP_height ;
MPRINT(EM_DIAGRAM):   S_REP_height = -21.8926608140893 + 0.40589318675657 * REP_height ;
96336     +   S_REP_highway_mpg  =    -4.99166764925563 +     0.16020006928199 *
96337     +        REP_highway_mpg ;
MPRINT(EM_DIAGRAM):   S_REP_highway_mpg = -4.99166764925563 + 0.16020006928199 * 
REP_highway_mpg ;
96338     +   S_REP_horsepower  =    -2.74643097264309 +     0.02734944206973 *
96339     +        REP_horsepower ;
MPRINT(EM_DIAGRAM):   S_REP_horsepower = -2.74643097264309 + 0.02734944206973 * REP_horsepower 
;
96340     +   S_REP_length  =    -15.2378498365576 +     0.08781104037663 * REP_length ;
MPRINT(EM_DIAGRAM):   S_REP_length = -15.2378498365576 + 0.08781104037663 * REP_length ;
96341     +   S_REP_peak_rpm  =    -10.6885709541859 +     0.00208333904184 *
96342     +        REP_peak_rpm ;
MPRINT(EM_DIAGRAM):   S_REP_peak_rpm = -10.6885709541859 + 0.00208333904184 * REP_peak_rpm ;
96343     +   S_REP_wheel_base  =    -17.8009087180129 +     0.18059887504832 *
96344     +        REP_wheel_base ;
MPRINT(EM_DIAGRAM):   S_REP_wheel_base = -17.8009087180129 + 0.18059887504832 * REP_wheel_base 
;
96345     +   S_REP_width  =    -35.9167499004784 +     0.54673628301566 * REP_width ;
MPRINT(EM_DIAGRAM):   S_REP_width = -35.9167499004784 + 0.54673628301566 * REP_width ;
96346     +END;
MPRINT(EM_DIAGRAM):   END;
96347     +ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
96348     +   IF MISSING( LOG_REP_IMP_price ) THEN S_LOG_REP_IMP_price  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( LOG_REP_IMP_price ) THEN S_LOG_REP_IMP_price = . ;
96349     +   ELSE S_LOG_REP_IMP_price  =    -20.2356185469493 +     2.16855745948401 *
96350     +        LOG_REP_IMP_price ;
MPRINT(EM_DIAGRAM):   ELSE S_LOG_REP_IMP_price = -20.2356185469493 + 2.16855745948401 * 
LOG_REP_IMP_price ;
96351     +   IF MISSING( LOG_REP_compression_ratio ) THEN S_LOG_REP_compression_ratio
96352     +          = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( LOG_REP_compression_ratio ) THEN S_LOG_REP_compression_ratio 
= . ;
96353     +   ELSE S_LOG_REP_compression_ratio
96354     +          =    -8.72649819321039 +     3.65742873950677 *
96355     +        LOG_REP_compression_ratio ;
MPRINT(EM_DIAGRAM):   ELSE S_LOG_REP_compression_ratio = -8.72649819321039 + 3.65742873950677 
* LOG_REP_compression_ratio ;
96356     +   IF MISSING( LOG_REP_engine_size ) THEN S_LOG_REP_engine_size  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( LOG_REP_engine_size ) THEN S_LOG_REP_engine_size = . ;
96357     +   ELSE S_LOG_REP_engine_size
96358     +          =    -19.3053254119757 +     4.02929302984948 * LOG_REP_engine_size
96359     +         ;
MPRINT(EM_DIAGRAM):   ELSE S_LOG_REP_engine_size = -19.3053254119757 + 4.02929302984948 * 
LOG_REP_engine_size ;
96360     +   IF MISSING( REP_IMP_bore ) THEN S_REP_IMP_bore  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( REP_IMP_bore ) THEN S_REP_IMP_bore = . ;
96361     +   ELSE S_REP_IMP_bore  =    -13.3604302656684 +     4.04536293034574 *
96362     +        REP_IMP_bore ;
MPRINT(EM_DIAGRAM):   ELSE S_REP_IMP_bore = -13.3604302656684 + 4.04536293034574 * 
REP_IMP_bore ;
96363     +   IF MISSING( REP_IMP_stroke ) THEN S_REP_IMP_stroke  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( REP_IMP_stroke ) THEN S_REP_IMP_stroke = . ;
96364     +   ELSE S_REP_IMP_stroke  =    -11.3205669287077 +     3.47855217496738 *
96365     +        REP_IMP_stroke ;
MPRINT(EM_DIAGRAM):   ELSE S_REP_IMP_stroke = -11.3205669287077 + 3.47855217496738 * 
REP_IMP_stroke ;
96366     +   IF MISSING( REP_city_mpg ) THEN S_REP_city_mpg  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( REP_city_mpg ) THEN S_REP_city_mpg = . ;
96367     +   ELSE S_REP_city_mpg  =    -4.23279255832632 +     0.16535248553422 *
96368     +        REP_city_mpg ;
MPRINT(EM_DIAGRAM):   ELSE S_REP_city_mpg = -4.23279255832632 + 0.16535248553422 * 
REP_city_mpg ;
96369     +   IF MISSING( REP_curb_weight ) THEN S_REP_curb_weight  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( REP_curb_weight ) THEN S_REP_curb_weight = . ;
96370     +   ELSE S_REP_curb_weight  =    -5.35597047742979 +     0.00212869810672 *
96371     +        REP_curb_weight ;
MPRINT(EM_DIAGRAM):   ELSE S_REP_curb_weight = -5.35597047742979 + 0.00212869810672 * 
REP_curb_weight ;
96372     +   IF MISSING( REP_height ) THEN S_REP_height  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( REP_height ) THEN S_REP_height = . ;
96373     +   ELSE S_REP_height  =    -21.8926608140893 +     0.40589318675657 *
96374     +        REP_height ;
MPRINT(EM_DIAGRAM):   ELSE S_REP_height = -21.8926608140893 + 0.40589318675657 * REP_height ;
96375     +   IF MISSING( REP_highway_mpg ) THEN S_REP_highway_mpg  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( REP_highway_mpg ) THEN S_REP_highway_mpg = . ;
96376     +   ELSE S_REP_highway_mpg  =    -4.99166764925563 +     0.16020006928199 *
96377     +        REP_highway_mpg ;
MPRINT(EM_DIAGRAM):   ELSE S_REP_highway_mpg = -4.99166764925563 + 0.16020006928199 * 
REP_highway_mpg ;
96378     +   IF MISSING( REP_horsepower ) THEN S_REP_horsepower  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( REP_horsepower ) THEN S_REP_horsepower = . ;
96379     +   ELSE S_REP_horsepower  =    -2.74643097264309 +     0.02734944206973 *
96380     +        REP_horsepower ;
MPRINT(EM_DIAGRAM):   ELSE S_REP_horsepower = -2.74643097264309 + 0.02734944206973 * 
REP_horsepower ;
96381     +   IF MISSING( REP_length ) THEN S_REP_length  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( REP_length ) THEN S_REP_length = . ;
96382     +   ELSE S_REP_length  =    -15.2378498365576 +     0.08781104037663 *
96383     +        REP_length ;
MPRINT(EM_DIAGRAM):   ELSE S_REP_length = -15.2378498365576 + 0.08781104037663 * REP_length ;
96384     +   IF MISSING( REP_peak_rpm ) THEN S_REP_peak_rpm  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( REP_peak_rpm ) THEN S_REP_peak_rpm = . ;
96385     +   ELSE S_REP_peak_rpm  =    -10.6885709541859 +     0.00208333904184 *
96386     +        REP_peak_rpm ;
MPRINT(EM_DIAGRAM):   ELSE S_REP_peak_rpm = -10.6885709541859 + 0.00208333904184 * 
REP_peak_rpm ;
96387     +   IF MISSING( REP_wheel_base ) THEN S_REP_wheel_base  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( REP_wheel_base ) THEN S_REP_wheel_base = . ;
96388     +   ELSE S_REP_wheel_base  =    -17.8009087180129 +     0.18059887504832 *
96389     +        REP_wheel_base ;
MPRINT(EM_DIAGRAM):   ELSE S_REP_wheel_base = -17.8009087180129 + 0.18059887504832 * 
REP_wheel_base ;
96390     +   IF MISSING( REP_width ) THEN S_REP_width  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( REP_width ) THEN S_REP_width = . ;
96391     +   ELSE S_REP_width  =    -35.9167499004784 +     0.54673628301566 * REP_width
96392     +         ;
MPRINT(EM_DIAGRAM):   ELSE S_REP_width = -35.9167499004784 + 0.54673628301566 * REP_width ;
96393     +END;
MPRINT(EM_DIAGRAM):   END;
96394     +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
96395     +*** Writing the Node bin ;
MPRINT(EM_DIAGRAM):   *** Writing the Node bin ;
96396     +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
96397     +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
96398     +*** Writing the Node nom ;
MPRINT(EM_DIAGRAM):   *** Writing the Node nom ;
96399     +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
96400     +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
96401     +*** Writing the Node H1 ;
MPRINT(EM_DIAGRAM):   *** Writing the Node H1 ;
96402     +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
96403     +IF _DM_BAD EQ 0 THEN DO;
MPRINT(EM_DIAGRAM):   IF _DM_BAD EQ 0 THEN DO;
96404     +   H11  =     0.14114604923302 * S_LOG_REP_IMP_price
96405     +          +     0.22107710355073 * S_LOG_REP_compression_ratio
96406     +          +     0.01063730358557 * S_LOG_REP_engine_size
96407     +          +    -0.10014119004384 * S_REP_IMP_bore  +    -0.03759863264035 *
96408     +        S_REP_IMP_stroke  +     0.07482450466947 * S_REP_city_mpg
96409     +          +    -0.28536465017016 * S_REP_curb_weight
96410     +          +     0.11632138704241 * S_REP_height  +     0.24359872537276 *
96411     +        S_REP_highway_mpg  +     0.11053757208758 * S_REP_horsepower
96412     +          +    -0.07045784528695 * S_REP_length  +    -0.21762346468185 *
96413     +        S_REP_peak_rpm  +    -0.17325144725852 * S_REP_wheel_base
96414     +          +     0.37161591541424 * S_REP_width ;
MPRINT(EM_DIAGRAM):   H11 = 0.14114604923302 * S_LOG_REP_IMP_price + 0.22107710355073 * 
S_LOG_REP_compression_ratio + 0.01063730358557 * S_LOG_REP_engine_size + -0.10014119004384 * 
S_REP_IMP_bore + -0.03759863264035 * S_REP_IMP_stroke + 0.07482450466947 * S_REP_city_mpg + 
-0.28536465017016 * S_REP_curb_weight + 0.11632138704241 * S_REP_height + 0.24359872537276 * 
S_REP_highway_mpg + 0.11053757208758 * S_REP_horsepower + -0.07045784528695 * S_REP_length + 
-0.21762346468185 * S_REP_peak_rpm + -0.17325144725852 * S_REP_wheel_base + 0.37161591541424 * 
S_REP_width ;
96415     +   H12  =     0.05896220480011 * S_LOG_REP_IMP_price
96416     +          +     0.18017576649352 * S_LOG_REP_compression_ratio
96417     +          +     0.13666603498983 * S_LOG_REP_engine_size
96418     +          +     0.08905307497507 * S_REP_IMP_bore  +     0.08450123024202 *
96419     +        S_REP_IMP_stroke  +      0.0953955201221 * S_REP_city_mpg
96420     +          +     0.06997312342759 * S_REP_curb_weight
96421     +          +     0.11454978606317 * S_REP_height  +    -0.19856329211228 *
96422     +        S_REP_highway_mpg  +     0.12027932441722 * S_REP_horsepower
96423     +          +      0.2974258001212 * S_REP_length  +     0.23235745908363 *
96424     +        S_REP_peak_rpm  +    -0.16918609268289 * S_REP_wheel_base
96425     +          +    -0.23250714188118 * S_REP_width ;
MPRINT(EM_DIAGRAM):   H12 = 0.05896220480011 * S_LOG_REP_IMP_price + 0.18017576649352 * 
S_LOG_REP_compression_ratio + 0.13666603498983 * S_LOG_REP_engine_size + 0.08905307497507 * 
S_REP_IMP_bore + 0.08450123024202 * S_REP_IMP_stroke + 0.0953955201221 * S_REP_city_mpg + 
0.06997312342759 * S_REP_curb_weight + 0.11454978606317 * S_REP_height + -0.19856329211228 * 
S_REP_highway_mpg + 0.12027932441722 * S_REP_horsepower + 0.2974258001212 * S_REP_length + 
0.23235745908363 * S_REP_peak_rpm + -0.16918609268289 * S_REP_wheel_base + -0.23250714188118 * 
S_REP_width ;
96426     +   H13  =    -0.12906110115101 * S_LOG_REP_IMP_price
96427     +          +    -0.02233821917203 * S_LOG_REP_compression_ratio
96428     +          +    -0.35091523886958 * S_LOG_REP_engine_size
96429     +          +    -0.41460804807699 * S_REP_IMP_bore  +    -0.24839281719309 *
96430     +        S_REP_IMP_stroke  +    -0.70537276068634 * S_REP_city_mpg
96431     +          +    -0.58021382402741 * S_REP_curb_weight
96432     +          +    -0.22826753012592 * S_REP_height  +      0.0169914306349 *
96433     +        S_REP_highway_mpg  +     0.10463377560074 * S_REP_horsepower
96434     +          +     0.35288922545253 * S_REP_length  +    -0.19481970154693 *
96435     +        S_REP_peak_rpm  +    -0.80556145797505 * S_REP_wheel_base
96436     +          +     0.51492976697395 * S_REP_width ;
MPRINT(EM_DIAGRAM):   H13 = -0.12906110115101 * S_LOG_REP_IMP_price + -0.02233821917203 * 
S_LOG_REP_compression_ratio + -0.35091523886958 * S_LOG_REP_engine_size + -0.41460804807699 * 
S_REP_IMP_bore + -0.24839281719309 * S_REP_IMP_stroke + -0.70537276068634 * S_REP_city_mpg + 
-0.58021382402741 * S_REP_curb_weight + -0.22826753012592 * S_REP_height + 0.0169914306349 * 
S_REP_highway_mpg + 0.10463377560074 * S_REP_horsepower + 0.35288922545253 * S_REP_length + 
-0.19481970154693 * S_REP_peak_rpm + -0.80556145797505 * S_REP_wheel_base + 0.51492976697395 * 
S_REP_width ;
96437     +   H11  = H11  +    -0.09761603527807 * M_bore0  +     0.32345868357271 *
96438     +        M_num_of_doors0  +     0.20084593155895 * M_price0
96439     +          +    -0.20994977796409 * M_stroke0 ;
MPRINT(EM_DIAGRAM):   H11 = H11 + -0.09761603527807 * M_bore0 + 0.32345868357271 * 
M_num_of_doors0 + 0.20084593155895 * M_price0 + -0.20994977796409 * M_stroke0 ;
96440     +   H12  = H12  +    -0.06788596638774 * M_bore0  +     0.34399071242393 *
96441     +        M_num_of_doors0  +      0.0463196246907 * M_price0
96442     +          +    -0.26485643855048 * M_stroke0 ;
MPRINT(EM_DIAGRAM):   H12 = H12 + -0.06788596638774 * M_bore0 + 0.34399071242393 * 
M_num_of_doors0 + 0.0463196246907 * M_price0 + -0.26485643855048 * M_stroke0 ;
96443     +   H13  = H13  +    -0.35051306126484 * M_bore0  +    -0.02794915457366 *
96444     +        M_num_of_doors0  +     0.31309425299639 * M_price0
96445     +          +    -0.47776887747706 * M_stroke0 ;
MPRINT(EM_DIAGRAM):   H13 = H13 + -0.35051306126484 * M_bore0 + -0.02794915457366 * 
M_num_of_doors0 + 0.31309425299639 * M_price0 + -0.47776887747706 * M_stroke0 ;
96446     +   H11  = H11  +     0.06100363905736 * IMP_num_of_doors2
96447     +          +     0.10122536313104 * REP_aspirationS  +    -0.17959848113703 *
96448     +        REP_body_styleC  +    -0.39712858179454 * REP_body_styleH
96449     +          +     0.04767092759288 * REP_body_styleS  +     0.10233875091231 *
96450     +        REP_drive_wheels4  +    -0.09500800631183 * REP_drive_wheelsF
96451     +          +     0.07460109227871 * REP_engine_locationF
96452     +          +     0.26300770846072 * REP_fuel_systemnon_spdi
96453     +          +     0.23650863802652 * REP_fuel_typeD  +    -0.32049705686665 *
96454     +        REP_num_of_cylinders__4  +     0.06805374196668 * engine_typedohc
96455     +          +     0.16364588242528 * engine_typel  +    -0.05913911607092 *
96456     +        engine_typeohc  +     0.18536496535236 * engine_typeohcf
96457     +          +    -0.09174498568145 * engine_typeohcv ;
MPRINT(EM_DIAGRAM):   H11 = H11 + 0.06100363905736 * IMP_num_of_doors2 + 0.10122536313104 * 
REP_aspirationS + -0.17959848113703 * REP_body_styleC + -0.39712858179454 * REP_body_styleH + 
0.04767092759288 * REP_body_styleS + 0.10233875091231 * REP_drive_wheels4 + -0.09500800631183 
* REP_drive_wheelsF + 0.07460109227871 * REP_engine_locationF + 0.26300770846072 * 
REP_fuel_systemnon_spdi + 0.23650863802652 * REP_fuel_typeD + -0.32049705686665 * 
REP_num_of_cylinders__4 + 0.06805374196668 * engine_typedohc + 0.16364588242528 * engine_typel 
+ -0.05913911607092 * engine_typeohc + 0.18536496535236 * engine_typeohcf + -0.09174498568145 
* engine_typeohcv ;
96458     +   H12  = H12  +    -0.04288679296194 * IMP_num_of_doors2
96459     +          +    -0.09067917550664 * REP_aspirationS  +    -0.00898495387833 *
96460     +        REP_body_styleC  +       0.159812944318 * REP_body_styleH
96461     +          +      0.0711141581938 * REP_body_styleS  +     0.10210979168732 *
96462     +        REP_drive_wheels4  +     -0.3538576414303 * REP_drive_wheelsF
96463     +          +    -0.16393166907394 * REP_engine_locationF
96464     +          +     0.11934989985506 * REP_fuel_systemnon_spdi
96465     +          +     0.02352084105235 * REP_fuel_typeD  +    -0.11143166546072 *
96466     +        REP_num_of_cylinders__4  +    -0.10331230763277 * engine_typedohc
96467     +          +     0.09972953235323 * engine_typel  +    -0.02037020133855 *
96468     +        engine_typeohc  +    -0.10116492050927 * engine_typeohcf
96469     +          +    -0.29902685656789 * engine_typeohcv ;
MPRINT(EM_DIAGRAM):   H12 = H12 + -0.04288679296194 * IMP_num_of_doors2 + -0.09067917550664 * 
REP_aspirationS + -0.00898495387833 * REP_body_styleC + 0.159812944318 * REP_body_styleH + 
0.0711141581938 * REP_body_styleS + 0.10210979168732 * REP_drive_wheels4 + -0.3538576414303 * 
REP_drive_wheelsF + -0.16393166907394 * REP_engine_locationF + 0.11934989985506 * 
REP_fuel_systemnon_spdi + 0.02352084105235 * REP_fuel_typeD + -0.11143166546072 * 
REP_num_of_cylinders__4 + -0.10331230763277 * engine_typedohc + 0.09972953235323 * 
engine_typel + -0.02037020133855 * engine_typeohc + -0.10116492050927 * engine_typeohcf + 
-0.29902685656789 * engine_typeohcv ;
96470     +   H13  = H13  +     0.57885984374832 * IMP_num_of_doors2
96471     +          +    -0.06313012281847 * REP_aspirationS  +     0.18273714441841 *
96472     +        REP_body_styleC  +    -0.00453951283747 * REP_body_styleH
96473     +          +      0.0466508929301 * REP_body_styleS  +    -0.04931547332574 *
96474     +        REP_drive_wheels4  +     0.07528309204941 * REP_drive_wheelsF
96475     +          +    -0.01679674641439 * REP_engine_locationF
96476     +          +      -0.148583011616 * REP_fuel_systemnon_spdi
96477     +          +     0.01206718731045 * REP_fuel_typeD  +     0.01468742261582 *
96478     +        REP_num_of_cylinders__4  +     0.07027057170791 * engine_typedohc
96479     +          +     0.20558093284809 * engine_typel  +     0.55435637562404 *
96480     +        engine_typeohc  +    -0.38590829668888 * engine_typeohcf
96481     +          +      0.0022264257698 * engine_typeohcv ;
MPRINT(EM_DIAGRAM):   H13 = H13 + 0.57885984374832 * IMP_num_of_doors2 + -0.06313012281847 * 
REP_aspirationS + 0.18273714441841 * REP_body_styleC + -0.00453951283747 * REP_body_styleH + 
0.0466508929301 * REP_body_styleS + -0.04931547332574 * REP_drive_wheels4 + 0.07528309204941 * 
REP_drive_wheelsF + -0.01679674641439 * REP_engine_locationF + -0.148583011616 * 
REP_fuel_systemnon_spdi + 0.01206718731045 * REP_fuel_typeD + 0.01468742261582 * 
REP_num_of_cylinders__4 + 0.07027057170791 * engine_typedohc + 0.20558093284809 * engine_typel 
+ 0.55435637562404 * engine_typeohc + -0.38590829668888 * engine_typeohcf + 0.0022264257698 * 
engine_typeohcv ;
96482     +   H11  =    -0.54817324462785 + H11 ;
MPRINT(EM_DIAGRAM):   H11 = -0.54817324462785 + H11 ;
96483     +   H12  =    -0.46773956921898 + H12 ;
MPRINT(EM_DIAGRAM):   H12 = -0.46773956921898 + H12 ;
96484     +   H13  =     0.60022135338159 + H13 ;
MPRINT(EM_DIAGRAM):   H13 = 0.60022135338159 + H13 ;
96485     +   H11  = TANH(H11 );
MPRINT(EM_DIAGRAM):   H11 = TANH(H11 );
96486     +   H12  = TANH(H12 );
MPRINT(EM_DIAGRAM):   H12 = TANH(H12 );
96487     +   H13  = TANH(H13 );
MPRINT(EM_DIAGRAM):   H13 = TANH(H13 );
96488     +END;
MPRINT(EM_DIAGRAM):   END;
96489     +ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
96490     +   H11  = .;
MPRINT(EM_DIAGRAM):   H11 = .;
96491     +   H12  = .;
MPRINT(EM_DIAGRAM):   H12 = .;
96492     +   H13  = .;
MPRINT(EM_DIAGRAM):   H13 = .;
96493     +END;
MPRINT(EM_DIAGRAM):   END;
96494     +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
96495     +*** Writing the Node Risk ;
MPRINT(EM_DIAGRAM):   *** Writing the Node Risk ;
96496     +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
96497     +
96498     +*** Generate dummy variables for Risk ;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for Risk ;
96499     +drop Risk1 Risk0 ;
MPRINT(EM_DIAGRAM):   drop Risk1 Risk0 ;
96500     +label F_Risk = 'From: Risk' ;
MPRINT(EM_DIAGRAM):   label F_Risk = 'From: Risk' ;
96501     +length F_Risk $ 12;
MPRINT(EM_DIAGRAM):   length F_Risk $ 12;
96502     +F_Risk = put( Risk , BEST12. );
MPRINT(EM_DIAGRAM):   F_Risk = put( Risk , BEST12. );
96503     +%DMNORMIP( F_Risk )
MPRINT(DMNORMIP):   call dmnorm(F_Risk,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
96504     +if missing( Risk ) then do;
MPRINT(EM_DIAGRAM):   if missing( Risk ) then do;
96505     +   Risk1 = .;
MPRINT(EM_DIAGRAM):   Risk1 = .;
96506     +   Risk0 = .;
MPRINT(EM_DIAGRAM):   Risk0 = .;
96507     +end;
MPRINT(EM_DIAGRAM):   end;
96508     +else do;
MPRINT(EM_DIAGRAM):   else do;
96509     +   if F_Risk = '1'  then do;
MPRINT(EM_DIAGRAM):   if F_Risk = '1' then do;
96510     +      Risk1 = 1;
MPRINT(EM_DIAGRAM):   Risk1 = 1;
96511     +      Risk0 = 0;
MPRINT(EM_DIAGRAM):   Risk0 = 0;
96512     +   end;
MPRINT(EM_DIAGRAM):   end;
96513     +   else if F_Risk = '0'  then do;
MPRINT(EM_DIAGRAM):   else if F_Risk = '0' then do;
96514     +      Risk1 = 0;
MPRINT(EM_DIAGRAM):   Risk1 = 0;
96515     +      Risk0 = 1;
MPRINT(EM_DIAGRAM):   Risk0 = 1;
96516     +   end;
MPRINT(EM_DIAGRAM):   end;
96517     +   else do;
MPRINT(EM_DIAGRAM):   else do;
96518     +      Risk1 = .;
MPRINT(EM_DIAGRAM):   Risk1 = .;
96519     +      Risk0 = .;
MPRINT(EM_DIAGRAM):   Risk0 = .;
96520     +   end;
MPRINT(EM_DIAGRAM):   end;
96521     +end;
MPRINT(EM_DIAGRAM):   end;
96522     +IF _DM_BAD EQ 0 THEN DO;
MPRINT(EM_DIAGRAM):   IF _DM_BAD EQ 0 THEN DO;
96523     +   P_Risk1  =     1.21348641298657 * H11  +     0.09729650872853 * H12
96524     +          +     5.64979482539338 * H13 ;
MPRINT(EM_DIAGRAM):   P_Risk1 = 1.21348641298657 * H11 + 0.09729650872853 * H12 + 
5.64979482539338 * H13 ;
96525     +   P_Risk1  =    -0.00460119400654 + P_Risk1 ;
MPRINT(EM_DIAGRAM):   P_Risk1 = -0.00460119400654 + P_Risk1 ;
96526     +   P_Risk0  = 0;
MPRINT(EM_DIAGRAM):   P_Risk0 = 0;
96527     +   _MAX_ = MAX (P_Risk1 , P_Risk0 );
MPRINT(EM_DIAGRAM):   _MAX_ = MAX (P_Risk1 , P_Risk0 );
96528     +   _SUM_ = 0.;
MPRINT(EM_DIAGRAM):   _SUM_ = 0.;
96529     +   P_Risk1  = EXP(P_Risk1  - _MAX_);
MPRINT(EM_DIAGRAM):   P_Risk1 = EXP(P_Risk1 - _MAX_);
96530     +   _SUM_ = _SUM_ + P_Risk1 ;
MPRINT(EM_DIAGRAM):   _SUM_ = _SUM_ + P_Risk1 ;
96531     +   P_Risk0  = EXP(P_Risk0  - _MAX_);
MPRINT(EM_DIAGRAM):   P_Risk0 = EXP(P_Risk0 - _MAX_);
96532     +   _SUM_ = _SUM_ + P_Risk0 ;
MPRINT(EM_DIAGRAM):   _SUM_ = _SUM_ + P_Risk0 ;
96533     +   P_Risk1  = P_Risk1  / _SUM_;
MPRINT(EM_DIAGRAM):   P_Risk1 = P_Risk1 / _SUM_;
96534     +   P_Risk0  = P_Risk0  / _SUM_;
MPRINT(EM_DIAGRAM):   P_Risk0 = P_Risk0 / _SUM_;
96535     +END;
MPRINT(EM_DIAGRAM):   END;
96536     +ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
96537     +   P_Risk1  = .;
MPRINT(EM_DIAGRAM):   P_Risk1 = .;
96538     +   P_Risk0  = .;
MPRINT(EM_DIAGRAM):   P_Risk0 = .;
96539     +END;
MPRINT(EM_DIAGRAM):   END;
96540     +IF _DM_BAD EQ 1 THEN DO;
MPRINT(EM_DIAGRAM):   IF _DM_BAD EQ 1 THEN DO;
96541     +   P_Risk1  =                 0.54;
MPRINT(EM_DIAGRAM):   P_Risk1 = 0.54;
96542     +   P_Risk0  =                 0.46;
MPRINT(EM_DIAGRAM):   P_Risk0 = 0.46;
96543     +END;
MPRINT(EM_DIAGRAM):   END;
96544     +*** *****************************;
MPRINT(EM_DIAGRAM):   *** *****************************;
96545     +*** Writing the Residuals  of the Node Risk ;
MPRINT(EM_DIAGRAM):   *** Writing the Residuals of the Node Risk ;
96546     +*** ******************************;
MPRINT(EM_DIAGRAM):   *** ******************************;
96547     +IF MISSING( Risk1 ) THEN R_Risk1  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( Risk1 ) THEN R_Risk1 = . ;
96548     +ELSE R_Risk1  = Risk1  - P_Risk1 ;
MPRINT(EM_DIAGRAM):   ELSE R_Risk1 = Risk1 - P_Risk1 ;
96549     +IF MISSING( Risk0 ) THEN R_Risk0  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( Risk0 ) THEN R_Risk0 = . ;
96550     +ELSE R_Risk0  = Risk0  - P_Risk0 ;
MPRINT(EM_DIAGRAM):   ELSE R_Risk0 = Risk0 - P_Risk0 ;
96551     +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
96552     +*** Writing the I_Risk  AND U_Risk ;
MPRINT(EM_DIAGRAM):   *** Writing the I_Risk AND U_Risk ;
96553     +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
96554     +_MAXP_ = P_Risk1 ;
MPRINT(EM_DIAGRAM):   _MAXP_ = P_Risk1 ;
96555     +I_Risk  = "1           " ;
MPRINT(EM_DIAGRAM):   I_Risk = "1           " ;
96556     +U_Risk  =                    1;
MPRINT(EM_DIAGRAM):   U_Risk = 1;
96557     +IF( _MAXP_ LT P_Risk0  ) THEN DO;
MPRINT(EM_DIAGRAM):   IF( _MAXP_ LT P_Risk0 ) THEN DO;
96558     +   _MAXP_ = P_Risk0 ;
MPRINT(EM_DIAGRAM):   _MAXP_ = P_Risk0 ;
96559     +   I_Risk  = "0           " ;
MPRINT(EM_DIAGRAM):   I_Risk = "0           " ;
96560     +   U_Risk  =                    0;
MPRINT(EM_DIAGRAM):   U_Risk = 0;
96561     +END;
MPRINT(EM_DIAGRAM):   END;
96562     +********************************;
MPRINT(EM_DIAGRAM):   ********************************;
96563     +*** End Scoring Code for Neural;
MPRINT(EM_DIAGRAM):   *** End Scoring Code for Neural;
96564     +********************************;
MPRINT(EM_DIAGRAM):   ********************************;
96565     +drop
96566     +H11
96567     +H12
96568     +H13
96569     +;
MPRINT(EM_DIAGRAM):   drop H11 H12 H13 ;
96570     +drop S_:;
MPRINT(EM_DIAGRAM):   drop S_:;
NOTE: %INCLUDE (level 1) ending.
MPRINT(EM_DIAGRAM):   run;
96571      run;

NOTE: DATA STEP view saved on file EMWS1.NEURAL2_VALIDATE.
NOTE: A stored DATA STEP view cannot run under a different operating system.
NOTE: View EMWS1.REPL2_VALIDATE.VIEW used (Total process time):
      real time           0.24 seconds
      cpu time            0.21 seconds
      
NOTE: DATA statement used (Total process time):
      real time           0.25 seconds
      cpu time            0.21 seconds
      

MPRINT(EM_DIAGRAM):   quit;
96572      quit;
96573      filename emflow;
MPRINT(EM_DIAGRAM):   filename emflow;
NOTE: Fileref EMFLOW has been deassigned.
96574      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
96575      * Neural2: Computing metadata for TRAIN data;
MPRINT(EM_DIAGRAM):   * Neural2: Computing metadata for TRAIN data;
96576      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;

NOTE: View EMWS1.NEURAL2_TRAIN.VIEW used (Total process time):
      real time           0.22 seconds
      cpu time            0.23 seconds
      
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * &nodeid: Computing Metadata for TRAIN data;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   filename _delta "H:\746\Decision Tree 
test\Workspaces\EMWS1\Neural2\CDELTA_TRAIN.sas";
MPRINT(EMADVISECOLUMNS):   proc display c=sashelp.emmeta.advisecolumns.scl;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    options validvarname=any;
MPRINT(EMADVISECOLUMNS):   proc contents data=EMWS1.Neural2_TRAIN out=_tempAdvisor noprint;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):   options validvarname=V7;
MPRINT(EMADVISECOLUMNS):    data _null_;
MPRINT(EMADVISECOLUMNS):   dsid = open('EMWS1.Neural2_TRAIN');
MPRINT(EMADVISECOLUMNS):   call symput('_dsidTable', strip(put(dsid, best.)));
MPRINT(EMADVISECOLUMNS):   if dsid then do;
MPRINT(EMADVISECOLUMNS):   call symput('_engineTable', attrc(dsid, 'ENGINE'));
MPRINT(EMADVISECOLUMNS):   dsid = close(dsid);
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    proc contents data=EMWS1.Neural2_TRAIN out=WORK.M0ZLWEVD noprint;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M0ZLWEVD;
MPRINT(EMADVISECOLUMNS):   length NAME $ 64 TYPE $ 1 LABEL $ 200 FORMAT $ 36 INFORMAT $36 
INDEX $ 1 INDEXTYPE $ 9;
MPRINT(EMADVISECOLUMNS):   label NAME =;
MPRINT(EMADVISECOLUMNS):   set WORK.M0ZLWEVD(keep=name type length label format formatl 
formatd informat informl informd idxusage rename=(type=itype));
MPRINT(EMADVISECOLUMNS):   if itype = 1 then type = 'N';
MPRINT(EMADVISECOLUMNS):   else type = 'C';
MPRINT(EMADVISECOLUMNS):   if formatl > 0 then do;
MPRINT(EMADVISECOLUMNS):   if format ne ' ' then format = strip(format)!!strip(put(formatl, 
best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EMADVISECOLUMNS):   else format = strip(put(formatl, best12.))!!'.'!!strip(put(formatd, 
best12.));
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if format ne '' then format = strip(format)!!'.';
MPRINT(EMADVISECOLUMNS):   if informl > 0 then do;
MPRINT(EMADVISECOLUMNS):   if informat ne ' ' then informat = 
strip(informat)!!strip(put(informl, best12.))!!'.'!!strip(put(informd, best12.));
MPRINT(EMADVISECOLUMNS):   else informat = strip(put(informl, 
best12.))!!'.'!!strip(put(informd, best12.));
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if informat ne '' then informat = strip(informat)!!'.';
MPRINT(EMADVISECOLUMNS):   if idxusage = 'NONE' then index ="N";
MPRINT(EMADVISECOLUMNS):   else index = "Y";
MPRINT(EMADVISECOLUMNS):   indextype = idxusage;
MPRINT(EMADVISECOLUMNS):   drop idxusage itype formatl formatd informl informd;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M0ZLWEVD;
MPRINT(EMADVISECOLUMNS):   length UNAME $64;
MPRINT(EMADVISECOLUMNS):   set WORK.M0ZLWEVD;
MPRINT(EMADVISECOLUMNS):   UNAME = upcase(NAME);
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    proc sort data=WORK.M084PRLE NOTHREADS;
MPRINT(EMADVISECOLUMNS):   by UNAME;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M084PRLE;
MPRINT(EMADVISECOLUMNS):   drop UNAME;
MPRINT(EMADVISECOLUMNS):   set WORK.M084PRLE;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M3UIT47C(keep=NAME ATTR);
MPRINT(EMADVISECOLUMNS):   length ATTR $ 20;
MPRINT(EMADVISECOLUMNS):   set WORK.M084PRLE;
MPRINT(EMADVISECOLUMNS):   if level ne "INTERVAL" then do;
MPRINT(EMADVISECOLUMNS):   if order = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'ORDER';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if format ne ' ' and formattype = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'FORMATTYPE';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if role = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'ROLE';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if level = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'LEVEL';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if type = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'TYPE';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if index = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'INDEX';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if report = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'REPORT';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):   proc sort NOTHREADS;
MPRINT(EMADVISECOLUMNS):   by attr;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M084PRLE;
MPRINT(EMADVISECOLUMNS):   length NAME $64 ROLE $ 32 LEVEL $ 10 ORDER $ 8 CREATOR $32 
FORMATTYPE $ 10 FAMILY $ 10 LOWERLIMIT 8 UPPERLIMIT 8 REPORT $1 DISTRIBUTION $ 20 COMMENT $64;
MPRINT(EMADVISECOLUMNS):   length levelAssigned 8 roleAssigned 8 PRICE 8;
MPRINT(EMADVISECOLUMNS):   set WORK.M084PRLE;
MPRINT(EMADVISECOLUMNS):   if formattype = ' ' then do;
MPRINT(EMADVISECOLUMNS):   if format ne ' ' then do;
MPRINT(EMADVISECOLUMNS):   if type = 'N' then do;
MPRINT(EMADVISECOLUMNS):   pos = indexc(format,'.1234567890');
MPRINT(EMADVISECOLUMNS):   if pos > 1 then tempfmt = substr(format,1, pos-1);
MPRINT(EMADVISECOLUMNS):   else tempfmt = ' ';
MPRINT(EMADVISECOLUMNS):   flen = length(tempfmt);
MPRINT(EMADVISECOLUMNS):   select;
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("DATE" "DAY" "DDMMYY" "DOWNAME" "JULDAY" "JULIAN" 
"MMDDYY" "MMDDYYD" "MMDDYYC" "MMDDYYN" "MMDDYYP" "MMDDYYS" "MONNAME" "MONTH" "MONYY" "NENGO" 
"QTR" "QTRR" "WEEKDATE" "WEEKDATX" "WEEKDAY" "WORDDATE" "WORDDATX" "YEAR" "YYMMDD" "YYMON" 
"YYMMDDC" "YYMMDDD" "YYMMDDN" "YYMMDDP" "YYMMDDS" "EURDFDE" "NJDATE" "NLDATE" "EURDFDD" 
"EURDFDWN" "EURDFMN" "EURDFMY" "EURDFWK" "EURDFWKX" "EURDFWDX" "EURDFDN" "EURDFDE" )) 
formattype = 'DATE';
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("DATETIME" "EURDFDT" "TOD" )) formattype = 
"DATETIME";
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("HHMM" "HOUR" "MMSS" "TIME" "TIMEAMPM" )) 
formattype = "TIME";
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("COMMA" "COMMAX" "DOLLAR" "DOLLARX" "E" "FRACT" 
"NEGPAREN" "PERCENT")) formattype="QUANTITY";
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("BINARY" "HEX" "IB" "OCTAL" "PD" "PIB" "PK" "RB" 
"SSN" "Z" "ZD")) formattype = "CODING";
MPRINT(EMADVISECOLUMNS):   otherwise do;
MPRINT(EMADVISECOLUMNS):   formattype = "USER";
MPRINT(EMADVISECOLUMNS):   if substr(tempfmt, 1, 6)='NLDATE' then formattype = "DATE";
MPRINT(EMADVISECOLUMNS):   else if substr(tempfmt, 1, 6)='NLDATM' then formattype = "DATETIME";
MPRINT(EMADVISECOLUMNS):   else if substr(tempfmt, 1, 4)='NLTIM' then formattype = "TIME";
MPRINT(EMADVISECOLUMNS):   else if flen >= 4 then do;
MPRINT(EMADVISECOLUMNS):   str = substr(tempfmt,1,4);
MPRINT(EMADVISECOLUMNS):   if str in ("MMYY" "YYMM" "YYQR") then formattype ="DATE";
MPRINT(EMADVISECOLUMNS):   else if str = "S370" then formattype = "CODING";
MPRINT(EMADVISECOLUMNS):   else if str = "BEST" then formattype = "NUM";
MPRINT(EMADVISECOLUMNS):   drop str;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if flen >=3 and substr(tempfmt,1,3) = "YYQ" then formatType = 
"DATE";
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   drop flen tempfmt pos;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else do;
MPRINT(EMADVISECOLUMNS):   formatType = "CATEGORY";
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if formatType = "NUM" then do;
MPRINT(EMADVISECOLUMNS):   if index = "Y" then formatType = "DISCRETE";
MPRINT(EMADVISECOLUMNS):   else formatType = "QUANTITY";
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if level = ' ' then do;
MPRINT(EMADVISECOLUMNS):   if formatType in ("CATEGORY", "CODING", "ID") or type = "C" then 
level = "NOMINAL";
MPRINT(EMADVISECOLUMNS):   else level = "INTERVAL";
MPRINT(EMADVISECOLUMNS):   levelAssigned = 1;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else level = upcase(level);
MPRINT(EMADVISECOLUMNS):   if role = ' ' then do;
MPRINT(EMADVISECOLUMNS):   length name_prefix $8 _uname $64;
MPRINT(EMADVISECOLUMNS):   drop name_prefix _uname _freqflag;
MPRINT(EMADVISECOLUMNS):   retain _freqflag;
MPRINT(EMADVISECOLUMNS):   if LENGTH> 80 then ROLE = 'TEXT';
MPRINT(EMADVISECOLUMNS):   _uname = upcase(NAME);
MPRINT(EMADVISECOLUMNS):   select(_uname);
MPRINT(EMADVISECOLUMNS):   when('_PARTIND_') do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'ID';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   when('_WARN_') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_SEGMENT') do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'SEGMENT';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   when('_NODE_') do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'SEGMENT';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   when('EM_CLASSTARGET') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_VALUETARGET') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_PREDICTION') ROLE = 'PREDICT';
MPRINT(EMADVISECOLUMNS):   when('EM_PROBABILITY') ROLE = 'PREDICT';
MPRINT(EMADVISECOLUMNS):   when('EM_EVENTPROBABILITY') ROLE = 'PREDICT';
MPRINT(EMADVISECOLUMNS):   when('EM_CLASSIFICATION') ROLE = 'CLASSIFICATION';
MPRINT(EMADVISECOLUMNS):   when('EM_DECISION') ROLE = 'DECISION';
MPRINT(EMADVISECOLUMNS):   when('EM_PROFIT') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_LOSS') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_ROI') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('URI') ROLE = 'URL';
MPRINT(EMADVISECOLUMNS):   when('FILTERED') ROLE = 'TEXTLOC';
MPRINT(EMADVISECOLUMNS):   otherwise do;
MPRINT(EMADVISECOLUMNS):   if upcase(NAME) =: 'ZIP' then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'REJECTED';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   COMMENT = 'Rejected by: Exceed the maximum class level of %s';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if upcase(NAME) in('FREQ', 'FREQUENCY') then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'FREQ';
MPRINT(EMADVISECOLUMNS):   if TYPE = 'C' then ROLE = 'INPUT';
MPRINT(EMADVISECOLUMNS):   else if _freqflag =1 then ROLE='REJECTED';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else do;
MPRINT(EMADVISECOLUMNS):   name_prefix = scan(_uname, 1, '_');
MPRINT(EMADVISECOLUMNS):   if scan(_uname, 2, '_') = '' then name_prefix='';
MPRINT(EMADVISECOLUMNS):   if name_prefix in('F', 'I', 'U') then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'CLASSIFICATION';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if name_prefix in('P', 'V') then ROLE = 'PREDICT';
MPRINT(EMADVISECOLUMNS):   else if name_prefix in('R', 'RS', 'RT', 'RD', 'RDS', 'RDT', 'RA', 
'RAS', 'RAT') then ROLE = 'RESIDUAL';
MPRINT(EMADVISECOLUMNS):   else if name_prefix ='D' then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'DECISION';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if name_prefix ='B' then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'SEGMENT';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if name_prefix in('EP', 'BP', 'CP', 'EL', 'CL', 'BL', 'W', 
'ROI', 'IC') then ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   else do;
MPRINT(EMADVISECOLUMNS):   array _ROLE_ (19) $32 _TEMPORARY_ 
('ASSESS','CLASSIFICATION','CENSOR', 'COST', 'CROSSID', 'DECISION', 'ID','INPUT', 'LABEL', 
'MISSING','PREDICT','REFERRER','REJECTED', 'RESIDUAL','SEGMENT', 'SEQUENCE','TARGET', 'TEXT', 
'TIMEID');
MPRINT(EMADVISECOLUMNS):   drop _found_ i;
MPRINT(EMADVISECOLUMNS):   _found_=0;
MPRINT(EMADVISECOLUMNS):   do i=1 to 19 until(_found_=1);
MPRINT(EMADVISECOLUMNS):   if index(_uname, trim(_ROLE_{i}))=1 then do;
MPRINT(EMADVISECOLUMNS):   ROLE=_ROLE_{i};
MPRINT(EMADVISECOLUMNS):   if ROLE = 'ID' then LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   else if ROLE = 'SEGMENT' then LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   else if ROLE = 'TIMEID' and TYPE='N' then LEVEL = 'INTERVAL';
MPRINT(EMADVISECOLUMNS):   _found_=1;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if length(_uname)>2 then do;
MPRINT(EMADVISECOLUMNS):   if substr(reverse(trim(_uname)), 1, 3) = 'DI_' then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'ID';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if ROLE='FREQ' then _freqflag=1;
MPRINT(EMADVISECOLUMNS):   else if ROLE = 'CLASSIFICATION' then LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   if symexist('RATEMKG_ROLE') then do;
MPRINT(EMADVISECOLUMNS):   if upcase(symget('RATEMKG_ROLE')) in('Y', 'YES') then do;
MPRINT(EMADVISECOLUMNS):   if _uname =: 'POLICY' then ROLE = 'POLICYID';
MPRINT(EMADVISECOLUMNS):   else if _uname in ('PARTITION', '_PARTIND_') then ROLE = 
'PARTITION';
MPRINT(EMADVISECOLUMNS):   else if type = 'N' then do;
MPRINT(EMADVISECOLUMNS):   if _uname = 'EXPOSURE' then ROLE = 'EXPOSURE';
MPRINT(EMADVISECOLUMNS):   else if _uname = 'YEAR' then ROLE = 'YEAR';
MPRINT(EMADVISECOLUMNS):   else if _uname = 'WEIGHT' then ROLE = 'WEIGHT';
MPRINT(EMADVISECOLUMNS):   else if _uname = 'OFFSET' then ROLE = 'OFFSET';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if role = ' ' then do;
MPRINT(EMADVISECOLUMNS):   if formattype in('DATE', 'DATETIME', 'TIME') then role = 'TIMEID';
MPRINT(EMADVISECOLUMNS):   else role = 'INPUT';
MPRINT(EMADVISECOLUMNS):   roleAssigned = 1;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else role = upcase(role);
MPRINT(EMADVISECOLUMNS):   if REPORT = '' then REPORT = 'N';
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M084PRLE;
MPRINT(EMADVISECOLUMNS):   set WORK.M084PRLE;
MPRINT(EMADVISECOLUMNS):   label NAME = "Variable Name" TYPE = "Type" ROLE = "Role" LEVEL= 
"Measurement Level" ORDER= "Order" CREATOR= "Creator" FORMATTYPE= "Format Type" FAMILY= 
"Family" DISTRIBUTION= "Distribution" PRICE= "Price" LOWERLIMIT= "Lower limit" UPPERLIMIT= 
"Upper Limit" REPORT= "Report" COMMENT= "Comment" INDEX= "Index" INDEXTYPE= "IndexType" LABEL= 
"Label" LENGTH= "Length";
MPRINT(EMADVISECOLUMNS):   drop levelAssigned roleAssigned;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):   
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   proc sort data=WORK.COLUMNMETA;
MPRINT(EM_DIAGRAM):   by NAME;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * &nodeid: Merge incoming metadata;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   proc contents data=EMWS1.Repl2_TRAIN noprint out=_temp2(keep=NAME);
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=_temp2;
MPRINT(EM_DIAGRAM):   by NAME;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=EMWS1.Repl2_CMeta_TRAIN out=_temp;
MPRINT(EM_DIAGRAM):   by NAME;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data EMWS1.Neural2_CMeta_TRAIN;
MPRINT(EM_DIAGRAM):   merge WORK.COLUMNMETA(in=_a) _temp2(in=_b) _temp(drop=FORMAT INFORMAT 
LENGTH INDEX INDEXTYPE in=_c) end=_eof_;
MPRINT(EM_DIAGRAM):   by NAME;
MPRINT(EM_DIAGRAM):   if (^_a and _b) or (^_c and _a and _b) then delete;
MPRINT(EM_DIAGRAM):   if ^_b then CREATOR = "Neural2";
MPRINT(EM_DIAGRAM):   length model $200;
MPRINT(EM_DIAGRAM):   label MODEL = "Model Node";
MPRINT(EM_DIAGRAM):   select(upcase(name));
MPRINT(EM_DIAGRAM):   when("P_RISK1") creator = "Neural2";
MPRINT(EM_DIAGRAM):   when("R_RISK1") creator = "Neural2";
MPRINT(EM_DIAGRAM):   when("P_RISK0") creator = "Neural2";
MPRINT(EM_DIAGRAM):   when("R_RISK0") creator = "Neural2";
MPRINT(EM_DIAGRAM):   when("F_RISK") creator = "Neural2";
MPRINT(EM_DIAGRAM):   when("I_RISK") creator = "Neural2";
MPRINT(EM_DIAGRAM):   when("U_RISK") creator = "Neural2";
MPRINT(EM_DIAGRAM):   when("_WARN_") creator = "Neural2";
MPRINT(EM_DIAGRAM):   when("RISK") model = "Neural2";
MPRINT(EM_DIAGRAM):   when('');
MPRINT(EM_DIAGRAM):   otherwise;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Neural2: Apply Delta Code;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   filename _delta;
96915      data WORK.MODELTEMP_INFO;
MPRINT(EM_DIAGRAM):    data WORK.MODELTEMP_INFO;
96916      set EMWS1.Neural2_EMINFO;
MPRINT(EM_DIAGRAM):   set EMWS1.Neural2_EMINFO;
96917      where DATA='Neural2' and KEY ^in('DECDATA', 'DECMETA', 'IMPORTANCE', 'MODEL');
MPRINT(EM_DIAGRAM):   where DATA='Neural2' and KEY ^in('DECDATA', 'DECMETA', 'IMPORTANCE', 
'MODEL');
96918      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 0 observations read from the data set EMWS1.NEURAL2_EMINFO.
      WHERE (DATA='Neural2') and KEY not in ('DECDATA', 'DECMETA', 'IMPORTANCE', 'MODEL');
NOTE: The data set WORK.MODELTEMP_INFO has 0 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.02 seconds
      cpu time            0.00 seconds
      

96919      data EMWS1.Neural2_EMINFO;
MPRINT(EM_DIAGRAM):    data EMWS1.Neural2_EMINFO;
96920      length TARGET KEY $32 DATA $43;
MPRINT(EM_DIAGRAM):   length TARGET KEY $32 DATA $43;
96921      input TARGET KEY DATA $;
MPRINT(EM_DIAGRAM):   input TARGET KEY DATA $;
96922      cards;
MPRINT(EM_DIAGRAM):   cards;

NOTE: The data set EMWS1.NEURAL2_EMINFO has 3 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.05 seconds
      cpu time            0.00 seconds
      

MPRINT(EM_DIAGRAM):   run;
96926      run;
96927      data EMWS1.Neural2_EMINFO;
MPRINT(EM_DIAGRAM):   data EMWS1.Neural2_EMINFO;
96928      set EMWS1.Neural2_EMINFO WORK.MODELTEMP_INFO;
MPRINT(EM_DIAGRAM):   set EMWS1.Neural2_EMINFO WORK.MODELTEMP_INFO;
96929      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 3 observations read from the data set EMWS1.NEURAL2_EMINFO.
NOTE: There were 0 observations read from the data set WORK.MODELTEMP_INFO.
NOTE: The data set EMWS1.NEURAL2_EMINFO has 3 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.07 seconds
      cpu time            0.03 seconds
      

96930      proc sort data = EMWS1.Neural2_EMINFO NOTHREADS;
MPRINT(EM_DIAGRAM):    proc sort data = EMWS1.Neural2_EMINFO NOTHREADS;
96931      by TARGET KEY;
MPRINT(EM_DIAGRAM):   by TARGET KEY;
96932      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 3 observations read from the data set EMWS1.NEURAL2_EMINFO.
NOTE: The data set EMWS1.NEURAL2_EMINFO has 3 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.07 seconds
      cpu time            0.01 seconds
      

96933      proc sort data = EMWS1.FIMPORT_EMINFO OUT=WORK.SORTEDEMINFO NOTHREADS;
MPRINT(EM_DIAGRAM):    proc sort data = EMWS1.FIMPORT_EMINFO OUT=WORK.SORTEDEMINFO NOTHREADS;
96934      by TARGET KEY;
MPRINT(EM_DIAGRAM):   by TARGET KEY;
96935      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 1 observations read from the data set EMWS1.FIMPORT_EMINFO.
NOTE: The data set WORK.SORTEDEMINFO has 1 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.02 seconds
      cpu time            0.00 seconds
      

96936      proc sort data = EMWS1.Neural2_EMINFO OUT=WORK.TEMP_INFO NOTHREADS;
MPRINT(EM_DIAGRAM):   proc sort data = EMWS1.Neural2_EMINFO OUT=WORK.TEMP_INFO NOTHREADS;
96937      by TARGET KEY;
MPRINT(EM_DIAGRAM):   by TARGET KEY;
96938      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: Input data set is already sorted; it has been copied to the output data set.
NOTE: There were 3 observations read from the data set EMWS1.NEURAL2_EMINFO.
NOTE: The data set WORK.TEMP_INFO has 3 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

96939      data EMWS1.Neural2_EMINFO;
MPRINT(EM_DIAGRAM):   data EMWS1.Neural2_EMINFO;
96940      merge WORK.SORTEDEMINFO WORK.TEMP_INFO;
MPRINT(EM_DIAGRAM):   merge WORK.SORTEDEMINFO WORK.TEMP_INFO;
96941      by TARGET KEY;
MPRINT(EM_DIAGRAM):   by TARGET KEY;
96942      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 1 observations read from the data set WORK.SORTEDEMINFO.
NOTE: There were 3 observations read from the data set WORK.TEMP_INFO.
NOTE: The data set EMWS1.NEURAL2_EMINFO has 4 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.06 seconds
      cpu time            0.00 seconds
      

96943      proc datasets lib=work nolist;
MPRINT(EM_DIAGRAM):   proc datasets lib=work nolist;
96944      delete TEMP_INFO SORTEDEMINFO;
MPRINT(EM_DIAGRAM):   delete TEMP_INFO SORTEDEMINFO;
96945      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: Deleting WORK.TEMP_INFO (memtype=DATA).
NOTE: Deleting WORK.SORTEDEMINFO (memtype=DATA).
96946      quit;
MPRINT(EM_DIAGRAM):   quit;

NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
      

NOTE: View EMWS1.NEURAL2_TRAIN.VIEW used (Total process time):
      real time           0.21 seconds
      cpu time            0.21 seconds
      
NOTE: View EMWS1.NEURAL2_VALIDATE.VIEW used (Total process time):
      real time           0.22 seconds
      cpu time            0.21 seconds
      
MPRINT(EM_DIAGRAM):    proc printto;
MPRINT(EM_DIAGRAM):   run;
