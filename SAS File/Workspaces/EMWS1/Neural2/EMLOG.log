*------------------------------------------------------------*
User:                301152869
Date:                April 16, 2021
Time:                11:30:45 o'clock
Site:                70104631
Platform:            W32_8PRO
Maintenance Release: 9.04.01M2P072314
EM Version:          13.2
* 
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   call symput('NLDATE', strip(put(date(), NLDATE.)));
MPRINT(EM_DIAGRAM):   call symput('NLTIME', strip(put(datetime(), NLTIME.)));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   nldate= sasmsg("sashelp.dmine", "log_date_note", 'N', "April 16, 2021" );
MPRINT(EM_DIAGRAM):   nltime= sasmsg("sashelp.dmine", "log_time_note", 'N', "11:30:02 o'clock"
);
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "* Training Log";
MPRINT(EM_DIAGRAM):   put nldate;
MPRINT(EM_DIAGRAM):   put nltime;
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   run;
*------------------------------------------------------------*
* Training Log
Date:                April 16, 2021
Time:                11:30:02 o'clock
*------------------------------------------------------------*
MPRINT(EM_DIAGRAM):    filename O234GEE0 "H:\746\Decision Tree
test\Workspaces\EMWS1\Neural2\EMTRAIN.out" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):   proc printto print=O234GEE0 new;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _LOG "H:\746\Decision Tree
test\Workspaces\EMWS1\Neural2\EMLOG.log" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   call symput('NLDATE', strip(put(date(), NLDATE.)));
MPRINT(EM_DIAGRAM):   call symput('NLTIME', strip(put(datetime(), NLTIME.)));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   nldate= sasmsg("sashelp.dmine", "log_date_note", 'N', "April 16, 2021" );
MPRINT(EM_DIAGRAM):   nltime= sasmsg("sashelp.dmine", "log_time_note", 'N', "11:30:02 o'clock"
);
MPRINT(EM_DIAGRAM):   file _LOG;
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "User:                301152869";
MPRINT(EM_DIAGRAM):   put nldate;
MPRINT(EM_DIAGRAM):   put nltime;
MPRINT(EM_DIAGRAM):   put "Site:                70104631";
MPRINT(EM_DIAGRAM):   put "Platform:            W32_8PRO";
MPRINT(EM_DIAGRAM):   put "Maintenance Release: 9.04.01M2P072314";
MPRINT(EM_DIAGRAM):   put "EM Version:          13.2";
MPRINT(EM_DIAGRAM):   put "* ";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _LOGIN "H:\746\Decision Tree
test\Workspaces\EMWS1\Neural2\EMTRAIN.log" encoding="UTF-8" NOBOM;
MPRINT(EM_COPYFILE):   data _null_;
MPRINT(EM_COPYFILE):   length line $20000;
MPRINT(EM_COPYFILE):   file _LOG MOD lrecl=20000;
MPRINT(EM_COPYFILE):   fid=fopen("_LOGIN",'i',20000,'v');
MPRINT(EM_COPYFILE):   if fid > 0 then do;
MPRINT(EM_COPYFILE):   do while(^fread(fid));
MPRINT(EM_COPYFILE):   rlen = frlen(fid);
MPRINT(EM_COPYFILE):   rc= fget(fid,line,20000);
MPRINT(EM_COPYFILE):   start = length(line)-length(left(line))+1;
MPRINT(EM_COPYFILE):   line=strip(line);
MPRINT(EM_COPYFILE):   put @start line;
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   if fid > 0 then rc=fclose(fid);
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   run;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   filename _LOGIN;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   file _LOG mod;
MPRINT(EM_DIAGRAM):   put _page_;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   filename _LOGIN "H:\746\Decision Tree
test\Workspaces\EMWS1\Neural2\EMSCORE.log" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   file _LOG mod;
MPRINT(EM_DIAGRAM):   put _page_;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _LOGIN "H:\746\Decision Tree
test\Workspaces\EMWS1\Neural2\EMREPORT.log" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   filename _LOGIN;
MPRINT(EM_DIAGRAM):    filename _LOG;
MPRINT(EM_DIAGRAM):    filename _OUT "H:\746\Decision Tree
test\Workspaces\EMWS1\Neural2\EMOUTPUT.out" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   call symput('NLDATE', strip(put(date(), NLDATE.)));
MPRINT(EM_DIAGRAM):   call symput('NLTIME', strip(put(datetime(), NLTIME.)));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   nldate= sasmsg("sashelp.dmine", "log_date_note", 'N', "April 16, 2021" );
MPRINT(EM_DIAGRAM):   nltime= sasmsg("sashelp.dmine", "log_time_note", 'N', "11:30:02 o'clock"
);
MPRINT(EM_DIAGRAM):   file _OUT;
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "User:                301152869";
MPRINT(EM_DIAGRAM):   put nldate;
MPRINT(EM_DIAGRAM):   put nltime;
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "* Training Output";
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _OUTIN "H:\746\Decision Tree
test\Workspaces\EMWS1\Neural2\EMTRAIN.out" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):   ;
MPRINT(EM_COPYFILE):   data _null_;
MPRINT(EM_COPYFILE):   length line $20000;
MPRINT(EM_COPYFILE):   file _OUT MOD lrecl=20000;
MPRINT(EM_COPYFILE):   fid=fopen("_OUTIN",'i',20000,'v');
MPRINT(EM_COPYFILE):   if fid > 0 then do;
MPRINT(EM_COPYFILE):   do while(^fread(fid));
MPRINT(EM_COPYFILE):   rlen = frlen(fid);
MPRINT(EM_COPYFILE):   rc= fget(fid,line,20000);
MPRINT(EM_COPYFILE):   start = length(line)-length(left(line))+1;
MPRINT(EM_COPYFILE):   line=strip(line);
MPRINT(EM_COPYFILE):   put @start line;
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   if fid > 0 then rc=fclose(fid);
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   run;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   filename _OUTIN;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   file _OUT mod;
MPRINT(EM_DIAGRAM):   put _page_;
MPRINT(EM_DIAGRAM):   put // "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "* Score Output";
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _OUTIN "H:\746\Decision Tree
test\Workspaces\EMWS1\Neural2\EMSCORE.out" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   filename _OUTIN;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   file _OUT mod;
MPRINT(EM_DIAGRAM):   put _page_;
MPRINT(EM_DIAGRAM):   put // "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "* Report Output";
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _OUTIN "H:\746\Decision Tree
test\Workspaces\EMWS1\Neural2\EMREPORT.out" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   filename _OUTIN;
MPRINT(EM_DIAGRAM):    filename _OUT;
MPRINT(EM_DIAGRAM):    filename _emtool_ 'H:\746\Decision Tree
test\Workspaces\EMWS1\Neural2\EMRUNSTATUS.xml' encoding="UTF-8" NOBOM;
94626      proc freq data=EMWS1.Neural2_VariableSet noprint;
MPRINT(EM_DIAGRAM):    proc freq data=EMWS1.Neural2_VariableSet noprint;
94627      table ROLE*LEVEL/out=WORK.Neural2META;
MPRINT(EM_DIAGRAM):   table ROLE*LEVEL/out=WORK.Neural2META;
94628      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 52 observations read from the data set EMWS1.NEURAL2_VARIABLESET.
NOTE: The data set WORK.NEURAL2META has 6 observations and 4 variables.
NOTE: PROCEDURE FREQ used (Total process time):
      real time           0.07 seconds
      cpu time            0.01 seconds
 
 
94629      proc print data=WORK.Neural2META label noobs;
MPRINT(EM_DIAGRAM):   proc print data=WORK.Neural2META label noobs;
94630      var ROLE LEVEL COUNT;
MPRINT(EM_DIAGRAM):   var ROLE LEVEL COUNT;
94631      label ROLE = "%sysfunc(sasmsg(sashelp.dmine, meta_role_vlabel, NOQUOTE))" LEVEL =
94631    ! "%sysfunc(sasmsg(sashelp.dmine, meta_level_vlabel, NOQUOTE))" COUNT =
94631    ! "%sysfunc(sasmsg(sashelp.dmine, rpt_count_vlabel, NOQUOTE))";
MPRINT(EM_DIAGRAM):   label ROLE = "Role" LEVEL = "Measurement Level" COUNT = "Frequency
Count";
94632      title9 ' ';
MPRINT(EM_DIAGRAM):   title9 ' ';
94633      title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_varSummary_title  , NOQUOTE))";
MPRINT(EM_DIAGRAM):   title10 "Variable Summary";
MPRINT(EM_DIAGRAM):   run;
94634      run;
 
NOTE: There were 6 observations read from the data set WORK.NEURAL2META.
NOTE: The PROCEDURE PRINT printed page 70.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
94635      title10;
MPRINT(EM_DIAGRAM):   title10;
94636      %let EMNORLEN = %DMNORLEN;
MPRINT(EM_DIAGRAM):
EMWS1.Repl2_TRAIN EMWS1.Repl2_TRAIN
EMWS1.Repl2_TRAIN EMWS1.Repl2_TRAIN EMWS1 Repl2_TRAIN
EMWS1.Repl2_TRAIN EMWS1.Repl2_TRAIN
EMWS1.Repl2_TRAIN EMWS1.Repl2_TRAIN EMWS1 Repl2_TRAIN
MPRINT(EM_DIAGRAM):    proc dmdb data=EMWS1.Repl2_TRAIN
classout=WORK._DMDBCLASSTARGET(keep=NAME NRAW CRAW LEVEL FREQUENCY NMISSPERCENT);
MPRINT(EM_DIAGRAM):   class Risk(DESC) ;
MPRINT(EM_DIAGRAM):   run;
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL _INIT >>
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL setMetaData >>
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL next >>
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL setMetaData >>
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL next >>
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL _term >>
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   set WORK._DMDBCLASSTARGET;
MPRINT(EM_DIAGRAM):   where ^(NRAW eq . and CRAW eq '') and NAME="Risk";
MPRINT(EM_DIAGRAM):   if _N_=1 then call symput('_newevent', strip(LEVEL));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=WORK._DMDBCLASSTARGET out=_TEMPCLASS(keep=LEVEL FREQUENCY
NMISSPERCENT rename=(LEVEL=Risk));
MPRINT(EM_DIAGRAM):   by LEVEL;
MPRINT(EM_DIAGRAM):   where ^(NRAW eq . and CRAW eq '') and NAME="Risk";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data _TEMPCLASS;
MPRINT(EM_DIAGRAM):   set _TEMPCLASS;
MPRINT(EM_DIAGRAM):   NMISSPERCENT= NMISSPERCENT/100;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data _sortedDecData;
MPRINT(EM_DIAGRAM):   set EMWS1.Neural2_Risk_DD;
MPRINT(EM_DIAGRAM):   _levelorder_=_N_;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=_sortedDecdata;
MPRINT(EM_DIAGRAM):   by Risk;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   merge _TEMPCLASS(in=_a) _sortedDecdata(in=_b);
MPRINT(EM_DIAGRAM):   by Risk;
MPRINT(EM_DIAGRAM):   if (_a and ^_b) or (^_a and _b) then call symput('_emresetDec', '1');
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data EMWS1.Neural2_Risk_DD;
MPRINT(EM_DIAGRAM):   set EMWS1.Neural2_Risk_DD;
MPRINT(EM_DIAGRAM):   _levelorder_=_N_;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=EMWS1.Neural2_Risk_DD;
MPRINT(EM_DIAGRAM):   by Risk;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data EMWS1.Neural2_Risk_DD;
MPRINT(EM_DIAGRAM):   merge EMWS1.Neural2_Risk_DD _TEMPCLASS(rename=(NMISSPERCENT=TRAINPRIOR
FREQUENCY=COUNT));
MPRINT(EM_DIAGRAM):   by Risk;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=EMWS1.Neural2_Risk_DD
out=EMWS1.Neural2_Risk_DD(drop=_levelorder_);
MPRINT(EM_DIAGRAM):   by _levelorder_;
MPRINT(EM_DIAGRAM):   run;
94683      data WORK.Neural2_EVENT(KEEP=VARIABLE LABEL LEVEL EVENT NUMLEVELS ORDER);
MPRINT(EM_DIAGRAM):    data WORK.Neural2_EVENT(KEEP=VARIABLE LABEL LEVEL EVENT NUMLEVELS
ORDER);
94684      length ORDER $20;
MPRINT(EM_DIAGRAM):   length ORDER $20;
94685      label VARIABLE = "%sysfunc(sasmsg(sashelp.dmine, rpt_target_vlabel,  NOQUOTE))"
94685    ! EVENT = "%sysfunc(sasmsg(sashelp.dmine, assmt_event_vlabel, NOQUOTE))" NUMLEVELS =
94685    ! "%sysfunc(sasmsg(sashelp.dmine, rpt_numcat_vlabel, NOQUOTE))" LEVEL =
94686         "%sysfunc(sasmsg(sashelp.dmine, meta_level_vlabel, NOQUOTE))" ORDER =
94686    ! "%sysfunc(sasmsg(sashelp.dmine, meta_order_vlabel, NOQUOTE))" LABEL =
94686    ! "%sysfunc(sasmsg(sashelp.dmine, meta_label_vlabel, NOQUOTE))";
MPRINT(EM_DIAGRAM):   label VARIABLE = "Target" EVENT = "Event" NUMLEVELS = "Number of Levels"
LEVEL = "Measurement Level" ORDER = "Order" LABEL = "Label";
94687      set EMWS1.NEURAL2_RISK_DM( where=(_TYPE_="TARGET"));
MPRINT(EM_DIAGRAM):   set EMWS1.NEURAL2_RISK_DM( where=(_TYPE_="TARGET"));
94688      NumLevels=2;
MPRINT(EM_DIAGRAM):   NumLevels=2;
94689      select(upcase(ORDER));
MPRINT(EM_DIAGRAM):   select(upcase(ORDER));
94690      when('DESC') ORDER = 'Descending';
MPRINT(EM_DIAGRAM):   when('DESC') ORDER = 'Descending';
94691      when('ASC') ORDER = 'Ascending';
MPRINT(EM_DIAGRAM):   when('ASC') ORDER = 'Ascending';
94692      when('FMTDESC') ORDER = 'Formatted Descending';
MPRINT(EM_DIAGRAM):   when('FMTDESC') ORDER = 'Formatted Descending';
94693      when('FMTASC') ORDER = 'Formatted Ascending';
MPRINT(EM_DIAGRAM):   when('FMTASC') ORDER = 'Formatted Ascending';
94694      otherwise ORDER = 'Descending';
MPRINT(EM_DIAGRAM):   otherwise ORDER = 'Descending';
94695      end;
MPRINT(EM_DIAGRAM):   end;
94696      output;
MPRINT(EM_DIAGRAM):   output;
94697      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 1 observations read from the data set EMWS1.NEURAL2_RISK_DM.
      WHERE _TYPE_='TARGET';
NOTE: The data set WORK.NEURAL2_EVENT has 1 observations and 6 variables.
NOTE: DATA statement used (Total process time):
      real time           0.13 seconds
      cpu time            0.03 seconds
 
 
94698      title9 ' ';
MPRINT(EM_DIAGRAM):   title9 ' ';
94699      proc print data=WORK.Neural2_EVENT noobs label;
MPRINT(EM_DIAGRAM):   proc print data=WORK.Neural2_EVENT noobs label;
94700      var VARIABLE EVENT LEVEL NUMLEVELS ORDER LABEL;
MPRINT(EM_DIAGRAM):   var VARIABLE EVENT LEVEL NUMLEVELS ORDER LABEL;
94701      title9 ' ';
MPRINT(EM_DIAGRAM):   title9 ' ';
94702      title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_modelEvent_title  , NOQUOTE))";
MPRINT(EM_DIAGRAM):   title10 "Model Events";
MPRINT(EM_DIAGRAM):   run;
94703      run;
 
NOTE: There were 1 observations read from the data set WORK.NEURAL2_EVENT.
NOTE: The PROCEDURE PRINT printed page 71.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
94704      title10;
MPRINT(EM_DIAGRAM):   title10;
"No decisions defined for target "Risk"."
94705      proc print data = EMWS1.Neural2_Risk_DM noobs label;
MPRINT(EM_DIAGRAM):    proc print data = EMWS1.Neural2_Risk_DM noobs label;
94706      var _type_ variable label;
MPRINT(EM_DIAGRAM):   var _type_ variable label;
94707      where _type_ ^in('MATRIX', 'DECISION', 'TRAINPRIOR', 'DATAPRIOR', 'DECPRIOR');
MPRINT(EM_DIAGRAM):   where _type_ ^in('MATRIX', 'DECISION', 'TRAINPRIOR', 'DATAPRIOR',
'DECPRIOR');
94708      label _TYPE_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_type_vlabel,     NOQUOTE))"
94708    ! VARIABLE = "%sysfunc(sasmsg(sashelp.dmine, rpt_variable_vlabel, NOQUOTE))" LABEL =
94708    ! "%sysfunc(sasmsg(sashelp.dmine, meta_label_vlabel, NOQUOTE))";
MPRINT(EM_DIAGRAM):   label _TYPE_ = "Type" VARIABLE = "Variable" LABEL = "Label";
94709      title9 ' ';
MPRINT(EM_DIAGRAM):   title9 ' ';
94710      title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_predDecVars_title  , NOQUOTE))";
MPRINT(EM_DIAGRAM):   title10 "Predicted and decision variables";
MPRINT(EM_DIAGRAM):   run;
94711      run;
 
NOTE: There were 7 observations read from the data set EMWS1.NEURAL2_RISK_DM.
      WHERE _type_ not in ('DATAPRIOR', 'DECISION', 'DECPRIOR', 'MATRIX', 'TRAINPRIOR');
NOTE: The PROCEDURE PRINT printed page 72.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
94712      title10;
MPRINT(EM_DIAGRAM):   title10;
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Neural2: Preparing metadata for training;
MPRINT(EM_DIAGRAM):   ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   data WORK.M3B25FUC;
MPRINT(EM_DIAGRAM):   set WORK.M3B25FUC;
MPRINT(EM_DIAGRAM):   where(use = 'Y' or (role = 'INPUT' and use = 'D'));
MPRINT(EM_DIAGRAM):   if (role = 'REJECTED') then role = 'INPUT';
MPRINT(EM_DIAGRAM):   run;
94722      data WORK.M3B25FUC;
MPRINT(EM_DIAGRAM):    data WORK.M3B25FUC;
94723      set WORK.M3B25FUC end=eof;
MPRINT(EM_DIAGRAM):   set WORK.M3B25FUC end=eof;
94724      output;
MPRINT(EM_DIAGRAM):   output;
94725      if eof then do;
MPRINT(EM_DIAGRAM):   if eof then do;
94726      NAME="";
MPRINT(EM_DIAGRAM):   NAME="";
94727      ROLE="COST";
MPRINT(EM_DIAGRAM):   ROLE="COST";
94728      LEVEL="INTERVAL";
MPRINT(EM_DIAGRAM):   LEVEL="INTERVAL";
94729      TYPE="N";
MPRINT(EM_DIAGRAM):   TYPE="N";
94730      output;
MPRINT(EM_DIAGRAM):   output;
94731      end;
MPRINT(EM_DIAGRAM):   end;
94732      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 28 observations read from the data set WORK.M3B25FUC.
NOTE: The data set WORK.M3B25FUC has 29 observations and 29 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
NOTE: There were 2 observations read from the data set EMWS1.NEURAL2_RISK_DD.
NOTE: The data set WORK.RISK has 2 observations and 7 variables.
NOTE: There were 2 observations read from the data set EMWS1.NEURAL2_RISK_DD.
NOTE: The data set WORK.RISK has 2 observations and 7 variables.
94733      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
94734      * Neural2: Create decision matrix;
MPRINT(EM_DIAGRAM):   * Neural2: Create decision matrix;
94735      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
94736      data WORK.Risk;
MPRINT(EM_DIAGRAM):   data WORK.Risk;
94737        length   Risk                             $  32
94738                 COUNT                                8
94739                 DATAPRIOR                            8
94740                 TRAINPRIOR                           8
94741                 DECPRIOR                             8
94742                 DECISION1                            8
94743                 DECISION2                            8
94744                 ;
MPRINT(EM_DIAGRAM):   length Risk $ 32 COUNT 8 DATAPRIOR 8 TRAINPRIOR 8 DECPRIOR 8 DECISION1 8
DECISION2 8 ;
94745
94746        label    COUNT="Level Counts"
94747                 DATAPRIOR="Data Proportions"
94748                 TRAINPRIOR="Training Proportions"
94749                 DECPRIOR="Decision Priors"
94750                 DECISION1="1"
94751                 DECISION2="0"
94752                 ;
MPRINT(EM_DIAGRAM):   label COUNT= "Level Counts" DATAPRIOR= "Data Proportions" TRAINPRIOR=
"Training Proportions" DECPRIOR= "Decision Priors" DECISION1= "1" DECISION2= "0" ;
94753        format   COUNT 10.
94754                 ;
MPRINT(EM_DIAGRAM):   format COUNT 10. ;
94755      Risk="1"; COUNT=54; DATAPRIOR=0.55445544554455; TRAINPRIOR=0.54; DECPRIOR=.;
94755    ! DECISION1=1; DECISION2=0;
MPRINT(EM_DIAGRAM):   Risk="1";
MPRINT(EM_DIAGRAM):   COUNT=54;
MPRINT(EM_DIAGRAM):   DATAPRIOR=0.55445544554455;
MPRINT(EM_DIAGRAM):   TRAINPRIOR=0.54;
MPRINT(EM_DIAGRAM):   DECPRIOR=.;
MPRINT(EM_DIAGRAM):   DECISION1=1;
MPRINT(EM_DIAGRAM):   DECISION2=0;
94756      output;
MPRINT(EM_DIAGRAM):   output;
94757      Risk="0"; COUNT=46; DATAPRIOR=0.44554455445544; TRAINPRIOR=0.46; DECPRIOR=.;
94757    ! DECISION1=0; DECISION2=1;
MPRINT(EM_DIAGRAM):   Risk="0";
MPRINT(EM_DIAGRAM):   COUNT=46;
MPRINT(EM_DIAGRAM):   DATAPRIOR=0.44554455445544;
MPRINT(EM_DIAGRAM):   TRAINPRIOR=0.46;
MPRINT(EM_DIAGRAM):   DECPRIOR=.;
MPRINT(EM_DIAGRAM):   DECISION1=0;
MPRINT(EM_DIAGRAM):   DECISION2=1;
94758      output;
MPRINT(EM_DIAGRAM):   output;
94759      ;
MPRINT(EM_DIAGRAM):   ;
94760      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: The data set WORK.RISK has 2 observations and 7 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
94761      proc datasets lib=work nolist;
MPRINT(EM_DIAGRAM):   proc datasets lib=work nolist;
94762      modify Risk(type=PROFIT label=Risk);
MPRINT(EM_DIAGRAM):   modify Risk(type=PROFIT label= Risk);
MPRINT(EM_DIAGRAM):   label DECISION1= '1';
MPRINT(EM_DIAGRAM):   label DECISION2= '0';
MPRINT(EM_DIAGRAM):   run;
94763      label DECISION1= '1';
94764      label DECISION2= '0';
94765      run;
 
NOTE: MODIFY was successful for WORK.RISK.DATA.
94766      quit;
MPRINT(EM_DIAGRAM):   quit;
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.02 seconds
      cpu time            0.00 seconds
 
 
94767      data EM_Neural2;
MPRINT(EM_DIAGRAM):   data EM_Neural2;
94768      set EMWS1.Repl2_TRAIN(keep=
94769      IMP_num_of_doors LOG_REP_IMP_price LOG_REP_compression_ratio
94770      LOG_REP_engine_size M_bore M_num_of_doors M_price M_stroke REP_IMP_bore
94771      REP_IMP_stroke REP_aspiration REP_body_style REP_city_mpg REP_curb_weight
94772      REP_drive_wheels REP_engine_location REP_fuel_system REP_fuel_type REP_height
94773      REP_highway_mpg REP_horsepower REP_length REP_num_of_cylinders REP_peak_rpm
94774      REP_wheel_base REP_width Risk engine_type );
MPRINT(EM_DIAGRAM):   set EMWS1.Repl2_TRAIN(keep= IMP_num_of_doors LOG_REP_IMP_price
LOG_REP_compression_ratio LOG_REP_engine_size M_bore M_num_of_doors M_price M_stroke
REP_IMP_bore REP_IMP_stroke REP_aspiration REP_body_style REP_city_mpg REP_curb_weight
REP_drive_wheels REP_engine_location REP_fuel_system REP_fuel_type REP_height REP_highway_mpg
REP_horsepower REP_length REP_num_of_cylinders REP_peak_rpm REP_wheel_base REP_width Risk
engine_type );
94775      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 100 observations read from the data set EMWS1.PART_TRAIN.
NOTE: There were 100 observations read from the data set EMWS1.IMPT_TRAIN.
NOTE: There were 100 observations read from the data set EMWS1.REPL_TRAIN.
NOTE: View EMWS1.REPL2_TRAIN.VIEW used (Total process time):
      real time           0.17 seconds
      cpu time            0.17 seconds
 
NOTE: There were 100 observations read from the data set EMWS1.TRANS_TRAIN.
NOTE: There were 100 observations read from the data set EMWS1.REPL2_TRAIN.
NOTE: The data set WORK.EM_NEURAL2 has 100 observations and 28 variables.
NOTE: DATA statement used (Total process time):
      real time           0.21 seconds
      cpu time            0.18 seconds
 
 
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   * Neural2: DMDBClass Macro ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
94776      *------------------------------------------------------------* ;
94777      * Neural2: DMDBClass Macro ;
94778      *------------------------------------------------------------* ;
94779      %macro DMDBClass;
94780          IMP_num_of_doors(ASC) M_bore(ASC) M_num_of_doors(ASC) M_price(ASC)
94781         M_stroke(ASC) REP_aspiration(ASC) REP_body_style(ASC) REP_drive_wheels(ASC)
94782         REP_engine_location(ASC) REP_fuel_system(ASC) REP_fuel_type(ASC)
94783         REP_num_of_cylinders(ASC) Risk(DESC) engine_type(ASC)
94784      %mend DMDBClass;
94785      *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
94786      * Neural2: DMDBVar Macro ;
MPRINT(EM_DIAGRAM):   * Neural2: DMDBVar Macro ;
94787      *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
94788      %macro DMDBVar;
94789          LOG_REP_IMP_price LOG_REP_compression_ratio LOG_REP_engine_size REP_IMP_bore
94790         REP_IMP_stroke REP_city_mpg REP_curb_weight REP_height REP_highway_mpg
94791         REP_horsepower REP_length REP_peak_rpm REP_wheel_base REP_width
94792      %mend DMDBVar;
94793      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
94794      * Neural2: Create DMDB;
MPRINT(EM_DIAGRAM):   * Neural2: Create DMDB;
94795      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
94796      proc dmdb batch data=WORK.EM_Neural2
94797      dmdbcat=WORK.Neural2_DMDB
94798      maxlevel = 513
94799      ;
MPRINT(EM_DIAGRAM):   proc dmdb batch data=WORK.EM_Neural2 dmdbcat=WORK.Neural2_DMDB maxlevel
= 513 ;
MPRINT(EM_DIAGRAM):   class
94800      class %DMDBClass;
MPRINT(DMDBCLASS):   IMP_num_of_doors(ASC) M_bore(ASC) M_num_of_doors(ASC) M_price(ASC)
M_stroke(ASC) REP_aspiration(ASC) REP_body_style(ASC) REP_drive_wheels(ASC)
REP_engine_location(ASC) REP_fuel_system(ASC) REP_fuel_type(ASC) REP_num_of_cylinders(ASC)
Risk(DESC) engine_type(ASC)
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   var
94801      var %DMDBVar;
MPRINT(DMDBVAR):   LOG_REP_IMP_price LOG_REP_compression_ratio LOG_REP_engine_size
REP_IMP_bore REP_IMP_stroke REP_city_mpg REP_curb_weight REP_height REP_highway_mpg
REP_horsepower REP_length REP_peak_rpm REP_wheel_base REP_width
MPRINT(EM_DIAGRAM):  ;
94802      target
94803      Risk
94804      ;
MPRINT(EM_DIAGRAM):   target Risk ;
94805      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: Records processed = 100   Memory used = 511K.
NOTE: There were 100 observations read from the data set WORK.EM_NEURAL2.
NOTE: PROCEDURE DMDB used (Total process time):
      real time           0.02 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_DIAGRAM):   quit;
MPRINT(EM_DIAGRAM):   *--- end code ---*;
94806      quit;
94807      *--- end code ---*;
 
94808      *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------* ;
94809      * Neural2: Interval Input Variables Macro ;
MPRINT(EM_DIAGRAM):   * Neural2: Interval Input Variables Macro ;
94810      *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
94811      %macro INTINPUTS;
94812          LOG_REP_IMP_price LOG_REP_compression_ratio LOG_REP_engine_size REP_IMP_bore
94813         REP_IMP_stroke REP_city_mpg REP_curb_weight REP_height REP_highway_mpg
94814         REP_horsepower REP_length REP_peak_rpm REP_wheel_base REP_width
94815      %mend INTINPUTS;
94816      *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
94817      * Neural2: Binary Inputs Macro ;
MPRINT(EM_DIAGRAM):   * Neural2: Binary Inputs Macro ;
94818      *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
94819      %macro BININPUTS;
94820          M_bore M_num_of_doors M_price M_stroke
94821      %mend BININPUTS;
94822      *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
94823      * Neural2: Nominal Inputs Macro ;
MPRINT(EM_DIAGRAM):   * Neural2: Nominal Inputs Macro ;
94824      *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
94825      %macro NOMINPUTS;
94826          IMP_num_of_doors REP_aspiration REP_body_style REP_drive_wheels
94827         REP_engine_location REP_fuel_system REP_fuel_type REP_num_of_cylinders
94828         engine_type
94829      %mend NOMINPUTS;
94830      *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
94831      * Neural2: Ordinal Inputs Macro ;
MPRINT(EM_DIAGRAM):   * Neural2: Ordinal Inputs Macro ;
94832      *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
94833      %macro ORDINPUTS;
94834
94835      %mend ORDINPUTS;
94836      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
94837      * Neural Network Training;
MPRINT(EM_DIAGRAM):   * Neural Network Training;
94838      ;
MPRINT(EM_DIAGRAM):   ;
94839      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
94840      proc neural data=EM_Neural2 dmdbcat=WORK.Neural2_DMDB
94841      validdata = EMWS1.Repl2_VALIDATE
94842      random=12345
94843      ;
MPRINT(EM_DIAGRAM):   proc neural data=EM_Neural2 dmdbcat=WORK.Neural2_DMDB validdata =
EMWS1.Repl2_VALIDATE random=12345 ;
94844      nloptions
94845      ;
MPRINT(EM_DIAGRAM):   nloptions ;
94846      performance alldetails noutilfile;
MPRINT(EM_DIAGRAM):   performance alldetails noutilfile;
94847      netopts
94848      decay=0;
MPRINT(EM_DIAGRAM):   netopts decay=0;
MPRINT(EM_DIAGRAM):   input
94849      input %INTINPUTS / level=interval id=intvl
MPRINT(INTINPUTS):   LOG_REP_IMP_price LOG_REP_compression_ratio LOG_REP_engine_size
REP_IMP_bore REP_IMP_stroke REP_city_mpg REP_curb_weight REP_height REP_highway_mpg
REP_horsepower REP_length REP_peak_rpm REP_wheel_base REP_width
94850      ;
MPRINT(EM_DIAGRAM):   / level=interval id=intvl ;
MPRINT(EM_DIAGRAM):   input
94851      input %BININPUTS / level=nominal id=bin
MPRINT(BININPUTS):   M_bore M_num_of_doors M_price M_stroke
94852      ;
MPRINT(EM_DIAGRAM):   / level=nominal id=bin ;
MPRINT(EM_DIAGRAM):   input
94853      input %NOMINPUTS / level=nominal id=nom
MPRINT(NOMINPUTS):   IMP_num_of_doors REP_aspiration REP_body_style REP_drive_wheels
REP_engine_location REP_fuel_system REP_fuel_type REP_num_of_cylinders engine_type
94854      ;
MPRINT(EM_DIAGRAM):   / level=nominal id=nom ;
94855      target Risk / level=NOMINAL id=Risk
94856      bias
94857      ;
MPRINT(EM_DIAGRAM):   target Risk / level=NOMINAL id=Risk bias ;
94858      arch MLP
94859      Hidden=3
94860      ;
MPRINT(EM_DIAGRAM):   arch MLP Hidden=3 ;
94861      save network=EMWS1.Neural2_NETWORK.dm_neural;
MPRINT(EM_DIAGRAM):   save network=EMWS1.Neural2_NETWORK.dm_neural;
NOTE: Entry EMWS1.NEURAL2_NETWORK.DM_NEURAL has been opened.
NOTE: Entry EMWS1.NEURAL2_NETWORK.DM_NEURAL has been closed.
94862      train Maxiter=50
94863      maxtime=300
94864      Outest=EMWS1.Neural2_outest estiter=1
94865      Outfit=EMWS1.Neural2_OUTFIT
94866      ;
MPRINT(EM_DIAGRAM):   train Maxiter=50 maxtime=300 Outest=EMWS1.Neural2_outest estiter=1
Outfit=EMWS1.Neural2_OUTFIT ;
NOTE:  Synchronizing the objectives and the Solution.
NOTE: Convergence criterion (ABSCONV=0.0013927149) satisfied.
NOTE: At least one element of the gradient is greater than 1e-3.
NOTE: The data set EMWS1.NEURAL2_OUTEST has 39 observations and 124 variables.
NOTE: The data set EMWS1.NEURAL2_OUTFIT has 76 observations and 36 variables.
94867      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: The data set WORK.EM_NEURAL2 has 100 observations and 28 variables.
NOTE: The data set EMWS1.REPL2_VALIDATE has . observations and 60 variables.
NOTE: There were 100 observations read from the data set EMWS1.PART_VALIDATE.
NOTE: There were 100 observations read from the data set EMWS1.IMPT_VALIDATE.
NOTE: There were 100 observations read from the data set EMWS1.REPL_VALIDATE.
NOTE: View EMWS1.REPL2_VALIDATE.VIEW used (Total process time):
      real time           0.56 seconds
      cpu time            0.31 seconds
 
NOTE: There were 100 observations read from the data set EMWS1.TRANS_VALIDATE.
NOTE: Closing the Neural Application.
NOTE: The PROCEDURE NEURAL printed pages 73-75.
NOTE: PROCEDURE NEURAL used (Total process time):
      real time           0.63 seconds
      cpu time            0.32 seconds
 
 
MPRINT(EM_DIAGRAM):   quit;
94868      quit;
 
94869      proc sort data=EMWS1.Neural2_OUTFIT(where=(_iter_ ne . and _NAME_="OVERALL"))
94869    ! out=fit_Neural2;
MPRINT(EM_DIAGRAM):    proc sort data=EMWS1.Neural2_OUTFIT(where=(_iter_ ne . and
_NAME_="OVERALL")) out=fit_Neural2;
94870      by _VAVERR_;
MPRINT(EM_DIAGRAM):   by _VAVERR_;
94871      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 38 observations read from the data set EMWS1.NEURAL2_OUTFIT.
      WHERE (_iter_ not = .) and (_NAME_='OVERALL');
NOTE: The data set WORK.FIT_NEURAL2 has 38 observations and 36 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.03 seconds
      cpu time            0.00 seconds
 
 
94872      %GLOBAL ITER;
94873      data _null_;
MPRINT(EM_DIAGRAM):   data _null_;
94874      set fit_Neural2(obs=1);
MPRINT(EM_DIAGRAM):   set fit_Neural2(obs=1);
94875      call symput('ITER',put(_ITER_, 6.));
MPRINT(EM_DIAGRAM):   call symput('ITER',put(_ITER_, 6.));
94876      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 1 observations read from the data set WORK.FIT_NEURAL2.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
94877      data EMWS1.Neural2_INITIAL;
MPRINT(EM_DIAGRAM):   data EMWS1.Neural2_INITIAL;
94878      set EMWS1.Neural2_outest(where=(_ITER_ eq &ITER and _OBJ_ ne .));
MPRINT(EM_DIAGRAM):   set EMWS1.Neural2_outest(where=(_ITER_ eq 10 and _OBJ_ ne .));
94879      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 1 observations read from the data set EMWS1.NEURAL2_OUTEST.
      WHERE (_ITER_=10) and (_OBJ_ not = .);
NOTE: The data set EMWS1.NEURAL2_INITIAL has 1 observations and 124 variables.
NOTE: DATA statement used (Total process time):
      real time           0.09 seconds
      cpu time            0.01 seconds
 
 
94880      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
94881      * Neural Network Model Selection;
MPRINT(EM_DIAGRAM):   * Neural Network Model Selection;
94882      ;
MPRINT(EM_DIAGRAM):   ;
94883      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
94884      proc neural data=EM_Neural2 dmdbcat=WORK.Neural2_DMDB
94885      validdata = EMWS1.Repl2_VALIDATE
94886      network = EMWS1.Neural2_NETWORK.dm_neural
94887      random=12345
94888      ;
MPRINT(EM_DIAGRAM):   proc neural data=EM_Neural2 dmdbcat=WORK.Neural2_DMDB validdata =
EMWS1.Repl2_VALIDATE network = EMWS1.Neural2_NETWORK.dm_neural random=12345 ;
NOTE: Entry EMWS1.NEURAL2_NETWORK.DM_NEURAL has been opened.
NOTE: Entry EMWS1.NEURAL2_NETWORK.DM_NEURAL has been closed.
94889      nloptions noprint;
MPRINT(EM_DIAGRAM):   nloptions noprint;
94890      performance alldetails noutilfile;
MPRINT(EM_DIAGRAM):   performance alldetails noutilfile;
94891      initial inest=EMWS1.Neural2_INITIAL;
MPRINT(EM_DIAGRAM):   initial inest=EMWS1.Neural2_INITIAL;
NOTE: The data set EMWS1.NEURAL2_INITIAL has 1 observations and 124 variables.
94892      train tech=NONE;
MPRINT(EM_DIAGRAM):   train tech=NONE;
NOTE: No optimization performed.
94893      code file="H:\746\Decision Tree test\Workspaces\EMWS1\Neural2\SCORECODE.sas"
94894      group=Neural2
94895      ;
MPRINT(EM_DIAGRAM):   code file="H:\746\Decision Tree
test\Workspaces\EMWS1\Neural2\SCORECODE.sas" group=Neural2 ;
NOTE: External file H:\746\Decision Tree test\Workspaces\EMWS1\Neural2\SCORECODE.sas opened.
94896      ;
MPRINT(EM_DIAGRAM):   ;
94897      code file="H:\746\Decision Tree test\Workspaces\EMWS1\Neural2\RESIDUALSCORECODE.sas"
94898      group=Neural2
94899      residual
94900      ;
MPRINT(EM_DIAGRAM):   code file="H:\746\Decision Tree
test\Workspaces\EMWS1\Neural2\RESIDUALSCORECODE.sas" group=Neural2 residual ;
NOTE: External file H:\746\Decision Tree test\Workspaces\EMWS1\Neural2\RESIDUALSCORECODE.sas
      opened.
94901      ;
MPRINT(EM_DIAGRAM):   ;
94902      score data=EMWS1.Repl2_TRAIN out=_NULL_
NOTE: View EMWS1.REPL2_TRAIN.VIEW used (Total process time):
      real time           0.26 seconds
      cpu time            0.17 seconds
 
94903      outfit=WORK.FIT1
94904      role=TRAIN
94905      outkey=EMWS1.Neural2_OUTKEY;
MPRINT(EM_DIAGRAM):   score data=EMWS1.Repl2_TRAIN out=_NULL_ outfit=WORK.FIT1 role=TRAIN
outkey=EMWS1.Neural2_OUTKEY;
NOTE: The data set EMWS1.NEURAL2_OUTKEY has 49 observations and 8 variables.
NOTE: The data set EMWS1.REPL2_TRAIN has . observations and 60 variables.
NOTE: There were 100 observations read from the data set EMWS1.PART_TRAIN.
NOTE: There were 100 observations read from the data set EMWS1.IMPT_TRAIN.
NOTE: There were 100 observations read from the data set EMWS1.REPL_TRAIN.
NOTE: There were 100 observations read from the data set EMWS1.TRANS_TRAIN.
NOTE: The data set WORK.FIT1 has 2 observations and 23 variables.
94906      score data=EMWS1.Repl2_VALIDATE out=_NULL_
NOTE: View EMWS1.REPL2_VALIDATE.VIEW used (Total process time):
      real time           0.25 seconds
      cpu time            0.23 seconds
 
94907      outfit=WORK.FIT2
94908      role=VALID
94909      outkey=EMWS1.Neural2_OUTKEY;
MPRINT(EM_DIAGRAM):   score data=EMWS1.Repl2_VALIDATE out=_NULL_ outfit=WORK.FIT2 role=VALID
outkey=EMWS1.Neural2_OUTKEY;
NOTE: The data set EMWS1.NEURAL2_OUTKEY has 49 observations and 8 variables.
NOTE: The data set EMWS1.REPL2_VALIDATE has . observations and 60 variables.
NOTE: There were 100 observations read from the data set EMWS1.PART_VALIDATE.
NOTE: There were 100 observations read from the data set EMWS1.IMPT_VALIDATE.
NOTE: There were 100 observations read from the data set EMWS1.REPL_VALIDATE.
NOTE: There were 100 observations read from the data set EMWS1.TRANS_VALIDATE.
NOTE: The data set WORK.FIT2 has 2 observations and 15 variables.
94910      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: The data set WORK.EM_NEURAL2 has 100 observations and 28 variables.
NOTE: The data set EMWS1.REPL2_VALIDATE has . observations and 60 variables.
NOTE: There were 100 observations read from the data set EMWS1.PART_VALIDATE.
NOTE: There were 100 observations read from the data set EMWS1.IMPT_VALIDATE.
NOTE: There were 100 observations read from the data set EMWS1.REPL_VALIDATE.
NOTE: View EMWS1.REPL2_VALIDATE.VIEW used (Total process time):
      real time           4.92 seconds
      cpu time            0.76 seconds
 
NOTE: There were 100 observations read from the data set EMWS1.TRANS_VALIDATE.
NOTE: Closing the Neural Application.
NOTE: PROCEDURE NEURAL used (Total process time):
      real time           4.94 seconds
      cpu time            0.78 seconds
 
 
MPRINT(EM_DIAGRAM):   quit;
94911      quit;
94912      data EMWS1.Neural2_OUTFIT;
MPRINT(EM_DIAGRAM):   data EMWS1.Neural2_OUTFIT;
94913      merge WORK.FIT1 WORK.FIT2;
MPRINT(EM_DIAGRAM):   merge WORK.FIT1 WORK.FIT2;
94914      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 2 observations read from the data set WORK.FIT1.
NOTE: There were 2 observations read from the data set WORK.FIT2.
NOTE: The data set EMWS1.NEURAL2_OUTFIT has 2 observations and 36 variables.
NOTE: DATA statement used (Total process time):
      real time           0.53 seconds
      cpu time            0.00 seconds
 
 
94915      data EMWS1.Neural2_EMESTIMATE;
MPRINT(EM_DIAGRAM):   data EMWS1.Neural2_EMESTIMATE;
94916      set EMWS1.Neural2_outest;
MPRINT(EM_DIAGRAM):   set EMWS1.Neural2_outest;
94917      if _type_ ^in('HESSIAN' 'GRAD');
MPRINT(EM_DIAGRAM):   if _type_ ^in('HESSIAN' 'GRAD');
94918      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 39 observations read from the data set EMWS1.NEURAL2_OUTEST.
NOTE: The data set EMWS1.NEURAL2_EMESTIMATE has 38 observations and 124 variables.
NOTE: DATA statement used (Total process time):
      real time           0.09 seconds
      cpu time            0.00 seconds
 
 
94919      proc datasets lib=work nolist;
MPRINT(EM_DIAGRAM):   proc datasets lib=work nolist;
94920      delete EM_Neural2;
MPRINT(EM_DIAGRAM):   delete EM_Neural2;
94921      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: Deleting WORK.EM_NEURAL2 (memtype=DATA).
94922      quit;
MPRINT(EM_DIAGRAM):   quit;
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
94923      data EMWS1.Neural2_PLOTDS(where=(_iter_ ne . and _NAME_="OVERALL"));
MPRINT(EM_DIAGRAM):    data EMWS1.Neural2_PLOTDS(where=(_iter_ ne . and _NAME_="OVERALL"));
94924      set fit_Neural2;
MPRINT(EM_DIAGRAM):   set fit_Neural2;
94925      attrib _ITER_ label="%sysfunc(sasmsg(sashelp.dmine, rpt_trainiterations_vlabel  ,
94925    ! NOQUOTE))";
MPRINT(EM_DIAGRAM):   attrib _ITER_ label="Training Iterations";
94926      attrib _NAME_ label="%sysfunc(sasmsg(sashelp.dmine, rpt_varsel_label_name  ,
94926    ! NOQUOTE))";
MPRINT(EM_DIAGRAM):   attrib _NAME_ label="Name";
94927      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 38 observations read from the data set WORK.FIT_NEURAL2.
NOTE: The data set EMWS1.NEURAL2_PLOTDS has 38 observations and 36 variables.
NOTE: DATA statement used (Total process time):
      real time           0.08 seconds
      cpu time            0.00 seconds
 
 
94928      proc sort data=EMWS1.Neural2_PLOTDS;
MPRINT(EM_DIAGRAM):   proc sort data=EMWS1.Neural2_PLOTDS;
94929      by _ITER_;
MPRINT(EM_DIAGRAM):   by _ITER_;
94930      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 38 observations read from the data set EMWS1.NEURAL2_PLOTDS.
NOTE: The data set EMWS1.NEURAL2_PLOTDS has 38 observations and 36 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.10 seconds
      cpu time            0.01 seconds
 
 
94931      data tempweight (drop= _tech_ _decay_ _seed_ _nobj_ _obj_ _objerr_ _averr_ _p_num_
94931    ! where=(_type_ eq "PARMS" and _iter_ eq 10) );
MPRINT(EM_DIAGRAM):    data tempweight (drop= _tech_ _decay_ _seed_ _nobj_ _obj_ _objerr_
_averr_ _p_num_ where=(_type_ eq "PARMS" and _iter_ eq 10) );
94932      set EMWS1.Neural2_EMESTIMATE;
MPRINT(EM_DIAGRAM):   set EMWS1.Neural2_EMESTIMATE;
94933      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 38 observations read from the data set EMWS1.NEURAL2_EMESTIMATE.
NOTE: The data set WORK.TEMPWEIGHT has 1 observations and 116 variables.
NOTE: DATA statement used (Total process time):
      real time           0.02 seconds
      cpu time            0.00 seconds
 
 
94934      proc sort;
MPRINT(EM_DIAGRAM):   proc sort;
94935      by _name_;
MPRINT(EM_DIAGRAM):   by _name_;
94936      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 1 observations read from the data set WORK.TEMPWEIGHT.
NOTE: The data set WORK.TEMPWEIGHT has 1 observations and 116 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
94937      proc transpose data=tempweight out=EMWS1.Neural2_WEIGHTDS;
MPRINT(EM_DIAGRAM):   proc transpose data=tempweight out=EMWS1.Neural2_WEIGHTDS;
94938      by _name_;
MPRINT(EM_DIAGRAM):   by _name_;
94939      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 1 observations read from the data set WORK.TEMPWEIGHT.
NOTE: The data set EMWS1.NEURAL2_WEIGHTDS has 114 observations and 3 variables.
NOTE: PROCEDURE TRANSPOSE used (Total process time):
      real time           0.09 seconds
      cpu time            0.01 seconds
 
 
94940      data EMWS1.Neural2_WEIGHTDS;
MPRINT(EM_DIAGRAM):   data EMWS1.Neural2_WEIGHTDS;
94941      set EMWS1.Neural2_WEIGHTDS;
MPRINT(EM_DIAGRAM):   set EMWS1.Neural2_WEIGHTDS;
94942      FROM = trim(left(scan(_LABEL_, 1, '->')));
MPRINT(EM_DIAGRAM):   FROM = trim(left(scan(_LABEL_, 1, '->')));
94943      TO = trim(left(scan(_LABEL_, 2, '>')));
MPRINT(EM_DIAGRAM):   TO = trim(left(scan(_LABEL_, 2, '>')));
94944      WEIGHT = COL1;
MPRINT(EM_DIAGRAM):   WEIGHT = COL1;
94945      if (TO eq '') or (FROM eq '') then delete;
MPRINT(EM_DIAGRAM):   if (TO eq '') or (FROM eq '') then delete;
94946      label _LABEL_ ="%sysfunc(sasmsg(sashelp.dmine, meta_label_vlabel  , NOQUOTE))" FROM
94946    ! = "%sysfunc(sasmsg(sashelp.dmine, rpt_from_vlabel  , NOQUOTE))" TO =
94946    ! "%sysfunc(sasmsg(sashelp.dmine, rpt_into_vlabel  , NOQUOTE))" WEIGHT =
94947         "%sysfunc(sasmsg(sashelp.dmine, rpt_weight_vlabel  , NOQUOTE))";
MPRINT(EM_DIAGRAM):   label _LABEL_ = "Label" FROM = "From" TO = "Into" WEIGHT = "Weight";
94948      keep FROM TO WEIGHT _LABEL_;
MPRINT(EM_DIAGRAM):   keep FROM TO WEIGHT _LABEL_;
94949      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 114 observations read from the data set EMWS1.NEURAL2_WEIGHTDS.
NOTE: The data set EMWS1.NEURAL2_WEIGHTDS has 109 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.08 seconds
      cpu time            0.03 seconds
 
 
94950      proc sort data=EMWS1.Neural2_WEIGHTDS nodupkey;
MPRINT(EM_DIAGRAM):   proc sort data=EMWS1.Neural2_WEIGHTDS nodupkey;
94951      by _LABEL_;
MPRINT(EM_DIAGRAM):   by _LABEL_;
94952      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 109 observations read from the data set EMWS1.NEURAL2_WEIGHTDS.
NOTE: 0 observations with duplicate key values were deleted.
NOTE: The data set EMWS1.NEURAL2_WEIGHTDS has 109 observations and 4 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.08 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_DIAGRAM):    proc printto;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   call symput('NLDATE', strip(put(date(), NLDATE.)));
MPRINT(EM_DIAGRAM):   call symput('NLTIME', strip(put(datetime(), NLTIME.)));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   nldate= sasmsg("sashelp.dmine", "log_date_note", 'N', "April 16, 2021" );
MPRINT(EM_DIAGRAM):   nltime= sasmsg("sashelp.dmine", "log_time_note", 'N', "11:30:17 o'clock"
);
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "* Score Log";
MPRINT(EM_DIAGRAM):   put nldate;
MPRINT(EM_DIAGRAM):   put nltime;
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   run;
*------------------------------------------------------------*
* Score Log
Date:                April 16, 2021
Time:                11:30:17 o'clock
*------------------------------------------------------------*
MPRINT(EM_DIAGRAM):    filename O1PEHQUM "H:\746\Decision Tree
test\Workspaces\EMWS1\Neural2\EMSCORE.out" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):   proc printto print=O1PEHQUM new;
MPRINT(EM_DIAGRAM):   run;
NOTE: This SAS session is using a registry in WORK.  All changes will be lost at the end of
      this session.
95054      data work.outkey;
MPRINT(EM_DIAGRAM):    data work.outkey;
95055      set EMWS1.Neural2_OUTKEY;
MPRINT(EM_DIAGRAM):   set EMWS1.Neural2_OUTKEY;
95056      if upcase(ROLE) = 'HIDDEN';
MPRINT(EM_DIAGRAM):   if upcase(ROLE) = 'HIDDEN';
95057      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 49 observations read from the data set EMWS1.NEURAL2_OUTKEY.
NOTE: The data set WORK.OUTKEY has 3 observations and 8 variables.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.01 seconds
 
 
95058      filename emflow "H:\746\Decision Tree test\Workspaces\EMWS1\Neural2\EMFLOWSCORE.sas"
95058    ! ;
MPRINT(EM_DIAGRAM):    filename emflow "H:\746\Decision Tree
test\Workspaces\EMWS1\Neural2\EMFLOWSCORE.sas";
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Neural2: Scoring DATA data;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
95059      *------------------------------------------------------------*;
95060      * Neural2: Scoring DATA data;
95061      *------------------------------------------------------------*;
95062      data EMWS1.Neural2_TRAIN
95063      / view=EMWS1.Neural2_TRAIN
95064      ;
MPRINT(EM_DIAGRAM):   data EMWS1.Neural2_TRAIN / view=EMWS1.Neural2_TRAIN ;
95065      set EMWS1.Repl2_TRAIN
95066      ;
MPRINT(EM_DIAGRAM):   set EMWS1.Repl2_TRAIN ;
95067      %inc emflow;
NOTE: %INCLUDE (level 1) file EMFLOW is file H:\746\Decision Tree
      test\Workspaces\EMWS1\Neural2\EMFLOWSCORE.sas.
95068     +***********************************;
MPRINT(EM_DIAGRAM):   ***********************************;
95069     +*** Begin Scoring Code for Neural;
MPRINT(EM_DIAGRAM):   *** Begin Scoring Code for Neural;
95070     +***********************************;
MPRINT(EM_DIAGRAM):   ***********************************;
95071     +DROP _DM_BAD _EPS _NOCL_ _MAX_ _MAXP_ _SUM_ _NTRIALS;
MPRINT(EM_DIAGRAM):   DROP _DM_BAD _EPS _NOCL_ _MAX_ _MAXP_ _SUM_ _NTRIALS;
95072     + _DM_BAD = 0;
MPRINT(EM_DIAGRAM):   _DM_BAD = 0;
95073     + _NOCL_ = .;
MPRINT(EM_DIAGRAM):   _NOCL_ = .;
95074     + _MAX_ = .;
MPRINT(EM_DIAGRAM):   _MAX_ = .;
95075     + _MAXP_ = .;
MPRINT(EM_DIAGRAM):   _MAXP_ = .;
95076     + _SUM_ = .;
MPRINT(EM_DIAGRAM):   _SUM_ = .;
95077     + _NTRIALS = .;
MPRINT(EM_DIAGRAM):   _NTRIALS = .;
95078     + _EPS =                1E-10;
MPRINT(EM_DIAGRAM):   _EPS = 1E-10;
95079     +LENGTH _WARN_ $4
95080     +      F_Risk  $ 12
95081     +;
MPRINT(EM_DIAGRAM):   LENGTH _WARN_ $4 F_Risk $ 12 ;
95082     +      label S_LOG_REP_IMP_price = 'Standard: LOG_REP_IMP_price' ;
MPRINT(EM_DIAGRAM):   label S_LOG_REP_IMP_price = 'Standard: LOG_REP_IMP_price' ;
95083     +
95084     +      label S_LOG_REP_compression_ratio =
95085     +'Standard: LOG_REP_compression_ratio' ;
MPRINT(EM_DIAGRAM):   label S_LOG_REP_compression_ratio = 'Standard:
LOG_REP_compression_ratio' ;
95086     +
95087     +      label S_LOG_REP_engine_size = 'Standard: LOG_REP_engine_size' ;
MPRINT(EM_DIAGRAM):   label S_LOG_REP_engine_size = 'Standard: LOG_REP_engine_size' ;
95088     +
95089     +      label S_REP_IMP_bore = 'Standard: REP_IMP_bore' ;
MPRINT(EM_DIAGRAM):   label S_REP_IMP_bore = 'Standard: REP_IMP_bore' ;
95090     +
95091     +      label S_REP_IMP_stroke = 'Standard: REP_IMP_stroke' ;
MPRINT(EM_DIAGRAM):   label S_REP_IMP_stroke = 'Standard: REP_IMP_stroke' ;
95092     +
95093     +      label S_REP_city_mpg = 'Standard: REP_city_mpg' ;
MPRINT(EM_DIAGRAM):   label S_REP_city_mpg = 'Standard: REP_city_mpg' ;
95094     +
95095     +      label S_REP_curb_weight = 'Standard: REP_curb_weight' ;
MPRINT(EM_DIAGRAM):   label S_REP_curb_weight = 'Standard: REP_curb_weight' ;
95096     +
95097     +      label S_REP_height = 'Standard: REP_height' ;
MPRINT(EM_DIAGRAM):   label S_REP_height = 'Standard: REP_height' ;
95098     +
95099     +      label S_REP_highway_mpg = 'Standard: REP_highway_mpg' ;
MPRINT(EM_DIAGRAM):   label S_REP_highway_mpg = 'Standard: REP_highway_mpg' ;
95100     +
95101     +      label S_REP_horsepower = 'Standard: REP_horsepower' ;
MPRINT(EM_DIAGRAM):   label S_REP_horsepower = 'Standard: REP_horsepower' ;
95102     +
95103     +      label S_REP_length = 'Standard: REP_length' ;
MPRINT(EM_DIAGRAM):   label S_REP_length = 'Standard: REP_length' ;
95104     +
95105     +      label S_REP_peak_rpm = 'Standard: REP_peak_rpm' ;
MPRINT(EM_DIAGRAM):   label S_REP_peak_rpm = 'Standard: REP_peak_rpm' ;
95106     +
95107     +      label S_REP_wheel_base = 'Standard: REP_wheel_base' ;
MPRINT(EM_DIAGRAM):   label S_REP_wheel_base = 'Standard: REP_wheel_base' ;
95108     +
95109     +      label S_REP_width = 'Standard: REP_width' ;
MPRINT(EM_DIAGRAM):   label S_REP_width = 'Standard: REP_width' ;
95110     +
95111     +      label M_bore0 = 'Dummy: M_bore=0' ;
MPRINT(EM_DIAGRAM):   label M_bore0 = 'Dummy: M_bore=0' ;
95112     +
95113     +      label M_num_of_doors0 = 'Dummy: M_num_of_doors=0' ;
MPRINT(EM_DIAGRAM):   label M_num_of_doors0 = 'Dummy: M_num_of_doors=0' ;
95114     +
95115     +      label M_price0 = 'Dummy: M_price=0' ;
MPRINT(EM_DIAGRAM):   label M_price0 = 'Dummy: M_price=0' ;
95116     +
95117     +      label M_stroke0 = 'Dummy: M_stroke=0' ;
MPRINT(EM_DIAGRAM):   label M_stroke0 = 'Dummy: M_stroke=0' ;
95118     +
95119     +      label IMP_num_of_doors2 = 'Dummy: IMP_num_of_doors=2' ;
MPRINT(EM_DIAGRAM):   label IMP_num_of_doors2 = 'Dummy: IMP_num_of_doors=2' ;
95120     +
95121     +      label REP_aspirationS = 'Dummy: REP_aspiration=S' ;
MPRINT(EM_DIAGRAM):   label REP_aspirationS = 'Dummy: REP_aspiration=S' ;
95122     +
95123     +      label REP_body_styleC = 'Dummy: REP_body_style=C' ;
MPRINT(EM_DIAGRAM):   label REP_body_styleC = 'Dummy: REP_body_style=C' ;
95124     +
95125     +      label REP_body_styleH = 'Dummy: REP_body_style=H' ;
MPRINT(EM_DIAGRAM):   label REP_body_styleH = 'Dummy: REP_body_style=H' ;
95126     +
95127     +      label REP_body_styleS = 'Dummy: REP_body_style=S' ;
MPRINT(EM_DIAGRAM):   label REP_body_styleS = 'Dummy: REP_body_style=S' ;
95128     +
95129     +      label REP_drive_wheels4 = 'Dummy: REP_drive_wheels=4' ;
MPRINT(EM_DIAGRAM):   label REP_drive_wheels4 = 'Dummy: REP_drive_wheels=4' ;
95130     +
95131     +      label REP_drive_wheelsF = 'Dummy: REP_drive_wheels=F' ;
MPRINT(EM_DIAGRAM):   label REP_drive_wheelsF = 'Dummy: REP_drive_wheels=F' ;
95132     +
95133     +      label REP_engine_locationF = 'Dummy: REP_engine_location=F' ;
MPRINT(EM_DIAGRAM):   label REP_engine_locationF = 'Dummy: REP_engine_location=F' ;
95134     +
95135     +      label REP_fuel_systemnon_spdi = 'Dummy: REP_fuel_system=non-spdi' ;
MPRINT(EM_DIAGRAM):   label REP_fuel_systemnon_spdi = 'Dummy: REP_fuel_system=non-spdi' ;
95136     +
95137     +      label REP_fuel_typeD = 'Dummy: REP_fuel_type=D' ;
MPRINT(EM_DIAGRAM):   label REP_fuel_typeD = 'Dummy: REP_fuel_type=D' ;
95138     +
95139     +      label REP_num_of_cylinders__4 = 'Dummy: REP_num_of_cylinders=<=4' ;
MPRINT(EM_DIAGRAM):   label REP_num_of_cylinders__4 = 'Dummy: REP_num_of_cylinders=<=4' ;
95140     +
95141     +      label engine_typedohc = 'Dummy: engine_type=dohc' ;
MPRINT(EM_DIAGRAM):   label engine_typedohc = 'Dummy: engine_type=dohc' ;
95142     +
95143     +      label engine_typel = 'Dummy: engine_type=l' ;
MPRINT(EM_DIAGRAM):   label engine_typel = 'Dummy: engine_type=l' ;
95144     +
95145     +      label engine_typeohc = 'Dummy: engine_type=ohc' ;
MPRINT(EM_DIAGRAM):   label engine_typeohc = 'Dummy: engine_type=ohc' ;
95146     +
95147     +      label engine_typeohcf = 'Dummy: engine_type=ohcf' ;
MPRINT(EM_DIAGRAM):   label engine_typeohcf = 'Dummy: engine_type=ohcf' ;
95148     +
95149     +      label engine_typeohcv = 'Dummy: engine_type=ohcv' ;
MPRINT(EM_DIAGRAM):   label engine_typeohcv = 'Dummy: engine_type=ohcv' ;
95150     +
95151     +      label H11 = 'Hidden: H1=1' ;
MPRINT(EM_DIAGRAM):   label H11 = 'Hidden: H1=1' ;
95152     +
95153     +      label H12 = 'Hidden: H1=2' ;
MPRINT(EM_DIAGRAM):   label H12 = 'Hidden: H1=2' ;
95154     +
95155     +      label H13 = 'Hidden: H1=3' ;
MPRINT(EM_DIAGRAM):   label H13 = 'Hidden: H1=3' ;
95156     +
95157     +      label I_Risk = 'Into: Risk' ;
MPRINT(EM_DIAGRAM):   label I_Risk = 'Into: Risk' ;
95158     +
95159     +      label F_Risk = 'From: Risk' ;
MPRINT(EM_DIAGRAM):   label F_Risk = 'From: Risk' ;
95160     +
95161     +      label U_Risk = 'Unnormalized Into: Risk' ;
MPRINT(EM_DIAGRAM):   label U_Risk = 'Unnormalized Into: Risk' ;
95162     +
95163     +      label P_Risk1 = 'Predicted: Risk=1' ;
MPRINT(EM_DIAGRAM):   label P_Risk1 = 'Predicted: Risk=1' ;
95164     +
95165     +      label R_Risk1 = 'Residual: Risk=1' ;
MPRINT(EM_DIAGRAM):   label R_Risk1 = 'Residual: Risk=1' ;
95166     +
95167     +      label P_Risk0 = 'Predicted: Risk=0' ;
MPRINT(EM_DIAGRAM):   label P_Risk0 = 'Predicted: Risk=0' ;
95168     +
95169     +      label R_Risk0 = 'Residual: Risk=0' ;
MPRINT(EM_DIAGRAM):   label R_Risk0 = 'Residual: Risk=0' ;
95170     +
95171     +      label  _WARN_ = "Warnings";
MPRINT(EM_DIAGRAM):   label _WARN_ = "Warnings";
95172     +
95173     +*** Generate dummy variables for M_bore ;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for M_bore ;
95174     +drop M_bore0 ;
MPRINT(EM_DIAGRAM):   drop M_bore0 ;
95175     +if missing( M_bore ) then do;
MPRINT(EM_DIAGRAM):   if missing( M_bore ) then do;
95176     +   M_bore0 = .;
MPRINT(EM_DIAGRAM):   M_bore0 = .;
95177     +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
95178     +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
95179     +end;
MPRINT(EM_DIAGRAM):   end;
95180     +else do;
MPRINT(EM_DIAGRAM):   else do;
95181     +   length _dm12 $ 12; drop _dm12 ;
MPRINT(EM_DIAGRAM):   length _dm12 $ 12;
MPRINT(EM_DIAGRAM):   drop _dm12 ;
95182     +   _dm12 = put( M_bore , BEST12. );
MPRINT(EM_DIAGRAM):   _dm12 = put( M_bore , BEST12. );
95183     +   %DMNORMIP( _dm12 )
MPRINT(DMNORMIP):   call dmnorm(_dm12,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
95184     +   if _dm12 = '0'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 = '0' then do;
95185     +      M_bore0 = 1;
MPRINT(EM_DIAGRAM):   M_bore0 = 1;
95186     +   end;
MPRINT(EM_DIAGRAM):   end;
95187     +   else if _dm12 = '1'  then do;
MPRINT(EM_DIAGRAM):   else if _dm12 = '1' then do;
95188     +      M_bore0 = -1;
MPRINT(EM_DIAGRAM):   M_bore0 = -1;
95189     +   end;
MPRINT(EM_DIAGRAM):   end;
95190     +   else do;
MPRINT(EM_DIAGRAM):   else do;
95191     +      M_bore0 = .;
MPRINT(EM_DIAGRAM):   M_bore0 = .;
95192     +      substr(_warn_,2,1) = 'U';
MPRINT(EM_DIAGRAM):   substr(_warn_,2,1) = 'U';
95193     +      _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
95194     +   end;
MPRINT(EM_DIAGRAM):   end;
95195     +end;
MPRINT(EM_DIAGRAM):   end;
95196     +
95197     +*** Generate dummy variables for M_num_of_doors ;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for M_num_of_doors ;
95198     +drop M_num_of_doors0 ;
MPRINT(EM_DIAGRAM):   drop M_num_of_doors0 ;
95199     +if missing( M_num_of_doors ) then do;
MPRINT(EM_DIAGRAM):   if missing( M_num_of_doors ) then do;
95200     +   M_num_of_doors0 = .;
MPRINT(EM_DIAGRAM):   M_num_of_doors0 = .;
95201     +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
95202     +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
95203     +end;
MPRINT(EM_DIAGRAM):   end;
95204     +else do;
MPRINT(EM_DIAGRAM):   else do;
95205     +   length _dm12 $ 12; drop _dm12 ;
MPRINT(EM_DIAGRAM):   length _dm12 $ 12;
MPRINT(EM_DIAGRAM):   drop _dm12 ;
95206     +   _dm12 = put( M_num_of_doors , BEST12. );
MPRINT(EM_DIAGRAM):   _dm12 = put( M_num_of_doors , BEST12. );
95207     +   %DMNORMIP( _dm12 )
MPRINT(DMNORMIP):   call dmnorm(_dm12,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
95208     +   if _dm12 = '0'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 = '0' then do;
95209     +      M_num_of_doors0 = 1;
MPRINT(EM_DIAGRAM):   M_num_of_doors0 = 1;
95210     +   end;
MPRINT(EM_DIAGRAM):   end;
95211     +   else if _dm12 = '1'  then do;
MPRINT(EM_DIAGRAM):   else if _dm12 = '1' then do;
95212     +      M_num_of_doors0 = -1;
MPRINT(EM_DIAGRAM):   M_num_of_doors0 = -1;
95213     +   end;
MPRINT(EM_DIAGRAM):   end;
95214     +   else do;
MPRINT(EM_DIAGRAM):   else do;
95215     +      M_num_of_doors0 = .;
MPRINT(EM_DIAGRAM):   M_num_of_doors0 = .;
95216     +      substr(_warn_,2,1) = 'U';
MPRINT(EM_DIAGRAM):   substr(_warn_,2,1) = 'U';
95217     +      _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
95218     +   end;
MPRINT(EM_DIAGRAM):   end;
95219     +end;
MPRINT(EM_DIAGRAM):   end;
95220     +
95221     +*** Generate dummy variables for M_price ;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for M_price ;
95222     +drop M_price0 ;
MPRINT(EM_DIAGRAM):   drop M_price0 ;
95223     +if missing( M_price ) then do;
MPRINT(EM_DIAGRAM):   if missing( M_price ) then do;
95224     +   M_price0 = .;
MPRINT(EM_DIAGRAM):   M_price0 = .;
95225     +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
95226     +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
95227     +end;
MPRINT(EM_DIAGRAM):   end;
95228     +else do;
MPRINT(EM_DIAGRAM):   else do;
95229     +   length _dm12 $ 12; drop _dm12 ;
MPRINT(EM_DIAGRAM):   length _dm12 $ 12;
MPRINT(EM_DIAGRAM):   drop _dm12 ;
95230     +   _dm12 = put( M_price , BEST12. );
MPRINT(EM_DIAGRAM):   _dm12 = put( M_price , BEST12. );
95231     +   %DMNORMIP( _dm12 )
MPRINT(DMNORMIP):   call dmnorm(_dm12,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
95232     +   if _dm12 = '0'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 = '0' then do;
95233     +      M_price0 = 1;
MPRINT(EM_DIAGRAM):   M_price0 = 1;
95234     +   end;
MPRINT(EM_DIAGRAM):   end;
95235     +   else if _dm12 = '1'  then do;
MPRINT(EM_DIAGRAM):   else if _dm12 = '1' then do;
95236     +      M_price0 = -1;
MPRINT(EM_DIAGRAM):   M_price0 = -1;
95237     +   end;
MPRINT(EM_DIAGRAM):   end;
95238     +   else do;
MPRINT(EM_DIAGRAM):   else do;
95239     +      M_price0 = .;
MPRINT(EM_DIAGRAM):   M_price0 = .;
95240     +      substr(_warn_,2,1) = 'U';
MPRINT(EM_DIAGRAM):   substr(_warn_,2,1) = 'U';
95241     +      _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
95242     +   end;
MPRINT(EM_DIAGRAM):   end;
95243     +end;
MPRINT(EM_DIAGRAM):   end;
95244     +
95245     +*** Generate dummy variables for M_stroke ;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for M_stroke ;
95246     +drop M_stroke0 ;
MPRINT(EM_DIAGRAM):   drop M_stroke0 ;
95247     +if missing( M_stroke ) then do;
MPRINT(EM_DIAGRAM):   if missing( M_stroke ) then do;
95248     +   M_stroke0 = .;
MPRINT(EM_DIAGRAM):   M_stroke0 = .;
95249     +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
95250     +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
95251     +end;
MPRINT(EM_DIAGRAM):   end;
95252     +else do;
MPRINT(EM_DIAGRAM):   else do;
95253     +   length _dm12 $ 12; drop _dm12 ;
MPRINT(EM_DIAGRAM):   length _dm12 $ 12;
MPRINT(EM_DIAGRAM):   drop _dm12 ;
95254     +   _dm12 = put( M_stroke , BEST12. );
MPRINT(EM_DIAGRAM):   _dm12 = put( M_stroke , BEST12. );
95255     +   %DMNORMIP( _dm12 )
MPRINT(DMNORMIP):   call dmnorm(_dm12,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
95256     +   if _dm12 = '0'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 = '0' then do;
95257     +      M_stroke0 = 1;
MPRINT(EM_DIAGRAM):   M_stroke0 = 1;
95258     +   end;
MPRINT(EM_DIAGRAM):   end;
95259     +   else if _dm12 = '1'  then do;
MPRINT(EM_DIAGRAM):   else if _dm12 = '1' then do;
95260     +      M_stroke0 = -1;
MPRINT(EM_DIAGRAM):   M_stroke0 = -1;
95261     +   end;
MPRINT(EM_DIAGRAM):   end;
95262     +   else do;
MPRINT(EM_DIAGRAM):   else do;
95263     +      M_stroke0 = .;
MPRINT(EM_DIAGRAM):   M_stroke0 = .;
95264     +      substr(_warn_,2,1) = 'U';
MPRINT(EM_DIAGRAM):   substr(_warn_,2,1) = 'U';
95265     +      _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
95266     +   end;
MPRINT(EM_DIAGRAM):   end;
95267     +end;
MPRINT(EM_DIAGRAM):   end;
95268     +
95269     +*** Generate dummy variables for IMP_num_of_doors ;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for IMP_num_of_doors ;
95270     +drop IMP_num_of_doors2 ;
MPRINT(EM_DIAGRAM):   drop IMP_num_of_doors2 ;
95271     +if missing( IMP_num_of_doors ) then do;
MPRINT(EM_DIAGRAM):   if missing( IMP_num_of_doors ) then do;
95272     +   IMP_num_of_doors2 = .;
MPRINT(EM_DIAGRAM):   IMP_num_of_doors2 = .;
95273     +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
95274     +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
95275     +end;
MPRINT(EM_DIAGRAM):   end;
95276     +else do;
MPRINT(EM_DIAGRAM):   else do;
95277     +   length _dm12 $ 12; drop _dm12 ;
MPRINT(EM_DIAGRAM):   length _dm12 $ 12;
MPRINT(EM_DIAGRAM):   drop _dm12 ;
95278     +   _dm12 = put( IMP_num_of_doors , BEST12. );
MPRINT(EM_DIAGRAM):   _dm12 = put( IMP_num_of_doors , BEST12. );
95279     +   %DMNORMIP( _dm12 )
MPRINT(DMNORMIP):   call dmnorm(_dm12,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
95280     +   if _dm12 = '4'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 = '4' then do;
95281     +      IMP_num_of_doors2 = -1;
MPRINT(EM_DIAGRAM):   IMP_num_of_doors2 = -1;
95282     +   end;
MPRINT(EM_DIAGRAM):   end;
95283     +   else if _dm12 = '2'  then do;
MPRINT(EM_DIAGRAM):   else if _dm12 = '2' then do;
95284     +      IMP_num_of_doors2 = 1;
MPRINT(EM_DIAGRAM):   IMP_num_of_doors2 = 1;
95285     +   end;
MPRINT(EM_DIAGRAM):   end;
95286     +   else do;
MPRINT(EM_DIAGRAM):   else do;
95287     +      IMP_num_of_doors2 = .;
MPRINT(EM_DIAGRAM):   IMP_num_of_doors2 = .;
95288     +      substr(_warn_,2,1) = 'U';
MPRINT(EM_DIAGRAM):   substr(_warn_,2,1) = 'U';
95289     +      _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
95290     +   end;
MPRINT(EM_DIAGRAM):   end;
95291     +end;
MPRINT(EM_DIAGRAM):   end;
95292     +
95293     +*** Generate dummy variables for REP_aspiration ;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for REP_aspiration ;
95294     +drop REP_aspirationS ;
MPRINT(EM_DIAGRAM):   drop REP_aspirationS ;
95295     +if missing( REP_aspiration ) then do;
MPRINT(EM_DIAGRAM):   if missing( REP_aspiration ) then do;
95296     +   REP_aspirationS = .;
MPRINT(EM_DIAGRAM):   REP_aspirationS = .;
95297     +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
95298     +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
95299     +end;
MPRINT(EM_DIAGRAM):   end;
95300     +else do;
MPRINT(EM_DIAGRAM):   else do;
95301     +   length _dm5 $ 5; drop _dm5 ;
MPRINT(EM_DIAGRAM):   length _dm5 $ 5;
MPRINT(EM_DIAGRAM):   drop _dm5 ;
95302     +   _dm5 = put( REP_aspiration , $5. );
MPRINT(EM_DIAGRAM):   _dm5 = put( REP_aspiration , $5. );
95303     +   %DMNORMIP( _dm5 )
MPRINT(DMNORMIP):   call dmnorm(_dm5,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
95304     +   if _dm5 = 'S'  then do;
MPRINT(EM_DIAGRAM):   if _dm5 = 'S' then do;
95305     +      REP_aspirationS = 1;
MPRINT(EM_DIAGRAM):   REP_aspirationS = 1;
95306     +   end;
MPRINT(EM_DIAGRAM):   end;
95307     +   else if _dm5 = 'T'  then do;
MPRINT(EM_DIAGRAM):   else if _dm5 = 'T' then do;
95308     +      REP_aspirationS = -1;
MPRINT(EM_DIAGRAM):   REP_aspirationS = -1;
95309     +   end;
MPRINT(EM_DIAGRAM):   end;
95310     +   else do;
MPRINT(EM_DIAGRAM):   else do;
95311     +      REP_aspirationS = .;
MPRINT(EM_DIAGRAM):   REP_aspirationS = .;
95312     +      substr(_warn_,2,1) = 'U';
MPRINT(EM_DIAGRAM):   substr(_warn_,2,1) = 'U';
95313     +      _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
95314     +   end;
MPRINT(EM_DIAGRAM):   end;
95315     +end;
MPRINT(EM_DIAGRAM):   end;
95316     +
95317     +*** Generate dummy variables for REP_body_style ;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for REP_body_style ;
95318     +drop REP_body_styleC REP_body_styleH REP_body_styleS ;
MPRINT(EM_DIAGRAM):   drop REP_body_styleC REP_body_styleH REP_body_styleS ;
95319     +if missing( REP_body_style ) then do;
MPRINT(EM_DIAGRAM):   if missing( REP_body_style ) then do;
95320     +   REP_body_styleC = .;
MPRINT(EM_DIAGRAM):   REP_body_styleC = .;
95321     +   REP_body_styleH = .;
MPRINT(EM_DIAGRAM):   REP_body_styleH = .;
95322     +   REP_body_styleS = .;
MPRINT(EM_DIAGRAM):   REP_body_styleS = .;
95323     +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
95324     +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
95325     +end;
MPRINT(EM_DIAGRAM):   end;
95326     +else do;
MPRINT(EM_DIAGRAM):   else do;
95327     +   length _dm11 $ 11; drop _dm11 ;
MPRINT(EM_DIAGRAM):   length _dm11 $ 11;
MPRINT(EM_DIAGRAM):   drop _dm11 ;
95328     +   %DMNORMCP( REP_body_style , _dm11 )
MPRINT(DMNORMCP):   _dm11=dmnorm(REP_body_style,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMCP):  );
95329     +   if _dm11 = 'S'  then do;
MPRINT(EM_DIAGRAM):   if _dm11 = 'S' then do;
95330     +      REP_body_styleC = 0;
MPRINT(EM_DIAGRAM):   REP_body_styleC = 0;
95331     +      REP_body_styleH = 0;
MPRINT(EM_DIAGRAM):   REP_body_styleH = 0;
95332     +      REP_body_styleS = 1;
MPRINT(EM_DIAGRAM):   REP_body_styleS = 1;
95333     +   end;
MPRINT(EM_DIAGRAM):   end;
95334     +   else if _dm11 = 'H'  then do;
MPRINT(EM_DIAGRAM):   else if _dm11 = 'H' then do;
95335     +      REP_body_styleC = 0;
MPRINT(EM_DIAGRAM):   REP_body_styleC = 0;
95336     +      REP_body_styleH = 1;
MPRINT(EM_DIAGRAM):   REP_body_styleH = 1;
95337     +      REP_body_styleS = 0;
MPRINT(EM_DIAGRAM):   REP_body_styleS = 0;
95338     +   end;
MPRINT(EM_DIAGRAM):   end;
95339     +   else if _dm11 = 'W'  then do;
MPRINT(EM_DIAGRAM):   else if _dm11 = 'W' then do;
95340     +      REP_body_styleC = -1;
MPRINT(EM_DIAGRAM):   REP_body_styleC = -1;
95341     +      REP_body_styleH = -1;
MPRINT(EM_DIAGRAM):   REP_body_styleH = -1;
95342     +      REP_body_styleS = -1;
MPRINT(EM_DIAGRAM):   REP_body_styleS = -1;
95343     +   end;
MPRINT(EM_DIAGRAM):   end;
95344     +   else if _dm11 = 'C'  then do;
MPRINT(EM_DIAGRAM):   else if _dm11 = 'C' then do;
95345     +      REP_body_styleC = 1;
MPRINT(EM_DIAGRAM):   REP_body_styleC = 1;
95346     +      REP_body_styleH = 0;
MPRINT(EM_DIAGRAM):   REP_body_styleH = 0;
95347     +      REP_body_styleS = 0;
MPRINT(EM_DIAGRAM):   REP_body_styleS = 0;
95348     +   end;
MPRINT(EM_DIAGRAM):   end;
95349     +   else do;
MPRINT(EM_DIAGRAM):   else do;
95350     +      REP_body_styleC = .;
MPRINT(EM_DIAGRAM):   REP_body_styleC = .;
95351     +      REP_body_styleH = .;
MPRINT(EM_DIAGRAM):   REP_body_styleH = .;
95352     +      REP_body_styleS = .;
MPRINT(EM_DIAGRAM):   REP_body_styleS = .;
95353     +      substr(_warn_,2,1) = 'U';
MPRINT(EM_DIAGRAM):   substr(_warn_,2,1) = 'U';
95354     +      _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
95355     +   end;
MPRINT(EM_DIAGRAM):   end;
95356     +end;
MPRINT(EM_DIAGRAM):   end;
95357     +
95358     +*** Generate dummy variables for REP_drive_wheels ;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for REP_drive_wheels ;
95359     +drop REP_drive_wheels4 REP_drive_wheelsF ;
MPRINT(EM_DIAGRAM):   drop REP_drive_wheels4 REP_drive_wheelsF ;
95360     +if missing( REP_drive_wheels ) then do;
MPRINT(EM_DIAGRAM):   if missing( REP_drive_wheels ) then do;
95361     +   REP_drive_wheels4 = .;
MPRINT(EM_DIAGRAM):   REP_drive_wheels4 = .;
95362     +   REP_drive_wheelsF = .;
MPRINT(EM_DIAGRAM):   REP_drive_wheelsF = .;
95363     +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
95364     +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
95365     +end;
MPRINT(EM_DIAGRAM):   end;
95366     +else do;
MPRINT(EM_DIAGRAM):   else do;
95367     +   length _dm3 $ 3; drop _dm3 ;
MPRINT(EM_DIAGRAM):   length _dm3 $ 3;
MPRINT(EM_DIAGRAM):   drop _dm3 ;
95368     +   %DMNORMCP( REP_drive_wheels , _dm3 )
MPRINT(DMNORMCP):   _dm3=dmnorm(REP_drive_wheels,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMCP):  );
95369     +   if _dm3 = 'F'  then do;
MPRINT(EM_DIAGRAM):   if _dm3 = 'F' then do;
95370     +      REP_drive_wheels4 = 0;
MPRINT(EM_DIAGRAM):   REP_drive_wheels4 = 0;
95371     +      REP_drive_wheelsF = 1;
MPRINT(EM_DIAGRAM):   REP_drive_wheelsF = 1;
95372     +   end;
MPRINT(EM_DIAGRAM):   end;
95373     +   else if _dm3 = 'R'  then do;
MPRINT(EM_DIAGRAM):   else if _dm3 = 'R' then do;
95374     +      REP_drive_wheels4 = -1;
MPRINT(EM_DIAGRAM):   REP_drive_wheels4 = -1;
95375     +      REP_drive_wheelsF = -1;
MPRINT(EM_DIAGRAM):   REP_drive_wheelsF = -1;
95376     +   end;
MPRINT(EM_DIAGRAM):   end;
95377     +   else if _dm3 = '4'  then do;
MPRINT(EM_DIAGRAM):   else if _dm3 = '4' then do;
95378     +      REP_drive_wheels4 = 1;
MPRINT(EM_DIAGRAM):   REP_drive_wheels4 = 1;
95379     +      REP_drive_wheelsF = 0;
MPRINT(EM_DIAGRAM):   REP_drive_wheelsF = 0;
95380     +   end;
MPRINT(EM_DIAGRAM):   end;
95381     +   else do;
MPRINT(EM_DIAGRAM):   else do;
95382     +      REP_drive_wheels4 = .;
MPRINT(EM_DIAGRAM):   REP_drive_wheels4 = .;
95383     +      REP_drive_wheelsF = .;
MPRINT(EM_DIAGRAM):   REP_drive_wheelsF = .;
95384     +      substr(_warn_,2,1) = 'U';
MPRINT(EM_DIAGRAM):   substr(_warn_,2,1) = 'U';
95385     +      _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
95386     +   end;
MPRINT(EM_DIAGRAM):   end;
95387     +end;
MPRINT(EM_DIAGRAM):   end;
95388     +
95389     +*** Generate dummy variables for REP_engine_location ;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for REP_engine_location ;
95390     +drop REP_engine_locationF ;
MPRINT(EM_DIAGRAM):   drop REP_engine_locationF ;
95391     +if missing( REP_engine_location ) then do;
MPRINT(EM_DIAGRAM):   if missing( REP_engine_location ) then do;
95392     +   REP_engine_locationF = .;
MPRINT(EM_DIAGRAM):   REP_engine_locationF = .;
95393     +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
95394     +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
95395     +end;
MPRINT(EM_DIAGRAM):   end;
95396     +else do;
MPRINT(EM_DIAGRAM):   else do;
95397     +   length _dm5 $ 5; drop _dm5 ;
MPRINT(EM_DIAGRAM):   length _dm5 $ 5;
MPRINT(EM_DIAGRAM):   drop _dm5 ;
95398     +   %DMNORMCP( REP_engine_location , _dm5 )
MPRINT(DMNORMCP):   _dm5=dmnorm(REP_engine_location,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMCP):  );
95399     +   if _dm5 = 'F'  then do;
MPRINT(EM_DIAGRAM):   if _dm5 = 'F' then do;
95400     +      REP_engine_locationF = 1;
MPRINT(EM_DIAGRAM):   REP_engine_locationF = 1;
95401     +   end;
MPRINT(EM_DIAGRAM):   end;
95402     +   else if _dm5 = 'R'  then do;
MPRINT(EM_DIAGRAM):   else if _dm5 = 'R' then do;
95403     +      REP_engine_locationF = -1;
MPRINT(EM_DIAGRAM):   REP_engine_locationF = -1;
95404     +   end;
MPRINT(EM_DIAGRAM):   end;
95405     +   else do;
MPRINT(EM_DIAGRAM):   else do;
95406     +      REP_engine_locationF = .;
MPRINT(EM_DIAGRAM):   REP_engine_locationF = .;
95407     +      substr(_warn_,2,1) = 'U';
MPRINT(EM_DIAGRAM):   substr(_warn_,2,1) = 'U';
95408     +      _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
95409     +   end;
MPRINT(EM_DIAGRAM):   end;
95410     +end;
MPRINT(EM_DIAGRAM):   end;
95411     +
95412     +*** Generate dummy variables for REP_fuel_system ;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for REP_fuel_system ;
95413     +drop REP_fuel_systemnon_spdi ;
MPRINT(EM_DIAGRAM):   drop REP_fuel_systemnon_spdi ;
95414     +if missing( REP_fuel_system ) then do;
MPRINT(EM_DIAGRAM):   if missing( REP_fuel_system ) then do;
95415     +   REP_fuel_systemnon_spdi = .;
MPRINT(EM_DIAGRAM):   REP_fuel_systemnon_spdi = .;
95416     +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
95417     +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
95418     +end;
MPRINT(EM_DIAGRAM):   end;
95419     +else do;
MPRINT(EM_DIAGRAM):   else do;
95420     +   length _dm8 $ 8; drop _dm8 ;
MPRINT(EM_DIAGRAM):   length _dm8 $ 8;
MPRINT(EM_DIAGRAM):   drop _dm8 ;
95421     +   %DMNORMCP( REP_fuel_system , _dm8 )
MPRINT(DMNORMCP):   _dm8=dmnorm(REP_fuel_system,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMCP):  );
95422     +   if _dm8 = 'NON-SPDI'  then do;
MPRINT(EM_DIAGRAM):   if _dm8 = 'NON-SPDI' then do;
95423     +      REP_fuel_systemnon_spdi = 1;
MPRINT(EM_DIAGRAM):   REP_fuel_systemnon_spdi = 1;
95424     +   end;
MPRINT(EM_DIAGRAM):   end;
95425     +   else if _dm8 = 'SPDI'  then do;
MPRINT(EM_DIAGRAM):   else if _dm8 = 'SPDI' then do;
95426     +      REP_fuel_systemnon_spdi = -1;
MPRINT(EM_DIAGRAM):   REP_fuel_systemnon_spdi = -1;
95427     +   end;
MPRINT(EM_DIAGRAM):   end;
95428     +   else do;
MPRINT(EM_DIAGRAM):   else do;
95429     +      REP_fuel_systemnon_spdi = .;
MPRINT(EM_DIAGRAM):   REP_fuel_systemnon_spdi = .;
95430     +      substr(_warn_,2,1) = 'U';
MPRINT(EM_DIAGRAM):   substr(_warn_,2,1) = 'U';
95431     +      _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
95432     +   end;
MPRINT(EM_DIAGRAM):   end;
95433     +end;
MPRINT(EM_DIAGRAM):   end;
95434     +
95435     +*** Generate dummy variables for REP_fuel_type ;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for REP_fuel_type ;
95436     +drop REP_fuel_typeD ;
MPRINT(EM_DIAGRAM):   drop REP_fuel_typeD ;
95437     +if missing( REP_fuel_type ) then do;
MPRINT(EM_DIAGRAM):   if missing( REP_fuel_type ) then do;
95438     +   REP_fuel_typeD = .;
MPRINT(EM_DIAGRAM):   REP_fuel_typeD = .;
95439     +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
95440     +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
95441     +end;
MPRINT(EM_DIAGRAM):   end;
95442     +else do;
MPRINT(EM_DIAGRAM):   else do;
95443     +   length _dm6 $ 6; drop _dm6 ;
MPRINT(EM_DIAGRAM):   length _dm6 $ 6;
MPRINT(EM_DIAGRAM):   drop _dm6 ;
95444     +   %DMNORMCP( REP_fuel_type , _dm6 )
MPRINT(DMNORMCP):   _dm6=dmnorm(REP_fuel_type,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMCP):  );
95445     +   if _dm6 = 'G'  then do;
MPRINT(EM_DIAGRAM):   if _dm6 = 'G' then do;
95446     +      REP_fuel_typeD = -1;
MPRINT(EM_DIAGRAM):   REP_fuel_typeD = -1;
95447     +   end;
MPRINT(EM_DIAGRAM):   end;
95448     +   else if _dm6 = 'D'  then do;
MPRINT(EM_DIAGRAM):   else if _dm6 = 'D' then do;
95449     +      REP_fuel_typeD = 1;
MPRINT(EM_DIAGRAM):   REP_fuel_typeD = 1;
95450     +   end;
MPRINT(EM_DIAGRAM):   end;
95451     +   else do;
MPRINT(EM_DIAGRAM):   else do;
95452     +      REP_fuel_typeD = .;
MPRINT(EM_DIAGRAM):   REP_fuel_typeD = .;
95453     +      substr(_warn_,2,1) = 'U';
MPRINT(EM_DIAGRAM):   substr(_warn_,2,1) = 'U';
95454     +      _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
95455     +   end;
MPRINT(EM_DIAGRAM):   end;
95456     +end;
MPRINT(EM_DIAGRAM):   end;
95457     +
95458     +*** Generate dummy variables for REP_num_of_cylinders ;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for REP_num_of_cylinders ;
95459     +drop REP_num_of_cylinders__4 ;
MPRINT(EM_DIAGRAM):   drop REP_num_of_cylinders__4 ;
95460     +if missing( REP_num_of_cylinders ) then do;
MPRINT(EM_DIAGRAM):   if missing( REP_num_of_cylinders ) then do;
95461     +   REP_num_of_cylinders__4 = .;
MPRINT(EM_DIAGRAM):   REP_num_of_cylinders__4 = .;
95462     +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
95463     +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
95464     +end;
MPRINT(EM_DIAGRAM):   end;
95465     +else do;
MPRINT(EM_DIAGRAM):   else do;
95466     +   length _dm6 $ 6; drop _dm6 ;
MPRINT(EM_DIAGRAM):   length _dm6 $ 6;
MPRINT(EM_DIAGRAM):   drop _dm6 ;
95467     +   %DMNORMCP( REP_num_of_cylinders , _dm6 )
MPRINT(DMNORMCP):   _dm6=dmnorm(REP_num_of_cylinders,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMCP):  );
95468     +   if _dm6 = '<=4'  then do;
MPRINT(EM_DIAGRAM):   if _dm6 = '<=4' then do;
95469     +      REP_num_of_cylinders__4 = 1;
MPRINT(EM_DIAGRAM):   REP_num_of_cylinders__4 = 1;
95470     +   end;
MPRINT(EM_DIAGRAM):   end;
95471     +   else if _dm6 = '>4'  then do;
MPRINT(EM_DIAGRAM):   else if _dm6 = '>4' then do;
95472     +      REP_num_of_cylinders__4 = -1;
MPRINT(EM_DIAGRAM):   REP_num_of_cylinders__4 = -1;
95473     +   end;
MPRINT(EM_DIAGRAM):   end;
95474     +   else do;
MPRINT(EM_DIAGRAM):   else do;
95475     +      REP_num_of_cylinders__4 = .;
MPRINT(EM_DIAGRAM):   REP_num_of_cylinders__4 = .;
95476     +      substr(_warn_,2,1) = 'U';
MPRINT(EM_DIAGRAM):   substr(_warn_,2,1) = 'U';
95477     +      _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
95478     +   end;
MPRINT(EM_DIAGRAM):   end;
95479     +end;
MPRINT(EM_DIAGRAM):   end;
95480     +
95481     +*** Generate dummy variables for engine_type ;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for engine_type ;
95482     +drop engine_typedohc engine_typel engine_typeohc engine_typeohcf
95483     +        engine_typeohcv ;
MPRINT(EM_DIAGRAM):   drop engine_typedohc engine_typel engine_typeohc engine_typeohcf
engine_typeohcv ;
95484     +*** encoding is sparse, initialize to zero;
MPRINT(EM_DIAGRAM):   *** encoding is sparse, initialize to zero;
95485     +engine_typedohc = 0;
MPRINT(EM_DIAGRAM):   engine_typedohc = 0;
95486     +engine_typel = 0;
MPRINT(EM_DIAGRAM):   engine_typel = 0;
95487     +engine_typeohc = 0;
MPRINT(EM_DIAGRAM):   engine_typeohc = 0;
95488     +engine_typeohcf = 0;
MPRINT(EM_DIAGRAM):   engine_typeohcf = 0;
95489     +engine_typeohcv = 0;
MPRINT(EM_DIAGRAM):   engine_typeohcv = 0;
95490     +if missing( engine_type ) then do;
MPRINT(EM_DIAGRAM):   if missing( engine_type ) then do;
95491     +   engine_typedohc = .;
MPRINT(EM_DIAGRAM):   engine_typedohc = .;
95492     +   engine_typel = .;
MPRINT(EM_DIAGRAM):   engine_typel = .;
95493     +   engine_typeohc = .;
MPRINT(EM_DIAGRAM):   engine_typeohc = .;
95494     +   engine_typeohcf = .;
MPRINT(EM_DIAGRAM):   engine_typeohcf = .;
95495     +   engine_typeohcv = .;
MPRINT(EM_DIAGRAM):   engine_typeohcv = .;
95496     +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
95497     +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
95498     +end;
MPRINT(EM_DIAGRAM):   end;
95499     +else do;
MPRINT(EM_DIAGRAM):   else do;
95500     +   length _dm5 $ 5; drop _dm5 ;
MPRINT(EM_DIAGRAM):   length _dm5 $ 5;
MPRINT(EM_DIAGRAM):   drop _dm5 ;
95501     +   %DMNORMCP( engine_type , _dm5 )
MPRINT(DMNORMCP):   _dm5=dmnorm(engine_type,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMCP):  );
95502     +   if _dm5 = 'OHC'  then do;
MPRINT(EM_DIAGRAM):   if _dm5 = 'OHC' then do;
95503     +      engine_typeohc = 1;
MPRINT(EM_DIAGRAM):   engine_typeohc = 1;
95504     +   end;
MPRINT(EM_DIAGRAM):   end;
95505     +   else if _dm5 = 'OHCF'  then do;
MPRINT(EM_DIAGRAM):   else if _dm5 = 'OHCF' then do;
95506     +      engine_typeohcf = 1;
MPRINT(EM_DIAGRAM):   engine_typeohcf = 1;
95507     +   end;
MPRINT(EM_DIAGRAM):   end;
95508     +   else if _dm5 = 'OHCV'  then do;
MPRINT(EM_DIAGRAM):   else if _dm5 = 'OHCV' then do;
95509     +      engine_typeohcv = 1;
MPRINT(EM_DIAGRAM):   engine_typeohcv = 1;
95510     +   end;
MPRINT(EM_DIAGRAM):   end;
95511     +   else if _dm5 = 'DOHC'  then do;
MPRINT(EM_DIAGRAM):   else if _dm5 = 'DOHC' then do;
95512     +      engine_typedohc = 1;
MPRINT(EM_DIAGRAM):   engine_typedohc = 1;
95513     +   end;
MPRINT(EM_DIAGRAM):   end;
95514     +   else if _dm5 = 'L'  then do;
MPRINT(EM_DIAGRAM):   else if _dm5 = 'L' then do;
95515     +      engine_typel = 1;
MPRINT(EM_DIAGRAM):   engine_typel = 1;
95516     +   end;
MPRINT(EM_DIAGRAM):   end;
95517     +   else if _dm5 = 'ROTOR'  then do;
MPRINT(EM_DIAGRAM):   else if _dm5 = 'ROTOR' then do;
95518     +      engine_typedohc = -1;
MPRINT(EM_DIAGRAM):   engine_typedohc = -1;
95519     +      engine_typel = -1;
MPRINT(EM_DIAGRAM):   engine_typel = -1;
95520     +      engine_typeohc = -1;
MPRINT(EM_DIAGRAM):   engine_typeohc = -1;
95521     +      engine_typeohcf = -1;
MPRINT(EM_DIAGRAM):   engine_typeohcf = -1;
95522     +      engine_typeohcv = -1;
MPRINT(EM_DIAGRAM):   engine_typeohcv = -1;
95523     +   end;
MPRINT(EM_DIAGRAM):   end;
95524     +   else do;
MPRINT(EM_DIAGRAM):   else do;
95525     +      engine_typedohc = .;
MPRINT(EM_DIAGRAM):   engine_typedohc = .;
95526     +      engine_typel = .;
MPRINT(EM_DIAGRAM):   engine_typel = .;
95527     +      engine_typeohc = .;
MPRINT(EM_DIAGRAM):   engine_typeohc = .;
95528     +      engine_typeohcf = .;
MPRINT(EM_DIAGRAM):   engine_typeohcf = .;
95529     +      engine_typeohcv = .;
MPRINT(EM_DIAGRAM):   engine_typeohcv = .;
95530     +      substr(_warn_,2,1) = 'U';
MPRINT(EM_DIAGRAM):   substr(_warn_,2,1) = 'U';
95531     +      _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
95532     +   end;
MPRINT(EM_DIAGRAM):   end;
95533     +end;
MPRINT(EM_DIAGRAM):   end;
95534     +
95535     +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
95536     +*** Checking missing input Interval
95537     +*** *************************;
MPRINT(EM_DIAGRAM):   *** Checking missing input Interval *** *************************;
95538     +
95539     +IF NMISS(
95540     +   LOG_REP_IMP_price ,
95541     +   LOG_REP_compression_ratio ,
95542     +   LOG_REP_engine_size ,
95543     +   REP_IMP_bore ,
95544     +   REP_IMP_stroke ,
95545     +   REP_city_mpg ,
95546     +   REP_curb_weight ,
95547     +   REP_height ,
95548     +   REP_highway_mpg ,
95549     +   REP_horsepower ,
95550     +   REP_length ,
95551     +   REP_peak_rpm ,
95552     +   REP_wheel_base ,
95553     +   REP_width   ) THEN DO;
MPRINT(EM_DIAGRAM):   IF NMISS( LOG_REP_IMP_price , LOG_REP_compression_ratio ,
LOG_REP_engine_size , REP_IMP_bore , REP_IMP_stroke , REP_city_mpg , REP_curb_weight ,
REP_height , REP_highway_mpg , REP_horsepower , REP_length , REP_peak_rpm , REP_wheel_base ,
REP_width ) THEN DO;
95554     +   SUBSTR(_WARN_, 1, 1) = 'M';
MPRINT(EM_DIAGRAM):   SUBSTR(_WARN_, 1, 1) = 'M';
95555     +
95556     +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
95557     +END;
MPRINT(EM_DIAGRAM):   END;
95558     +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
95559     +*** Writing the Node intvl ;
MPRINT(EM_DIAGRAM):   *** Writing the Node intvl ;
95560     +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
95561     +IF _DM_BAD EQ 0 THEN DO;
MPRINT(EM_DIAGRAM):   IF _DM_BAD EQ 0 THEN DO;
95562     +   S_LOG_REP_IMP_price  =    -20.2356185469493 +     2.16855745948401 *
95563     +        LOG_REP_IMP_price ;
MPRINT(EM_DIAGRAM):   S_LOG_REP_IMP_price = -20.2356185469493 + 2.16855745948401 *
LOG_REP_IMP_price ;
95564     +   S_LOG_REP_compression_ratio
95565     +          =    -8.72649819321039 +     3.65742873950677 *
95566     +        LOG_REP_compression_ratio ;
MPRINT(EM_DIAGRAM):   S_LOG_REP_compression_ratio = -8.72649819321039 + 3.65742873950677 *
LOG_REP_compression_ratio ;
95567     +   S_LOG_REP_engine_size  =    -19.3053254119757 +     4.02929302984948 *
95568     +        LOG_REP_engine_size ;
MPRINT(EM_DIAGRAM):   S_LOG_REP_engine_size = -19.3053254119757 + 4.02929302984948 *
LOG_REP_engine_size ;
95569     +   S_REP_IMP_bore  =    -13.3604302656684 +     4.04536293034574 *
95570     +        REP_IMP_bore ;
MPRINT(EM_DIAGRAM):   S_REP_IMP_bore = -13.3604302656684 + 4.04536293034574 * REP_IMP_bore ;
95571     +   S_REP_IMP_stroke  =    -11.3205669287077 +     3.47855217496738 *
95572     +        REP_IMP_stroke ;
MPRINT(EM_DIAGRAM):   S_REP_IMP_stroke = -11.3205669287077 + 3.47855217496738 * REP_IMP_stroke
;
95573     +   S_REP_city_mpg  =    -4.23279255832632 +     0.16535248553422 *
95574     +        REP_city_mpg ;
MPRINT(EM_DIAGRAM):   S_REP_city_mpg = -4.23279255832632 + 0.16535248553422 * REP_city_mpg ;
95575     +   S_REP_curb_weight  =    -5.35597047742979 +     0.00212869810672 *
95576     +        REP_curb_weight ;
MPRINT(EM_DIAGRAM):   S_REP_curb_weight = -5.35597047742979 + 0.00212869810672 *
REP_curb_weight ;
95577     +   S_REP_height  =    -21.8926608140893 +     0.40589318675657 * REP_height ;
MPRINT(EM_DIAGRAM):   S_REP_height = -21.8926608140893 + 0.40589318675657 * REP_height ;
95578     +   S_REP_highway_mpg  =    -4.99166764925563 +     0.16020006928199 *
95579     +        REP_highway_mpg ;
MPRINT(EM_DIAGRAM):   S_REP_highway_mpg = -4.99166764925563 + 0.16020006928199 *
REP_highway_mpg ;
95580     +   S_REP_horsepower  =    -2.74643097264309 +     0.02734944206973 *
95581     +        REP_horsepower ;
MPRINT(EM_DIAGRAM):   S_REP_horsepower = -2.74643097264309 + 0.02734944206973 * REP_horsepower
;
95582     +   S_REP_length  =    -15.2378498365576 +     0.08781104037663 * REP_length ;
MPRINT(EM_DIAGRAM):   S_REP_length = -15.2378498365576 + 0.08781104037663 * REP_length ;
95583     +   S_REP_peak_rpm  =    -10.6885709541859 +     0.00208333904184 *
95584     +        REP_peak_rpm ;
MPRINT(EM_DIAGRAM):   S_REP_peak_rpm = -10.6885709541859 + 0.00208333904184 * REP_peak_rpm ;
95585     +   S_REP_wheel_base  =    -17.8009087180129 +     0.18059887504832 *
95586     +        REP_wheel_base ;
MPRINT(EM_DIAGRAM):   S_REP_wheel_base = -17.8009087180129 + 0.18059887504832 * REP_wheel_base
;
95587     +   S_REP_width  =    -35.9167499004784 +     0.54673628301566 * REP_width ;
MPRINT(EM_DIAGRAM):   S_REP_width = -35.9167499004784 + 0.54673628301566 * REP_width ;
95588     +END;
MPRINT(EM_DIAGRAM):   END;
95589     +ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
95590     +   IF MISSING( LOG_REP_IMP_price ) THEN S_LOG_REP_IMP_price  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( LOG_REP_IMP_price ) THEN S_LOG_REP_IMP_price = . ;
95591     +   ELSE S_LOG_REP_IMP_price  =    -20.2356185469493 +     2.16855745948401 *
95592     +        LOG_REP_IMP_price ;
MPRINT(EM_DIAGRAM):   ELSE S_LOG_REP_IMP_price = -20.2356185469493 + 2.16855745948401 *
LOG_REP_IMP_price ;
95593     +   IF MISSING( LOG_REP_compression_ratio ) THEN S_LOG_REP_compression_ratio
95594     +          = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( LOG_REP_compression_ratio ) THEN S_LOG_REP_compression_ratio
= . ;
95595     +   ELSE S_LOG_REP_compression_ratio
95596     +          =    -8.72649819321039 +     3.65742873950677 *
95597     +        LOG_REP_compression_ratio ;
MPRINT(EM_DIAGRAM):   ELSE S_LOG_REP_compression_ratio = -8.72649819321039 + 3.65742873950677
* LOG_REP_compression_ratio ;
95598     +   IF MISSING( LOG_REP_engine_size ) THEN S_LOG_REP_engine_size  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( LOG_REP_engine_size ) THEN S_LOG_REP_engine_size = . ;
95599     +   ELSE S_LOG_REP_engine_size
95600     +          =    -19.3053254119757 +     4.02929302984948 * LOG_REP_engine_size
95601     +         ;
MPRINT(EM_DIAGRAM):   ELSE S_LOG_REP_engine_size = -19.3053254119757 + 4.02929302984948 *
LOG_REP_engine_size ;
95602     +   IF MISSING( REP_IMP_bore ) THEN S_REP_IMP_bore  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( REP_IMP_bore ) THEN S_REP_IMP_bore = . ;
95603     +   ELSE S_REP_IMP_bore  =    -13.3604302656684 +     4.04536293034574 *
95604     +        REP_IMP_bore ;
MPRINT(EM_DIAGRAM):   ELSE S_REP_IMP_bore = -13.3604302656684 + 4.04536293034574 *
REP_IMP_bore ;
95605     +   IF MISSING( REP_IMP_stroke ) THEN S_REP_IMP_stroke  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( REP_IMP_stroke ) THEN S_REP_IMP_stroke = . ;
95606     +   ELSE S_REP_IMP_stroke  =    -11.3205669287077 +     3.47855217496738 *
95607     +        REP_IMP_stroke ;
MPRINT(EM_DIAGRAM):   ELSE S_REP_IMP_stroke = -11.3205669287077 + 3.47855217496738 *
REP_IMP_stroke ;
95608     +   IF MISSING( REP_city_mpg ) THEN S_REP_city_mpg  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( REP_city_mpg ) THEN S_REP_city_mpg = . ;
95609     +   ELSE S_REP_city_mpg  =    -4.23279255832632 +     0.16535248553422 *
95610     +        REP_city_mpg ;
MPRINT(EM_DIAGRAM):   ELSE S_REP_city_mpg = -4.23279255832632 + 0.16535248553422 *
REP_city_mpg ;
95611     +   IF MISSING( REP_curb_weight ) THEN S_REP_curb_weight  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( REP_curb_weight ) THEN S_REP_curb_weight = . ;
95612     +   ELSE S_REP_curb_weight  =    -5.35597047742979 +     0.00212869810672 *
95613     +        REP_curb_weight ;
MPRINT(EM_DIAGRAM):   ELSE S_REP_curb_weight = -5.35597047742979 + 0.00212869810672 *
REP_curb_weight ;
95614     +   IF MISSING( REP_height ) THEN S_REP_height  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( REP_height ) THEN S_REP_height = . ;
95615     +   ELSE S_REP_height  =    -21.8926608140893 +     0.40589318675657 *
95616     +        REP_height ;
MPRINT(EM_DIAGRAM):   ELSE S_REP_height = -21.8926608140893 + 0.40589318675657 * REP_height ;
95617     +   IF MISSING( REP_highway_mpg ) THEN S_REP_highway_mpg  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( REP_highway_mpg ) THEN S_REP_highway_mpg = . ;
95618     +   ELSE S_REP_highway_mpg  =    -4.99166764925563 +     0.16020006928199 *
95619     +        REP_highway_mpg ;
MPRINT(EM_DIAGRAM):   ELSE S_REP_highway_mpg = -4.99166764925563 + 0.16020006928199 *
REP_highway_mpg ;
95620     +   IF MISSING( REP_horsepower ) THEN S_REP_horsepower  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( REP_horsepower ) THEN S_REP_horsepower = . ;
95621     +   ELSE S_REP_horsepower  =    -2.74643097264309 +     0.02734944206973 *
95622     +        REP_horsepower ;
MPRINT(EM_DIAGRAM):   ELSE S_REP_horsepower = -2.74643097264309 + 0.02734944206973 *
REP_horsepower ;
95623     +   IF MISSING( REP_length ) THEN S_REP_length  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( REP_length ) THEN S_REP_length = . ;
95624     +   ELSE S_REP_length  =    -15.2378498365576 +     0.08781104037663 *
95625     +        REP_length ;
MPRINT(EM_DIAGRAM):   ELSE S_REP_length = -15.2378498365576 + 0.08781104037663 * REP_length ;
95626     +   IF MISSING( REP_peak_rpm ) THEN S_REP_peak_rpm  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( REP_peak_rpm ) THEN S_REP_peak_rpm = . ;
95627     +   ELSE S_REP_peak_rpm  =    -10.6885709541859 +     0.00208333904184 *
95628     +        REP_peak_rpm ;
MPRINT(EM_DIAGRAM):   ELSE S_REP_peak_rpm = -10.6885709541859 + 0.00208333904184 *
REP_peak_rpm ;
95629     +   IF MISSING( REP_wheel_base ) THEN S_REP_wheel_base  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( REP_wheel_base ) THEN S_REP_wheel_base = . ;
95630     +   ELSE S_REP_wheel_base  =    -17.8009087180129 +     0.18059887504832 *
95631     +        REP_wheel_base ;
MPRINT(EM_DIAGRAM):   ELSE S_REP_wheel_base = -17.8009087180129 + 0.18059887504832 *
REP_wheel_base ;
95632     +   IF MISSING( REP_width ) THEN S_REP_width  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( REP_width ) THEN S_REP_width = . ;
95633     +   ELSE S_REP_width  =    -35.9167499004784 +     0.54673628301566 * REP_width
95634     +         ;
MPRINT(EM_DIAGRAM):   ELSE S_REP_width = -35.9167499004784 + 0.54673628301566 * REP_width ;
95635     +END;
MPRINT(EM_DIAGRAM):   END;
95636     +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
95637     +*** Writing the Node bin ;
MPRINT(EM_DIAGRAM):   *** Writing the Node bin ;
95638     +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
95639     +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
95640     +*** Writing the Node nom ;
MPRINT(EM_DIAGRAM):   *** Writing the Node nom ;
95641     +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
95642     +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
95643     +*** Writing the Node H1 ;
MPRINT(EM_DIAGRAM):   *** Writing the Node H1 ;
95644     +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
95645     +IF _DM_BAD EQ 0 THEN DO;
MPRINT(EM_DIAGRAM):   IF _DM_BAD EQ 0 THEN DO;
95646     +   H11  =     0.14114604923302 * S_LOG_REP_IMP_price
95647     +          +     0.22107710355073 * S_LOG_REP_compression_ratio
95648     +          +     0.01063730358557 * S_LOG_REP_engine_size
95649     +          +    -0.10014119004384 * S_REP_IMP_bore  +    -0.03759863264035 *
95650     +        S_REP_IMP_stroke  +     0.07482450466947 * S_REP_city_mpg
95651     +          +    -0.28536465017016 * S_REP_curb_weight
95652     +          +     0.11632138704241 * S_REP_height  +     0.24359872537276 *
95653     +        S_REP_highway_mpg  +     0.11053757208758 * S_REP_horsepower
95654     +          +    -0.07045784528695 * S_REP_length  +    -0.21762346468185 *
95655     +        S_REP_peak_rpm  +    -0.17325144725852 * S_REP_wheel_base
95656     +          +     0.37161591541424 * S_REP_width ;
MPRINT(EM_DIAGRAM):   H11 = 0.14114604923302 * S_LOG_REP_IMP_price + 0.22107710355073 *
S_LOG_REP_compression_ratio + 0.01063730358557 * S_LOG_REP_engine_size + -0.10014119004384 *
S_REP_IMP_bore + -0.03759863264035 * S_REP_IMP_stroke + 0.07482450466947 * S_REP_city_mpg +
-0.28536465017016 * S_REP_curb_weight + 0.11632138704241 * S_REP_height + 0.24359872537276 *
S_REP_highway_mpg + 0.11053757208758 * S_REP_horsepower + -0.07045784528695 * S_REP_length +
-0.21762346468185 * S_REP_peak_rpm + -0.17325144725852 * S_REP_wheel_base + 0.37161591541424 *
S_REP_width ;
95657     +   H12  =     0.05896220480011 * S_LOG_REP_IMP_price
95658     +          +     0.18017576649352 * S_LOG_REP_compression_ratio
95659     +          +     0.13666603498983 * S_LOG_REP_engine_size
95660     +          +     0.08905307497507 * S_REP_IMP_bore  +     0.08450123024202 *
95661     +        S_REP_IMP_stroke  +      0.0953955201221 * S_REP_city_mpg
95662     +          +     0.06997312342759 * S_REP_curb_weight
95663     +          +     0.11454978606317 * S_REP_height  +    -0.19856329211228 *
95664     +        S_REP_highway_mpg  +     0.12027932441722 * S_REP_horsepower
95665     +          +      0.2974258001212 * S_REP_length  +     0.23235745908363 *
95666     +        S_REP_peak_rpm  +    -0.16918609268289 * S_REP_wheel_base
95667     +          +    -0.23250714188118 * S_REP_width ;
MPRINT(EM_DIAGRAM):   H12 = 0.05896220480011 * S_LOG_REP_IMP_price + 0.18017576649352 *
S_LOG_REP_compression_ratio + 0.13666603498983 * S_LOG_REP_engine_size + 0.08905307497507 *
S_REP_IMP_bore + 0.08450123024202 * S_REP_IMP_stroke + 0.0953955201221 * S_REP_city_mpg +
0.06997312342759 * S_REP_curb_weight + 0.11454978606317 * S_REP_height + -0.19856329211228 *
S_REP_highway_mpg + 0.12027932441722 * S_REP_horsepower + 0.2974258001212 * S_REP_length +
0.23235745908363 * S_REP_peak_rpm + -0.16918609268289 * S_REP_wheel_base + -0.23250714188118 *
S_REP_width ;
95668     +   H13  =    -0.12906110115101 * S_LOG_REP_IMP_price
95669     +          +    -0.02233821917203 * S_LOG_REP_compression_ratio
95670     +          +    -0.35091523886958 * S_LOG_REP_engine_size
95671     +          +    -0.41460804807699 * S_REP_IMP_bore  +    -0.24839281719309 *
95672     +        S_REP_IMP_stroke  +    -0.70537276068634 * S_REP_city_mpg
95673     +          +    -0.58021382402741 * S_REP_curb_weight
95674     +          +    -0.22826753012592 * S_REP_height  +      0.0169914306349 *
95675     +        S_REP_highway_mpg  +     0.10463377560074 * S_REP_horsepower
95676     +          +     0.35288922545253 * S_REP_length  +    -0.19481970154693 *
95677     +        S_REP_peak_rpm  +    -0.80556145797505 * S_REP_wheel_base
95678     +          +     0.51492976697395 * S_REP_width ;
MPRINT(EM_DIAGRAM):   H13 = -0.12906110115101 * S_LOG_REP_IMP_price + -0.02233821917203 *
S_LOG_REP_compression_ratio + -0.35091523886958 * S_LOG_REP_engine_size + -0.41460804807699 *
S_REP_IMP_bore + -0.24839281719309 * S_REP_IMP_stroke + -0.70537276068634 * S_REP_city_mpg +
-0.58021382402741 * S_REP_curb_weight + -0.22826753012592 * S_REP_height + 0.0169914306349 *
S_REP_highway_mpg + 0.10463377560074 * S_REP_horsepower + 0.35288922545253 * S_REP_length +
-0.19481970154693 * S_REP_peak_rpm + -0.80556145797505 * S_REP_wheel_base + 0.51492976697395 *
S_REP_width ;
95679     +   H11  = H11  +    -0.09761603527807 * M_bore0  +     0.32345868357271 *
95680     +        M_num_of_doors0  +     0.20084593155895 * M_price0
95681     +          +    -0.20994977796409 * M_stroke0 ;
MPRINT(EM_DIAGRAM):   H11 = H11 + -0.09761603527807 * M_bore0 + 0.32345868357271 *
M_num_of_doors0 + 0.20084593155895 * M_price0 + -0.20994977796409 * M_stroke0 ;
95682     +   H12  = H12  +    -0.06788596638774 * M_bore0  +     0.34399071242393 *
95683     +        M_num_of_doors0  +      0.0463196246907 * M_price0
95684     +          +    -0.26485643855048 * M_stroke0 ;
MPRINT(EM_DIAGRAM):   H12 = H12 + -0.06788596638774 * M_bore0 + 0.34399071242393 *
M_num_of_doors0 + 0.0463196246907 * M_price0 + -0.26485643855048 * M_stroke0 ;
95685     +   H13  = H13  +    -0.35051306126484 * M_bore0  +    -0.02794915457366 *
95686     +        M_num_of_doors0  +     0.31309425299639 * M_price0
95687     +          +    -0.47776887747706 * M_stroke0 ;
MPRINT(EM_DIAGRAM):   H13 = H13 + -0.35051306126484 * M_bore0 + -0.02794915457366 *
M_num_of_doors0 + 0.31309425299639 * M_price0 + -0.47776887747706 * M_stroke0 ;
95688     +   H11  = H11  +     0.06100363905736 * IMP_num_of_doors2
95689     +          +     0.10122536313104 * REP_aspirationS  +    -0.17959848113703 *
95690     +        REP_body_styleC  +    -0.39712858179454 * REP_body_styleH
95691     +          +     0.04767092759288 * REP_body_styleS  +     0.10233875091231 *
95692     +        REP_drive_wheels4  +    -0.09500800631183 * REP_drive_wheelsF
95693     +          +     0.07460109227871 * REP_engine_locationF
95694     +          +     0.26300770846072 * REP_fuel_systemnon_spdi
95695     +          +     0.23650863802652 * REP_fuel_typeD  +    -0.32049705686665 *
95696     +        REP_num_of_cylinders__4  +     0.06805374196668 * engine_typedohc
95697     +          +     0.16364588242528 * engine_typel  +    -0.05913911607092 *
95698     +        engine_typeohc  +     0.18536496535236 * engine_typeohcf
95699     +          +    -0.09174498568145 * engine_typeohcv ;
MPRINT(EM_DIAGRAM):   H11 = H11 + 0.06100363905736 * IMP_num_of_doors2 + 0.10122536313104 *
REP_aspirationS + -0.17959848113703 * REP_body_styleC + -0.39712858179454 * REP_body_styleH +
0.04767092759288 * REP_body_styleS + 0.10233875091231 * REP_drive_wheels4 + -0.09500800631183
* REP_drive_wheelsF + 0.07460109227871 * REP_engine_locationF + 0.26300770846072 *
REP_fuel_systemnon_spdi + 0.23650863802652 * REP_fuel_typeD + -0.32049705686665 *
REP_num_of_cylinders__4 + 0.06805374196668 * engine_typedohc + 0.16364588242528 * engine_typel
+ -0.05913911607092 * engine_typeohc + 0.18536496535236 * engine_typeohcf + -0.09174498568145
* engine_typeohcv ;
95700     +   H12  = H12  +    -0.04288679296194 * IMP_num_of_doors2
95701     +          +    -0.09067917550664 * REP_aspirationS  +    -0.00898495387833 *
95702     +        REP_body_styleC  +       0.159812944318 * REP_body_styleH
95703     +          +      0.0711141581938 * REP_body_styleS  +     0.10210979168732 *
95704     +        REP_drive_wheels4  +     -0.3538576414303 * REP_drive_wheelsF
95705     +          +    -0.16393166907394 * REP_engine_locationF
95706     +          +     0.11934989985506 * REP_fuel_systemnon_spdi
95707     +          +     0.02352084105235 * REP_fuel_typeD  +    -0.11143166546072 *
95708     +        REP_num_of_cylinders__4  +    -0.10331230763277 * engine_typedohc
95709     +          +     0.09972953235323 * engine_typel  +    -0.02037020133855 *
95710     +        engine_typeohc  +    -0.10116492050927 * engine_typeohcf
95711     +          +    -0.29902685656789 * engine_typeohcv ;
MPRINT(EM_DIAGRAM):   H12 = H12 + -0.04288679296194 * IMP_num_of_doors2 + -0.09067917550664 *
REP_aspirationS + -0.00898495387833 * REP_body_styleC + 0.159812944318 * REP_body_styleH +
0.0711141581938 * REP_body_styleS + 0.10210979168732 * REP_drive_wheels4 + -0.3538576414303 *
REP_drive_wheelsF + -0.16393166907394 * REP_engine_locationF + 0.11934989985506 *
REP_fuel_systemnon_spdi + 0.02352084105235 * REP_fuel_typeD + -0.11143166546072 *
REP_num_of_cylinders__4 + -0.10331230763277 * engine_typedohc + 0.09972953235323 *
engine_typel + -0.02037020133855 * engine_typeohc + -0.10116492050927 * engine_typeohcf +
-0.29902685656789 * engine_typeohcv ;
95712     +   H13  = H13  +     0.57885984374832 * IMP_num_of_doors2
95713     +          +    -0.06313012281847 * REP_aspirationS  +     0.18273714441841 *
95714     +        REP_body_styleC  +    -0.00453951283747 * REP_body_styleH
95715     +          +      0.0466508929301 * REP_body_styleS  +    -0.04931547332574 *
95716     +        REP_drive_wheels4  +     0.07528309204941 * REP_drive_wheelsF
95717     +          +    -0.01679674641439 * REP_engine_locationF
95718     +          +      -0.148583011616 * REP_fuel_systemnon_spdi
95719     +          +     0.01206718731045 * REP_fuel_typeD  +     0.01468742261582 *
95720     +        REP_num_of_cylinders__4  +     0.07027057170791 * engine_typedohc
95721     +          +     0.20558093284809 * engine_typel  +     0.55435637562404 *
95722     +        engine_typeohc  +    -0.38590829668888 * engine_typeohcf
95723     +          +      0.0022264257698 * engine_typeohcv ;
MPRINT(EM_DIAGRAM):   H13 = H13 + 0.57885984374832 * IMP_num_of_doors2 + -0.06313012281847 *
REP_aspirationS + 0.18273714441841 * REP_body_styleC + -0.00453951283747 * REP_body_styleH +
0.0466508929301 * REP_body_styleS + -0.04931547332574 * REP_drive_wheels4 + 0.07528309204941 *
REP_drive_wheelsF + -0.01679674641439 * REP_engine_locationF + -0.148583011616 *
REP_fuel_systemnon_spdi + 0.01206718731045 * REP_fuel_typeD + 0.01468742261582 *
REP_num_of_cylinders__4 + 0.07027057170791 * engine_typedohc + 0.20558093284809 * engine_typel
+ 0.55435637562404 * engine_typeohc + -0.38590829668888 * engine_typeohcf + 0.0022264257698 *
engine_typeohcv ;
95724     +   H11  =    -0.54817324462785 + H11 ;
MPRINT(EM_DIAGRAM):   H11 = -0.54817324462785 + H11 ;
95725     +   H12  =    -0.46773956921898 + H12 ;
MPRINT(EM_DIAGRAM):   H12 = -0.46773956921898 + H12 ;
95726     +   H13  =     0.60022135338159 + H13 ;
MPRINT(EM_DIAGRAM):   H13 = 0.60022135338159 + H13 ;
95727     +   H11  = TANH(H11 );
MPRINT(EM_DIAGRAM):   H11 = TANH(H11 );
95728     +   H12  = TANH(H12 );
MPRINT(EM_DIAGRAM):   H12 = TANH(H12 );
95729     +   H13  = TANH(H13 );
MPRINT(EM_DIAGRAM):   H13 = TANH(H13 );
95730     +END;
MPRINT(EM_DIAGRAM):   END;
95731     +ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
95732     +   H11  = .;
MPRINT(EM_DIAGRAM):   H11 = .;
95733     +   H12  = .;
MPRINT(EM_DIAGRAM):   H12 = .;
95734     +   H13  = .;
MPRINT(EM_DIAGRAM):   H13 = .;
95735     +END;
MPRINT(EM_DIAGRAM):   END;
95736     +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
95737     +*** Writing the Node Risk ;
MPRINT(EM_DIAGRAM):   *** Writing the Node Risk ;
95738     +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
95739     +
95740     +*** Generate dummy variables for Risk ;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for Risk ;
95741     +drop Risk1 Risk0 ;
MPRINT(EM_DIAGRAM):   drop Risk1 Risk0 ;
95742     +label F_Risk = 'From: Risk' ;
MPRINT(EM_DIAGRAM):   label F_Risk = 'From: Risk' ;
95743     +length F_Risk $ 12;
MPRINT(EM_DIAGRAM):   length F_Risk $ 12;
95744     +F_Risk = put( Risk , BEST12. );
MPRINT(EM_DIAGRAM):   F_Risk = put( Risk , BEST12. );
95745     +%DMNORMIP( F_Risk )
MPRINT(DMNORMIP):   call dmnorm(F_Risk,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
95746     +if missing( Risk ) then do;
MPRINT(EM_DIAGRAM):   if missing( Risk ) then do;
95747     +   Risk1 = .;
MPRINT(EM_DIAGRAM):   Risk1 = .;
95748     +   Risk0 = .;
MPRINT(EM_DIAGRAM):   Risk0 = .;
95749     +end;
MPRINT(EM_DIAGRAM):   end;
95750     +else do;
MPRINT(EM_DIAGRAM):   else do;
95751     +   if F_Risk = '1'  then do;
MPRINT(EM_DIAGRAM):   if F_Risk = '1' then do;
95752     +      Risk1 = 1;
MPRINT(EM_DIAGRAM):   Risk1 = 1;
95753     +      Risk0 = 0;
MPRINT(EM_DIAGRAM):   Risk0 = 0;
95754     +   end;
MPRINT(EM_DIAGRAM):   end;
95755     +   else if F_Risk = '0'  then do;
MPRINT(EM_DIAGRAM):   else if F_Risk = '0' then do;
95756     +      Risk1 = 0;
MPRINT(EM_DIAGRAM):   Risk1 = 0;
95757     +      Risk0 = 1;
MPRINT(EM_DIAGRAM):   Risk0 = 1;
95758     +   end;
MPRINT(EM_DIAGRAM):   end;
95759     +   else do;
MPRINT(EM_DIAGRAM):   else do;
95760     +      Risk1 = .;
MPRINT(EM_DIAGRAM):   Risk1 = .;
95761     +      Risk0 = .;
MPRINT(EM_DIAGRAM):   Risk0 = .;
95762     +   end;
MPRINT(EM_DIAGRAM):   end;
95763     +end;
MPRINT(EM_DIAGRAM):   end;
95764     +IF _DM_BAD EQ 0 THEN DO;
MPRINT(EM_DIAGRAM):   IF _DM_BAD EQ 0 THEN DO;
95765     +   P_Risk1  =     1.21348641298657 * H11  +     0.09729650872853 * H12
95766     +          +     5.64979482539338 * H13 ;
MPRINT(EM_DIAGRAM):   P_Risk1 = 1.21348641298657 * H11 + 0.09729650872853 * H12 +
5.64979482539338 * H13 ;
95767     +   P_Risk1  =    -0.00460119400654 + P_Risk1 ;
MPRINT(EM_DIAGRAM):   P_Risk1 = -0.00460119400654 + P_Risk1 ;
95768     +   P_Risk0  = 0;
MPRINT(EM_DIAGRAM):   P_Risk0 = 0;
95769     +   _MAX_ = MAX (P_Risk1 , P_Risk0 );
MPRINT(EM_DIAGRAM):   _MAX_ = MAX (P_Risk1 , P_Risk0 );
95770     +   _SUM_ = 0.;
MPRINT(EM_DIAGRAM):   _SUM_ = 0.;
95771     +   P_Risk1  = EXP(P_Risk1  - _MAX_);
MPRINT(EM_DIAGRAM):   P_Risk1 = EXP(P_Risk1 - _MAX_);
95772     +   _SUM_ = _SUM_ + P_Risk1 ;
MPRINT(EM_DIAGRAM):   _SUM_ = _SUM_ + P_Risk1 ;
95773     +   P_Risk0  = EXP(P_Risk0  - _MAX_);
MPRINT(EM_DIAGRAM):   P_Risk0 = EXP(P_Risk0 - _MAX_);
95774     +   _SUM_ = _SUM_ + P_Risk0 ;
MPRINT(EM_DIAGRAM):   _SUM_ = _SUM_ + P_Risk0 ;
95775     +   P_Risk1  = P_Risk1  / _SUM_;
MPRINT(EM_DIAGRAM):   P_Risk1 = P_Risk1 / _SUM_;
95776     +   P_Risk0  = P_Risk0  / _SUM_;
MPRINT(EM_DIAGRAM):   P_Risk0 = P_Risk0 / _SUM_;
95777     +END;
MPRINT(EM_DIAGRAM):   END;
95778     +ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
95779     +   P_Risk1  = .;
MPRINT(EM_DIAGRAM):   P_Risk1 = .;
95780     +   P_Risk0  = .;
MPRINT(EM_DIAGRAM):   P_Risk0 = .;
95781     +END;
MPRINT(EM_DIAGRAM):   END;
95782     +IF _DM_BAD EQ 1 THEN DO;
MPRINT(EM_DIAGRAM):   IF _DM_BAD EQ 1 THEN DO;
95783     +   P_Risk1  =                 0.54;
MPRINT(EM_DIAGRAM):   P_Risk1 = 0.54;
95784     +   P_Risk0  =                 0.46;
MPRINT(EM_DIAGRAM):   P_Risk0 = 0.46;
95785     +END;
MPRINT(EM_DIAGRAM):   END;
95786     +*** *****************************;
MPRINT(EM_DIAGRAM):   *** *****************************;
95787     +*** Writing the Residuals  of the Node Risk ;
MPRINT(EM_DIAGRAM):   *** Writing the Residuals of the Node Risk ;
95788     +*** ******************************;
MPRINT(EM_DIAGRAM):   *** ******************************;
95789     +IF MISSING( Risk1 ) THEN R_Risk1  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( Risk1 ) THEN R_Risk1 = . ;
95790     +ELSE R_Risk1  = Risk1  - P_Risk1 ;
MPRINT(EM_DIAGRAM):   ELSE R_Risk1 = Risk1 - P_Risk1 ;
95791     +IF MISSING( Risk0 ) THEN R_Risk0  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( Risk0 ) THEN R_Risk0 = . ;
95792     +ELSE R_Risk0  = Risk0  - P_Risk0 ;
MPRINT(EM_DIAGRAM):   ELSE R_Risk0 = Risk0 - P_Risk0 ;
95793     +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
95794     +*** Writing the I_Risk  AND U_Risk ;
MPRINT(EM_DIAGRAM):   *** Writing the I_Risk AND U_Risk ;
95795     +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
95796     +_MAXP_ = P_Risk1 ;
MPRINT(EM_DIAGRAM):   _MAXP_ = P_Risk1 ;
95797     +I_Risk  = "1           " ;
MPRINT(EM_DIAGRAM):   I_Risk = "1           " ;
95798     +U_Risk  =                    1;
MPRINT(EM_DIAGRAM):   U_Risk = 1;
95799     +IF( _MAXP_ LT P_Risk0  ) THEN DO;
MPRINT(EM_DIAGRAM):   IF( _MAXP_ LT P_Risk0 ) THEN DO;
95800     +   _MAXP_ = P_Risk0 ;
MPRINT(EM_DIAGRAM):   _MAXP_ = P_Risk0 ;
95801     +   I_Risk  = "0           " ;
MPRINT(EM_DIAGRAM):   I_Risk = "0           " ;
95802     +   U_Risk  =                    0;
MPRINT(EM_DIAGRAM):   U_Risk = 0;
95803     +END;
MPRINT(EM_DIAGRAM):   END;
95804     +********************************;
MPRINT(EM_DIAGRAM):   ********************************;
95805     +*** End Scoring Code for Neural;
MPRINT(EM_DIAGRAM):   *** End Scoring Code for Neural;
95806     +********************************;
MPRINT(EM_DIAGRAM):   ********************************;
95807     +drop
95808     +H11
95809     +H12
95810     +H13
95811     +;
MPRINT(EM_DIAGRAM):   drop H11 H12 H13 ;
95812     +drop S_:;
MPRINT(EM_DIAGRAM):   drop S_:;
NOTE: %INCLUDE (level 1) ending.
MPRINT(EM_DIAGRAM):   run;
95813      run;
 
NOTE: DATA STEP view saved on file EMWS1.NEURAL2_TRAIN.
NOTE: A stored DATA STEP view cannot run under a different operating system.
NOTE: View EMWS1.REPL2_TRAIN.VIEW used (Total process time):
      real time           0.25 seconds
      cpu time            0.18 seconds
 
NOTE: DATA statement used (Total process time):
      real time           0.27 seconds
      cpu time            0.21 seconds
 
 
MPRINT(EM_DIAGRAM):   quit;
95814      quit;
95815      filename emflow;
MPRINT(EM_DIAGRAM):   filename emflow;
NOTE: Fileref EMFLOW has been deassigned.
95816      filename emflow "H:\746\Decision Tree test\Workspaces\EMWS1\Neural2\EMFLOWSCORE.sas"
95816    ! ;
MPRINT(EM_DIAGRAM):    filename emflow "H:\746\Decision Tree
test\Workspaces\EMWS1\Neural2\EMFLOWSCORE.sas";
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Neural2: Scoring VALIDATE data;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
95817      *------------------------------------------------------------*;
95818      * Neural2: Scoring VALIDATE data;
95819      *------------------------------------------------------------*;
95820      data EMWS1.Neural2_VALIDATE
95821      / view=EMWS1.Neural2_VALIDATE
95822      ;
MPRINT(EM_DIAGRAM):   data EMWS1.Neural2_VALIDATE / view=EMWS1.Neural2_VALIDATE ;
95823      set EMWS1.Repl2_VALIDATE
95824      ;
MPRINT(EM_DIAGRAM):   set EMWS1.Repl2_VALIDATE ;
95825      %inc emflow;
NOTE: %INCLUDE (level 1) file EMFLOW is file H:\746\Decision Tree
      test\Workspaces\EMWS1\Neural2\EMFLOWSCORE.sas.
95826     +***********************************;
MPRINT(EM_DIAGRAM):   ***********************************;
95827     +*** Begin Scoring Code for Neural;
MPRINT(EM_DIAGRAM):   *** Begin Scoring Code for Neural;
95828     +***********************************;
MPRINT(EM_DIAGRAM):   ***********************************;
95829     +DROP _DM_BAD _EPS _NOCL_ _MAX_ _MAXP_ _SUM_ _NTRIALS;
MPRINT(EM_DIAGRAM):   DROP _DM_BAD _EPS _NOCL_ _MAX_ _MAXP_ _SUM_ _NTRIALS;
95830     + _DM_BAD = 0;
MPRINT(EM_DIAGRAM):   _DM_BAD = 0;
95831     + _NOCL_ = .;
MPRINT(EM_DIAGRAM):   _NOCL_ = .;
95832     + _MAX_ = .;
MPRINT(EM_DIAGRAM):   _MAX_ = .;
95833     + _MAXP_ = .;
MPRINT(EM_DIAGRAM):   _MAXP_ = .;
95834     + _SUM_ = .;
MPRINT(EM_DIAGRAM):   _SUM_ = .;
95835     + _NTRIALS = .;
MPRINT(EM_DIAGRAM):   _NTRIALS = .;
95836     + _EPS =                1E-10;
MPRINT(EM_DIAGRAM):   _EPS = 1E-10;
95837     +LENGTH _WARN_ $4
95838     +      F_Risk  $ 12
95839     +;
MPRINT(EM_DIAGRAM):   LENGTH _WARN_ $4 F_Risk $ 12 ;
95840     +      label S_LOG_REP_IMP_price = 'Standard: LOG_REP_IMP_price' ;
MPRINT(EM_DIAGRAM):   label S_LOG_REP_IMP_price = 'Standard: LOG_REP_IMP_price' ;
95841     +
95842     +      label S_LOG_REP_compression_ratio =
95843     +'Standard: LOG_REP_compression_ratio' ;
MPRINT(EM_DIAGRAM):   label S_LOG_REP_compression_ratio = 'Standard:
LOG_REP_compression_ratio' ;
95844     +
95845     +      label S_LOG_REP_engine_size = 'Standard: LOG_REP_engine_size' ;
MPRINT(EM_DIAGRAM):   label S_LOG_REP_engine_size = 'Standard: LOG_REP_engine_size' ;
95846     +
95847     +      label S_REP_IMP_bore = 'Standard: REP_IMP_bore' ;
MPRINT(EM_DIAGRAM):   label S_REP_IMP_bore = 'Standard: REP_IMP_bore' ;
95848     +
95849     +      label S_REP_IMP_stroke = 'Standard: REP_IMP_stroke' ;
MPRINT(EM_DIAGRAM):   label S_REP_IMP_stroke = 'Standard: REP_IMP_stroke' ;
95850     +
95851     +      label S_REP_city_mpg = 'Standard: REP_city_mpg' ;
MPRINT(EM_DIAGRAM):   label S_REP_city_mpg = 'Standard: REP_city_mpg' ;
95852     +
95853     +      label S_REP_curb_weight = 'Standard: REP_curb_weight' ;
MPRINT(EM_DIAGRAM):   label S_REP_curb_weight = 'Standard: REP_curb_weight' ;
95854     +
95855     +      label S_REP_height = 'Standard: REP_height' ;
MPRINT(EM_DIAGRAM):   label S_REP_height = 'Standard: REP_height' ;
95856     +
95857     +      label S_REP_highway_mpg = 'Standard: REP_highway_mpg' ;
MPRINT(EM_DIAGRAM):   label S_REP_highway_mpg = 'Standard: REP_highway_mpg' ;
95858     +
95859     +      label S_REP_horsepower = 'Standard: REP_horsepower' ;
MPRINT(EM_DIAGRAM):   label S_REP_horsepower = 'Standard: REP_horsepower' ;
95860     +
95861     +      label S_REP_length = 'Standard: REP_length' ;
MPRINT(EM_DIAGRAM):   label S_REP_length = 'Standard: REP_length' ;
95862     +
95863     +      label S_REP_peak_rpm = 'Standard: REP_peak_rpm' ;
MPRINT(EM_DIAGRAM):   label S_REP_peak_rpm = 'Standard: REP_peak_rpm' ;
95864     +
95865     +      label S_REP_wheel_base = 'Standard: REP_wheel_base' ;
MPRINT(EM_DIAGRAM):   label S_REP_wheel_base = 'Standard: REP_wheel_base' ;
95866     +
95867     +      label S_REP_width = 'Standard: REP_width' ;
MPRINT(EM_DIAGRAM):   label S_REP_width = 'Standard: REP_width' ;
95868     +
95869     +      label M_bore0 = 'Dummy: M_bore=0' ;
MPRINT(EM_DIAGRAM):   label M_bore0 = 'Dummy: M_bore=0' ;
95870     +
95871     +      label M_num_of_doors0 = 'Dummy: M_num_of_doors=0' ;
MPRINT(EM_DIAGRAM):   label M_num_of_doors0 = 'Dummy: M_num_of_doors=0' ;
95872     +
95873     +      label M_price0 = 'Dummy: M_price=0' ;
MPRINT(EM_DIAGRAM):   label M_price0 = 'Dummy: M_price=0' ;
95874     +
95875     +      label M_stroke0 = 'Dummy: M_stroke=0' ;
MPRINT(EM_DIAGRAM):   label M_stroke0 = 'Dummy: M_stroke=0' ;
95876     +
95877     +      label IMP_num_of_doors2 = 'Dummy: IMP_num_of_doors=2' ;
MPRINT(EM_DIAGRAM):   label IMP_num_of_doors2 = 'Dummy: IMP_num_of_doors=2' ;
95878     +
95879     +      label REP_aspirationS = 'Dummy: REP_aspiration=S' ;
MPRINT(EM_DIAGRAM):   label REP_aspirationS = 'Dummy: REP_aspiration=S' ;
95880     +
95881     +      label REP_body_styleC = 'Dummy: REP_body_style=C' ;
MPRINT(EM_DIAGRAM):   label REP_body_styleC = 'Dummy: REP_body_style=C' ;
95882     +
95883     +      label REP_body_styleH = 'Dummy: REP_body_style=H' ;
MPRINT(EM_DIAGRAM):   label REP_body_styleH = 'Dummy: REP_body_style=H' ;
95884     +
95885     +      label REP_body_styleS = 'Dummy: REP_body_style=S' ;
MPRINT(EM_DIAGRAM):   label REP_body_styleS = 'Dummy: REP_body_style=S' ;
95886     +
95887     +      label REP_drive_wheels4 = 'Dummy: REP_drive_wheels=4' ;
MPRINT(EM_DIAGRAM):   label REP_drive_wheels4 = 'Dummy: REP_drive_wheels=4' ;
95888     +
95889     +      label REP_drive_wheelsF = 'Dummy: REP_drive_wheels=F' ;
MPRINT(EM_DIAGRAM):   label REP_drive_wheelsF = 'Dummy: REP_drive_wheels=F' ;
95890     +
95891     +      label REP_engine_locationF = 'Dummy: REP_engine_location=F' ;
MPRINT(EM_DIAGRAM):   label REP_engine_locationF = 'Dummy: REP_engine_location=F' ;
95892     +
95893     +      label REP_fuel_systemnon_spdi = 'Dummy: REP_fuel_system=non-spdi' ;
MPRINT(EM_DIAGRAM):   label REP_fuel_systemnon_spdi = 'Dummy: REP_fuel_system=non-spdi' ;
95894     +
95895     +      label REP_fuel_typeD = 'Dummy: REP_fuel_type=D' ;
MPRINT(EM_DIAGRAM):   label REP_fuel_typeD = 'Dummy: REP_fuel_type=D' ;
95896     +
95897     +      label REP_num_of_cylinders__4 = 'Dummy: REP_num_of_cylinders=<=4' ;
MPRINT(EM_DIAGRAM):   label REP_num_of_cylinders__4 = 'Dummy: REP_num_of_cylinders=<=4' ;
95898     +
95899     +      label engine_typedohc = 'Dummy: engine_type=dohc' ;
MPRINT(EM_DIAGRAM):   label engine_typedohc = 'Dummy: engine_type=dohc' ;
95900     +
95901     +      label engine_typel = 'Dummy: engine_type=l' ;
MPRINT(EM_DIAGRAM):   label engine_typel = 'Dummy: engine_type=l' ;
95902     +
95903     +      label engine_typeohc = 'Dummy: engine_type=ohc' ;
MPRINT(EM_DIAGRAM):   label engine_typeohc = 'Dummy: engine_type=ohc' ;
95904     +
95905     +      label engine_typeohcf = 'Dummy: engine_type=ohcf' ;
MPRINT(EM_DIAGRAM):   label engine_typeohcf = 'Dummy: engine_type=ohcf' ;
95906     +
95907     +      label engine_typeohcv = 'Dummy: engine_type=ohcv' ;
MPRINT(EM_DIAGRAM):   label engine_typeohcv = 'Dummy: engine_type=ohcv' ;
95908     +
95909     +      label H11 = 'Hidden: H1=1' ;
MPRINT(EM_DIAGRAM):   label H11 = 'Hidden: H1=1' ;
95910     +
95911     +      label H12 = 'Hidden: H1=2' ;
MPRINT(EM_DIAGRAM):   label H12 = 'Hidden: H1=2' ;
95912     +
95913     +      label H13 = 'Hidden: H1=3' ;
MPRINT(EM_DIAGRAM):   label H13 = 'Hidden: H1=3' ;
95914     +
95915     +      label I_Risk = 'Into: Risk' ;
MPRINT(EM_DIAGRAM):   label I_Risk = 'Into: Risk' ;
95916     +
95917     +      label F_Risk = 'From: Risk' ;
MPRINT(EM_DIAGRAM):   label F_Risk = 'From: Risk' ;
95918     +
95919     +      label U_Risk = 'Unnormalized Into: Risk' ;
MPRINT(EM_DIAGRAM):   label U_Risk = 'Unnormalized Into: Risk' ;
95920     +
95921     +      label P_Risk1 = 'Predicted: Risk=1' ;
MPRINT(EM_DIAGRAM):   label P_Risk1 = 'Predicted: Risk=1' ;
95922     +
95923     +      label R_Risk1 = 'Residual: Risk=1' ;
MPRINT(EM_DIAGRAM):   label R_Risk1 = 'Residual: Risk=1' ;
95924     +
95925     +      label P_Risk0 = 'Predicted: Risk=0' ;
MPRINT(EM_DIAGRAM):   label P_Risk0 = 'Predicted: Risk=0' ;
95926     +
95927     +      label R_Risk0 = 'Residual: Risk=0' ;
MPRINT(EM_DIAGRAM):   label R_Risk0 = 'Residual: Risk=0' ;
95928     +
95929     +      label  _WARN_ = "Warnings";
MPRINT(EM_DIAGRAM):   label _WARN_ = "Warnings";
95930     +
95931     +*** Generate dummy variables for M_bore ;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for M_bore ;
95932     +drop M_bore0 ;
MPRINT(EM_DIAGRAM):   drop M_bore0 ;
95933     +if missing( M_bore ) then do;
MPRINT(EM_DIAGRAM):   if missing( M_bore ) then do;
95934     +   M_bore0 = .;
MPRINT(EM_DIAGRAM):   M_bore0 = .;
95935     +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
95936     +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
95937     +end;
MPRINT(EM_DIAGRAM):   end;
95938     +else do;
MPRINT(EM_DIAGRAM):   else do;
95939     +   length _dm12 $ 12; drop _dm12 ;
MPRINT(EM_DIAGRAM):   length _dm12 $ 12;
MPRINT(EM_DIAGRAM):   drop _dm12 ;
95940     +   _dm12 = put( M_bore , BEST12. );
MPRINT(EM_DIAGRAM):   _dm12 = put( M_bore , BEST12. );
95941     +   %DMNORMIP( _dm12 )
MPRINT(DMNORMIP):   call dmnorm(_dm12,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
95942     +   if _dm12 = '0'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 = '0' then do;
95943     +      M_bore0 = 1;
MPRINT(EM_DIAGRAM):   M_bore0 = 1;
95944     +   end;
MPRINT(EM_DIAGRAM):   end;
95945     +   else if _dm12 = '1'  then do;
MPRINT(EM_DIAGRAM):   else if _dm12 = '1' then do;
95946     +      M_bore0 = -1;
MPRINT(EM_DIAGRAM):   M_bore0 = -1;
95947     +   end;
MPRINT(EM_DIAGRAM):   end;
95948     +   else do;
MPRINT(EM_DIAGRAM):   else do;
95949     +      M_bore0 = .;
MPRINT(EM_DIAGRAM):   M_bore0 = .;
95950     +      substr(_warn_,2,1) = 'U';
MPRINT(EM_DIAGRAM):   substr(_warn_,2,1) = 'U';
95951     +      _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
95952     +   end;
MPRINT(EM_DIAGRAM):   end;
95953     +end;
MPRINT(EM_DIAGRAM):   end;
95954     +
95955     +*** Generate dummy variables for M_num_of_doors ;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for M_num_of_doors ;
95956     +drop M_num_of_doors0 ;
MPRINT(EM_DIAGRAM):   drop M_num_of_doors0 ;
95957     +if missing( M_num_of_doors ) then do;
MPRINT(EM_DIAGRAM):   if missing( M_num_of_doors ) then do;
95958     +   M_num_of_doors0 = .;
MPRINT(EM_DIAGRAM):   M_num_of_doors0 = .;
95959     +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
95960     +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
95961     +end;
MPRINT(EM_DIAGRAM):   end;
95962     +else do;
MPRINT(EM_DIAGRAM):   else do;
95963     +   length _dm12 $ 12; drop _dm12 ;
MPRINT(EM_DIAGRAM):   length _dm12 $ 12;
MPRINT(EM_DIAGRAM):   drop _dm12 ;
95964     +   _dm12 = put( M_num_of_doors , BEST12. );
MPRINT(EM_DIAGRAM):   _dm12 = put( M_num_of_doors , BEST12. );
95965     +   %DMNORMIP( _dm12 )
MPRINT(DMNORMIP):   call dmnorm(_dm12,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
95966     +   if _dm12 = '0'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 = '0' then do;
95967     +      M_num_of_doors0 = 1;
MPRINT(EM_DIAGRAM):   M_num_of_doors0 = 1;
95968     +   end;
MPRINT(EM_DIAGRAM):   end;
95969     +   else if _dm12 = '1'  then do;
MPRINT(EM_DIAGRAM):   else if _dm12 = '1' then do;
95970     +      M_num_of_doors0 = -1;
MPRINT(EM_DIAGRAM):   M_num_of_doors0 = -1;
95971     +   end;
MPRINT(EM_DIAGRAM):   end;
95972     +   else do;
MPRINT(EM_DIAGRAM):   else do;
95973     +      M_num_of_doors0 = .;
MPRINT(EM_DIAGRAM):   M_num_of_doors0 = .;
95974     +      substr(_warn_,2,1) = 'U';
MPRINT(EM_DIAGRAM):   substr(_warn_,2,1) = 'U';
95975     +      _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
95976     +   end;
MPRINT(EM_DIAGRAM):   end;
95977     +end;
MPRINT(EM_DIAGRAM):   end;
95978     +
95979     +*** Generate dummy variables for M_price ;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for M_price ;
95980     +drop M_price0 ;
MPRINT(EM_DIAGRAM):   drop M_price0 ;
95981     +if missing( M_price ) then do;
MPRINT(EM_DIAGRAM):   if missing( M_price ) then do;
95982     +   M_price0 = .;
MPRINT(EM_DIAGRAM):   M_price0 = .;
95983     +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
95984     +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
95985     +end;
MPRINT(EM_DIAGRAM):   end;
95986     +else do;
MPRINT(EM_DIAGRAM):   else do;
95987     +   length _dm12 $ 12; drop _dm12 ;
MPRINT(EM_DIAGRAM):   length _dm12 $ 12;
MPRINT(EM_DIAGRAM):   drop _dm12 ;
95988     +   _dm12 = put( M_price , BEST12. );
MPRINT(EM_DIAGRAM):   _dm12 = put( M_price , BEST12. );
95989     +   %DMNORMIP( _dm12 )
MPRINT(DMNORMIP):   call dmnorm(_dm12,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
95990     +   if _dm12 = '0'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 = '0' then do;
95991     +      M_price0 = 1;
MPRINT(EM_DIAGRAM):   M_price0 = 1;
95992     +   end;
MPRINT(EM_DIAGRAM):   end;
95993     +   else if _dm12 = '1'  then do;
MPRINT(EM_DIAGRAM):   else if _dm12 = '1' then do;
95994     +      M_price0 = -1;
MPRINT(EM_DIAGRAM):   M_price0 = -1;
95995     +   end;
MPRINT(EM_DIAGRAM):   end;
95996     +   else do;
MPRINT(EM_DIAGRAM):   else do;
95997     +      M_price0 = .;
MPRINT(EM_DIAGRAM):   M_price0 = .;
95998     +      substr(_warn_,2,1) = 'U';
MPRINT(EM_DIAGRAM):   substr(_warn_,2,1) = 'U';
95999     +      _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
96000     +   end;
MPRINT(EM_DIAGRAM):   end;
96001     +end;
MPRINT(EM_DIAGRAM):   end;
96002     +
96003     +*** Generate dummy variables for M_stroke ;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for M_stroke ;
96004     +drop M_stroke0 ;
MPRINT(EM_DIAGRAM):   drop M_stroke0 ;
96005     +if missing( M_stroke ) then do;
MPRINT(EM_DIAGRAM):   if missing( M_stroke ) then do;
96006     +   M_stroke0 = .;
MPRINT(EM_DIAGRAM):   M_stroke0 = .;
96007     +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
96008     +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
96009     +end;
MPRINT(EM_DIAGRAM):   end;
96010     +else do;
MPRINT(EM_DIAGRAM):   else do;
96011     +   length _dm12 $ 12; drop _dm12 ;
MPRINT(EM_DIAGRAM):   length _dm12 $ 12;
MPRINT(EM_DIAGRAM):   drop _dm12 ;
96012     +   _dm12 = put( M_stroke , BEST12. );
MPRINT(EM_DIAGRAM):   _dm12 = put( M_stroke , BEST12. );
96013     +   %DMNORMIP( _dm12 )
MPRINT(DMNORMIP):   call dmnorm(_dm12,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
96014     +   if _dm12 = '0'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 = '0' then do;
96015     +      M_stroke0 = 1;
MPRINT(EM_DIAGRAM):   M_stroke0 = 1;
96016     +   end;
MPRINT(EM_DIAGRAM):   end;
96017     +   else if _dm12 = '1'  then do;
MPRINT(EM_DIAGRAM):   else if _dm12 = '1' then do;
96018     +      M_stroke0 = -1;
MPRINT(EM_DIAGRAM):   M_stroke0 = -1;
96019     +   end;
MPRINT(EM_DIAGRAM):   end;
96020     +   else do;
MPRINT(EM_DIAGRAM):   else do;
96021     +      M_stroke0 = .;
MPRINT(EM_DIAGRAM):   M_stroke0 = .;
96022     +      substr(_warn_,2,1) = 'U';
MPRINT(EM_DIAGRAM):   substr(_warn_,2,1) = 'U';
96023     +      _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
96024     +   end;
MPRINT(EM_DIAGRAM):   end;
96025     +end;
MPRINT(EM_DIAGRAM):   end;
96026     +
96027     +*** Generate dummy variables for IMP_num_of_doors ;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for IMP_num_of_doors ;
96028     +drop IMP_num_of_doors2 ;
MPRINT(EM_DIAGRAM):   drop IMP_num_of_doors2 ;
96029     +if missing( IMP_num_of_doors ) then do;
MPRINT(EM_DIAGRAM):   if missing( IMP_num_of_doors ) then do;
96030     +   IMP_num_of_doors2 = .;
MPRINT(EM_DIAGRAM):   IMP_num_of_doors2 = .;
96031     +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
96032     +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
96033     +end;
MPRINT(EM_DIAGRAM):   end;
96034     +else do;
MPRINT(EM_DIAGRAM):   else do;
96035     +   length _dm12 $ 12; drop _dm12 ;
MPRINT(EM_DIAGRAM):   length _dm12 $ 12;
MPRINT(EM_DIAGRAM):   drop _dm12 ;
96036     +   _dm12 = put( IMP_num_of_doors , BEST12. );
MPRINT(EM_DIAGRAM):   _dm12 = put( IMP_num_of_doors , BEST12. );
96037     +   %DMNORMIP( _dm12 )
MPRINT(DMNORMIP):   call dmnorm(_dm12,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
96038     +   if _dm12 = '4'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 = '4' then do;
96039     +      IMP_num_of_doors2 = -1;
MPRINT(EM_DIAGRAM):   IMP_num_of_doors2 = -1;
96040     +   end;
MPRINT(EM_DIAGRAM):   end;
96041     +   else if _dm12 = '2'  then do;
MPRINT(EM_DIAGRAM):   else if _dm12 = '2' then do;
96042     +      IMP_num_of_doors2 = 1;
MPRINT(EM_DIAGRAM):   IMP_num_of_doors2 = 1;
96043     +   end;
MPRINT(EM_DIAGRAM):   end;
96044     +   else do;
MPRINT(EM_DIAGRAM):   else do;
96045     +      IMP_num_of_doors2 = .;
MPRINT(EM_DIAGRAM):   IMP_num_of_doors2 = .;
96046     +      substr(_warn_,2,1) = 'U';
MPRINT(EM_DIAGRAM):   substr(_warn_,2,1) = 'U';
96047     +      _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
96048     +   end;
MPRINT(EM_DIAGRAM):   end;
96049     +end;
MPRINT(EM_DIAGRAM):   end;
96050     +
96051     +*** Generate dummy variables for REP_aspiration ;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for REP_aspiration ;
96052     +drop REP_aspirationS ;
MPRINT(EM_DIAGRAM):   drop REP_aspirationS ;
96053     +if missing( REP_aspiration ) then do;
MPRINT(EM_DIAGRAM):   if missing( REP_aspiration ) then do;
96054     +   REP_aspirationS = .;
MPRINT(EM_DIAGRAM):   REP_aspirationS = .;
96055     +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
96056     +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
96057     +end;
MPRINT(EM_DIAGRAM):   end;
96058     +else do;
MPRINT(EM_DIAGRAM):   else do;
96059     +   length _dm5 $ 5; drop _dm5 ;
MPRINT(EM_DIAGRAM):   length _dm5 $ 5;
MPRINT(EM_DIAGRAM):   drop _dm5 ;
96060     +   _dm5 = put( REP_aspiration , $5. );
MPRINT(EM_DIAGRAM):   _dm5 = put( REP_aspiration , $5. );
96061     +   %DMNORMIP( _dm5 )
MPRINT(DMNORMIP):   call dmnorm(_dm5,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
96062     +   if _dm5 = 'S'  then do;
MPRINT(EM_DIAGRAM):   if _dm5 = 'S' then do;
96063     +      REP_aspirationS = 1;
MPRINT(EM_DIAGRAM):   REP_aspirationS = 1;
96064     +   end;
MPRINT(EM_DIAGRAM):   end;
96065     +   else if _dm5 = 'T'  then do;
MPRINT(EM_DIAGRAM):   else if _dm5 = 'T' then do;
96066     +      REP_aspirationS = -1;
MPRINT(EM_DIAGRAM):   REP_aspirationS = -1;
96067     +   end;
MPRINT(EM_DIAGRAM):   end;
96068     +   else do;
MPRINT(EM_DIAGRAM):   else do;
96069     +      REP_aspirationS = .;
MPRINT(EM_DIAGRAM):   REP_aspirationS = .;
96070     +      substr(_warn_,2,1) = 'U';
MPRINT(EM_DIAGRAM):   substr(_warn_,2,1) = 'U';
96071     +      _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
96072     +   end;
MPRINT(EM_DIAGRAM):   end;
96073     +end;
MPRINT(EM_DIAGRAM):   end;
96074     +
96075     +*** Generate dummy variables for REP_body_style ;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for REP_body_style ;
96076     +drop REP_body_styleC REP_body_styleH REP_body_styleS ;
MPRINT(EM_DIAGRAM):   drop REP_body_styleC REP_body_styleH REP_body_styleS ;
96077     +if missing( REP_body_style ) then do;
MPRINT(EM_DIAGRAM):   if missing( REP_body_style ) then do;
96078     +   REP_body_styleC = .;
MPRINT(EM_DIAGRAM):   REP_body_styleC = .;
96079     +   REP_body_styleH = .;
MPRINT(EM_DIAGRAM):   REP_body_styleH = .;
96080     +   REP_body_styleS = .;
MPRINT(EM_DIAGRAM):   REP_body_styleS = .;
96081     +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
96082     +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
96083     +end;
MPRINT(EM_DIAGRAM):   end;
96084     +else do;
MPRINT(EM_DIAGRAM):   else do;
96085     +   length _dm11 $ 11; drop _dm11 ;
MPRINT(EM_DIAGRAM):   length _dm11 $ 11;
MPRINT(EM_DIAGRAM):   drop _dm11 ;
96086     +   %DMNORMCP( REP_body_style , _dm11 )
MPRINT(DMNORMCP):   _dm11=dmnorm(REP_body_style,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMCP):  );
96087     +   if _dm11 = 'S'  then do;
MPRINT(EM_DIAGRAM):   if _dm11 = 'S' then do;
96088     +      REP_body_styleC = 0;
MPRINT(EM_DIAGRAM):   REP_body_styleC = 0;
96089     +      REP_body_styleH = 0;
MPRINT(EM_DIAGRAM):   REP_body_styleH = 0;
96090     +      REP_body_styleS = 1;
MPRINT(EM_DIAGRAM):   REP_body_styleS = 1;
96091     +   end;
MPRINT(EM_DIAGRAM):   end;
96092     +   else if _dm11 = 'H'  then do;
MPRINT(EM_DIAGRAM):   else if _dm11 = 'H' then do;
96093     +      REP_body_styleC = 0;
MPRINT(EM_DIAGRAM):   REP_body_styleC = 0;
96094     +      REP_body_styleH = 1;
MPRINT(EM_DIAGRAM):   REP_body_styleH = 1;
96095     +      REP_body_styleS = 0;
MPRINT(EM_DIAGRAM):   REP_body_styleS = 0;
96096     +   end;
MPRINT(EM_DIAGRAM):   end;
96097     +   else if _dm11 = 'W'  then do;
MPRINT(EM_DIAGRAM):   else if _dm11 = 'W' then do;
96098     +      REP_body_styleC = -1;
MPRINT(EM_DIAGRAM):   REP_body_styleC = -1;
96099     +      REP_body_styleH = -1;
MPRINT(EM_DIAGRAM):   REP_body_styleH = -1;
96100     +      REP_body_styleS = -1;
MPRINT(EM_DIAGRAM):   REP_body_styleS = -1;
96101     +   end;
MPRINT(EM_DIAGRAM):   end;
96102     +   else if _dm11 = 'C'  then do;
MPRINT(EM_DIAGRAM):   else if _dm11 = 'C' then do;
96103     +      REP_body_styleC = 1;
MPRINT(EM_DIAGRAM):   REP_body_styleC = 1;
96104     +      REP_body_styleH = 0;
MPRINT(EM_DIAGRAM):   REP_body_styleH = 0;
96105     +      REP_body_styleS = 0;
MPRINT(EM_DIAGRAM):   REP_body_styleS = 0;
96106     +   end;
MPRINT(EM_DIAGRAM):   end;
96107     +   else do;
MPRINT(EM_DIAGRAM):   else do;
96108     +      REP_body_styleC = .;
MPRINT(EM_DIAGRAM):   REP_body_styleC = .;
96109     +      REP_body_styleH = .;
MPRINT(EM_DIAGRAM):   REP_body_styleH = .;
96110     +      REP_body_styleS = .;
MPRINT(EM_DIAGRAM):   REP_body_styleS = .;
96111     +      substr(_warn_,2,1) = 'U';
MPRINT(EM_DIAGRAM):   substr(_warn_,2,1) = 'U';
96112     +      _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
96113     +   end;
MPRINT(EM_DIAGRAM):   end;
96114     +end;
MPRINT(EM_DIAGRAM):   end;
96115     +
96116     +*** Generate dummy variables for REP_drive_wheels ;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for REP_drive_wheels ;
96117     +drop REP_drive_wheels4 REP_drive_wheelsF ;
MPRINT(EM_DIAGRAM):   drop REP_drive_wheels4 REP_drive_wheelsF ;
96118     +if missing( REP_drive_wheels ) then do;
MPRINT(EM_DIAGRAM):   if missing( REP_drive_wheels ) then do;
96119     +   REP_drive_wheels4 = .;
MPRINT(EM_DIAGRAM):   REP_drive_wheels4 = .;
96120     +   REP_drive_wheelsF = .;
MPRINT(EM_DIAGRAM):   REP_drive_wheelsF = .;
96121     +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
96122     +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
96123     +end;
MPRINT(EM_DIAGRAM):   end;
96124     +else do;
MPRINT(EM_DIAGRAM):   else do;
96125     +   length _dm3 $ 3; drop _dm3 ;
MPRINT(EM_DIAGRAM):   length _dm3 $ 3;
MPRINT(EM_DIAGRAM):   drop _dm3 ;
96126     +   %DMNORMCP( REP_drive_wheels , _dm3 )
MPRINT(DMNORMCP):   _dm3=dmnorm(REP_drive_wheels,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMCP):  );
96127     +   if _dm3 = 'F'  then do;
MPRINT(EM_DIAGRAM):   if _dm3 = 'F' then do;
96128     +      REP_drive_wheels4 = 0;
MPRINT(EM_DIAGRAM):   REP_drive_wheels4 = 0;
96129     +      REP_drive_wheelsF = 1;
MPRINT(EM_DIAGRAM):   REP_drive_wheelsF = 1;
96130     +   end;
MPRINT(EM_DIAGRAM):   end;
96131     +   else if _dm3 = 'R'  then do;
MPRINT(EM_DIAGRAM):   else if _dm3 = 'R' then do;
96132     +      REP_drive_wheels4 = -1;
MPRINT(EM_DIAGRAM):   REP_drive_wheels4 = -1;
96133     +      REP_drive_wheelsF = -1;
MPRINT(EM_DIAGRAM):   REP_drive_wheelsF = -1;
96134     +   end;
MPRINT(EM_DIAGRAM):   end;
96135     +   else if _dm3 = '4'  then do;
MPRINT(EM_DIAGRAM):   else if _dm3 = '4' then do;
96136     +      REP_drive_wheels4 = 1;
MPRINT(EM_DIAGRAM):   REP_drive_wheels4 = 1;
96137     +      REP_drive_wheelsF = 0;
MPRINT(EM_DIAGRAM):   REP_drive_wheelsF = 0;
96138     +   end;
MPRINT(EM_DIAGRAM):   end;
96139     +   else do;
MPRINT(EM_DIAGRAM):   else do;
96140     +      REP_drive_wheels4 = .;
MPRINT(EM_DIAGRAM):   REP_drive_wheels4 = .;
96141     +      REP_drive_wheelsF = .;
MPRINT(EM_DIAGRAM):   REP_drive_wheelsF = .;
96142     +      substr(_warn_,2,1) = 'U';
MPRINT(EM_DIAGRAM):   substr(_warn_,2,1) = 'U';
96143     +      _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
96144     +   end;
MPRINT(EM_DIAGRAM):   end;
96145     +end;
MPRINT(EM_DIAGRAM):   end;
96146     +
96147     +*** Generate dummy variables for REP_engine_location ;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for REP_engine_location ;
96148     +drop REP_engine_locationF ;
MPRINT(EM_DIAGRAM):   drop REP_engine_locationF ;
96149     +if missing( REP_engine_location ) then do;
MPRINT(EM_DIAGRAM):   if missing( REP_engine_location ) then do;
96150     +   REP_engine_locationF = .;
MPRINT(EM_DIAGRAM):   REP_engine_locationF = .;
96151     +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
96152     +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
96153     +end;
MPRINT(EM_DIAGRAM):   end;
96154     +else do;
MPRINT(EM_DIAGRAM):   else do;
96155     +   length _dm5 $ 5; drop _dm5 ;
MPRINT(EM_DIAGRAM):   length _dm5 $ 5;
MPRINT(EM_DIAGRAM):   drop _dm5 ;
96156     +   %DMNORMCP( REP_engine_location , _dm5 )
MPRINT(DMNORMCP):   _dm5=dmnorm(REP_engine_location,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMCP):  );
96157     +   if _dm5 = 'F'  then do;
MPRINT(EM_DIAGRAM):   if _dm5 = 'F' then do;
96158     +      REP_engine_locationF = 1;
MPRINT(EM_DIAGRAM):   REP_engine_locationF = 1;
96159     +   end;
MPRINT(EM_DIAGRAM):   end;
96160     +   else if _dm5 = 'R'  then do;
MPRINT(EM_DIAGRAM):   else if _dm5 = 'R' then do;
96161     +      REP_engine_locationF = -1;
MPRINT(EM_DIAGRAM):   REP_engine_locationF = -1;
96162     +   end;
MPRINT(EM_DIAGRAM):   end;
96163     +   else do;
MPRINT(EM_DIAGRAM):   else do;
96164     +      REP_engine_locationF = .;
MPRINT(EM_DIAGRAM):   REP_engine_locationF = .;
96165     +      substr(_warn_,2,1) = 'U';
MPRINT(EM_DIAGRAM):   substr(_warn_,2,1) = 'U';
96166     +      _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
96167     +   end;
MPRINT(EM_DIAGRAM):   end;
96168     +end;
MPRINT(EM_DIAGRAM):   end;
96169     +
96170     +*** Generate dummy variables for REP_fuel_system ;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for REP_fuel_system ;
96171     +drop REP_fuel_systemnon_spdi ;
MPRINT(EM_DIAGRAM):   drop REP_fuel_systemnon_spdi ;
96172     +if missing( REP_fuel_system ) then do;
MPRINT(EM_DIAGRAM):   if missing( REP_fuel_system ) then do;
96173     +   REP_fuel_systemnon_spdi = .;
MPRINT(EM_DIAGRAM):   REP_fuel_systemnon_spdi = .;
96174     +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
96175     +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
96176     +end;
MPRINT(EM_DIAGRAM):   end;
96177     +else do;
MPRINT(EM_DIAGRAM):   else do;
96178     +   length _dm8 $ 8; drop _dm8 ;
MPRINT(EM_DIAGRAM):   length _dm8 $ 8;
MPRINT(EM_DIAGRAM):   drop _dm8 ;
96179     +   %DMNORMCP( REP_fuel_system , _dm8 )
MPRINT(DMNORMCP):   _dm8=dmnorm(REP_fuel_system,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMCP):  );
96180     +   if _dm8 = 'NON-SPDI'  then do;
MPRINT(EM_DIAGRAM):   if _dm8 = 'NON-SPDI' then do;
96181     +      REP_fuel_systemnon_spdi = 1;
MPRINT(EM_DIAGRAM):   REP_fuel_systemnon_spdi = 1;
96182     +   end;
MPRINT(EM_DIAGRAM):   end;
96183     +   else if _dm8 = 'SPDI'  then do;
MPRINT(EM_DIAGRAM):   else if _dm8 = 'SPDI' then do;
96184     +      REP_fuel_systemnon_spdi = -1;
MPRINT(EM_DIAGRAM):   REP_fuel_systemnon_spdi = -1;
96185     +   end;
MPRINT(EM_DIAGRAM):   end;
96186     +   else do;
MPRINT(EM_DIAGRAM):   else do;
96187     +      REP_fuel_systemnon_spdi = .;
MPRINT(EM_DIAGRAM):   REP_fuel_systemnon_spdi = .;
96188     +      substr(_warn_,2,1) = 'U';
MPRINT(EM_DIAGRAM):   substr(_warn_,2,1) = 'U';
96189     +      _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
96190     +   end;
MPRINT(EM_DIAGRAM):   end;
96191     +end;
MPRINT(EM_DIAGRAM):   end;
96192     +
96193     +*** Generate dummy variables for REP_fuel_type ;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for REP_fuel_type ;
96194     +drop REP_fuel_typeD ;
MPRINT(EM_DIAGRAM):   drop REP_fuel_typeD ;
96195     +if missing( REP_fuel_type ) then do;
MPRINT(EM_DIAGRAM):   if missing( REP_fuel_type ) then do;
96196     +   REP_fuel_typeD = .;
MPRINT(EM_DIAGRAM):   REP_fuel_typeD = .;
96197     +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
96198     +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
96199     +end;
MPRINT(EM_DIAGRAM):   end;
96200     +else do;
MPRINT(EM_DIAGRAM):   else do;
96201     +   length _dm6 $ 6; drop _dm6 ;
MPRINT(EM_DIAGRAM):   length _dm6 $ 6;
MPRINT(EM_DIAGRAM):   drop _dm6 ;
96202     +   %DMNORMCP( REP_fuel_type , _dm6 )
MPRINT(DMNORMCP):   _dm6=dmnorm(REP_fuel_type,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMCP):  );
96203     +   if _dm6 = 'G'  then do;
MPRINT(EM_DIAGRAM):   if _dm6 = 'G' then do;
96204     +      REP_fuel_typeD = -1;
MPRINT(EM_DIAGRAM):   REP_fuel_typeD = -1;
96205     +   end;
MPRINT(EM_DIAGRAM):   end;
96206     +   else if _dm6 = 'D'  then do;
MPRINT(EM_DIAGRAM):   else if _dm6 = 'D' then do;
96207     +      REP_fuel_typeD = 1;
MPRINT(EM_DIAGRAM):   REP_fuel_typeD = 1;
96208     +   end;
MPRINT(EM_DIAGRAM):   end;
96209     +   else do;
MPRINT(EM_DIAGRAM):   else do;
96210     +      REP_fuel_typeD = .;
MPRINT(EM_DIAGRAM):   REP_fuel_typeD = .;
96211     +      substr(_warn_,2,1) = 'U';
MPRINT(EM_DIAGRAM):   substr(_warn_,2,1) = 'U';
96212     +      _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
96213     +   end;
MPRINT(EM_DIAGRAM):   end;
96214     +end;
MPRINT(EM_DIAGRAM):   end;
96215     +
96216     +*** Generate dummy variables for REP_num_of_cylinders ;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for REP_num_of_cylinders ;
96217     +drop REP_num_of_cylinders__4 ;
MPRINT(EM_DIAGRAM):   drop REP_num_of_cylinders__4 ;
96218     +if missing( REP_num_of_cylinders ) then do;
MPRINT(EM_DIAGRAM):   if missing( REP_num_of_cylinders ) then do;
96219     +   REP_num_of_cylinders__4 = .;
MPRINT(EM_DIAGRAM):   REP_num_of_cylinders__4 = .;
96220     +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
96221     +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
96222     +end;
MPRINT(EM_DIAGRAM):   end;
96223     +else do;
MPRINT(EM_DIAGRAM):   else do;
96224     +   length _dm6 $ 6; drop _dm6 ;
MPRINT(EM_DIAGRAM):   length _dm6 $ 6;
MPRINT(EM_DIAGRAM):   drop _dm6 ;
96225     +   %DMNORMCP( REP_num_of_cylinders , _dm6 )
MPRINT(DMNORMCP):   _dm6=dmnorm(REP_num_of_cylinders,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMCP):  );
96226     +   if _dm6 = '<=4'  then do;
MPRINT(EM_DIAGRAM):   if _dm6 = '<=4' then do;
96227     +      REP_num_of_cylinders__4 = 1;
MPRINT(EM_DIAGRAM):   REP_num_of_cylinders__4 = 1;
96228     +   end;
MPRINT(EM_DIAGRAM):   end;
96229     +   else if _dm6 = '>4'  then do;
MPRINT(EM_DIAGRAM):   else if _dm6 = '>4' then do;
96230     +      REP_num_of_cylinders__4 = -1;
MPRINT(EM_DIAGRAM):   REP_num_of_cylinders__4 = -1;
96231     +   end;
MPRINT(EM_DIAGRAM):   end;
96232     +   else do;
MPRINT(EM_DIAGRAM):   else do;
96233     +      REP_num_of_cylinders__4 = .;
MPRINT(EM_DIAGRAM):   REP_num_of_cylinders__4 = .;
96234     +      substr(_warn_,2,1) = 'U';
MPRINT(EM_DIAGRAM):   substr(_warn_,2,1) = 'U';
96235     +      _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
96236     +   end;
MPRINT(EM_DIAGRAM):   end;
96237     +end;
MPRINT(EM_DIAGRAM):   end;
96238     +
96239     +*** Generate dummy variables for engine_type ;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for engine_type ;
96240     +drop engine_typedohc engine_typel engine_typeohc engine_typeohcf
96241     +        engine_typeohcv ;
MPRINT(EM_DIAGRAM):   drop engine_typedohc engine_typel engine_typeohc engine_typeohcf
engine_typeohcv ;
96242     +*** encoding is sparse, initialize to zero;
MPRINT(EM_DIAGRAM):   *** encoding is sparse, initialize to zero;
96243     +engine_typedohc = 0;
MPRINT(EM_DIAGRAM):   engine_typedohc = 0;
96244     +engine_typel = 0;
MPRINT(EM_DIAGRAM):   engine_typel = 0;
96245     +engine_typeohc = 0;
MPRINT(EM_DIAGRAM):   engine_typeohc = 0;
96246     +engine_typeohcf = 0;
MPRINT(EM_DIAGRAM):   engine_typeohcf = 0;
96247     +engine_typeohcv = 0;
MPRINT(EM_DIAGRAM):   engine_typeohcv = 0;
96248     +if missing( engine_type ) then do;
MPRINT(EM_DIAGRAM):   if missing( engine_type ) then do;
96249     +   engine_typedohc = .;
MPRINT(EM_DIAGRAM):   engine_typedohc = .;
96250     +   engine_typel = .;
MPRINT(EM_DIAGRAM):   engine_typel = .;
96251     +   engine_typeohc = .;
MPRINT(EM_DIAGRAM):   engine_typeohc = .;
96252     +   engine_typeohcf = .;
MPRINT(EM_DIAGRAM):   engine_typeohcf = .;
96253     +   engine_typeohcv = .;
MPRINT(EM_DIAGRAM):   engine_typeohcv = .;
96254     +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
96255     +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
96256     +end;
MPRINT(EM_DIAGRAM):   end;
96257     +else do;
MPRINT(EM_DIAGRAM):   else do;
96258     +   length _dm5 $ 5; drop _dm5 ;
MPRINT(EM_DIAGRAM):   length _dm5 $ 5;
MPRINT(EM_DIAGRAM):   drop _dm5 ;
96259     +   %DMNORMCP( engine_type , _dm5 )
MPRINT(DMNORMCP):   _dm5=dmnorm(engine_type,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMCP):  );
96260     +   if _dm5 = 'OHC'  then do;
MPRINT(EM_DIAGRAM):   if _dm5 = 'OHC' then do;
96261     +      engine_typeohc = 1;
The SAS System
 
MPRINT(EM_DIAGRAM):   engine_typeohc = 1;
96262     +   end;
MPRINT(EM_DIAGRAM):   end;
96263     +   else if _dm5 = 'OHCF'  then do;
MPRINT(EM_DIAGRAM):   else if _dm5 = 'OHCF' then do;
96264     +      engine_typeohcf = 1;
MPRINT(EM_DIAGRAM):   engine_typeohcf = 1;
96265     +   end;
MPRINT(EM_DIAGRAM):   end;
96266     +   else if _dm5 = 'OHCV'  then do;
MPRINT(EM_DIAGRAM):   else if _dm5 = 'OHCV' then do;
96267     +      engine_typeohcv = 1;
MPRINT(EM_DIAGRAM):   engine_typeohcv = 1;
96268     +   end;
MPRINT(EM_DIAGRAM):   end;
96269     +   else if _dm5 = 'DOHC'  then do;
MPRINT(EM_DIAGRAM):   else if _dm5 = 'DOHC' then do;
96270     +      engine_typedohc = 1;
MPRINT(EM_DIAGRAM):   engine_typedohc = 1;
96271     +   end;
MPRINT(EM_DIAGRAM):   end;
96272     +   else if _dm5 = 'L'  then do;
MPRINT(EM_DIAGRAM):   else if _dm5 = 'L' then do;
96273     +      engine_typel = 1;
MPRINT(EM_DIAGRAM):   engine_typel = 1;
96274     +   end;
MPRINT(EM_DIAGRAM):   end;
96275     +   else if _dm5 = 'ROTOR'  then do;
MPRINT(EM_DIAGRAM):   else if _dm5 = 'ROTOR' then do;
96276     +      engine_typedohc = -1;
MPRINT(EM_DIAGRAM):   engine_typedohc = -1;
96277     +      engine_typel = -1;
MPRINT(EM_DIAGRAM):   engine_typel = -1;
96278     +      engine_typeohc = -1;
MPRINT(EM_DIAGRAM):   engine_typeohc = -1;
96279     +      engine_typeohcf = -1;
MPRINT(EM_DIAGRAM):   engine_typeohcf = -1;
96280     +      engine_typeohcv = -1;
MPRINT(EM_DIAGRAM):   engine_typeohcv = -1;
96281     +   end;
MPRINT(EM_DIAGRAM):   end;
96282     +   else do;
MPRINT(EM_DIAGRAM):   else do;
96283     +      engine_typedohc = .;
MPRINT(EM_DIAGRAM):   engine_typedohc = .;
96284     +      engine_typel = .;
MPRINT(EM_DIAGRAM):   engine_typel = .;
96285     +      engine_typeohc = .;
MPRINT(EM_DIAGRAM):   engine_typeohc = .;
96286     +      engine_typeohcf = .;
MPRINT(EM_DIAGRAM):   engine_typeohcf = .;
96287     +      engine_typeohcv = .;
MPRINT(EM_DIAGRAM):   engine_typeohcv = .;
96288     +      substr(_warn_,2,1) = 'U';
MPRINT(EM_DIAGRAM):   substr(_warn_,2,1) = 'U';
96289     +      _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
96290     +   end;
MPRINT(EM_DIAGRAM):   end;
96291     +end;
MPRINT(EM_DIAGRAM):   end;
96292     +
96293     +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
96294     +*** Checking missing input Interval
96295     +*** *************************;
MPRINT(EM_DIAGRAM):   *** Checking missing input Interval *** *************************;
96296     +
96297     +IF NMISS(
96298     +   LOG_REP_IMP_price ,
96299     +   LOG_REP_compression_ratio ,
96300     +   LOG_REP_engine_size ,
96301     +   REP_IMP_bore ,
96302     +   REP_IMP_stroke ,
96303     +   REP_city_mpg ,
96304     +   REP_curb_weight ,
96305     +   REP_height ,
96306     +   REP_highway_mpg ,
96307     +   REP_horsepower ,
96308     +   REP_length ,
96309     +   REP_peak_rpm ,
96310     +   REP_wheel_base ,
96311     +   REP_width   ) THEN DO;
MPRINT(EM_DIAGRAM):   IF NMISS( LOG_REP_IMP_price , LOG_REP_compression_ratio ,
LOG_REP_engine_size , REP_IMP_bore , REP_IMP_stroke , REP_city_mpg , REP_curb_weight ,
REP_height , REP_highway_mpg , REP_horsepower , REP_length , REP_peak_rpm , REP_wheel_base ,
REP_width ) THEN DO;
96312     +   SUBSTR(_WARN_, 1, 1) = 'M';
MPRINT(EM_DIAGRAM):   SUBSTR(_WARN_, 1, 1) = 'M';
96313     +
96314     +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
96315     +END;
MPRINT(EM_DIAGRAM):   END;
96316     +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
96317     +*** Writing the Node intvl ;
MPRINT(EM_DIAGRAM):   *** Writing the Node intvl ;
96318     +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
96319     +IF _DM_BAD EQ 0 THEN DO;
MPRINT(EM_DIAGRAM):   IF _DM_BAD EQ 0 THEN DO;
96320     +   S_LOG_REP_IMP_price  =    -20.2356185469493 +     2.16855745948401 *
96321     +        LOG_REP_IMP_price ;
MPRINT(EM_DIAGRAM):   S_LOG_REP_IMP_price = -20.2356185469493 + 2.16855745948401 *
LOG_REP_IMP_price ;
96322     +   S_LOG_REP_compression_ratio
96323     +          =    -8.72649819321039 +     3.65742873950677 *
96324     +        LOG_REP_compression_ratio ;
MPRINT(EM_DIAGRAM):   S_LOG_REP_compression_ratio = -8.72649819321039 + 3.65742873950677 *
LOG_REP_compression_ratio ;
96325     +   S_LOG_REP_engine_size  =    -19.3053254119757 +     4.02929302984948 *
96326     +        LOG_REP_engine_size ;
MPRINT(EM_DIAGRAM):   S_LOG_REP_engine_size = -19.3053254119757 + 4.02929302984948 *
LOG_REP_engine_size ;
96327     +   S_REP_IMP_bore  =    -13.3604302656684 +     4.04536293034574 *
96328     +        REP_IMP_bore ;
MPRINT(EM_DIAGRAM):   S_REP_IMP_bore = -13.3604302656684 + 4.04536293034574 * REP_IMP_bore ;
96329     +   S_REP_IMP_stroke  =    -11.3205669287077 +     3.47855217496738 *
96330     +        REP_IMP_stroke ;
MPRINT(EM_DIAGRAM):   S_REP_IMP_stroke = -11.3205669287077 + 3.47855217496738 * REP_IMP_stroke
;
96331     +   S_REP_city_mpg  =    -4.23279255832632 +     0.16535248553422 *
96332     +        REP_city_mpg ;
MPRINT(EM_DIAGRAM):   S_REP_city_mpg = -4.23279255832632 + 0.16535248553422 * REP_city_mpg ;
96333     +   S_REP_curb_weight  =    -5.35597047742979 +     0.00212869810672 *
96334     +        REP_curb_weight ;
MPRINT(EM_DIAGRAM):   S_REP_curb_weight = -5.35597047742979 + 0.00212869810672 *
REP_curb_weight ;
96335     +   S_REP_height  =    -21.8926608140893 +     0.40589318675657 * REP_height ;
MPRINT(EM_DIAGRAM):   S_REP_height = -21.8926608140893 + 0.40589318675657 * REP_height ;
96336     +   S_REP_highway_mpg  =    -4.99166764925563 +     0.16020006928199 *
96337     +        REP_highway_mpg ;
MPRINT(EM_DIAGRAM):   S_REP_highway_mpg = -4.99166764925563 + 0.16020006928199 *
REP_highway_mpg ;
96338     +   S_REP_horsepower  =    -2.74643097264309 +     0.02734944206973 *
96339     +        REP_horsepower ;
MPRINT(EM_DIAGRAM):   S_REP_horsepower = -2.74643097264309 + 0.02734944206973 * REP_horsepower
;
96340     +   S_REP_length  =    -15.2378498365576 +     0.08781104037663 * REP_length ;
MPRINT(EM_DIAGRAM):   S_REP_length = -15.2378498365576 + 0.08781104037663 * REP_length ;
96341     +   S_REP_peak_rpm  =    -10.6885709541859 +     0.00208333904184 *
96342     +        REP_peak_rpm ;
MPRINT(EM_DIAGRAM):   S_REP_peak_rpm = -10.6885709541859 + 0.00208333904184 * REP_peak_rpm ;
96343     +   S_REP_wheel_base  =    -17.8009087180129 +     0.18059887504832 *
96344     +        REP_wheel_base ;
MPRINT(EM_DIAGRAM):   S_REP_wheel_base = -17.8009087180129 + 0.18059887504832 * REP_wheel_base
;
96345     +   S_REP_width  =    -35.9167499004784 +     0.54673628301566 * REP_width ;
MPRINT(EM_DIAGRAM):   S_REP_width = -35.9167499004784 + 0.54673628301566 * REP_width ;
96346     +END;
MPRINT(EM_DIAGRAM):   END;
96347     +ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
96348     +   IF MISSING( LOG_REP_IMP_price ) THEN S_LOG_REP_IMP_price  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( LOG_REP_IMP_price ) THEN S_LOG_REP_IMP_price = . ;
96349     +   ELSE S_LOG_REP_IMP_price  =    -20.2356185469493 +     2.16855745948401 *
96350     +        LOG_REP_IMP_price ;
MPRINT(EM_DIAGRAM):   ELSE S_LOG_REP_IMP_price = -20.2356185469493 + 2.16855745948401 *
LOG_REP_IMP_price ;
96351     +   IF MISSING( LOG_REP_compression_ratio ) THEN S_LOG_REP_compression_ratio
96352     +          = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( LOG_REP_compression_ratio ) THEN S_LOG_REP_compression_ratio
= . ;
96353     +   ELSE S_LOG_REP_compression_ratio
96354     +          =    -8.72649819321039 +     3.65742873950677 *
96355     +        LOG_REP_compression_ratio ;
MPRINT(EM_DIAGRAM):   ELSE S_LOG_REP_compression_ratio = -8.72649819321039 + 3.65742873950677
* LOG_REP_compression_ratio ;
96356     +   IF MISSING( LOG_REP_engine_size ) THEN S_LOG_REP_engine_size  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( LOG_REP_engine_size ) THEN S_LOG_REP_engine_size = . ;
96357     +   ELSE S_LOG_REP_engine_size
96358     +          =    -19.3053254119757 +     4.02929302984948 * LOG_REP_engine_size
96359     +         ;
MPRINT(EM_DIAGRAM):   ELSE S_LOG_REP_engine_size = -19.3053254119757 + 4.02929302984948 *
LOG_REP_engine_size ;
96360     +   IF MISSING( REP_IMP_bore ) THEN S_REP_IMP_bore  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( REP_IMP_bore ) THEN S_REP_IMP_bore = . ;
96361     +   ELSE S_REP_IMP_bore  =    -13.3604302656684 +     4.04536293034574 *
96362     +        REP_IMP_bore ;
MPRINT(EM_DIAGRAM):   ELSE S_REP_IMP_bore = -13.3604302656684 + 4.04536293034574 *
REP_IMP_bore ;
96363     +   IF MISSING( REP_IMP_stroke ) THEN S_REP_IMP_stroke  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( REP_IMP_stroke ) THEN S_REP_IMP_stroke = . ;
96364     +   ELSE S_REP_IMP_stroke  =    -11.3205669287077 +     3.47855217496738 *
96365     +        REP_IMP_stroke ;
MPRINT(EM_DIAGRAM):   ELSE S_REP_IMP_stroke = -11.3205669287077 + 3.47855217496738 *
REP_IMP_stroke ;
96366     +   IF MISSING( REP_city_mpg ) THEN S_REP_city_mpg  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( REP_city_mpg ) THEN S_REP_city_mpg = . ;
96367     +   ELSE S_REP_city_mpg  =    -4.23279255832632 +     0.16535248553422 *
96368     +        REP_city_mpg ;
MPRINT(EM_DIAGRAM):   ELSE S_REP_city_mpg = -4.23279255832632 + 0.16535248553422 *
REP_city_mpg ;
96369     +   IF MISSING( REP_curb_weight ) THEN S_REP_curb_weight  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( REP_curb_weight ) THEN S_REP_curb_weight = . ;
96370     +   ELSE S_REP_curb_weight  =    -5.35597047742979 +     0.00212869810672 *
96371     +        REP_curb_weight ;
MPRINT(EM_DIAGRAM):   ELSE S_REP_curb_weight = -5.35597047742979 + 0.00212869810672 *
REP_curb_weight ;
96372     +   IF MISSING( REP_height ) THEN S_REP_height  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( REP_height ) THEN S_REP_height = . ;
96373     +   ELSE S_REP_height  =    -21.8926608140893 +     0.40589318675657 *
96374     +        REP_height ;
MPRINT(EM_DIAGRAM):   ELSE S_REP_height = -21.8926608140893 + 0.40589318675657 * REP_height ;
96375     +   IF MISSING( REP_highway_mpg ) THEN S_REP_highway_mpg  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( REP_highway_mpg ) THEN S_REP_highway_mpg = . ;
96376     +   ELSE S_REP_highway_mpg  =    -4.99166764925563 +     0.16020006928199 *
96377     +        REP_highway_mpg ;
MPRINT(EM_DIAGRAM):   ELSE S_REP_highway_mpg = -4.99166764925563 + 0.16020006928199 *
REP_highway_mpg ;
96378     +   IF MISSING( REP_horsepower ) THEN S_REP_horsepower  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( REP_horsepower ) THEN S_REP_horsepower = . ;
96379     +   ELSE S_REP_horsepower  =    -2.74643097264309 +     0.02734944206973 *
96380     +        REP_horsepower ;
MPRINT(EM_DIAGRAM):   ELSE S_REP_horsepower = -2.74643097264309 + 0.02734944206973 *
REP_horsepower ;
96381     +   IF MISSING( REP_length ) THEN S_REP_length  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( REP_length ) THEN S_REP_length = . ;
96382     +   ELSE S_REP_length  =    -15.2378498365576 +     0.08781104037663 *
96383     +        REP_length ;
MPRINT(EM_DIAGRAM):   ELSE S_REP_length = -15.2378498365576 + 0.08781104037663 * REP_length ;
96384     +   IF MISSING( REP_peak_rpm ) THEN S_REP_peak_rpm  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( REP_peak_rpm ) THEN S_REP_peak_rpm = . ;
96385     +   ELSE S_REP_peak_rpm  =    -10.6885709541859 +     0.00208333904184 *
96386     +        REP_peak_rpm ;
MPRINT(EM_DIAGRAM):   ELSE S_REP_peak_rpm = -10.6885709541859 + 0.00208333904184 *
REP_peak_rpm ;
96387     +   IF MISSING( REP_wheel_base ) THEN S_REP_wheel_base  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( REP_wheel_base ) THEN S_REP_wheel_base = . ;
96388     +   ELSE S_REP_wheel_base  =    -17.8009087180129 +     0.18059887504832 *
96389     +        REP_wheel_base ;
MPRINT(EM_DIAGRAM):   ELSE S_REP_wheel_base = -17.8009087180129 + 0.18059887504832 *
REP_wheel_base ;
96390     +   IF MISSING( REP_width ) THEN S_REP_width  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( REP_width ) THEN S_REP_width = . ;
96391     +   ELSE S_REP_width  =    -35.9167499004784 +     0.54673628301566 * REP_width
96392     +         ;
MPRINT(EM_DIAGRAM):   ELSE S_REP_width = -35.9167499004784 + 0.54673628301566 * REP_width ;
96393     +END;
MPRINT(EM_DIAGRAM):   END;
96394     +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
96395     +*** Writing the Node bin ;
MPRINT(EM_DIAGRAM):   *** Writing the Node bin ;
96396     +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
96397     +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
96398     +*** Writing the Node nom ;
MPRINT(EM_DIAGRAM):   *** Writing the Node nom ;
96399     +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
96400     +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
96401     +*** Writing the Node H1 ;
MPRINT(EM_DIAGRAM):   *** Writing the Node H1 ;
96402     +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
96403     +IF _DM_BAD EQ 0 THEN DO;
MPRINT(EM_DIAGRAM):   IF _DM_BAD EQ 0 THEN DO;
96404     +   H11  =     0.14114604923302 * S_LOG_REP_IMP_price
96405     +          +     0.22107710355073 * S_LOG_REP_compression_ratio
96406     +          +     0.01063730358557 * S_LOG_REP_engine_size
96407     +          +    -0.10014119004384 * S_REP_IMP_bore  +    -0.03759863264035 *
96408     +        S_REP_IMP_stroke  +     0.07482450466947 * S_REP_city_mpg
96409     +          +    -0.28536465017016 * S_REP_curb_weight
96410     +          +     0.11632138704241 * S_REP_height  +     0.24359872537276 *
96411     +        S_REP_highway_mpg  +     0.11053757208758 * S_REP_horsepower
96412     +          +    -0.07045784528695 * S_REP_length  +    -0.21762346468185 *
96413     +        S_REP_peak_rpm  +    -0.17325144725852 * S_REP_wheel_base
96414     +          +     0.37161591541424 * S_REP_width ;
MPRINT(EM_DIAGRAM):   H11 = 0.14114604923302 * S_LOG_REP_IMP_price + 0.22107710355073 *
S_LOG_REP_compression_ratio + 0.01063730358557 * S_LOG_REP_engine_size + -0.10014119004384 *
S_REP_IMP_bore + -0.03759863264035 * S_REP_IMP_stroke + 0.07482450466947 * S_REP_city_mpg +
-0.28536465017016 * S_REP_curb_weight + 0.11632138704241 * S_REP_height + 0.24359872537276 *
S_REP_highway_mpg + 0.11053757208758 * S_REP_horsepower + -0.07045784528695 * S_REP_length +
-0.21762346468185 * S_REP_peak_rpm + -0.17325144725852 * S_REP_wheel_base + 0.37161591541424 *
S_REP_width ;
96415     +   H12  =     0.05896220480011 * S_LOG_REP_IMP_price
96416     +          +     0.18017576649352 * S_LOG_REP_compression_ratio
96417     +          +     0.13666603498983 * S_LOG_REP_engine_size
96418     +          +     0.08905307497507 * S_REP_IMP_bore  +     0.08450123024202 *
96419     +        S_REP_IMP_stroke  +      0.0953955201221 * S_REP_city_mpg
96420     +          +     0.06997312342759 * S_REP_curb_weight
96421     +          +     0.11454978606317 * S_REP_height  +    -0.19856329211228 *
96422     +        S_REP_highway_mpg  +     0.12027932441722 * S_REP_horsepower
96423     +          +      0.2974258001212 * S_REP_length  +     0.23235745908363 *
96424     +        S_REP_peak_rpm  +    -0.16918609268289 * S_REP_wheel_base
96425     +          +    -0.23250714188118 * S_REP_width ;
MPRINT(EM_DIAGRAM):   H12 = 0.05896220480011 * S_LOG_REP_IMP_price + 0.18017576649352 *
S_LOG_REP_compression_ratio + 0.13666603498983 * S_LOG_REP_engine_size + 0.08905307497507 *
S_REP_IMP_bore + 0.08450123024202 * S_REP_IMP_stroke + 0.0953955201221 * S_REP_city_mpg +
0.06997312342759 * S_REP_curb_weight + 0.11454978606317 * S_REP_height + -0.19856329211228 *
S_REP_highway_mpg + 0.12027932441722 * S_REP_horsepower + 0.2974258001212 * S_REP_length +
0.23235745908363 * S_REP_peak_rpm + -0.16918609268289 * S_REP_wheel_base + -0.23250714188118 *
S_REP_width ;
96426     +   H13  =    -0.12906110115101 * S_LOG_REP_IMP_price
96427     +          +    -0.02233821917203 * S_LOG_REP_compression_ratio
96428     +          +    -0.35091523886958 * S_LOG_REP_engine_size
96429     +          +    -0.41460804807699 * S_REP_IMP_bore  +    -0.24839281719309 *
96430     +        S_REP_IMP_stroke  +    -0.70537276068634 * S_REP_city_mpg
96431     +          +    -0.58021382402741 * S_REP_curb_weight
96432     +          +    -0.22826753012592 * S_REP_height  +      0.0169914306349 *
96433     +        S_REP_highway_mpg  +     0.10463377560074 * S_REP_horsepower
96434     +          +     0.35288922545253 * S_REP_length  +    -0.19481970154693 *
96435     +        S_REP_peak_rpm  +    -0.80556145797505 * S_REP_wheel_base
96436     +          +     0.51492976697395 * S_REP_width ;
MPRINT(EM_DIAGRAM):   H13 = -0.12906110115101 * S_LOG_REP_IMP_price + -0.02233821917203 *
S_LOG_REP_compression_ratio + -0.35091523886958 * S_LOG_REP_engine_size + -0.41460804807699 *
S_REP_IMP_bore + -0.24839281719309 * S_REP_IMP_stroke + -0.70537276068634 * S_REP_city_mpg +
-0.58021382402741 * S_REP_curb_weight + -0.22826753012592 * S_REP_height + 0.0169914306349 *
S_REP_highway_mpg + 0.10463377560074 * S_REP_horsepower + 0.35288922545253 * S_REP_length +
-0.19481970154693 * S_REP_peak_rpm + -0.80556145797505 * S_REP_wheel_base + 0.51492976697395 *
S_REP_width ;
96437     +   H11  = H11  +    -0.09761603527807 * M_bore0  +     0.32345868357271 *
96438     +        M_num_of_doors0  +     0.20084593155895 * M_price0
96439     +          +    -0.20994977796409 * M_stroke0 ;
MPRINT(EM_DIAGRAM):   H11 = H11 + -0.09761603527807 * M_bore0 + 0.32345868357271 *
M_num_of_doors0 + 0.20084593155895 * M_price0 + -0.20994977796409 * M_stroke0 ;
96440     +   H12  = H12  +    -0.06788596638774 * M_bore0  +     0.34399071242393 *
96441     +        M_num_of_doors0  +      0.0463196246907 * M_price0
96442     +          +    -0.26485643855048 * M_stroke0 ;
MPRINT(EM_DIAGRAM):   H12 = H12 + -0.06788596638774 * M_bore0 + 0.34399071242393 *
M_num_of_doors0 + 0.0463196246907 * M_price0 + -0.26485643855048 * M_stroke0 ;
96443     +   H13  = H13  +    -0.35051306126484 * M_bore0  +    -0.02794915457366 *
96444     +        M_num_of_doors0  +     0.31309425299639 * M_price0
96445     +          +    -0.47776887747706 * M_stroke0 ;
MPRINT(EM_DIAGRAM):   H13 = H13 + -0.35051306126484 * M_bore0 + -0.02794915457366 *
M_num_of_doors0 + 0.31309425299639 * M_price0 + -0.47776887747706 * M_stroke0 ;
96446     +   H11  = H11  +     0.06100363905736 * IMP_num_of_doors2
96447     +          +     0.10122536313104 * REP_aspirationS  +    -0.17959848113703 *
96448     +        REP_body_styleC  +    -0.39712858179454 * REP_body_styleH
96449     +          +     0.04767092759288 * REP_body_styleS  +     0.10233875091231 *
96450     +        REP_drive_wheels4  +    -0.09500800631183 * REP_drive_wheelsF
96451     +          +     0.07460109227871 * REP_engine_locationF
96452     +          +     0.26300770846072 * REP_fuel_systemnon_spdi
96453     +          +     0.23650863802652 * REP_fuel_typeD  +    -0.32049705686665 *
96454     +        REP_num_of_cylinders__4  +     0.06805374196668 * engine_typedohc
96455     +          +     0.16364588242528 * engine_typel  +    -0.05913911607092 *
96456     +        engine_typeohc  +     0.18536496535236 * engine_typeohcf
96457     +          +    -0.09174498568145 * engine_typeohcv ;
MPRINT(EM_DIAGRAM):   H11 = H11 + 0.06100363905736 * IMP_num_of_doors2 + 0.10122536313104 *
REP_aspirationS + -0.17959848113703 * REP_body_styleC + -0.39712858179454 * REP_body_styleH +
0.04767092759288 * REP_body_styleS + 0.10233875091231 * REP_drive_wheels4 + -0.09500800631183
* REP_drive_wheelsF + 0.07460109227871 * REP_engine_locationF + 0.26300770846072 *
REP_fuel_systemnon_spdi + 0.23650863802652 * REP_fuel_typeD + -0.32049705686665 *
REP_num_of_cylinders__4 + 0.06805374196668 * engine_typedohc + 0.16364588242528 * engine_typel
+ -0.05913911607092 * engine_typeohc + 0.18536496535236 * engine_typeohcf + -0.09174498568145
* engine_typeohcv ;
96458     +   H12  = H12  +    -0.04288679296194 * IMP_num_of_doors2
96459     +          +    -0.09067917550664 * REP_aspirationS  +    -0.00898495387833 *
96460     +        REP_body_styleC  +       0.159812944318 * REP_body_styleH
96461     +          +      0.0711141581938 * REP_body_styleS  +     0.10210979168732 *
96462     +        REP_drive_wheels4  +     -0.3538576414303 * REP_drive_wheelsF
96463     +          +    -0.16393166907394 * REP_engine_locationF
96464     +          +     0.11934989985506 * REP_fuel_systemnon_spdi
96465     +          +     0.02352084105235 * REP_fuel_typeD  +    -0.11143166546072 *
96466     +        REP_num_of_cylinders__4  +    -0.10331230763277 * engine_typedohc
96467     +          +     0.09972953235323 * engine_typel  +    -0.02037020133855 *
96468     +        engine_typeohc  +    -0.10116492050927 * engine_typeohcf
96469     +          +    -0.29902685656789 * engine_typeohcv ;
MPRINT(EM_DIAGRAM):   H12 = H12 + -0.04288679296194 * IMP_num_of_doors2 + -0.09067917550664 *
REP_aspirationS + -0.00898495387833 * REP_body_styleC + 0.159812944318 * REP_body_styleH +
0.0711141581938 * REP_body_styleS + 0.10210979168732 * REP_drive_wheels4 + -0.3538576414303 *
REP_drive_wheelsF + -0.16393166907394 * REP_engine_locationF + 0.11934989985506 *
REP_fuel_systemnon_spdi + 0.02352084105235 * REP_fuel_typeD + -0.11143166546072 *
REP_num_of_cylinders__4 + -0.10331230763277 * engine_typedohc + 0.09972953235323 *
engine_typel + -0.02037020133855 * engine_typeohc + -0.10116492050927 * engine_typeohcf +
-0.29902685656789 * engine_typeohcv ;
96470     +   H13  = H13  +     0.57885984374832 * IMP_num_of_doors2
96471     +          +    -0.06313012281847 * REP_aspirationS  +     0.18273714441841 *
96472     +        REP_body_styleC  +    -0.00453951283747 * REP_body_styleH
96473     +          +      0.0466508929301 * REP_body_styleS  +    -0.04931547332574 *
96474     +        REP_drive_wheels4  +     0.07528309204941 * REP_drive_wheelsF
96475     +          +    -0.01679674641439 * REP_engine_locationF
96476     +          +      -0.148583011616 * REP_fuel_systemnon_spdi
96477     +          +     0.01206718731045 * REP_fuel_typeD  +     0.01468742261582 *
96478     +        REP_num_of_cylinders__4  +     0.07027057170791 * engine_typedohc
96479     +          +     0.20558093284809 * engine_typel  +     0.55435637562404 *
96480     +        engine_typeohc  +    -0.38590829668888 * engine_typeohcf
96481     +          +      0.0022264257698 * engine_typeohcv ;
MPRINT(EM_DIAGRAM):   H13 = H13 + 0.57885984374832 * IMP_num_of_doors2 + -0.06313012281847 *
REP_aspirationS + 0.18273714441841 * REP_body_styleC + -0.00453951283747 * REP_body_styleH +
0.0466508929301 * REP_body_styleS + -0.04931547332574 * REP_drive_wheels4 + 0.07528309204941 *
REP_drive_wheelsF + -0.01679674641439 * REP_engine_locationF + -0.148583011616 *
REP_fuel_systemnon_spdi + 0.01206718731045 * REP_fuel_typeD + 0.01468742261582 *
REP_num_of_cylinders__4 + 0.07027057170791 * engine_typedohc + 0.20558093284809 * engine_typel
+ 0.55435637562404 * engine_typeohc + -0.38590829668888 * engine_typeohcf + 0.0022264257698 *
engine_typeohcv ;
96482     +   H11  =    -0.54817324462785 + H11 ;
MPRINT(EM_DIAGRAM):   H11 = -0.54817324462785 + H11 ;
96483     +   H12  =    -0.46773956921898 + H12 ;
MPRINT(EM_DIAGRAM):   H12 = -0.46773956921898 + H12 ;
96484     +   H13  =     0.60022135338159 + H13 ;
MPRINT(EM_DIAGRAM):   H13 = 0.60022135338159 + H13 ;
96485     +   H11  = TANH(H11 );
MPRINT(EM_DIAGRAM):   H11 = TANH(H11 );
96486     +   H12  = TANH(H12 );
MPRINT(EM_DIAGRAM):   H12 = TANH(H12 );
96487     +   H13  = TANH(H13 );
MPRINT(EM_DIAGRAM):   H13 = TANH(H13 );
96488     +END;
MPRINT(EM_DIAGRAM):   END;
96489     +ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
96490     +   H11  = .;
MPRINT(EM_DIAGRAM):   H11 = .;
96491     +   H12  = .;
MPRINT(EM_DIAGRAM):   H12 = .;
96492     +   H13  = .;
MPRINT(EM_DIAGRAM):   H13 = .;
96493     +END;
MPRINT(EM_DIAGRAM):   END;
96494     +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
96495     +*** Writing the Node Risk ;
MPRINT(EM_DIAGRAM):   *** Writing the Node Risk ;
96496     +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
96497     +
96498     +*** Generate dummy variables for Risk ;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for Risk ;
96499     +drop Risk1 Risk0 ;
MPRINT(EM_DIAGRAM):   drop Risk1 Risk0 ;
96500     +label F_Risk = 'From: Risk' ;
MPRINT(EM_DIAGRAM):   label F_Risk = 'From: Risk' ;
96501     +length F_Risk $ 12;
MPRINT(EM_DIAGRAM):   length F_Risk $ 12;
96502     +F_Risk = put( Risk , BEST12. );
MPRINT(EM_DIAGRAM):   F_Risk = put( Risk , BEST12. );
96503     +%DMNORMIP( F_Risk )
MPRINT(DMNORMIP):   call dmnorm(F_Risk,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
96504     +if missing( Risk ) then do;
MPRINT(EM_DIAGRAM):   if missing( Risk ) then do;
96505     +   Risk1 = .;
MPRINT(EM_DIAGRAM):   Risk1 = .;
96506     +   Risk0 = .;
MPRINT(EM_DIAGRAM):   Risk0 = .;
96507     +end;
MPRINT(EM_DIAGRAM):   end;
96508     +else do;
MPRINT(EM_DIAGRAM):   else do;
96509     +   if F_Risk = '1'  then do;
MPRINT(EM_DIAGRAM):   if F_Risk = '1' then do;
96510     +      Risk1 = 1;
MPRINT(EM_DIAGRAM):   Risk1 = 1;
96511     +      Risk0 = 0;
MPRINT(EM_DIAGRAM):   Risk0 = 0;
96512     +   end;
MPRINT(EM_DIAGRAM):   end;
96513     +   else if F_Risk = '0'  then do;
MPRINT(EM_DIAGRAM):   else if F_Risk = '0' then do;
96514     +      Risk1 = 0;
MPRINT(EM_DIAGRAM):   Risk1 = 0;
96515     +      Risk0 = 1;
MPRINT(EM_DIAGRAM):   Risk0 = 1;
96516     +   end;
MPRINT(EM_DIAGRAM):   end;
96517     +   else do;
MPRINT(EM_DIAGRAM):   else do;
96518     +      Risk1 = .;
MPRINT(EM_DIAGRAM):   Risk1 = .;
96519     +      Risk0 = .;
MPRINT(EM_DIAGRAM):   Risk0 = .;
96520     +   end;
MPRINT(EM_DIAGRAM):   end;
96521     +end;
MPRINT(EM_DIAGRAM):   end;
96522     +IF _DM_BAD EQ 0 THEN DO;
MPRINT(EM_DIAGRAM):   IF _DM_BAD EQ 0 THEN DO;
96523     +   P_Risk1  =     1.21348641298657 * H11  +     0.09729650872853 * H12
96524     +          +     5.64979482539338 * H13 ;
MPRINT(EM_DIAGRAM):   P_Risk1 = 1.21348641298657 * H11 + 0.09729650872853 * H12 +
5.64979482539338 * H13 ;
96525     +   P_Risk1  =    -0.00460119400654 + P_Risk1 ;
MPRINT(EM_DIAGRAM):   P_Risk1 = -0.00460119400654 + P_Risk1 ;
96526     +   P_Risk0  = 0;
MPRINT(EM_DIAGRAM):   P_Risk0 = 0;
96527     +   _MAX_ = MAX (P_Risk1 , P_Risk0 );
MPRINT(EM_DIAGRAM):   _MAX_ = MAX (P_Risk1 , P_Risk0 );
96528     +   _SUM_ = 0.;
MPRINT(EM_DIAGRAM):   _SUM_ = 0.;
96529     +   P_Risk1  = EXP(P_Risk1  - _MAX_);
MPRINT(EM_DIAGRAM):   P_Risk1 = EXP(P_Risk1 - _MAX_);
96530     +   _SUM_ = _SUM_ + P_Risk1 ;
MPRINT(EM_DIAGRAM):   _SUM_ = _SUM_ + P_Risk1 ;
96531     +   P_Risk0  = EXP(P_Risk0  - _MAX_);
MPRINT(EM_DIAGRAM):   P_Risk0 = EXP(P_Risk0 - _MAX_);
96532     +   _SUM_ = _SUM_ + P_Risk0 ;
MPRINT(EM_DIAGRAM):   _SUM_ = _SUM_ + P_Risk0 ;
96533     +   P_Risk1  = P_Risk1  / _SUM_;
MPRINT(EM_DIAGRAM):   P_Risk1 = P_Risk1 / _SUM_;
96534     +   P_Risk0  = P_Risk0  / _SUM_;
MPRINT(EM_DIAGRAM):   P_Risk0 = P_Risk0 / _SUM_;
96535     +END;
MPRINT(EM_DIAGRAM):   END;
96536     +ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
96537     +   P_Risk1  = .;
MPRINT(EM_DIAGRAM):   P_Risk1 = .;
96538     +   P_Risk0  = .;
MPRINT(EM_DIAGRAM):   P_Risk0 = .;
96539     +END;
MPRINT(EM_DIAGRAM):   END;
96540     +IF _DM_BAD EQ 1 THEN DO;
MPRINT(EM_DIAGRAM):   IF _DM_BAD EQ 1 THEN DO;
96541     +   P_Risk1  =                 0.54;
MPRINT(EM_DIAGRAM):   P_Risk1 = 0.54;
96542     +   P_Risk0  =                 0.46;
MPRINT(EM_DIAGRAM):   P_Risk0 = 0.46;
96543     +END;
MPRINT(EM_DIAGRAM):   END;
96544     +*** *****************************;
MPRINT(EM_DIAGRAM):   *** *****************************;
96545     +*** Writing the Residuals  of the Node Risk ;
MPRINT(EM_DIAGRAM):   *** Writing the Residuals of the Node Risk ;
96546     +*** ******************************;
MPRINT(EM_DIAGRAM):   *** ******************************;
96547     +IF MISSING( Risk1 ) THEN R_Risk1  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( Risk1 ) THEN R_Risk1 = . ;
96548     +ELSE R_Risk1  = Risk1  - P_Risk1 ;
MPRINT(EM_DIAGRAM):   ELSE R_Risk1 = Risk1 - P_Risk1 ;
96549     +IF MISSING( Risk0 ) THEN R_Risk0  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( Risk0 ) THEN R_Risk0 = . ;
96550     +ELSE R_Risk0  = Risk0  - P_Risk0 ;
MPRINT(EM_DIAGRAM):   ELSE R_Risk0 = Risk0 - P_Risk0 ;
96551     +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
96552     +*** Writing the I_Risk  AND U_Risk ;
MPRINT(EM_DIAGRAM):   *** Writing the I_Risk AND U_Risk ;
96553     +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
96554     +_MAXP_ = P_Risk1 ;
MPRINT(EM_DIAGRAM):   _MAXP_ = P_Risk1 ;
96555     +I_Risk  = "1           " ;
MPRINT(EM_DIAGRAM):   I_Risk = "1           " ;
96556     +U_Risk  =                    1;
MPRINT(EM_DIAGRAM):   U_Risk = 1;
96557     +IF( _MAXP_ LT P_Risk0  ) THEN DO;
MPRINT(EM_DIAGRAM):   IF( _MAXP_ LT P_Risk0 ) THEN DO;
96558     +   _MAXP_ = P_Risk0 ;
MPRINT(EM_DIAGRAM):   _MAXP_ = P_Risk0 ;
96559     +   I_Risk  = "0           " ;
MPRINT(EM_DIAGRAM):   I_Risk = "0           " ;
96560     +   U_Risk  =                    0;
MPRINT(EM_DIAGRAM):   U_Risk = 0;
96561     +END;
MPRINT(EM_DIAGRAM):   END;
96562     +********************************;
MPRINT(EM_DIAGRAM):   ********************************;
96563     +*** End Scoring Code for Neural;
MPRINT(EM_DIAGRAM):   *** End Scoring Code for Neural;
96564     +********************************;
MPRINT(EM_DIAGRAM):   ********************************;
96565     +drop
96566     +H11
96567     +H12
96568     +H13
96569     +;
MPRINT(EM_DIAGRAM):   drop H11 H12 H13 ;
96570     +drop S_:;
MPRINT(EM_DIAGRAM):   drop S_:;
NOTE: %INCLUDE (level 1) ending.
MPRINT(EM_DIAGRAM):   run;
96571      run;
 
NOTE: DATA STEP view saved on file EMWS1.NEURAL2_VALIDATE.
NOTE: A stored DATA STEP view cannot run under a different operating system.
NOTE: View EMWS1.REPL2_VALIDATE.VIEW used (Total process time):
      real time           0.24 seconds
      cpu time            0.21 seconds
 
NOTE: DATA statement used (Total process time):
      real time           0.25 seconds
      cpu time            0.21 seconds
 
 
MPRINT(EM_DIAGRAM):   quit;
96572      quit;
96573      filename emflow;
MPRINT(EM_DIAGRAM):   filename emflow;
NOTE: Fileref EMFLOW has been deassigned.
96574      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
96575      * Neural2: Computing metadata for TRAIN data;
MPRINT(EM_DIAGRAM):   * Neural2: Computing metadata for TRAIN data;
96576      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
 
NOTE: View EMWS1.NEURAL2_TRAIN.VIEW used (Total process time):
      real time           0.22 seconds
      cpu time            0.23 seconds
 
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * &nodeid: Computing Metadata for TRAIN data;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   filename _delta "H:\746\Decision Tree
test\Workspaces\EMWS1\Neural2\CDELTA_TRAIN.sas";
MPRINT(EMADVISECOLUMNS):   proc display c=sashelp.emmeta.advisecolumns.scl;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    options validvarname=any;
MPRINT(EMADVISECOLUMNS):   proc contents data=EMWS1.Neural2_TRAIN out=_tempAdvisor noprint;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):   options validvarname=V7;
MPRINT(EMADVISECOLUMNS):    data _null_;
MPRINT(EMADVISECOLUMNS):   dsid = open('EMWS1.Neural2_TRAIN');
MPRINT(EMADVISECOLUMNS):   call symput('_dsidTable', strip(put(dsid, best.)));
MPRINT(EMADVISECOLUMNS):   if dsid then do;
MPRINT(EMADVISECOLUMNS):   call symput('_engineTable', attrc(dsid, 'ENGINE'));
MPRINT(EMADVISECOLUMNS):   dsid = close(dsid);
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    proc contents data=EMWS1.Neural2_TRAIN out=WORK.M0ZLWEVD noprint;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M0ZLWEVD;
MPRINT(EMADVISECOLUMNS):   length NAME $ 64 TYPE $ 1 LABEL $ 200 FORMAT $ 36 INFORMAT $36
INDEX $ 1 INDEXTYPE $ 9;
MPRINT(EMADVISECOLUMNS):   label NAME =;
MPRINT(EMADVISECOLUMNS):   set WORK.M0ZLWEVD(keep=name type length label format formatl
formatd informat informl informd idxusage rename=(type=itype));
MPRINT(EMADVISECOLUMNS):   if itype = 1 then type = 'N';
MPRINT(EMADVISECOLUMNS):   else type = 'C';
MPRINT(EMADVISECOLUMNS):   if formatl > 0 then do;
MPRINT(EMADVISECOLUMNS):   if format ne ' ' then format = strip(format)!!strip(put(formatl,
best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EMADVISECOLUMNS):   else format = strip(put(formatl, best12.))!!'.'!!strip(put(formatd,
best12.));
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if format ne '' then format = strip(format)!!'.';
MPRINT(EMADVISECOLUMNS):   if informl > 0 then do;
MPRINT(EMADVISECOLUMNS):   if informat ne ' ' then informat =
strip(informat)!!strip(put(informl, best12.))!!'.'!!strip(put(informd, best12.));
MPRINT(EMADVISECOLUMNS):   else informat = strip(put(informl,
best12.))!!'.'!!strip(put(informd, best12.));
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if informat ne '' then informat = strip(informat)!!'.';
MPRINT(EMADVISECOLUMNS):   if idxusage = 'NONE' then index ="N";
MPRINT(EMADVISECOLUMNS):   else index = "Y";
MPRINT(EMADVISECOLUMNS):   indextype = idxusage;
MPRINT(EMADVISECOLUMNS):   drop idxusage itype formatl formatd informl informd;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M0ZLWEVD;
MPRINT(EMADVISECOLUMNS):   length UNAME $64;
MPRINT(EMADVISECOLUMNS):   set WORK.M0ZLWEVD;
MPRINT(EMADVISECOLUMNS):   UNAME = upcase(NAME);
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    proc sort data=WORK.M084PRLE NOTHREADS;
MPRINT(EMADVISECOLUMNS):   by UNAME;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M084PRLE;
MPRINT(EMADVISECOLUMNS):   drop UNAME;
MPRINT(EMADVISECOLUMNS):   set WORK.M084PRLE;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M3UIT47C(keep=NAME ATTR);
MPRINT(EMADVISECOLUMNS):   length ATTR $ 20;
MPRINT(EMADVISECOLUMNS):   set WORK.M084PRLE;
MPRINT(EMADVISECOLUMNS):   if level ne "INTERVAL" then do;
MPRINT(EMADVISECOLUMNS):   if order = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'ORDER';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if format ne ' ' and formattype = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'FORMATTYPE';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if role = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'ROLE';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if level = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'LEVEL';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if type = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'TYPE';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if index = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'INDEX';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if report = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'REPORT';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):   proc sort NOTHREADS;
MPRINT(EMADVISECOLUMNS):   by attr;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M084PRLE;
MPRINT(EMADVISECOLUMNS):   length NAME $64 ROLE $ 32 LEVEL $ 10 ORDER $ 8 CREATOR $32
FORMATTYPE $ 10 FAMILY $ 10 LOWERLIMIT 8 UPPERLIMIT 8 REPORT $1 DISTRIBUTION $ 20 COMMENT $64;
MPRINT(EMADVISECOLUMNS):   length levelAssigned 8 roleAssigned 8 PRICE 8;
MPRINT(EMADVISECOLUMNS):   set WORK.M084PRLE;
MPRINT(EMADVISECOLUMNS):   if formattype = ' ' then do;
MPRINT(EMADVISECOLUMNS):   if format ne ' ' then do;
MPRINT(EMADVISECOLUMNS):   if type = 'N' then do;
MPRINT(EMADVISECOLUMNS):   pos = indexc(format,'.1234567890');
MPRINT(EMADVISECOLUMNS):   if pos > 1 then tempfmt = substr(format,1, pos-1);
MPRINT(EMADVISECOLUMNS):   else tempfmt = ' ';
MPRINT(EMADVISECOLUMNS):   flen = length(tempfmt);
MPRINT(EMADVISECOLUMNS):   select;
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("DATE" "DAY" "DDMMYY" "DOWNAME" "JULDAY" "JULIAN"
"MMDDYY" "MMDDYYD" "MMDDYYC" "MMDDYYN" "MMDDYYP" "MMDDYYS" "MONNAME" "MONTH" "MONYY" "NENGO"
"QTR" "QTRR" "WEEKDATE" "WEEKDATX" "WEEKDAY" "WORDDATE" "WORDDATX" "YEAR" "YYMMDD" "YYMON"
"YYMMDDC" "YYMMDDD" "YYMMDDN" "YYMMDDP" "YYMMDDS" "EURDFDE" "NJDATE" "NLDATE" "EURDFDD"
"EURDFDWN" "EURDFMN" "EURDFMY" "EURDFWK" "EURDFWKX" "EURDFWDX" "EURDFDN" "EURDFDE" ))
formattype = 'DATE';
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("DATETIME" "EURDFDT" "TOD" )) formattype =
"DATETIME";
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("HHMM" "HOUR" "MMSS" "TIME" "TIMEAMPM" ))
formattype = "TIME";
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("COMMA" "COMMAX" "DOLLAR" "DOLLARX" "E" "FRACT"
"NEGPAREN" "PERCENT")) formattype="QUANTITY";
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("BINARY" "HEX" "IB" "OCTAL" "PD" "PIB" "PK" "RB"
"SSN" "Z" "ZD")) formattype = "CODING";
MPRINT(EMADVISECOLUMNS):   otherwise do;
MPRINT(EMADVISECOLUMNS):   formattype = "USER";
MPRINT(EMADVISECOLUMNS):   if substr(tempfmt, 1, 6)='NLDATE' then formattype = "DATE";
MPRINT(EMADVISECOLUMNS):   else if substr(tempfmt, 1, 6)='NLDATM' then formattype = "DATETIME";
MPRINT(EMADVISECOLUMNS):   else if substr(tempfmt, 1, 4)='NLTIM' then formattype = "TIME";
MPRINT(EMADVISECOLUMNS):   else if flen >= 4 then do;
MPRINT(EMADVISECOLUMNS):   str = substr(tempfmt,1,4);
MPRINT(EMADVISECOLUMNS):   if str in ("MMYY" "YYMM" "YYQR") then formattype ="DATE";
MPRINT(EMADVISECOLUMNS):   else if str = "S370" then formattype = "CODING";
MPRINT(EMADVISECOLUMNS):   else if str = "BEST" then formattype = "NUM";
MPRINT(EMADVISECOLUMNS):   drop str;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if flen >=3 and substr(tempfmt,1,3) = "YYQ" then formatType =
"DATE";
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   drop flen tempfmt pos;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else do;
MPRINT(EMADVISECOLUMNS):   formatType = "CATEGORY";
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if formatType = "NUM" then do;
MPRINT(EMADVISECOLUMNS):   if index = "Y" then formatType = "DISCRETE";
MPRINT(EMADVISECOLUMNS):   else formatType = "QUANTITY";
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if level = ' ' then do;
MPRINT(EMADVISECOLUMNS):   if formatType in ("CATEGORY", "CODING", "ID") or type = "C" then
level = "NOMINAL";
MPRINT(EMADVISECOLUMNS):   else level = "INTERVAL";
MPRINT(EMADVISECOLUMNS):   levelAssigned = 1;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else level = upcase(level);
MPRINT(EMADVISECOLUMNS):   if role = ' ' then do;
MPRINT(EMADVISECOLUMNS):   length name_prefix $8 _uname $64;
MPRINT(EMADVISECOLUMNS):   drop name_prefix _uname _freqflag;
MPRINT(EMADVISECOLUMNS):   retain _freqflag;
MPRINT(EMADVISECOLUMNS):   if LENGTH> 80 then ROLE = 'TEXT';
MPRINT(EMADVISECOLUMNS):   _uname = upcase(NAME);
MPRINT(EMADVISECOLUMNS):   select(_uname);
MPRINT(EMADVISECOLUMNS):   when('_PARTIND_') do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'ID';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   when('_WARN_') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_SEGMENT') do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'SEGMENT';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   when('_NODE_') do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'SEGMENT';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   when('EM_CLASSTARGET') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_VALUETARGET') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_PREDICTION') ROLE = 'PREDICT';
MPRINT(EMADVISECOLUMNS):   when('EM_PROBABILITY') ROLE = 'PREDICT';
MPRINT(EMADVISECOLUMNS):   when('EM_EVENTPROBABILITY') ROLE = 'PREDICT';
MPRINT(EMADVISECOLUMNS):   when('EM_CLASSIFICATION') ROLE = 'CLASSIFICATION';
MPRINT(EMADVISECOLUMNS):   when('EM_DECISION') ROLE = 'DECISION';
MPRINT(EMADVISECOLUMNS):   when('EM_PROFIT') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_LOSS') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_ROI') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('URI') ROLE = 'URL';
MPRINT(EMADVISECOLUMNS):   when('FILTERED') ROLE = 'TEXTLOC';
MPRINT(EMADVISECOLUMNS):   otherwise do;
MPRINT(EMADVISECOLUMNS):   if upcase(NAME) =: 'ZIP' then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'REJECTED';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   COMMENT = 'Rejected by: Exceed the maximum class level of %s';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if upcase(NAME) in('FREQ', 'FREQUENCY') then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'FREQ';
MPRINT(EMADVISECOLUMNS):   if TYPE = 'C' then ROLE = 'INPUT';
MPRINT(EMADVISECOLUMNS):   else if _freqflag =1 then ROLE='REJECTED';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else do;
MPRINT(EMADVISECOLUMNS):   name_prefix = scan(_uname, 1, '_');
MPRINT(EMADVISECOLUMNS):   if scan(_uname, 2, '_') = '' then name_prefix='';
MPRINT(EMADVISECOLUMNS):   if name_prefix in('F', 'I', 'U') then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'CLASSIFICATION';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if name_prefix in('P', 'V') then ROLE = 'PREDICT';
MPRINT(EMADVISECOLUMNS):   else if name_prefix in('R', 'RS', 'RT', 'RD', 'RDS', 'RDT', 'RA',
'RAS', 'RAT') then ROLE = 'RESIDUAL';
MPRINT(EMADVISECOLUMNS):   else if name_prefix ='D' then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'DECISION';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if name_prefix ='B' then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'SEGMENT';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if name_prefix in('EP', 'BP', 'CP', 'EL', 'CL', 'BL', 'W',
'ROI', 'IC') then ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   else do;
MPRINT(EMADVISECOLUMNS):   array _ROLE_ (19) $32 _TEMPORARY_
('ASSESS','CLASSIFICATION','CENSOR', 'COST', 'CROSSID', 'DECISION', 'ID','INPUT', 'LABEL',
'MISSING','PREDICT','REFERRER','REJECTED', 'RESIDUAL','SEGMENT', 'SEQUENCE','TARGET', 'TEXT',
'TIMEID');
MPRINT(EMADVISECOLUMNS):   drop _found_ i;
MPRINT(EMADVISECOLUMNS):   _found_=0;
MPRINT(EMADVISECOLUMNS):   do i=1 to 19 until(_found_=1);
MPRINT(EMADVISECOLUMNS):   if index(_uname, trim(_ROLE_{i}))=1 then do;
MPRINT(EMADVISECOLUMNS):   ROLE=_ROLE_{i};
MPRINT(EMADVISECOLUMNS):   if ROLE = 'ID' then LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   else if ROLE = 'SEGMENT' then LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   else if ROLE = 'TIMEID' and TYPE='N' then LEVEL = 'INTERVAL';
MPRINT(EMADVISECOLUMNS):   _found_=1;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if length(_uname)>2 then do;
MPRINT(EMADVISECOLUMNS):   if substr(reverse(trim(_uname)), 1, 3) = 'DI_' then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'ID';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if ROLE='FREQ' then _freqflag=1;
MPRINT(EMADVISECOLUMNS):   else if ROLE = 'CLASSIFICATION' then LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   if symexist('RATEMKG_ROLE') then do;
MPRINT(EMADVISECOLUMNS):   if upcase(symget('RATEMKG_ROLE')) in('Y', 'YES') then do;
MPRINT(EMADVISECOLUMNS):   if _uname =: 'POLICY' then ROLE = 'POLICYID';
MPRINT(EMADVISECOLUMNS):   else if _uname in ('PARTITION', '_PARTIND_') then ROLE =
'PARTITION';
MPRINT(EMADVISECOLUMNS):   else if type = 'N' then do;
MPRINT(EMADVISECOLUMNS):   if _uname = 'EXPOSURE' then ROLE = 'EXPOSURE';
MPRINT(EMADVISECOLUMNS):   else if _uname = 'YEAR' then ROLE = 'YEAR';
MPRINT(EMADVISECOLUMNS):   else if _uname = 'WEIGHT' then ROLE = 'WEIGHT';
MPRINT(EMADVISECOLUMNS):   else if _uname = 'OFFSET' then ROLE = 'OFFSET';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if role = ' ' then do;
MPRINT(EMADVISECOLUMNS):   if formattype in('DATE', 'DATETIME', 'TIME') then role = 'TIMEID';
MPRINT(EMADVISECOLUMNS):   else role = 'INPUT';
MPRINT(EMADVISECOLUMNS):   roleAssigned = 1;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else role = upcase(role);
MPRINT(EMADVISECOLUMNS):   if REPORT = '' then REPORT = 'N';
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M084PRLE;
MPRINT(EMADVISECOLUMNS):   set WORK.M084PRLE;
MPRINT(EMADVISECOLUMNS):   label NAME = "Variable Name" TYPE = "Type" ROLE = "Role" LEVEL=
"Measurement Level" ORDER= "Order" CREATOR= "Creator" FORMATTYPE= "Format Type" FAMILY=
"Family" DISTRIBUTION= "Distribution" PRICE= "Price" LOWERLIMIT= "Lower limit" UPPERLIMIT=
"Upper Limit" REPORT= "Report" COMMENT= "Comment" INDEX= "Index" INDEXTYPE= "IndexType" LABEL=
"Label" LENGTH= "Length";
MPRINT(EMADVISECOLUMNS):   drop levelAssigned roleAssigned;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   proc sort data=WORK.COLUMNMETA;
MPRINT(EM_DIAGRAM):   by NAME;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * &nodeid: Merge incoming metadata;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   proc contents data=EMWS1.Repl2_TRAIN noprint out=_temp2(keep=NAME);
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=_temp2;
MPRINT(EM_DIAGRAM):   by NAME;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=EMWS1.Repl2_CMeta_TRAIN out=_temp;
MPRINT(EM_DIAGRAM):   by NAME;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data EMWS1.Neural2_CMeta_TRAIN;
MPRINT(EM_DIAGRAM):   merge WORK.COLUMNMETA(in=_a) _temp2(in=_b) _temp(drop=FORMAT INFORMAT
LENGTH INDEX INDEXTYPE in=_c) end=_eof_;
MPRINT(EM_DIAGRAM):   by NAME;
MPRINT(EM_DIAGRAM):   if (^_a and _b) or (^_c and _a and _b) then delete;
MPRINT(EM_DIAGRAM):   if ^_b then CREATOR = "Neural2";
MPRINT(EM_DIAGRAM):   length model $200;
MPRINT(EM_DIAGRAM):   label MODEL = "Model Node";
MPRINT(EM_DIAGRAM):   select(upcase(name));
MPRINT(EM_DIAGRAM):   when("P_RISK1") creator = "Neural2";
MPRINT(EM_DIAGRAM):   when("R_RISK1") creator = "Neural2";
MPRINT(EM_DIAGRAM):   when("P_RISK0") creator = "Neural2";
MPRINT(EM_DIAGRAM):   when("R_RISK0") creator = "Neural2";
MPRINT(EM_DIAGRAM):   when("F_RISK") creator = "Neural2";
MPRINT(EM_DIAGRAM):   when("I_RISK") creator = "Neural2";
MPRINT(EM_DIAGRAM):   when("U_RISK") creator = "Neural2";
MPRINT(EM_DIAGRAM):   when("_WARN_") creator = "Neural2";
MPRINT(EM_DIAGRAM):   when("RISK") model = "Neural2";
MPRINT(EM_DIAGRAM):   when('');
MPRINT(EM_DIAGRAM):   otherwise;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Neural2: Apply Delta Code;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   filename _delta;
96915      data WORK.MODELTEMP_INFO;
MPRINT(EM_DIAGRAM):    data WORK.MODELTEMP_INFO;
96916      set EMWS1.Neural2_EMINFO;
MPRINT(EM_DIAGRAM):   set EMWS1.Neural2_EMINFO;
96917      where DATA='Neural2' and KEY ^in('DECDATA', 'DECMETA', 'IMPORTANCE', 'MODEL');
MPRINT(EM_DIAGRAM):   where DATA='Neural2' and KEY ^in('DECDATA', 'DECMETA', 'IMPORTANCE',
'MODEL');
96918      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 0 observations read from the data set EMWS1.NEURAL2_EMINFO.
      WHERE (DATA='Neural2') and KEY not in ('DECDATA', 'DECMETA', 'IMPORTANCE', 'MODEL');
NOTE: The data set WORK.MODELTEMP_INFO has 0 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.02 seconds
      cpu time            0.00 seconds
 
 
96919      data EMWS1.Neural2_EMINFO;
MPRINT(EM_DIAGRAM):    data EMWS1.Neural2_EMINFO;
96920      length TARGET KEY $32 DATA $43;
MPRINT(EM_DIAGRAM):   length TARGET KEY $32 DATA $43;
96921      input TARGET KEY DATA $;
MPRINT(EM_DIAGRAM):   input TARGET KEY DATA $;
96922      cards;
MPRINT(EM_DIAGRAM):   cards;
 
NOTE: The data set EMWS1.NEURAL2_EMINFO has 3 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.05 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_DIAGRAM):   run;
96926      run;
96927      data EMWS1.Neural2_EMINFO;
MPRINT(EM_DIAGRAM):   data EMWS1.Neural2_EMINFO;
96928      set EMWS1.Neural2_EMINFO WORK.MODELTEMP_INFO;
MPRINT(EM_DIAGRAM):   set EMWS1.Neural2_EMINFO WORK.MODELTEMP_INFO;
96929      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 3 observations read from the data set EMWS1.NEURAL2_EMINFO.
NOTE: There were 0 observations read from the data set WORK.MODELTEMP_INFO.
NOTE: The data set EMWS1.NEURAL2_EMINFO has 3 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.07 seconds
      cpu time            0.03 seconds
 
 
96930      proc sort data = EMWS1.Neural2_EMINFO NOTHREADS;
MPRINT(EM_DIAGRAM):    proc sort data = EMWS1.Neural2_EMINFO NOTHREADS;
96931      by TARGET KEY;
MPRINT(EM_DIAGRAM):   by TARGET KEY;
96932      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 3 observations read from the data set EMWS1.NEURAL2_EMINFO.
NOTE: The data set EMWS1.NEURAL2_EMINFO has 3 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.07 seconds
      cpu time            0.01 seconds
 
 
96933      proc sort data = EMWS1.FIMPORT_EMINFO OUT=WORK.SORTEDEMINFO NOTHREADS;
MPRINT(EM_DIAGRAM):    proc sort data = EMWS1.FIMPORT_EMINFO OUT=WORK.SORTEDEMINFO NOTHREADS;
96934      by TARGET KEY;
MPRINT(EM_DIAGRAM):   by TARGET KEY;
96935      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 1 observations read from the data set EMWS1.FIMPORT_EMINFO.
NOTE: The data set WORK.SORTEDEMINFO has 1 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.02 seconds
      cpu time            0.00 seconds
 
 
96936      proc sort data = EMWS1.Neural2_EMINFO OUT=WORK.TEMP_INFO NOTHREADS;
MPRINT(EM_DIAGRAM):   proc sort data = EMWS1.Neural2_EMINFO OUT=WORK.TEMP_INFO NOTHREADS;
96937      by TARGET KEY;
MPRINT(EM_DIAGRAM):   by TARGET KEY;
96938      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: Input data set is already sorted; it has been copied to the output data set.
NOTE: There were 3 observations read from the data set EMWS1.NEURAL2_EMINFO.
NOTE: The data set WORK.TEMP_INFO has 3 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
96939      data EMWS1.Neural2_EMINFO;
MPRINT(EM_DIAGRAM):   data EMWS1.Neural2_EMINFO;
96940      merge WORK.SORTEDEMINFO WORK.TEMP_INFO;
MPRINT(EM_DIAGRAM):   merge WORK.SORTEDEMINFO WORK.TEMP_INFO;
96941      by TARGET KEY;
MPRINT(EM_DIAGRAM):   by TARGET KEY;
96942      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 1 observations read from the data set WORK.SORTEDEMINFO.
NOTE: There were 3 observations read from the data set WORK.TEMP_INFO.
NOTE: The data set EMWS1.NEURAL2_EMINFO has 4 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.06 seconds
      cpu time            0.00 seconds
 
 
96943      proc datasets lib=work nolist;
MPRINT(EM_DIAGRAM):   proc datasets lib=work nolist;
96944      delete TEMP_INFO SORTEDEMINFO;
MPRINT(EM_DIAGRAM):   delete TEMP_INFO SORTEDEMINFO;
96945      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: Deleting WORK.TEMP_INFO (memtype=DATA).
NOTE: Deleting WORK.SORTEDEMINFO (memtype=DATA).
96946      quit;
MPRINT(EM_DIAGRAM):   quit;
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
NOTE: View EMWS1.NEURAL2_TRAIN.VIEW used (Total process time):
      real time           0.21 seconds
      cpu time            0.21 seconds
 
NOTE: View EMWS1.NEURAL2_VALIDATE.VIEW used (Total process time):
      real time           0.22 seconds
      cpu time            0.21 seconds
 
MPRINT(EM_DIAGRAM):    proc printto;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   call symput('NLDATE', strip(put(date(), NLDATE.)));
MPRINT(EM_DIAGRAM):   call symput('NLTIME', strip(put(datetime(), NLTIME.)));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   nldate= sasmsg("sashelp.dmine", "log_date_note", 'N', "April 16, 2021" );
MPRINT(EM_DIAGRAM):   nltime= sasmsg("sashelp.dmine", "log_time_note", 'N', "11:30:25 o'clock"
);
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "* Report Log";
MPRINT(EM_DIAGRAM):   put nldate;
MPRINT(EM_DIAGRAM):   put nltime;
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   run;
*------------------------------------------------------------*
* Report Log
Date:                April 16, 2021
Time:                11:30:25 o'clock
*------------------------------------------------------------*
MPRINT(EM_DIAGRAM):    filename O1BMEY7H "H:\746\Decision Tree
test\Workspaces\EMWS1\Neural2\EMREPORT.out" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):   proc printto print=O1BMEY7H new;
MPRINT(EM_DIAGRAM):   run;
96970      data EMWS1.Neural2_EMOUTFIT(rename=(_NAME_=TARGET));
MPRINT(EM_DIAGRAM):    data EMWS1.Neural2_EMOUTFIT(rename=(_NAME_=TARGET));
96971      set EMWS1.Neural2_OUTFIT(where=(_NAME_ eq 'OVERALL'));
MPRINT(EM_DIAGRAM):   set EMWS1.Neural2_OUTFIT(where=(_NAME_ eq 'OVERALL'));
96972      label _NAME_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_target_vlabel  , NOQUOTE))";
MPRINT(EM_DIAGRAM):   label _NAME_ = "Target";
96973      if _NAME_='OVERALL' then _NAME_='Risk';
MPRINT(EM_DIAGRAM):   if _NAME_='OVERALL' then _NAME_='Risk';
96974      drop _ITER_;
MPRINT(EM_DIAGRAM):   drop _ITER_;
96975      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 1 observations read from the data set EMWS1.NEURAL2_OUTFIT.
      WHERE _NAME_='OVERALL';
NOTE: The data set EMWS1.NEURAL2_EMOUTFIT has 1 observations and 35 variables.
NOTE: DATA statement used (Total process time):
      real time           0.06 seconds
      cpu time            0.01 seconds
 
 
96976      proc sort data=EMWS1.Neural2_EMOUTFIT nodupkey;
MPRINT(EM_DIAGRAM):   proc sort data=EMWS1.Neural2_EMOUTFIT nodupkey;
96977      by TARGET;
MPRINT(EM_DIAGRAM):   by TARGET;
96978      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 1 observations read from the data set EMWS1.NEURAL2_EMOUTFIT.
NOTE: 0 observations with duplicate key values were deleted.
NOTE: The data set EMWS1.NEURAL2_EMOUTFIT has 1 observations and 35 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.08 seconds
      cpu time            0.01 seconds
 
 
96979      data EMWS1.Neural2_EMOUTFIT;
MPRINT(EM_DIAGRAM):    data EMWS1.Neural2_EMOUTFIT;
96980      set EMWS1.Neural2_EMOUTFIT;
MPRINT(EM_DIAGRAM):   set EMWS1.Neural2_EMOUTFIT;
96981      length TargetLabel $200;
MPRINT(EM_DIAGRAM):   length TargetLabel $200;
96982      label targetLabel = "%sysfunc(sasmsg(sashelp.dmine, meta_targetlabel_vlabel,
96982    ! NOQUOTE))";
MPRINT(EM_DIAGRAM):   label targetLabel = "Target Label";
96983      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: Variable TargetLabel is uninitialized.
NOTE: There were 1 observations read from the data set EMWS1.NEURAL2_EMOUTFIT.
NOTE: The data set EMWS1.NEURAL2_EMOUTFIT has 1 observations and 36 variables.
NOTE: DATA statement used (Total process time):
      real time           0.08 seconds
      cpu time            0.00 seconds
 
 
96984      proc sort data=EMWS1.Neural2_EMREPORTFIT nothreads;
MPRINT(EM_DIAGRAM):    proc sort data=EMWS1.Neural2_EMREPORTFIT nothreads;
96985      by TARGET;
MPRINT(EM_DIAGRAM):   by TARGET;
96986      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 21 observations read from the data set EMWS1.NEURAL2_EMREPORTFIT.
NOTE: The data set EMWS1.NEURAL2_EMREPORTFIT has 21 observations and 7 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.07 seconds
      cpu time            0.01 seconds
 
 
96987      %let _EMwarndup = 0;
96988      %let _EMtargetdup =;
96989      %let _EMASEtargetdup =;
96990      data _null_;
MPRINT(EM_DIAGRAM):    data _null_;
96991      set EMWS1.Neural2_EMOUTFIT;
MPRINT(EM_DIAGRAM):   set EMWS1.Neural2_EMOUTFIT;
96992      if .<_ASE_<0.000001 then do;
MPRINT(EM_DIAGRAM):   if .<_ASE_<0.000001 then do;
96993      call symput('_EMwarndup', '1');
MPRINT(EM_DIAGRAM):   call symput('_EMwarndup', '1');
96994      call symput('_EMtargetdup', target);
MPRINT(EM_DIAGRAM):   call symput('_EMtargetdup', target);
96995      call symput('_EMASEtargetdup', put(_ASE_, best.));
MPRINT(EM_DIAGRAM):   call symput('_EMASEtargetdup', put(_ASE_, best.));
96996      end;
MPRINT(EM_DIAGRAM):   end;
96997      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 1 observations read from the data set EMWS1.NEURAL2_EMOUTFIT.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
96998      proc sort data=EMWS1.Repl2_CMeta_TRAIN out=WORK.SUBSETINMETA;
MPRINT(EM_DIAGRAM):    proc sort data=EMWS1.Repl2_CMeta_TRAIN out=WORK.SUBSETINMETA;
96999      by NAME;
MPRINT(EM_DIAGRAM):   by NAME;
97000      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 53 observations read from the data set EMWS1.REPL2_CMETA_TRAIN.
NOTE: The data set WORK.SUBSETINMETA has 53 observations and 28 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
97001      proc sort data=EMWS1.Neural2_VariableSet out=WORK.SUBSETVARSET(keep=NAME REPORT);
MPRINT(EM_DIAGRAM):   proc sort data=EMWS1.Neural2_VariableSet out=WORK.SUBSETVARSET(keep=NAME
REPORT);
97002      by NAME;
MPRINT(EM_DIAGRAM):   by NAME;
97003      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 52 observations read from the data set EMWS1.NEURAL2_VARIABLESET.
NOTE: The data set WORK.SUBSETVARSET has 52 observations and 2 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.03 seconds
      cpu time            0.00 seconds
 
 
97004      data WORK.ASSESS_META;
MPRINT(EM_DIAGRAM):   data WORK.ASSESS_META;
97005      merge WORK.SUBSETINMETA WORK.SUBSETVARSET;
MPRINT(EM_DIAGRAM):   merge WORK.SUBSETINMETA WORK.SUBSETVARSET;
97006      by NAME;
MPRINT(EM_DIAGRAM):   by NAME;
97007      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 53 observations read from the data set WORK.SUBSETINMETA.
NOTE: There were 52 observations read from the data set WORK.SUBSETVARSET.
NOTE: The data set WORK.ASSESS_META has 53 observations and 28 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
97008      data EM_temp_assessMeta;
MPRINT(EM_DIAGRAM):    data EM_temp_assessMeta;
97009      set EMWS1.Neural2_CMeta_TRAIN;
MPRINT(EM_DIAGRAM):   set EMWS1.Neural2_CMeta_TRAIN;
97010      where role in('DECISION', 'PREDICT', 'RESIDUAL', 'CLASSIFICATION', 'ASSESS', 'COST')
97010    ! ;
MPRINT(EM_DIAGRAM):   where role in('DECISION', 'PREDICT', 'RESIDUAL', 'CLASSIFICATION',
'ASSESS', 'COST');
97011      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 8 observations read from the data set EMWS1.NEURAL2_CMETA_TRAIN.
      WHERE role in ('ASSESS', 'CLASSIFICATION', 'COST', 'DECISION', 'PREDICT', 'RESIDUAL');
NOTE: The data set WORK.EM_TEMP_ASSESSMETA has 8 observations and 29 variables.
NOTE: DATA statement used (Total process time):
      real time           0.02 seconds
      cpu time            0.01 seconds
 
 
97012      data EM_temp_assessdata;
MPRINT(EM_DIAGRAM):    data EM_temp_assessdata;
97013      set EMWS1.Neural2_TRAIN(keep=
97014      F_Risk
97015      I_Risk
97016      P_Risk0
97017      P_Risk1
97018      R_Risk0
97019      R_Risk1
97020      U_Risk
97021      _WARN_
97022      Risk
97023      );
MPRINT(EM_DIAGRAM):   set EMWS1.Neural2_TRAIN(keep= F_Risk I_Risk P_Risk0 P_Risk1 R_Risk0
R_Risk1 U_Risk _WARN_ Risk );
97024      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 100 observations read from the data set EMWS1.PART_TRAIN.
NOTE: There were 100 observations read from the data set EMWS1.IMPT_TRAIN.
NOTE: There were 100 observations read from the data set EMWS1.REPL_TRAIN.
NOTE: There were 100 observations read from the data set EMWS1.TRANS_TRAIN.
NOTE: View EMWS1.NEURAL2_TRAIN.VIEW used (Total process time):
      real time           0.27 seconds
      cpu time            0.23 seconds
 
NOTE: There were 100 observations read from the data set EMWS1.REPL2_TRAIN.
NOTE: There were 100 observations read from the data set EMWS1.NEURAL2_TRAIN.
NOTE: The data set WORK.EM_TEMP_ASSESSDATA has 100 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.29 seconds
      cpu time            0.25 seconds
 
 
MPRINT(EM_DIAGRAM):    proc freq data=EM_temp_assessdata noprint;
MPRINT(EM_DIAGRAM):   table I_Risk*F_Risk / out = WORK.Neural2_1CMH670 nocol norow outpct;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data WORK.Neural2_1CMH670;
MPRINT(EM_DIAGRAM):   length _TYPE_ $10 DATAROLE TARGET $32 TARGETLABEL $200 FROM INTO $32
CORRECTTEXT $40 ;
MPRINT(EM_DIAGRAM):   label _TYPE_ = "Outcome Type";
MPRINT(EM_DIAGRAM):   label DATAROLE = "Data Role";
MPRINT(EM_DIAGRAM):   label TARGET = "Target Variable";
MPRINT(EM_DIAGRAM):   label TARGETLABEL = "Target Label";
MPRINT(EM_DIAGRAM):   label FROM = "Target";
MPRINT(EM_DIAGRAM):   label INTO = "Outcome";
MPRINT(EM_DIAGRAM):   label PCT_ROW = "Target Percentage";
MPRINT(EM_DIAGRAM):   label PCT_COL = "Outcome Percentage";
MPRINT(EM_DIAGRAM):   label COUNT = "Frequency Count";
MPRINT(EM_DIAGRAM):   label PERCENT = "Total Percentage";
MPRINT(EM_DIAGRAM):   label CORRECTTEXT = "Correct Text";
MPRINT(EM_DIAGRAM):   label CORRECT = "Correct";
MPRINT(EM_DIAGRAM):   set WORK.Neural2_1CMH670(rename=(F_Risk=FROM I_Risk=INTO));
MPRINT(EM_DIAGRAM):   retain _TYPE_ 'PREDICTION' DATAROLE "TRAIN" TARGET "Risk";
MPRINT(EM_DIAGRAM):   if FROM eq INTO then do;
MPRINT(EM_DIAGRAM):   CORRECT = 0;
MPRINT(EM_DIAGRAM):   CORRECTTEXT="Correct";
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   CORRECT = 1;
MPRINT(EM_DIAGRAM):   CORRECTTEXT="Incorrect";
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data EMWS1.Neural2_EMCLASSIFICATION;
MPRINT(EM_DIAGRAM):   set WORK.Neural2_1CMH670;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data WORK.MISCREPORT;
MPRINT(EM_DIAGRAM):   set WORK.Neural2_1CMH670;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data WORK.MISCREPORT(drop=INTO FROM _TYPE_);
MPRINT(EM_DIAGRAM):   set WORK.MISCREPORT;
MPRINT(EM_DIAGRAM):   length MISC $12;
MPRINT(EM_DIAGRAM):   if FROM='1' and INTO='1' then MISC='TRUEEVENT';
MPRINT(EM_DIAGRAM):   else if FROM='1' and INTO ne '1' then MISC='FALSENEVENT';
MPRINT(EM_DIAGRAM):   else if FROM ne '1' and INTO='1' then MISC='FALSEEVENT';
MPRINT(EM_DIAGRAM):   else if FROM ne'1' and INTO ne '1' then MISC='TRUENEVENT';
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=WORK.MISCREPORT nothreads;
MPRINT(EM_DIAGRAM):   by DATAROLE TARGET;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc summary data=WORK.MISCREPORT NWAY;
MPRINT(EM_DIAGRAM):   output out=WORK.MISCCOUNT(drop=_FREQ_ _TYPE_) SUM=COUNT;
MPRINT(EM_DIAGRAM):   CLASS MISC;
MPRINT(EM_DIAGRAM):   VAR COUNT;
MPRINT(EM_DIAGRAM):   by DATAROLE TARGET;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc transpose data=WORK.MISCCOUNT out=WORK.MISCREPORT(drop=_NAME_
_LABEL_);
MPRINT(EM_DIAGRAM):   by DATAROLE TARGET;
MPRINT(EM_DIAGRAM):   ID MISC;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data EMWS1.Neural2_EMEVENTREPORT;
MPRINT(EM_DIAGRAM):   length TARGETLABEL $200;
MPRINT(EM_DIAGRAM):   label TARGETLABEL = "Target Label";
MPRINT(EM_DIAGRAM):   set WORK.MISCREPORT;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data ASSESS_REPORTMETA;
MPRINT(EM_DIAGRAM):   set EMWS1.Neural2_VariableSet;
MPRINT(EM_DIAGRAM):   where REPORT='Y';
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   filename temp catalog 'sashelp.emassmt.em_assess.source';
MPRINT(EM_DIAGRAM):   filename temp;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   set EMWS1.Neural2_Risk_DM;
MPRINT(EM_DIAGRAM):   where _TYPE_="TARGET";
MPRINT(EM_DIAGRAM):   call symput('ASSMT_EVENT', strip(event));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):
MPRINT(EM_ASSESS):   data _ea_tmpdata;
MPRINT(EM_ASSESS):   set EM_temp_assessdata;
MPRINT(EM_ASSESS):   _tmpfreqvar_=1;
MPRINT(EM_ASSESS):   run;
MPRINT(EM_CHECKEMSETINIT):   DATA _NULL_;
MPRINT(EM_CHECKEMSETINIT):   EM_SETINIT = 'N';
MPRINT(EM_CHECKEMSETINIT):   IF SYSPROD('PRODNUM50') THEN EM_SETINIT = 'Y';
MPRINT(EM_CHECKEMSETINIT):   ELSE IF SYSPROD('PRODNUM448') THEN EM_SETINIT = 'Y';
MPRINT(EM_CHECKEMSETINIT):   ELSE IF SYSPROD('PRODNUM102') THEN EM_SETINIT = 'Y';
MPRINT(EM_CHECKEMSETINIT):   ELSE IF SYSPROD('PRODNUM103') THEN EM_SETINIT = 'Y';
MPRINT(EM_CHECKEMSETINIT):   CALL SYMPUT('EM_SETINIT', EM_SETINIT);
MPRINT(EM_CHECKEMSETINIT):   RUN;
MPRINT(EM_ASSESS):  ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ............ Reading in reporting data set;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   DATA _NULL_;
MPRINT(EM_ASSESS):   SET ASSESS_REPORTMETA END = EOF;
MPRINT(EM_ASSESS):   IF TYPE = "C" OR UPCASE (LEVEL) IN ("NOMINAL", "BINARY" , "ORDINAL") THEN
DO;
MPRINT(EM_ASSESS):   IF UPCASE (NAME) NE UPCASE ("F_Risk") THEN DO;
MPRINT(EM_ASSESS):   NUMCTOREPORT + 1;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("REPORTC" || LEFT (PUT (NUMCTOREPORT, 5.)), NAME);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE CALL SYMPUTX ("RPRT_TRGT", "C");
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE IF TYPE = "N" THEN DO;
MPRINT(EM_ASSESS):   IF UPCASE(NAME) NE UPCASE ("F_Risk") THEN DO;
MPRINT(EM_ASSESS):   NUMNTOREPORT + 1;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("REPORTN" || LEFT (PUT (NUMNTOREPORT, 5.)), NAME);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE CALL SYMPUTX ("RPRT_TRGT", "N");
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   IF EOF THEN DO;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("NUMNTOREPORT", NUMNTOREPORT);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("NUMCTOREPORT", NUMCTOREPORT);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("NUMTOREPORT", SUM (NUMNTOREPORT, NUMCTOREPORT));
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   PROC DMDB DATA = _ea_tmpdata VAROUT = VAROUT DMDBCAT = _D CLASSOUT =
_ASSMT_CLASSOUT;
MPRINT(EM_ASSESS):   CLASS F_Risk ;
 
MPRINT(EM_ASSESS):   VAR P_Risk1 _tmpfreqvar_ ;
MPRINT(EM_ASSESS):   FREQ _tmpfreqvar_;
MPRINT(EM_ASSESS):   RUN ;
MPRINT(EM_ASSESS):   QUIT;
MPRINT(EM_ASSESS):   PROC SORT DATA = _ASSMT_CLASSOUT;
MPRINT(EM_ASSESS):   BY NAME;
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   DATA _auxeventname (keep = __event__) ;
MPRINT(EM_ASSESS):   * ;
MPRINT(EM_ASSESS):   * ...FLAG0_1 = ..... TARGET IS 0, 1 & EVENT = 1;
 
MPRINT(EM_ASSESS):   ;
MPRINT(EM_ASSESS):   length __event__ $ 32;
MPRINT(EM_ASSESS):   RETAIN FLAG0_1 1 NUM1 . NUM0 . __event__ "_missing_" ;
 
MPRINT(EM_ASSESS):   SET _ASSMT_CLASSOUT END = EOF;
MPRINT(EM_ASSESS):   BY NAME;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ....... LEVEL = BINARY OR NOMINAL OR ORDINAL;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
 
MPRINT(EM_ASSESS):   IF UPCASE(NAME) = UPCASE ("F_Risk") THEN DO;
MPRINT(EM_ASSESS):   CUMFREQ + FREQUENCY;
MPRINT(EM_ASSESS):   IF LEVEL NE "." THEN DO;
MPRINT(EM_ASSESS):   N1 + 1;
MPRINT(EM_ASSESS):   IF (NRAW NE 0 AND NRAW NE 1) OR TYPE NE "N" OR "" > " " THEN FLAG0_1 = 0;
MPRINT(EM_ASSESS):   * ;
MPRINT(EM_ASSESS):   * ......................... IF EVENT NE BLANK;
MPRINT(EM_ASSESS):   * ....................LEVEL IS CHAR VAR ;
MPRINT(EM_ASSESS):   * ;
MPRINT(EM_ASSESS):   IF UPCASE("1") = UPCASE(LEVEL) THEN DO;
MPRINT(EM_ASSESS):   NUM1 = FREQUENCY;
MPRINT(EM_ASSESS):   IF TYPE = "C" THEN do;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("EVENTVALUERAW", CRAW );
MPRINT(EM_ASSESS):   __event__ = craw;
MPRINT(EM_ASSESS):   end;
MPRINT(EM_ASSESS):   ELSE do;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("EVENTVALUERAW", NRAW );
MPRINT(EM_ASSESS):   __event__ = nraw;
MPRINT(EM_ASSESS):   end;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   IF LAST.NAME THEN DO;
 
MPRINT(EM_ASSESS):   * ;
MPRINT(EM_ASSESS):   * .............. IN NOMINAL CASE, NEED TO GROUP ALL '0' ;
MPRINT(EM_ASSESS):   *;
 
MPRINT(EM_ASSESS):   NUM0 = SUM (CUMFREQ, - NUM1);
MPRINT(EM_ASSESS):   IF NUM0 < 0 THEN NUM0 = 0;
MPRINT(EM_ASSESS):   IF NUM1 = . THEN NUM1 = 0;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("NUM0", NUM0 );
MPRINT(EM_ASSESS):   CALL SYMPUTX ("NUM1", NUM1);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("PNUM1", NUM1 / CUMFREQ);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("PNUM0", (CUMFREQ - NUM1) / CUMFREQ);
MPRINT(EM_ASSESS):   IF TYPE = "C" THEN DO;
MPRINT(EM_ASSESS):   FLAG0_1 = 0;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("TARGETTYPE", "C" );
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE IF TYPE = "N" THEN DO;
MPRINT(EM_ASSESS):   IF "" = " " THEN DO;
MPRINT(EM_ASSESS):   IF "1" NE "1" THEN FLAG0_1 = 0;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("TARGETTYPE", "N" );
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   * ................... IF TYPE = N;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("FLAG0_1", FLAG0_1 );
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   * ..................IF LAST.NAME ;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   * ...............IF LEVEL NE '.' ;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   * .............. IF NAME = TARGET;
MPRINT(EM_ASSESS):   ELSE IF "" > " " AND UPCASE(NAME) = UPCASE("") THEN DO;
MPRINT(EM_ASSESS):   NUMDECISIONS + 1;
MPRINT(EM_ASSESS):   LEVEL = TRANSLATE (LEVEL, "_", "'", "_", '"');
MPRINT(EM_ASSESS):   CALL SYMPUTX ("D_LABEL" || LEFT (PUT (NUMDECISIONS, 3.)), LEVEL );
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   * ..................... ELSE IF UPCASE;
MPRINT(EM_ASSESS):   IF EOF THEN DO;
MPRINT(EM_ASSESS):   output _auxeventname;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("NUMOBS", CUMFREQ);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("NUMDECISIONS", NUMDECISIONS);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   DATA _NULL_;
MPRINT(EM_ASSESS):   SET VAROUT END = EOF;
MPRINT(EM_ASSESS):   IF UPCASE (NAME) = UPCASE ("P_Risk1") THEN DO;
MPRINT(EM_ASSESS):   IF N = 0 THEN DO;
MPRINT(EM_ASSESS):   PUT //// "          Warning: All posterior probabilities are missing
values ";
MPRINT(EM_ASSESS):   PUT ///;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("ALLMISS", 1);
MPRINT(EM_ASSESS):   STOP;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE CALL SYMPUTX ("ALLMISS", 0);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("MINPROB", MIN);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("MAXPROB", MAX);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("DIFF", MAX - MIN);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("NMISSPROB", NMISS);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE IF UPCASE (NAME) = UPCASE ("_tmpfreqvar_") THEN DO;
MPRINT(EM_ASSESS):   AUXMIN = MIN - INT (MIN);
MPRINT(EM_ASSESS):   AUXMAX = MAX - INT (MAX);
MPRINT(EM_ASSESS):   IF AUXMIN > 0 OR AUXMAX > 0 THEN CALL SYMPUTX ("USEWEIGHT", "Y");
MPRINT(EM_ASSESS):   ELSE CALL SYMPUTX ("USEWEIGHT", "N");
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   DATA _ANY0;
MPRINT(EM_ASSESS):   SET _ea_tmpdata (KEEP = F_Risk P_Risk1 _tmpfreqvar_ );
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ................... No Formats;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   IF LEFT ( F_Risk ) = "1" THEN NTARGET = 1;
MPRINT(EM_ASSESS):   ELSE NTARGET = 0;
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * .............. Before proc summary of binary case;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   PROC SUMMARY DATA = _ANY0 (KEEP = P_Risk1 NTARGET _tmpfreqvar_ WHERE =
(NTARGET > . )) NWAY MISSING;
MPRINT(EM_ASSESS):   ;
MPRINT(EM_ASSESS):   CLASS P_Risk1 ;
MPRINT(EM_ASSESS):   VAR NTARGET ;
MPRINT(EM_ASSESS):   FREQ _tmpfreqvar_ ;
MPRINT(EM_ASSESS):   OUTPUT OUT = ANYSUM (DROP = _TYPE_) MEAN = _MEANTARGET _MEANFREQVAR ;
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   QUIT;
MPRINT(EM_ASSESS):   ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * .................... Main Data Set Processing, Binary case;
MPRINT(EM_ASSESS):   *;
 
MPRINT(EM_ASSESS):   DATA WORK._TEMPRANK (KEEP = BASECAPC BASECAP __EVENT__ BASEEVENTS
BASEGAIN BASELIFT BASERESP BASERESPC BESTCAP BESTCAPC BESTGAIN BESTLIFT BESTLIFTC
BESTNUMEVENTS BESTRESP BESTRESPC BIN CBASELIFT C_LIFT C_P_CAPT_RESP C_P_RESP GAIN LIFT MAXPROB
MINPROB MNPROB NUMNONRESP NUMOBS NUMRESP PERCENTILE P_CAPT_RESP P_RESP ) WORK._TEMPSCOREDIST
(KEEP = BIN LOWERPROB UPPERPROB EVENTVALUE SCR_NUMEVENTS MODELSCORE SCR_NUMNONEVENTS RANGE
NUMOBSINGROUP PERCOBSINGROUP C_PERCOBSINGROUP SCR_P_EVENTS SCR_CP_EVENTS SCR_P_NONEVENTS
SCR_CP_NONEVENTS SCR_MNPROB SCR_MINPROB SCR_MAXPROB ) ;
 
MPRINT(EM_ASSESS):   SET ANYSUM END = EOF;
 
MPRINT(EM_ASSESS):   IF _N_ = 1 THEN SET _AUXEVENTNAME;
 
MPRINT(EM_ASSESS):   RETAIN MINPROB1 - MINPROB20 1 MAXPROB1 - MAXPROB20 0 MNPROB1 - MNPROB20 0
NUMOBS1 - NUMOBS20 0 NUMRESP1 - NUMRESP20 0 TRUEPOS1 - TRUEPOS100 0 TRUENEG1 - TRUENEG100 0
FALSEPOS1 - FALSEPOS100 0 FALSENEG1 - FALSENEG100 0 EVENTS1 - EVENTS100 NONEVENTS1 -
NONEVENTS100 0 FIRSTIN1 - FIRSTIN100 . LASTIN1 - LASTIN100 . RESPRATE 0.54 _NEVENTS 54
_NNONEVENTS 46 TARGET "NTARGET" ;
MPRINT(EM_ASSESS):   ARRAY MINPROBS (20) MINPROB1 - MINPROB20;
MPRINT(EM_ASSESS):   ARRAY MAXPROBS (20) MAXPROB1 - MAXPROB20;
MPRINT(EM_ASSESS):   ARRAY MNPROBS (20) MNPROB1 - MNPROB20;
MPRINT(EM_ASSESS):   ARRAY NUMOBSS (20) NUMOBS1 - NUMOBS20;
MPRINT(EM_ASSESS):   ARRAY NUMRESPS (20) NUMRESP1 - NUMRESP20;
MPRINT(EM_ASSESS):   ARRAY TRUEPOSX (100) TRUEPOS1 - TRUEPOS100;
MPRINT(EM_ASSESS):   ARRAY FALSEPOSX (100) FALSEPOS1 - FALSEPOS100;
MPRINT(EM_ASSESS):   ARRAY FALSENEGX (100) FALSENEG1 - FALSENEG100;
MPRINT(EM_ASSESS):   ARRAY TRUENEGX (100) TRUENEG1 - TRUENEG100;
MPRINT(EM_ASSESS):   ARRAY _EVENTS (100) EVENTS1 - EVENTS100;
MPRINT(EM_ASSESS):   ARRAY NONEVENTS (100) NONEVENTS1 - NONEVENTS100;
MPRINT(EM_ASSESS):   ARRAY FIRSTIN (100) FIRSTIN1 - FIRSTIN100;
MPRINT(EM_ASSESS):   ARRAY LASTIN (100) LASTIN1 - LASTIN100;
MPRINT(EM_ASSESS):   RETAIN SCR_MNPROB1 - SCR_MNPROB100 0 SCR_MINPROB1 - SCR_MINPROB100 1
SCR_MAXPROB1 - SCR_MAXPROB100 0;
MPRINT(EM_ASSESS):   ARRAY SCR_MNPROBS (100) SCR_MNPROB1 - SCR_MNPROB100;
MPRINT(EM_ASSESS):   ARRAY SCR_MINPROBS (100) SCR_MINPROB1 - SCR_MINPROB100;
MPRINT(EM_ASSESS):   ARRAY SCR_MAXPROBS (100) SCR_MAXPROB1 - SCR_MAXPROB100;
MPRINT(EM_ASSESS):   DROP SCR_MINPROB1 - SCR_MINPROB100 SCR_MAXPROB1 - SCR_MAXPROB100
SCR_MNPROB1 - SCR_MNPROB100 ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ...... Area For 8 Financials ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   IF _MEANTARGET = . THEN _MEANTARGET = RESPRATE;
MPRINT(EM_ASSESS):   DROP N1 _K SUMWEIGHTS ;
MPRINT(EM_ASSESS):   SUMWEIGHTS = 1;
 
MPRINT(EM_ASSESS):   DO _K = 1 TO CEIL (_FREQ_);
MPRINT(EM_ASSESS):   IF _K = CEIL (_FREQ_) THEN DO;
MPRINT(EM_ASSESS):   IF _FREQ_ < CEIL (_FREQ_) THEN _WEIGHT = _FREQ_ - FLOOR (_FREQ_);
MPRINT(EM_ASSESS):   ELSE _WEIGHT = 1;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE _WEIGHT = 1;
MPRINT(EM_ASSESS):   N1 + _WEIGHT;
MPRINT(EM_ASSESS):   NTARGET = _MEANTARGET ;
MPRINT(EM_ASSESS):   DECILE = MIN (20, CEIL (N1 * 20 / 100));
MPRINT(EM_ASSESS):   MINPROBS ( DECILE) = MIN (MINPROBS ( DECILE), P_Risk1 );
MPRINT(EM_ASSESS):   MAXPROBS ( DECILE) = MAX (MAXPROBS ( DECILE), P_Risk1 );
MPRINT(EM_ASSESS):   MNPROBS ( DECILE) = SUM (MNPROBS ( DECILE), P_Risk1 * _WEIGHT);
MPRINT(EM_ASSESS):   NUMOBSS ( DECILE) = NUMOBSS ( DECILE) + _WEIGHT;
MPRINT(EM_ASSESS):   NUMRESPS ( DECILE) = NUMRESPS ( DECILE) + _MEANTARGET * _WEIGHT;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ........ outside of do loop, Area for final ROC;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   RANKDELTA = (ROUND ( _FREQ_ ) + 1) / 2;
MPRINT(EM_ASSESS):   RANK = UNTIEDRANK + RANKDELTA;
MPRINT(EM_ASSESS):   DROP RANK ;
MPRINT(EM_ASSESS):   SUMRANK1 + RANK * ROUND (_MEANTARGET * _FREQ_, .0000001);
MPRINT(EM_ASSESS):   UNTIEDRANK + ROUND (_FREQ_, .00000001);
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ............ Area For ROC Curve;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   DO _K = 1 TO 100;
MPRINT(EM_ASSESS):   IF P_Risk1 * 100 >= _K THEN DO;
MPRINT(EM_ASSESS):   TRUEPOSX ( _K ) + _FREQ_ * _MEANTARGET ;
MPRINT(EM_ASSESS):   FALSEPOSX ( _K ) + _FREQ_ * (1 - _MEANTARGET) ;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   TRUENEGX ( _K ) + _FREQ_ * ( 1 - _MEANTARGET) ;
MPRINT(EM_ASSESS):   FALSENEGX ( _K ) + _FREQ_ * _MEANTARGET ;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   SLOT = MIN (MAX (CEIL (P_Risk1 * 100), 1), 100) ;
MPRINT(EM_ASSESS):   DROP SLOT;
MPRINT(EM_ASSESS):   FIRSTIN ( SLOT ) = MIN ( FIRSTIN ( SLOT ), P_Risk1);
MPRINT(EM_ASSESS):   LASTIN ( SLOT ) = MAX ( LASTIN ( SLOT ), P_Risk1);
MPRINT(EM_ASSESS):   _EVENTS ( SLOT) = _EVENTS ( SLOT) + _FREQ_ * _MEANTARGET;
MPRINT(EM_ASSESS):   NONEVENTS ( SLOT) = NONEVENTS ( SLOT) + _FREQ_ * (1 - _MEANTARGET);
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ........ START OF OUTDIST IN BINARY CASE MAIN DATA STEP ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   SCR_MNPROBS ( SLOT ) = SUM (SCR_MNPROBS (SLOT), P_Risk1 * _FREQ_ );
MPRINT(EM_ASSESS):   SCR_MINPROBS ( SLOT ) = MIN (SCR_MINPROBS (SLOT), P_Risk1 );
MPRINT(EM_ASSESS):   SCR_MAXPROBS ( SLOT ) = MAX (SCR_MAXPROBS (SLOT), P_Risk1 );
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ........ End of Outdist in Binary case main DATA STEP ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   IF EOF THEN DO;
MPRINT(EM_ASSESS):   PUT //;
MPRINT(EM_ASSESS):   DO K = 1 TO 20;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   LENGTH EVENTVALUE $ 32;
MPRINT(EM_ASSESS):   RETAIN EVENTVALUE "1" ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ......... Start of EOF area of BINARY processing of main data set ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SUMRANK1", SUMRANK1);
MPRINT(EM_ASSESS):   LENGTH DATAROLE $ 10;
MPRINT(EM_ASSESS):   RETAIN DATAROLE "TRAIN" ;
MPRINT(EM_ASSESS):   RETAIN OVLMIN 0.0017421176 OVLMAX 0.9928834915 ;
MPRINT(EM_ASSESS):   DROP OVLMIN OVLMAX ;
MPRINT(EM_ASSESS):   C_NUMOBS = 0;
MPRINT(EM_ASSESS):   C_NUM_RESP = 0;
MPRINT(EM_ASSESS):   C_NUM_NONRESP = 0;
MPRINT(EM_ASSESS):   C_P_RESP = 0;
MPRINT(EM_ASSESS):   P_CAPT_RESP = 0;
MPRINT(EM_ASSESS):   C_P_CAPT_RESP = 0;
MPRINT(EM_ASSESS):   PREVIOUSPROFIT = 0;
MPRINT(EM_ASSESS):   MAXPROFIT = 0;
MPRINT(EM_ASSESS):   _KS_BIN_ = 0;
MPRINT(EM_ASSESS):   DROP _KS_BIN_;
MPRINT(EM_ASSESS):   AVGNUMRESP = _NEVENTS / 20;
MPRINT(EM_ASSESS):   BASERESP = 100 * RESPRATE;
MPRINT(EM_ASSESS):   BASERESPC = BASERESP;
MPRINT(EM_ASSESS):   BASECAP = 100 / 20;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ........................Start OF Gainschart = Outranks Area;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   _KS_BIN_PROB = 0;
MPRINT(EM_ASSESS):   DO GROUP = 20 TO 1 BY -1;
 
MPRINT(EM_ASSESS):   BASECAPC + BASECAP;
MPRINT(EM_ASSESS):   PERCENTILE = GROUP * (100 / 20);
MPRINT(EM_ASSESS):   MINPROB = MINPROBS ( GROUP);
MPRINT(EM_ASSESS):   MAXPROB = MAXPROBS ( GROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("MINPROB" || LEFT ( PUT (GROUP, 3.)), MINPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("MAXPROB" || LEFT ( PUT (GROUP, 3.)), MAXPROB);
MPRINT(EM_ASSESS):   NUMOBS = NUMOBSS ( GROUP);
MPRINT(EM_ASSESS):   IF NUMOBS > 0 THEN MNPROB = MNPROBS ( GROUP) / NUMOBS;
MPRINT(EM_ASSESS):   ELSE MNPROB = .;
MPRINT(EM_ASSESS):   C_NUMOBS = SUM (NUMOBS, C_NUMOBS);
MPRINT(EM_ASSESS):   NUMRESP = NUMRESPS ( GROUP);
MPRINT(EM_ASSESS):   NUMNONRESP = NUMOBS - NUMRESP;
MPRINT(EM_ASSESS):   C_AVGNUM_RESP + AVGNUMRESP;
MPRINT(EM_ASSESS):   IF C_NUMOBS <= _NEVENTS THEN DO;
MPRINT(EM_ASSESS):   BESTNUMEVENTS = NUMOBS;
MPRINT(EM_ASSESS):   BESTCAPC = C_NUMOBS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   BASEEVENTS = _NEVENTS / 20;
MPRINT(EM_ASSESS):   BASENONEVENTS = 0;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   FLAG + 1;
MPRINT(EM_ASSESS):   DROP FLAG;
MPRINT(EM_ASSESS):   BESTNUMEVENTS = _NEVENTS - C_NUMOBS + NUMOBS;
MPRINT(EM_ASSESS):   IF FLAG > 1 THEN BESTNUMEVENTS = 0;
MPRINT(EM_ASSESS):   BESTCAPC = 100;
MPRINT(EM_ASSESS):   IF C_NUMOBS - _NEVENTS <= NUMOBS THEN DO;
MPRINT(EM_ASSESS):   BASEEVENTS = C_NUMOBS - _NEVENTS;
MPRINT(EM_ASSESS):   BASENONEVENTS = NUMOBS - C_NUMOBS + _NEVENTS;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   BASEEVENTS = 0;
MPRINT(EM_ASSESS):   BASENONEVENTS = NUMOBS;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   BESTCAP = BESTNUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   IF C_NUMOBS <= _NEVENTS THEN DO;
MPRINT(EM_ASSESS):   BESTLIFT = ((_NEVENTS+_NNONEVENTS) / 20) /AVGNUMRESP;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   BESTLIFT = BESTNUMEVENTS / AVGNUMRESP;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   C_BESTNUMEVENTS + BESTNUMEVENTS;
MPRINT(EM_ASSESS):   DROP C_BESTNUMEVENTS;
MPRINT(EM_ASSESS):   IF C_NUMOBS > 0 THEN BESTLIFTC = C_BESTNUMEVENTS / (_NEVENTS / 100 *
C_NUMOBS);
MPRINT(EM_ASSESS):   ELSE BESTLIFTC = .;
MPRINT(EM_ASSESS):   IF NUMOBS > 0 THEN DO;
MPRINT(EM_ASSESS):   BESTRESP = BESTNUMEVENTS * 100 / NUMOBS;
MPRINT(EM_ASSESS):   P_RESP = NUMRESP * 100 / NUMOBS;
MPRINT(EM_ASSESS):   P_NONRESP = NUMNONRESP * 100 / NUMOBS;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   BESTRESP = .;
MPRINT(EM_ASSESS):   P_RESP = .;
MPRINT(EM_ASSESS):   P_NONRESP = .;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   IF C_NUMOBS > 0 THEN DO;
MPRINT(EM_ASSESS):   BESTRESPC = C_BESTNUMEVENTS * 100 / C_NUMOBS;
MPRINT(EM_ASSESS):   BESTGAIN = MAX (0, ((C_BESTNUMEVENTS / C_NUMOBS ) / ( AVGNUMRESP /
(100/20)) - 1) * 100);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   BESTRESPC = .;
MPRINT(EM_ASSESS):   BESTGAIN = .;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   IF NUMNONRESP > 0 THEN ODDS = NUMRESP / NUMNONRESP;
MPRINT(EM_ASSESS):   ELSE ODDS = .;
MPRINT(EM_ASSESS):   C_NUM_RESP = SUM (C_NUM_RESP , NUMRESP );
MPRINT(EM_ASSESS):   C_NUM_NONRESP = SUM (C_NUM_NONRESP, NUMNONRESP );
MPRINT(EM_ASSESS):   IF C_NUM_NONRESP > 0 THEN C_ODDS = C_NUM_RESP / C_NUM_NONRESP;
MPRINT(EM_ASSESS):   ELSE C_ODDS = .;
MPRINT(EM_ASSESS):   IF C_NUMOBS > 0 THEN DO;
MPRINT(EM_ASSESS):   C_P_RESP = C_NUM_RESP * 100 / C_NUMOBS;
MPRINT(EM_ASSESS):   GAIN = ABS(100 * (((C_NUM_RESP / C_NUMOBS ) / (_NEVENTS / 100)) - 1));
MPRINT(EM_ASSESS):   BASEGAIN = 100 * (( (C_AVGNUM_RESP /((20-GROUP+1)* 100/20) ) / (
AVGNUMRESP / (100/20))) - 1);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   GAIN = .;
MPRINT(EM_ASSESS):   BASEGAIN = .;
MPRINT(EM_ASSESS):   C_P_RESP = .;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   IF BASEGAIN <= 0 THEN BASEGAIN = 0;
MPRINT(EM_ASSESS):   P_CAPT_RESP = NUMRESP * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   P_CAPT_NONRESP = NUMNONRESP * 100 / ( 100 - _NEVENTS);
MPRINT(EM_ASSESS):   C_P_CAPT_RESP = C_NUM_RESP * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   C_P_CAPT_NONRESP = C_NUM_NONRESP * 100 / ( 100 - _NEVENTS);
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * Area For Binned KS in Outranks area;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   _DIFFERENCE = C_P_CAPT_RESP - C_P_CAPT_NONRESP ;
MPRINT(EM_ASSESS):   IF _KS_BIN_ < _DIFFERENCE THEN DO;
MPRINT(EM_ASSESS):   _KS_BIN_ = _DIFFERENCE;
MPRINT(EM_ASSESS):   _KS_BIN_PROB = MINPROB + (MAXPROB - MINPROB) / 2 ;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   LIFT = P_RESP * .01 / RESPRATE ;
MPRINT(EM_ASSESS):   C_LIFT = C_P_RESP * .01 / RESPRATE;
MPRINT(EM_ASSESS):   IF NUMOBS > 0 THEN DO;
MPRINT(EM_ASSESS):   BASELIFT = AVGNUMRESP / ( RESPRATE * 100/20 );
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE BASELIFT = .;
MPRINT(EM_ASSESS):   IF C_NUMOBS > 0 THEN CBASELIFT = C_AVGNUM_RESP / (RESPRATE *
((20-GROUP+1)* 100/20));
MPRINT(EM_ASSESS):   ELSE CBASELIFT = .;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ........ WITHIN DO LOOP FOR OUTRANKS;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   BIN = 20 + 1 - GROUP;
MPRINT(EM_ASSESS):   PERCENTILE = BIN * (100 / 20);
MPRINT(EM_ASSESS):   B_C_P_RESP = PERCENTILE;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPRANK ;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ........................ END OF GAINSCHART = OUTRANKS AREA;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("MAXPROFITGROUP" , MAXPROFITGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("MAXPROFIT" , MAXPROFIT );
MPRINT(EM_ASSESS):   KS_ABSDIFF = 0 ;
MPRINT(EM_ASSESS):   MINPRECTPR = 9999;
MPRINT(EM_ASSESS):   Y0 = 1 - RESPRATE;
MPRINT(EM_ASSESS):   Y1 = RESPRATE;
MPRINT(EM_ASSESS):   MAXMUTUAL = 0;
MPRINT(EM_ASSESS):   DROP MAXMUTUAL KSPROB Y0 Y1 KS_ABSDIFF MINPRECTPR;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * .....................About to start Processing Outroc ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ........................... Finished Processing Outroc ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * .............. Outdist ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   BIN = 20 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS96 - EVENTS100 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS96 - NONEVENTS100);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB96 -
SCR_MNPROB100) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB96 - SCR_MINPROB100) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB96 - SCR_MAXPROB100) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 100;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 20;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 19 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS91 - EVENTS95 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS91 - NONEVENTS95);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB91 -
SCR_MNPROB95) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB91 - SCR_MINPROB95) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB91 - SCR_MAXPROB95) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 100;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 19;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 18 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS86 - EVENTS90 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS86 - NONEVENTS90);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB86 -
SCR_MNPROB90) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB86 - SCR_MINPROB90) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB86 - SCR_MAXPROB90) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 100;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 18;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 17 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS81 - EVENTS85 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS81 - NONEVENTS85);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB81 -
SCR_MNPROB85) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB81 - SCR_MINPROB85) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB81 - SCR_MAXPROB85) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 100;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 17;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 16 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS76 - EVENTS80 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS76 - NONEVENTS80);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB76 -
SCR_MNPROB80) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB76 - SCR_MINPROB80) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB76 - SCR_MAXPROB80) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 100;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 16;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 15 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS71 - EVENTS75 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS71 - NONEVENTS75);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB71 -
SCR_MNPROB75) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB71 - SCR_MINPROB75) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB71 - SCR_MAXPROB75) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 100;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 15;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 14 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS66 - EVENTS70 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS66 - NONEVENTS70);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB66 -
SCR_MNPROB70) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB66 - SCR_MINPROB70) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB66 - SCR_MAXPROB70) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 100;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 14;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 13 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS61 - EVENTS65 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS61 - NONEVENTS65);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB61 -
SCR_MNPROB65) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB61 - SCR_MINPROB65) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB61 - SCR_MAXPROB65) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 100;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 13;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 12 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS56 - EVENTS60 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS56 - NONEVENTS60);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB56 -
SCR_MNPROB60) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB56 - SCR_MINPROB60) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB56 - SCR_MAXPROB60) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 100;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 12;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 11 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS51 - EVENTS55 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS51 - NONEVENTS55);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB51 -
SCR_MNPROB55) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB51 - SCR_MINPROB55) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB51 - SCR_MAXPROB55) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 100;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 11;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 10 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS46 - EVENTS50 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS46 - NONEVENTS50);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB46 -
SCR_MNPROB50) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB46 - SCR_MINPROB50) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB46 - SCR_MAXPROB50) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 100;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 10;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 9 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS41 - EVENTS45 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS41 - NONEVENTS45);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB41 -
SCR_MNPROB45) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB41 - SCR_MINPROB45) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB41 - SCR_MAXPROB45) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 100;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 9;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 8 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS36 - EVENTS40 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS36 - NONEVENTS40);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB36 -
SCR_MNPROB40) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB36 - SCR_MINPROB40) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB36 - SCR_MAXPROB40) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 100;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 8;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 7 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS31 - EVENTS35 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS31 - NONEVENTS35);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB31 -
SCR_MNPROB35) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB31 - SCR_MINPROB35) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB31 - SCR_MAXPROB35) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 100;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 7;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 6 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS26 - EVENTS30 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS26 - NONEVENTS30);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB26 -
SCR_MNPROB30) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB26 - SCR_MINPROB30) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB26 - SCR_MAXPROB30) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 100;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 6;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 5 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS21 - EVENTS25 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS21 - NONEVENTS25);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB21 -
SCR_MNPROB25) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB21 - SCR_MINPROB25) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB21 - SCR_MAXPROB25) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 100;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 5;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 4 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS16 - EVENTS20 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS16 - NONEVENTS20);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB16 -
SCR_MNPROB20) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB16 - SCR_MINPROB20) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB16 - SCR_MAXPROB20) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 100;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 4;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 3 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS11 - EVENTS15 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS11 - NONEVENTS15);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB11 -
SCR_MNPROB15) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB11 - SCR_MINPROB15) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB11 - SCR_MAXPROB15) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 100;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 3;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 2 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS6 - EVENTS10 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS6 - NONEVENTS10);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB6 -
SCR_MNPROB10) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB6 - SCR_MINPROB10) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB6 - SCR_MAXPROB10) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 100;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 2;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 1 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS1 - EVENTS5 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS1 - NONEVENTS5);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB1 - SCR_MNPROB5)
/ NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB1 - SCR_MINPROB5) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB1 - SCR_MAXPROB5) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 100;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 1;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("KSPROB" , PUT (KSPROB, 5.3 ) );
MPRINT(EM_ASSESS):   CALL SYMPUTX ("_KS_BIN_PROB" , _KS_BIN_PROB );
MPRINT(EM_ASSESS):   CALL SYMPUTX ("_KS_BIN_" , _KS_BIN_ / 100 );
MPRINT(EM_ASSESS):   CALL SYMPUTX ("KSDIFF" , KS_ABSDIFF );
MPRINT(EM_ASSESS):   CALL SYMPUTX ("PRECTPR" , PRECTPR );
MPRINT(EM_ASSESS):   CALL SYMPUTX ("MAXMUTUALPROB" , MAXMUTUALPROB);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   LABEL __EVENT__ = "Event" DECILE = "Depth" BIN = "Bin" NUMOBS = "Number
of Observations" ;
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * RUN for large data set;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   PROC DATASETS NOLIST;
MPRINT(EM_ASSESS):   DELETE _AUXEVENTNAME;
MPRINT(EM_ASSESS):   QUIT;
 
MPRINT(EM_ASSESS):   OPTION NOCENTER LS = 95;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * Report Vars Area.;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ...........Start OF Outdist Modification;
MPRINT(EM_ASSESS):   *;
 
MPRINT(EM_ASSESS):   PROC DATASETS NOLIST LIB = WORK;
MPRINT(EM_ASSESS):   MODIFY _TEMPSCOREDIST;
MPRINT(EM_ASSESS):   RENAME MODELSCORE = SCORE UPPERPROB = UPPOSTERIOR SCR_CP_EVENTS =
CUMULATIVEPERCENTAGEOFEVENTS SCR_CP_NONEVENTS = CUMULATIVEPERCENTAGEOFNONEVENTS EVENTVALUE =
EVENT LOWERPROB = LOWPOSTERIOR NUMOBSINGROUP = N PERCOBSINGROUP = PERCENTAGE SCR_MINPROB =
_MINP_ SCR_MAXPROB = _MAXP_ SCR_MNPROB = _MEANP_ RANGE = P_LABEL C_PERCOBSINGROUP =
CUMULATIVEPERCENTAGE SCR_NUMEVENTS = NUMBEROFEVENTS SCR_NUMNONEVENTS = NUMBEROFNONEVENTS
SCR_P_EVENTS = PERCENTAGEOFEVENTS SCR_P_NONEVENTS = PERCENTAGEOFNONEVENTS ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * .................... OUTDIST MODIFICATION LABEL AREA;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   LABEL BIN = "Bin" N = "Number of Observations" P_LABEL = "Posterior
Probability Range" EVENT = "Event" LOWPOSTERIOR = "Lower Bound Posterior Probability"
PERCENTAGEOFEVENTS = "Percentage of Events" CUMULATIVEPERCENTAGEOFNONEVENTS = "Cumulative
Percentage of Nonevents" CUMULATIVEPERCENTAGE = "Cumulative Percentage" PERCENTAGEOFEVENTS =
"Percentage of Events" PERCENTAGEOFNONEVENTS = "Percentage of Nonevents"
CUMULATIVEPERCENTAGEOFEVENTS = "Cumulative Percentage of Events" UPPOSTERIOR = "Upper Bound
Posterior Probability" NUMBEROFEVENTS = "Number of Events" PERCENTAGE = "Percentage"
NUMBEROFNONEVENTS = "Number of Nonevents" _MEANP_ = "Mean Posterior Probability" _MINP_ = "Min
Posterior Probability" _MAXP_ = "Max Posterior Probability" SCORE = "Model Score" ;
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   QUIT;
MPRINT(EM_ASSESS):   DATA WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   SET WORK._TEMPSCOREDIST (WHERE = (_MEANP_ > .));
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ........... END OF OUTDIST MODIFICATION;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ...........Start of OUTRANKS Modification;
MPRINT(EM_ASSESS):   *;
 
MPRINT(EM_ASSESS):   PROC DATASETS NOLIST LIB = WORK;
MPRINT(EM_ASSESS):   MODIFY _TEMPRANK;
MPRINT(EM_ASSESS):   RENAME __EVENT__ = EVENT P_RESP = RESP C_P_CAPT_RESP = CAPC P_CAPT_RESP =
CAP NUMNONRESP = NUMNEVENT NUMRESP = NUMEVENT BASEEVENTS = BASENUMBEROFEVENTS BESTNUMEVENTS =
BESTNUMBEROFEVENTS MAXPROB = _MAXP_ MINPROB = _MINP_ CBASELIFT = BASELIFTC C_LIFT = LIFTC
MNPROB = _MEANP_ PERCENTILE = DECILE NUMOBS = N NUMEVENT = NUMBEROFEVENTS C_P_RESP = RESPC ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ................. OUTRANKS;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   LABEL _MAXP_ = "Max Posterior Probability" _MINP_ = "Min Posterior
Probability" _MEANP_ = "Mean Posterior Probability" BASECAP = "Baseline % Captured Response"
BASECAPC = "Baseline Cumulative % Captured Response" BASENUMBEROFEVENTS = "Baseline Number of
Events" BASEGAIN = "Baseline Gain" BASELIFT = "Baseline Lift" BASELIFTC = "Baseline Cumulative
Lift" BASERESP = "Baseline % Response" BASERESPC = "Baseline Cumulative % Response" BASELIFTC
= "Baseline Cumulative Lift" BESTCAP = "Best % Captured Response" BESTCAPC = "Best Cumulative
% Captured Response" BESTGAIN = "Best Gain" BESTRESP = "Best % Response" BESTRESPC = "Best
Cumulative % Response" BESTLIFT = "Best Lift" BESTLIFTC = "Best Cumulative Lift"
BESTNUMBEROFEVENTS = "Best Number of Events" CAP = "% Captured Response" CAPC = "Cumulative %
Captured Response" DECILE = "Depth" GAIN = "Gain" LIFT = "Lift" LIFTC = "Cumulative Lift"
NUMNEVENT = "Number of Nonevents" N = "Number of Observations" EVENT = "Event" RESPC =
"Cumulative % Response" NUMBEROFEVENTS = "Number of Events" RESP = "% Response" ;
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   QUIT;
MPRINT(EM_ASSESS):   DATA WORK._TEMPRANK;
MPRINT(EM_ASSESS):   SET WORK._TEMPRANK (WHERE = (_MEANP_ > .));
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   proc datasets lib=work nolist;
MPRINT(EM_ASSESS):   delete _ea_tmpdata;
MPRINT(EM_ASSESS):   run;
MPRINT(EM_ASSESS):   quit;
MPRINT(EM_ASSESS):  ;
MPRINT(EM_ASSESS):   OPTION ERRORS = 20;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):    data WORK._TEMPRANK;
MPRINT(EM_DIAGRAM):   length target $32 TARGETLABEL $200 dataRole $20;
MPRINT(EM_DIAGRAM):   label TARGETLABEL = "Target Label";
MPRINT(EM_DIAGRAM):   set WORK._TEMPRANK;
MPRINT(EM_DIAGRAM):   retain target "Risk";
MPRINT(EM_DIAGRAM):   retain dataRole "TRAIN";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data EMWS1.Neural2_EMRANK;
MPRINT(EM_DIAGRAM):   set WORK._TEMPRANK;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data WORK._TEMPSCOREDIST;
MPRINT(EM_DIAGRAM):   length target $32 TARGETLABEL $200 dataRole $20;
MPRINT(EM_DIAGRAM):   label TARGETLABEL = "Target Label";
MPRINT(EM_DIAGRAM):   set WORK._TEMPSCOREDIST;
MPRINT(EM_DIAGRAM):   retain target "Risk";
MPRINT(EM_DIAGRAM):   retain dataRole "TRAIN";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data EMWS1.Neural2_EMSCOREDIST;
MPRINT(EM_DIAGRAM):   set WORK._TEMPSCOREDIST;
MPRINT(EM_DIAGRAM):   run;
101305     data EM_temp_assessMeta;
MPRINT(EM_DIAGRAM):    data EM_temp_assessMeta;
101306     set EMWS1.Neural2_CMeta_TRAIN;
MPRINT(EM_DIAGRAM):   set EMWS1.Neural2_CMeta_TRAIN;
101307     where role in('DECISION', 'PREDICT', 'RESIDUAL', 'CLASSIFICATION', 'ASSESS', 'COST')
101307   ! ;
MPRINT(EM_DIAGRAM):   where role in('DECISION', 'PREDICT', 'RESIDUAL', 'CLASSIFICATION',
'ASSESS', 'COST');
101308     run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 8 observations read from the data set EMWS1.NEURAL2_CMETA_TRAIN.
      WHERE role in ('ASSESS', 'CLASSIFICATION', 'COST', 'DECISION', 'PREDICT', 'RESIDUAL');
NOTE: The data set WORK.EM_TEMP_ASSESSMETA has 8 observations and 29 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
101309     data EM_temp_assessdata;
MPRINT(EM_DIAGRAM):    data EM_temp_assessdata;
101310     set EMWS1.Neural2_VALIDATE(keep=
101311     F_Risk
101312     I_Risk
101313     P_Risk0
101314     P_Risk1
101315     R_Risk0
101316     R_Risk1
101317     U_Risk
101318     _WARN_
101319     Risk
101320     );
MPRINT(EM_DIAGRAM):   set EMWS1.Neural2_VALIDATE(keep= F_Risk I_Risk P_Risk0 P_Risk1 R_Risk0
R_Risk1 U_Risk _WARN_ Risk );
101321     run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 100 observations read from the data set EMWS1.PART_VALIDATE.
NOTE: There were 100 observations read from the data set EMWS1.IMPT_VALIDATE.
NOTE: There were 100 observations read from the data set EMWS1.REPL_VALIDATE.
NOTE: There were 100 observations read from the data set EMWS1.TRANS_VALIDATE.
NOTE: View EMWS1.NEURAL2_VALIDATE.VIEW used (Total process time):
      real time           0.22 seconds
      cpu time            0.21 seconds
 
NOTE: There were 100 observations read from the data set EMWS1.REPL2_VALIDATE.
NOTE: There were 100 observations read from the data set EMWS1.NEURAL2_VALIDATE.
NOTE: The data set WORK.EM_TEMP_ASSESSDATA has 100 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.24 seconds
      cpu time            0.25 seconds
 
 
MPRINT(EM_DIAGRAM):    proc freq data=EM_temp_assessdata noprint;
MPRINT(EM_DIAGRAM):   table I_Risk*F_Risk / out = WORK.Neural2_3BKA5QI nocol norow outpct;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data WORK.Neural2_3BKA5QI;
MPRINT(EM_DIAGRAM):   length _TYPE_ $10 DATAROLE TARGET $32 TARGETLABEL $200 FROM INTO $32
CORRECTTEXT $40 ;
MPRINT(EM_DIAGRAM):   label _TYPE_ = "Outcome Type";
MPRINT(EM_DIAGRAM):   label DATAROLE = "Data Role";
MPRINT(EM_DIAGRAM):   label TARGET = "Target Variable";
MPRINT(EM_DIAGRAM):   label TARGETLABEL = "Target Label";
MPRINT(EM_DIAGRAM):   label FROM = "Target";
MPRINT(EM_DIAGRAM):   label INTO = "Outcome";
MPRINT(EM_DIAGRAM):   label PCT_ROW = "Target Percentage";
MPRINT(EM_DIAGRAM):   label PCT_COL = "Outcome Percentage";
MPRINT(EM_DIAGRAM):   label COUNT = "Frequency Count";
MPRINT(EM_DIAGRAM):   label PERCENT = "Total Percentage";
MPRINT(EM_DIAGRAM):   label CORRECTTEXT = "Correct Text";
MPRINT(EM_DIAGRAM):   label CORRECT = "Correct";
MPRINT(EM_DIAGRAM):   set WORK.Neural2_3BKA5QI(rename=(F_Risk=FROM I_Risk=INTO));
MPRINT(EM_DIAGRAM):   retain _TYPE_ 'PREDICTION' DATAROLE "VALIDATE" TARGET "Risk";
MPRINT(EM_DIAGRAM):   if FROM eq INTO then do;
MPRINT(EM_DIAGRAM):   CORRECT = 0;
MPRINT(EM_DIAGRAM):   CORRECTTEXT="Correct";
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   CORRECT = 1;
MPRINT(EM_DIAGRAM):   CORRECTTEXT="Incorrect";
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data EMWS1.Neural2_EMCLASSIFICATION;
MPRINT(EM_DIAGRAM):   set EMWS1.Neural2_EMCLASSIFICATION WORK.Neural2_3BKA5QI;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data WORK.MISCREPORT;
MPRINT(EM_DIAGRAM):   set WORK.Neural2_3BKA5QI;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data WORK.MISCREPORT(drop=INTO FROM _TYPE_);
MPRINT(EM_DIAGRAM):   set WORK.MISCREPORT;
MPRINT(EM_DIAGRAM):   length MISC $12;
MPRINT(EM_DIAGRAM):   if FROM='1' and INTO='1' then MISC='TRUEEVENT';
MPRINT(EM_DIAGRAM):   else if FROM='1' and INTO ne '1' then MISC='FALSENEVENT';
MPRINT(EM_DIAGRAM):   else if FROM ne '1' and INTO='1' then MISC='FALSEEVENT';
MPRINT(EM_DIAGRAM):   else if FROM ne'1' and INTO ne '1' then MISC='TRUENEVENT';
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=WORK.MISCREPORT nothreads;
MPRINT(EM_DIAGRAM):   by DATAROLE TARGET;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc summary data=WORK.MISCREPORT NWAY;
MPRINT(EM_DIAGRAM):   output out=WORK.MISCCOUNT(drop=_FREQ_ _TYPE_) SUM=COUNT;
MPRINT(EM_DIAGRAM):   CLASS MISC;
MPRINT(EM_DIAGRAM):   VAR COUNT;
MPRINT(EM_DIAGRAM):   by DATAROLE TARGET;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc transpose data=WORK.MISCCOUNT out=WORK.MISCREPORT(drop=_NAME_
_LABEL_);
MPRINT(EM_DIAGRAM):   by DATAROLE TARGET;
MPRINT(EM_DIAGRAM):   ID MISC;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data EMWS1.Neural2_EMEVENTREPORT;
MPRINT(EM_DIAGRAM):   length TARGETLABEL $200;
MPRINT(EM_DIAGRAM):   label TARGETLABEL = "Target Label";
MPRINT(EM_DIAGRAM):   set EMWS1.Neural2_EMEVENTREPORT WORK.MISCREPORT;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data ASSESS_REPORTMETA;
MPRINT(EM_DIAGRAM):   set EMWS1.Neural2_VariableSet;
MPRINT(EM_DIAGRAM):   where REPORT='Y';
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   filename temp catalog 'sashelp.emassmt.em_assess.source';
MPRINT(EM_DIAGRAM):   filename temp;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   set EMWS1.Neural2_Risk_DM;
MPRINT(EM_DIAGRAM):   where _TYPE_="TARGET";
MPRINT(EM_DIAGRAM):   call symput('ASSMT_EVENT', strip(event));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):
MPRINT(EM_ASSESS):   data _ea_tmpdata;
MPRINT(EM_ASSESS):   set EM_temp_assessdata;
MPRINT(EM_ASSESS):   _tmpfreqvar_=1;
MPRINT(EM_ASSESS):   run;
MPRINT(EM_CHECKEMSETINIT):   DATA _NULL_;
MPRINT(EM_CHECKEMSETINIT):   EM_SETINIT = 'N';
MPRINT(EM_CHECKEMSETINIT):   IF SYSPROD('PRODNUM50') THEN EM_SETINIT = 'Y';
MPRINT(EM_CHECKEMSETINIT):   ELSE IF SYSPROD('PRODNUM448') THEN EM_SETINIT = 'Y';
MPRINT(EM_CHECKEMSETINIT):   ELSE IF SYSPROD('PRODNUM102') THEN EM_SETINIT = 'Y';
MPRINT(EM_CHECKEMSETINIT):   ELSE IF SYSPROD('PRODNUM103') THEN EM_SETINIT = 'Y';
MPRINT(EM_CHECKEMSETINIT):   CALL SYMPUT('EM_SETINIT', EM_SETINIT);
MPRINT(EM_CHECKEMSETINIT):   RUN;
MPRINT(EM_ASSESS):  ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ............ Reading in reporting data set;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   DATA _NULL_;
MPRINT(EM_ASSESS):   SET ASSESS_REPORTMETA END = EOF;
MPRINT(EM_ASSESS):   IF TYPE = "C" OR UPCASE (LEVEL) IN ("NOMINAL", "BINARY" , "ORDINAL") THEN
DO;
MPRINT(EM_ASSESS):   IF UPCASE (NAME) NE UPCASE ("F_Risk") THEN DO;
MPRINT(EM_ASSESS):   NUMCTOREPORT + 1;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("REPORTC" || LEFT (PUT (NUMCTOREPORT, 5.)), NAME);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE CALL SYMPUTX ("RPRT_TRGT", "C");
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE IF TYPE = "N" THEN DO;
MPRINT(EM_ASSESS):   IF UPCASE(NAME) NE UPCASE ("F_Risk") THEN DO;
MPRINT(EM_ASSESS):   NUMNTOREPORT + 1;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("REPORTN" || LEFT (PUT (NUMNTOREPORT, 5.)), NAME);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE CALL SYMPUTX ("RPRT_TRGT", "N");
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   IF EOF THEN DO;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("NUMNTOREPORT", NUMNTOREPORT);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("NUMCTOREPORT", NUMCTOREPORT);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("NUMTOREPORT", SUM (NUMNTOREPORT, NUMCTOREPORT));
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   PROC DMDB DATA = _ea_tmpdata VAROUT = VAROUT DMDBCAT = _D CLASSOUT =
_ASSMT_CLASSOUT;
MPRINT(EM_ASSESS):   CLASS F_Risk ;
 
MPRINT(EM_ASSESS):   VAR P_Risk1 _tmpfreqvar_ ;
MPRINT(EM_ASSESS):   FREQ _tmpfreqvar_;
MPRINT(EM_ASSESS):   RUN ;
MPRINT(EM_ASSESS):   QUIT;
MPRINT(EM_ASSESS):   PROC SORT DATA = _ASSMT_CLASSOUT;
MPRINT(EM_ASSESS):   BY NAME;
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   DATA _auxeventname (keep = __event__) ;
MPRINT(EM_ASSESS):   * ;
MPRINT(EM_ASSESS):   * ...FLAG0_1 = ..... TARGET IS 0, 1 & EVENT = 1;
 
MPRINT(EM_ASSESS):   ;
MPRINT(EM_ASSESS):   length __event__ $ 32;
MPRINT(EM_ASSESS):   RETAIN FLAG0_1 1 NUM1 . NUM0 . __event__ "_missing_" ;
 
MPRINT(EM_ASSESS):   SET _ASSMT_CLASSOUT END = EOF;
MPRINT(EM_ASSESS):   BY NAME;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ....... LEVEL = BINARY OR NOMINAL OR ORDINAL;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
 
MPRINT(EM_ASSESS):   IF UPCASE(NAME) = UPCASE ("F_Risk") THEN DO;
MPRINT(EM_ASSESS):   CUMFREQ + FREQUENCY;
MPRINT(EM_ASSESS):   IF LEVEL NE "." THEN DO;
MPRINT(EM_ASSESS):   N1 + 1;
MPRINT(EM_ASSESS):   IF (NRAW NE 0 AND NRAW NE 1) OR TYPE NE "N" OR "" > " " THEN FLAG0_1 = 0;
MPRINT(EM_ASSESS):   * ;
MPRINT(EM_ASSESS):   * ......................... IF EVENT NE BLANK;
MPRINT(EM_ASSESS):   * ....................LEVEL IS CHAR VAR ;
MPRINT(EM_ASSESS):   * ;
MPRINT(EM_ASSESS):   IF UPCASE("1") = UPCASE(LEVEL) THEN DO;
MPRINT(EM_ASSESS):   NUM1 = FREQUENCY;
MPRINT(EM_ASSESS):   IF TYPE = "C" THEN do;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("EVENTVALUERAW", CRAW );
MPRINT(EM_ASSESS):   __event__ = craw;
MPRINT(EM_ASSESS):   end;
MPRINT(EM_ASSESS):   ELSE do;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("EVENTVALUERAW", NRAW );
MPRINT(EM_ASSESS):   __event__ = nraw;
MPRINT(EM_ASSESS):   end;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   IF LAST.NAME THEN DO;
 
MPRINT(EM_ASSESS):   * ;
MPRINT(EM_ASSESS):   * .............. IN NOMINAL CASE, NEED TO GROUP ALL '0' ;
MPRINT(EM_ASSESS):   *;
 
MPRINT(EM_ASSESS):   NUM0 = SUM (CUMFREQ, - NUM1);
MPRINT(EM_ASSESS):   IF NUM0 < 0 THEN NUM0 = 0;
MPRINT(EM_ASSESS):   IF NUM1 = . THEN NUM1 = 0;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("NUM0", NUM0 );
MPRINT(EM_ASSESS):   CALL SYMPUTX ("NUM1", NUM1);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("PNUM1", NUM1 / CUMFREQ);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("PNUM0", (CUMFREQ - NUM1) / CUMFREQ);
MPRINT(EM_ASSESS):   IF TYPE = "C" THEN DO;
MPRINT(EM_ASSESS):   FLAG0_1 = 0;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("TARGETTYPE", "C" );
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE IF TYPE = "N" THEN DO;
MPRINT(EM_ASSESS):   IF "" = " " THEN DO;
MPRINT(EM_ASSESS):   IF "1" NE "1" THEN FLAG0_1 = 0;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("TARGETTYPE", "N" );
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   * ................... IF TYPE = N;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("FLAG0_1", FLAG0_1 );
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   * ..................IF LAST.NAME ;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   * ...............IF LEVEL NE '.' ;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   * .............. IF NAME = TARGET;
MPRINT(EM_ASSESS):   ELSE IF "" > " " AND UPCASE(NAME) = UPCASE("") THEN DO;
MPRINT(EM_ASSESS):   NUMDECISIONS + 1;
MPRINT(EM_ASSESS):   LEVEL = TRANSLATE (LEVEL, "_", "'", "_", '"');
MPRINT(EM_ASSESS):   CALL SYMPUTX ("D_LABEL" || LEFT (PUT (NUMDECISIONS, 3.)), LEVEL );
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   * ..................... ELSE IF UPCASE;
MPRINT(EM_ASSESS):   IF EOF THEN DO;
MPRINT(EM_ASSESS):   output _auxeventname;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("NUMOBS", CUMFREQ);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("NUMDECISIONS", NUMDECISIONS);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   DATA _NULL_;
MPRINT(EM_ASSESS):   SET VAROUT END = EOF;
MPRINT(EM_ASSESS):   IF UPCASE (NAME) = UPCASE ("P_Risk1") THEN DO;
MPRINT(EM_ASSESS):   IF N = 0 THEN DO;
MPRINT(EM_ASSESS):   PUT //// "          Warning: All posterior probabilities are missing
values ";
MPRINT(EM_ASSESS):   PUT ///;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("ALLMISS", 1);
MPRINT(EM_ASSESS):   STOP;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE CALL SYMPUTX ("ALLMISS", 0);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("MINPROB", MIN);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("MAXPROB", MAX);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("DIFF", MAX - MIN);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("NMISSPROB", NMISS);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE IF UPCASE (NAME) = UPCASE ("_tmpfreqvar_") THEN DO;
MPRINT(EM_ASSESS):   AUXMIN = MIN - INT (MIN);
MPRINT(EM_ASSESS):   AUXMAX = MAX - INT (MAX);
MPRINT(EM_ASSESS):   IF AUXMIN > 0 OR AUXMAX > 0 THEN CALL SYMPUTX ("USEWEIGHT", "Y");
MPRINT(EM_ASSESS):   ELSE CALL SYMPUTX ("USEWEIGHT", "N");
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   DATA _ANY0;
MPRINT(EM_ASSESS):   SET _ea_tmpdata (KEEP = F_Risk P_Risk1 _tmpfreqvar_ );
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ................... No Formats;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   IF LEFT ( F_Risk ) = "1" THEN NTARGET = 1;
MPRINT(EM_ASSESS):   ELSE NTARGET = 0;
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * .............. Before proc summary of binary case;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   PROC SUMMARY DATA = _ANY0 (KEEP = P_Risk1 NTARGET _tmpfreqvar_ WHERE =
(NTARGET > . )) NWAY MISSING;
MPRINT(EM_ASSESS):   ;
MPRINT(EM_ASSESS):   CLASS P_Risk1 ;
MPRINT(EM_ASSESS):   VAR NTARGET ;
MPRINT(EM_ASSESS):   FREQ _tmpfreqvar_ ;
MPRINT(EM_ASSESS):   OUTPUT OUT = ANYSUM (DROP = _TYPE_) MEAN = _MEANTARGET _MEANFREQVAR ;
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   QUIT;
MPRINT(EM_ASSESS):   ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * .................... Main Data Set Processing, Binary case;
MPRINT(EM_ASSESS):   *;
 
MPRINT(EM_ASSESS):   DATA WORK._TEMPRANK (KEEP = BASECAPC BASECAP __EVENT__ BASEEVENTS
BASEGAIN BASELIFT BASERESP BASERESPC BESTCAP BESTCAPC BESTGAIN BESTLIFT BESTLIFTC
BESTNUMEVENTS BESTRESP BESTRESPC BIN CBASELIFT C_LIFT C_P_CAPT_RESP C_P_RESP GAIN LIFT MAXPROB
MINPROB MNPROB NUMNONRESP NUMOBS NUMRESP PERCENTILE P_CAPT_RESP P_RESP ) WORK._TEMPSCOREDIST
(KEEP = BIN LOWERPROB UPPERPROB EVENTVALUE SCR_NUMEVENTS MODELSCORE SCR_NUMNONEVENTS RANGE
NUMOBSINGROUP PERCOBSINGROUP C_PERCOBSINGROUP SCR_P_EVENTS SCR_CP_EVENTS SCR_P_NONEVENTS
SCR_CP_NONEVENTS SCR_MNPROB SCR_MINPROB SCR_MAXPROB ) ;
 
MPRINT(EM_ASSESS):   SET ANYSUM END = EOF;
 
MPRINT(EM_ASSESS):   IF _N_ = 1 THEN SET _AUXEVENTNAME;
 
MPRINT(EM_ASSESS):   RETAIN MINPROB1 - MINPROB20 1 MAXPROB1 - MAXPROB20 0 MNPROB1 - MNPROB20 0
NUMOBS1 - NUMOBS20 0 NUMRESP1 - NUMRESP20 0 TRUEPOS1 - TRUEPOS100 0 TRUENEG1 - TRUENEG100 0
FALSEPOS1 - FALSEPOS100 0 FALSENEG1 - FALSENEG100 0 EVENTS1 - EVENTS100 NONEVENTS1 -
NONEVENTS100 0 FIRSTIN1 - FIRSTIN100 . LASTIN1 - LASTIN100 . RESPRATE 0.55 _NEVENTS 55
_NNONEVENTS 45 TARGET "NTARGET" ;
MPRINT(EM_ASSESS):   ARRAY MINPROBS (20) MINPROB1 - MINPROB20;
MPRINT(EM_ASSESS):   ARRAY MAXPROBS (20) MAXPROB1 - MAXPROB20;
MPRINT(EM_ASSESS):   ARRAY MNPROBS (20) MNPROB1 - MNPROB20;
MPRINT(EM_ASSESS):   ARRAY NUMOBSS (20) NUMOBS1 - NUMOBS20;
MPRINT(EM_ASSESS):   ARRAY NUMRESPS (20) NUMRESP1 - NUMRESP20;
MPRINT(EM_ASSESS):   ARRAY TRUEPOSX (100) TRUEPOS1 - TRUEPOS100;
MPRINT(EM_ASSESS):   ARRAY FALSEPOSX (100) FALSEPOS1 - FALSEPOS100;
MPRINT(EM_ASSESS):   ARRAY FALSENEGX (100) FALSENEG1 - FALSENEG100;
MPRINT(EM_ASSESS):   ARRAY TRUENEGX (100) TRUENEG1 - TRUENEG100;
MPRINT(EM_ASSESS):   ARRAY _EVENTS (100) EVENTS1 - EVENTS100;
MPRINT(EM_ASSESS):   ARRAY NONEVENTS (100) NONEVENTS1 - NONEVENTS100;
MPRINT(EM_ASSESS):   ARRAY FIRSTIN (100) FIRSTIN1 - FIRSTIN100;
MPRINT(EM_ASSESS):   ARRAY LASTIN (100) LASTIN1 - LASTIN100;
MPRINT(EM_ASSESS):   RETAIN SCR_MNPROB1 - SCR_MNPROB100 0 SCR_MINPROB1 - SCR_MINPROB100 1
SCR_MAXPROB1 - SCR_MAXPROB100 0;
MPRINT(EM_ASSESS):   ARRAY SCR_MNPROBS (100) SCR_MNPROB1 - SCR_MNPROB100;
MPRINT(EM_ASSESS):   ARRAY SCR_MINPROBS (100) SCR_MINPROB1 - SCR_MINPROB100;
MPRINT(EM_ASSESS):   ARRAY SCR_MAXPROBS (100) SCR_MAXPROB1 - SCR_MAXPROB100;
MPRINT(EM_ASSESS):   DROP SCR_MINPROB1 - SCR_MINPROB100 SCR_MAXPROB1 - SCR_MAXPROB100
SCR_MNPROB1 - SCR_MNPROB100 ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ...... Area For 8 Financials ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   IF _MEANTARGET = . THEN _MEANTARGET = RESPRATE;
MPRINT(EM_ASSESS):   DROP N1 _K SUMWEIGHTS ;
MPRINT(EM_ASSESS):   SUMWEIGHTS = 1;
 
MPRINT(EM_ASSESS):   DO _K = 1 TO CEIL (_FREQ_);
MPRINT(EM_ASSESS):   IF _K = CEIL (_FREQ_) THEN DO;
MPRINT(EM_ASSESS):   IF _FREQ_ < CEIL (_FREQ_) THEN _WEIGHT = _FREQ_ - FLOOR (_FREQ_);
MPRINT(EM_ASSESS):   ELSE _WEIGHT = 1;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE _WEIGHT = 1;
MPRINT(EM_ASSESS):   N1 + _WEIGHT;
MPRINT(EM_ASSESS):   NTARGET = _MEANTARGET ;
MPRINT(EM_ASSESS):   DECILE = MIN (20, CEIL (N1 * 20 / 100));
MPRINT(EM_ASSESS):   MINPROBS ( DECILE) = MIN (MINPROBS ( DECILE), P_Risk1 );
MPRINT(EM_ASSESS):   MAXPROBS ( DECILE) = MAX (MAXPROBS ( DECILE), P_Risk1 );
MPRINT(EM_ASSESS):   MNPROBS ( DECILE) = SUM (MNPROBS ( DECILE), P_Risk1 * _WEIGHT);
MPRINT(EM_ASSESS):   NUMOBSS ( DECILE) = NUMOBSS ( DECILE) + _WEIGHT;
MPRINT(EM_ASSESS):   NUMRESPS ( DECILE) = NUMRESPS ( DECILE) + _MEANTARGET * _WEIGHT;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ........ outside of do loop, Area for final ROC;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   RANKDELTA = (ROUND ( _FREQ_ ) + 1) / 2;
MPRINT(EM_ASSESS):   RANK = UNTIEDRANK + RANKDELTA;
MPRINT(EM_ASSESS):   DROP RANK ;
MPRINT(EM_ASSESS):   SUMRANK1 + RANK * ROUND (_MEANTARGET * _FREQ_, .0000001);
MPRINT(EM_ASSESS):   UNTIEDRANK + ROUND (_FREQ_, .00000001);
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ............ Area For ROC Curve;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   DO _K = 1 TO 100;
MPRINT(EM_ASSESS):   IF P_Risk1 * 100 >= _K THEN DO;
MPRINT(EM_ASSESS):   TRUEPOSX ( _K ) + _FREQ_ * _MEANTARGET ;
MPRINT(EM_ASSESS):   FALSEPOSX ( _K ) + _FREQ_ * (1 - _MEANTARGET) ;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   TRUENEGX ( _K ) + _FREQ_ * ( 1 - _MEANTARGET) ;
MPRINT(EM_ASSESS):   FALSENEGX ( _K ) + _FREQ_ * _MEANTARGET ;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   SLOT = MIN (MAX (CEIL (P_Risk1 * 100), 1), 100) ;
MPRINT(EM_ASSESS):   DROP SLOT;
MPRINT(EM_ASSESS):   FIRSTIN ( SLOT ) = MIN ( FIRSTIN ( SLOT ), P_Risk1);
MPRINT(EM_ASSESS):   LASTIN ( SLOT ) = MAX ( LASTIN ( SLOT ), P_Risk1);
MPRINT(EM_ASSESS):   _EVENTS ( SLOT) = _EVENTS ( SLOT) + _FREQ_ * _MEANTARGET;
MPRINT(EM_ASSESS):   NONEVENTS ( SLOT) = NONEVENTS ( SLOT) + _FREQ_ * (1 - _MEANTARGET);
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ........ START OF OUTDIST IN BINARY CASE MAIN DATA STEP ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   SCR_MNPROBS ( SLOT ) = SUM (SCR_MNPROBS (SLOT), P_Risk1 * _FREQ_ );
MPRINT(EM_ASSESS):   SCR_MINPROBS ( SLOT ) = MIN (SCR_MINPROBS (SLOT), P_Risk1 );
MPRINT(EM_ASSESS):   SCR_MAXPROBS ( SLOT ) = MAX (SCR_MAXPROBS (SLOT), P_Risk1 );
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ........ End of Outdist in Binary case main DATA STEP ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   IF EOF THEN DO;
MPRINT(EM_ASSESS):   PUT //;
MPRINT(EM_ASSESS):   DO K = 1 TO 20;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   LENGTH EVENTVALUE $ 32;
MPRINT(EM_ASSESS):   RETAIN EVENTVALUE "1" ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ......... Start of EOF area of BINARY processing of main data set ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SUMRANK1", SUMRANK1);
MPRINT(EM_ASSESS):   LENGTH DATAROLE $ 10;
MPRINT(EM_ASSESS):   RETAIN DATAROLE "VALIDATE" ;
MPRINT(EM_ASSESS):   RETAIN OVLMIN 0.0017680445 OVLMAX 0.9966797929 ;
MPRINT(EM_ASSESS):   DROP OVLMIN OVLMAX ;
MPRINT(EM_ASSESS):   C_NUMOBS = 0;
MPRINT(EM_ASSESS):   C_NUM_RESP = 0;
MPRINT(EM_ASSESS):   C_NUM_NONRESP = 0;
MPRINT(EM_ASSESS):   C_P_RESP = 0;
MPRINT(EM_ASSESS):   P_CAPT_RESP = 0;
MPRINT(EM_ASSESS):   C_P_CAPT_RESP = 0;
MPRINT(EM_ASSESS):   PREVIOUSPROFIT = 0;
MPRINT(EM_ASSESS):   MAXPROFIT = 0;
MPRINT(EM_ASSESS):   _KS_BIN_ = 0;
MPRINT(EM_ASSESS):   DROP _KS_BIN_;
MPRINT(EM_ASSESS):   AVGNUMRESP = _NEVENTS / 20;
MPRINT(EM_ASSESS):   BASERESP = 100 * RESPRATE;
MPRINT(EM_ASSESS):   BASERESPC = BASERESP;
MPRINT(EM_ASSESS):   BASECAP = 100 / 20;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ........................Start OF Gainschart = Outranks Area;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   _KS_BIN_PROB = 0;
MPRINT(EM_ASSESS):   DO GROUP = 20 TO 1 BY -1;
 
MPRINT(EM_ASSESS):   BASECAPC + BASECAP;
MPRINT(EM_ASSESS):   PERCENTILE = GROUP * (100 / 20);
MPRINT(EM_ASSESS):   MINPROB = MINPROBS ( GROUP);
MPRINT(EM_ASSESS):   MAXPROB = MAXPROBS ( GROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("MINPROB" || LEFT ( PUT (GROUP, 3.)), MINPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("MAXPROB" || LEFT ( PUT (GROUP, 3.)), MAXPROB);
MPRINT(EM_ASSESS):   NUMOBS = NUMOBSS ( GROUP);
MPRINT(EM_ASSESS):   IF NUMOBS > 0 THEN MNPROB = MNPROBS ( GROUP) / NUMOBS;
MPRINT(EM_ASSESS):   ELSE MNPROB = .;
MPRINT(EM_ASSESS):   C_NUMOBS = SUM (NUMOBS, C_NUMOBS);
MPRINT(EM_ASSESS):   NUMRESP = NUMRESPS ( GROUP);
MPRINT(EM_ASSESS):   NUMNONRESP = NUMOBS - NUMRESP;
MPRINT(EM_ASSESS):   C_AVGNUM_RESP + AVGNUMRESP;
MPRINT(EM_ASSESS):   IF C_NUMOBS <= _NEVENTS THEN DO;
MPRINT(EM_ASSESS):   BESTNUMEVENTS = NUMOBS;
MPRINT(EM_ASSESS):   BESTCAPC = C_NUMOBS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   BASEEVENTS = _NEVENTS / 20;
MPRINT(EM_ASSESS):   BASENONEVENTS = 0;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   FLAG + 1;
MPRINT(EM_ASSESS):   DROP FLAG;
MPRINT(EM_ASSESS):   BESTNUMEVENTS = _NEVENTS - C_NUMOBS + NUMOBS;
MPRINT(EM_ASSESS):   IF FLAG > 1 THEN BESTNUMEVENTS = 0;
MPRINT(EM_ASSESS):   BESTCAPC = 100;
MPRINT(EM_ASSESS):   IF C_NUMOBS - _NEVENTS <= NUMOBS THEN DO;
MPRINT(EM_ASSESS):   BASEEVENTS = C_NUMOBS - _NEVENTS;
MPRINT(EM_ASSESS):   BASENONEVENTS = NUMOBS - C_NUMOBS + _NEVENTS;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   BASEEVENTS = 0;
MPRINT(EM_ASSESS):   BASENONEVENTS = NUMOBS;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   BESTCAP = BESTNUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   IF C_NUMOBS <= _NEVENTS THEN DO;
MPRINT(EM_ASSESS):   BESTLIFT = ((_NEVENTS+_NNONEVENTS) / 20) /AVGNUMRESP;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   BESTLIFT = BESTNUMEVENTS / AVGNUMRESP;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   C_BESTNUMEVENTS + BESTNUMEVENTS;
MPRINT(EM_ASSESS):   DROP C_BESTNUMEVENTS;
MPRINT(EM_ASSESS):   IF C_NUMOBS > 0 THEN BESTLIFTC = C_BESTNUMEVENTS / (_NEVENTS / 100 *
C_NUMOBS);
MPRINT(EM_ASSESS):   ELSE BESTLIFTC = .;
MPRINT(EM_ASSESS):   IF NUMOBS > 0 THEN DO;
MPRINT(EM_ASSESS):   BESTRESP = BESTNUMEVENTS * 100 / NUMOBS;
MPRINT(EM_ASSESS):   P_RESP = NUMRESP * 100 / NUMOBS;
MPRINT(EM_ASSESS):   P_NONRESP = NUMNONRESP * 100 / NUMOBS;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   BESTRESP = .;
MPRINT(EM_ASSESS):   P_RESP = .;
MPRINT(EM_ASSESS):   P_NONRESP = .;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   IF C_NUMOBS > 0 THEN DO;
MPRINT(EM_ASSESS):   BESTRESPC = C_BESTNUMEVENTS * 100 / C_NUMOBS;
MPRINT(EM_ASSESS):   BESTGAIN = MAX (0, ((C_BESTNUMEVENTS / C_NUMOBS ) / ( AVGNUMRESP /
(100/20)) - 1) * 100);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   BESTRESPC = .;
MPRINT(EM_ASSESS):   BESTGAIN = .;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   IF NUMNONRESP > 0 THEN ODDS = NUMRESP / NUMNONRESP;
MPRINT(EM_ASSESS):   ELSE ODDS = .;
MPRINT(EM_ASSESS):   C_NUM_RESP = SUM (C_NUM_RESP , NUMRESP );
MPRINT(EM_ASSESS):   C_NUM_NONRESP = SUM (C_NUM_NONRESP, NUMNONRESP );
MPRINT(EM_ASSESS):   IF C_NUM_NONRESP > 0 THEN C_ODDS = C_NUM_RESP / C_NUM_NONRESP;
MPRINT(EM_ASSESS):   ELSE C_ODDS = .;
MPRINT(EM_ASSESS):   IF C_NUMOBS > 0 THEN DO;
MPRINT(EM_ASSESS):   C_P_RESP = C_NUM_RESP * 100 / C_NUMOBS;
MPRINT(EM_ASSESS):   GAIN = ABS(100 * (((C_NUM_RESP / C_NUMOBS ) / (_NEVENTS / 100)) - 1));
MPRINT(EM_ASSESS):   BASEGAIN = 100 * (( (C_AVGNUM_RESP /((20-GROUP+1)* 100/20) ) / (
AVGNUMRESP / (100/20))) - 1);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   GAIN = .;
MPRINT(EM_ASSESS):   BASEGAIN = .;
MPRINT(EM_ASSESS):   C_P_RESP = .;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   IF BASEGAIN <= 0 THEN BASEGAIN = 0;
MPRINT(EM_ASSESS):   P_CAPT_RESP = NUMRESP * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   P_CAPT_NONRESP = NUMNONRESP * 100 / ( 100 - _NEVENTS);
MPRINT(EM_ASSESS):   C_P_CAPT_RESP = C_NUM_RESP * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   C_P_CAPT_NONRESP = C_NUM_NONRESP * 100 / ( 100 - _NEVENTS);
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * Area For Binned KS in Outranks area;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   _DIFFERENCE = C_P_CAPT_RESP - C_P_CAPT_NONRESP ;
MPRINT(EM_ASSESS):   IF _KS_BIN_ < _DIFFERENCE THEN DO;
MPRINT(EM_ASSESS):   _KS_BIN_ = _DIFFERENCE;
MPRINT(EM_ASSESS):   _KS_BIN_PROB = MINPROB + (MAXPROB - MINPROB) / 2 ;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   LIFT = P_RESP * .01 / RESPRATE ;
MPRINT(EM_ASSESS):   C_LIFT = C_P_RESP * .01 / RESPRATE;
MPRINT(EM_ASSESS):   IF NUMOBS > 0 THEN DO;
MPRINT(EM_ASSESS):   BASELIFT = AVGNUMRESP / ( RESPRATE * 100/20 );
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE BASELIFT = .;
MPRINT(EM_ASSESS):   IF C_NUMOBS > 0 THEN CBASELIFT = C_AVGNUM_RESP / (RESPRATE *
((20-GROUP+1)* 100/20));
MPRINT(EM_ASSESS):   ELSE CBASELIFT = .;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ........ WITHIN DO LOOP FOR OUTRANKS;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   BIN = 20 + 1 - GROUP;
MPRINT(EM_ASSESS):   PERCENTILE = BIN * (100 / 20);
MPRINT(EM_ASSESS):   B_C_P_RESP = PERCENTILE;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPRANK ;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ........................ END OF GAINSCHART = OUTRANKS AREA;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("MAXPROFITGROUP" , MAXPROFITGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("MAXPROFIT" , MAXPROFIT );
MPRINT(EM_ASSESS):   KS_ABSDIFF = 0 ;
MPRINT(EM_ASSESS):   MINPRECTPR = 9999;
MPRINT(EM_ASSESS):   Y0 = 1 - RESPRATE;
MPRINT(EM_ASSESS):   Y1 = RESPRATE;
MPRINT(EM_ASSESS):   MAXMUTUAL = 0;
MPRINT(EM_ASSESS):   DROP MAXMUTUAL KSPROB Y0 Y1 KS_ABSDIFF MINPRECTPR;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * .....................About to start Processing Outroc ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ........................... Finished Processing Outroc ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * .............. Outdist ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   BIN = 20 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS96 - EVENTS100 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS96 - NONEVENTS100);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB96 -
SCR_MNPROB100) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB96 - SCR_MINPROB100) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB96 - SCR_MAXPROB100) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 100;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 20;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 19 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS91 - EVENTS95 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS91 - NONEVENTS95);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB91 -
SCR_MNPROB95) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB91 - SCR_MINPROB95) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB91 - SCR_MAXPROB95) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 100;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 19;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 18 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS86 - EVENTS90 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS86 - NONEVENTS90);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB86 -
SCR_MNPROB90) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB86 - SCR_MINPROB90) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB86 - SCR_MAXPROB90) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 100;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 18;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 17 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS81 - EVENTS85 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS81 - NONEVENTS85);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB81 -
SCR_MNPROB85) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB81 - SCR_MINPROB85) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB81 - SCR_MAXPROB85) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 100;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 17;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 16 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS76 - EVENTS80 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS76 - NONEVENTS80);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB76 -
SCR_MNPROB80) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB76 - SCR_MINPROB80) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB76 - SCR_MAXPROB80) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 100;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 16;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 15 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS71 - EVENTS75 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS71 - NONEVENTS75);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB71 -
SCR_MNPROB75) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB71 - SCR_MINPROB75) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB71 - SCR_MAXPROB75) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 100;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 15;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 14 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS66 - EVENTS70 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS66 - NONEVENTS70);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB66 -
SCR_MNPROB70) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB66 - SCR_MINPROB70) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB66 - SCR_MAXPROB70) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 100;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 14;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 13 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS61 - EVENTS65 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS61 - NONEVENTS65);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB61 -
SCR_MNPROB65) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB61 - SCR_MINPROB65) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB61 - SCR_MAXPROB65) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 100;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 13;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 12 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS56 - EVENTS60 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS56 - NONEVENTS60);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB56 -
SCR_MNPROB60) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB56 - SCR_MINPROB60) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB56 - SCR_MAXPROB60) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 100;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 12;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 11 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS51 - EVENTS55 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS51 - NONEVENTS55);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB51 -
SCR_MNPROB55) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB51 - SCR_MINPROB55) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB51 - SCR_MAXPROB55) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 100;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 11;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 10 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS46 - EVENTS50 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS46 - NONEVENTS50);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB46 -
SCR_MNPROB50) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB46 - SCR_MINPROB50) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB46 - SCR_MAXPROB50) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 100;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 10;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 9 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS41 - EVENTS45 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS41 - NONEVENTS45);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB41 -
SCR_MNPROB45) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB41 - SCR_MINPROB45) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB41 - SCR_MAXPROB45) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 100;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 9;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 8 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS36 - EVENTS40 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS36 - NONEVENTS40);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB36 -
SCR_MNPROB40) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB36 - SCR_MINPROB40) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB36 - SCR_MAXPROB40) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 100;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 8;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 7 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS31 - EVENTS35 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS31 - NONEVENTS35);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB31 -
SCR_MNPROB35) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB31 - SCR_MINPROB35) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB31 - SCR_MAXPROB35) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 100;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 7;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 6 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS26 - EVENTS30 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS26 - NONEVENTS30);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB26 -
SCR_MNPROB30) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB26 - SCR_MINPROB30) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB26 - SCR_MAXPROB30) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 100;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 6;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 5 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS21 - EVENTS25 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS21 - NONEVENTS25);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB21 -
SCR_MNPROB25) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB21 - SCR_MINPROB25) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB21 - SCR_MAXPROB25) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 100;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 5;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 4 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS16 - EVENTS20 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS16 - NONEVENTS20);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB16 -
SCR_MNPROB20) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB16 - SCR_MINPROB20) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB16 - SCR_MAXPROB20) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 100;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 4;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 3 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS11 - EVENTS15 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS11 - NONEVENTS15);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB11 -
SCR_MNPROB15) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB11 - SCR_MINPROB15) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB11 - SCR_MAXPROB15) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 100;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 3;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 2 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS6 - EVENTS10 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS6 - NONEVENTS10);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB6 -
SCR_MNPROB10) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB6 - SCR_MINPROB10) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB6 - SCR_MAXPROB10) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 100;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 2;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 1 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS1 - EVENTS5 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS1 - NONEVENTS5);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB1 - SCR_MNPROB5)
/ NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB1 - SCR_MINPROB5) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB1 - SCR_MAXPROB5) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 100;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 1;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("KSPROB" , PUT (KSPROB, 5.3 ) );
MPRINT(EM_ASSESS):   CALL SYMPUTX ("_KS_BIN_PROB" , _KS_BIN_PROB );
MPRINT(EM_ASSESS):   CALL SYMPUTX ("_KS_BIN_" , _KS_BIN_ / 100 );
MPRINT(EM_ASSESS):   CALL SYMPUTX ("KSDIFF" , KS_ABSDIFF );
MPRINT(EM_ASSESS):   CALL SYMPUTX ("PRECTPR" , PRECTPR );
MPRINT(EM_ASSESS):   CALL SYMPUTX ("MAXMUTUALPROB" , MAXMUTUALPROB);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   LABEL __EVENT__ = "Event" DECILE = "Depth" BIN = "Bin" NUMOBS = "Number
of Observations" ;
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * RUN for large data set;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   PROC DATASETS NOLIST;
MPRINT(EM_ASSESS):   DELETE _AUXEVENTNAME;
MPRINT(EM_ASSESS):   QUIT;
 
MPRINT(EM_ASSESS):   OPTION NOCENTER LS = 95;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * Report Vars Area.;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ...........Start OF Outdist Modification;
MPRINT(EM_ASSESS):   *;
 
MPRINT(EM_ASSESS):   PROC DATASETS NOLIST LIB = WORK;
MPRINT(EM_ASSESS):   MODIFY _TEMPSCOREDIST;
MPRINT(EM_ASSESS):   RENAME MODELSCORE = SCORE UPPERPROB = UPPOSTERIOR SCR_CP_EVENTS =
CUMULATIVEPERCENTAGEOFEVENTS SCR_CP_NONEVENTS = CUMULATIVEPERCENTAGEOFNONEVENTS EVENTVALUE =
EVENT LOWERPROB = LOWPOSTERIOR NUMOBSINGROUP = N PERCOBSINGROUP = PERCENTAGE SCR_MINPROB =
_MINP_ SCR_MAXPROB = _MAXP_ SCR_MNPROB = _MEANP_ RANGE = P_LABEL C_PERCOBSINGROUP =
CUMULATIVEPERCENTAGE SCR_NUMEVENTS = NUMBEROFEVENTS SCR_NUMNONEVENTS = NUMBEROFNONEVENTS
SCR_P_EVENTS = PERCENTAGEOFEVENTS SCR_P_NONEVENTS = PERCENTAGEOFNONEVENTS ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * .................... OUTDIST MODIFICATION LABEL AREA;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   LABEL BIN = "Bin" N = "Number of Observations" P_LABEL = "Posterior
Probability Range" EVENT = "Event" LOWPOSTERIOR = "Lower Bound Posterior Probability"
PERCENTAGEOFEVENTS = "Percentage of Events" CUMULATIVEPERCENTAGEOFNONEVENTS = "Cumulative
Percentage of Nonevents" CUMULATIVEPERCENTAGE = "Cumulative Percentage" PERCENTAGEOFEVENTS =
"Percentage of Events" PERCENTAGEOFNONEVENTS = "Percentage of Nonevents"
CUMULATIVEPERCENTAGEOFEVENTS = "Cumulative Percentage of Events" UPPOSTERIOR = "Upper Bound
Posterior Probability" NUMBEROFEVENTS = "Number of Events" PERCENTAGE = "Percentage"
NUMBEROFNONEVENTS = "Number of Nonevents" _MEANP_ = "Mean Posterior Probability" _MINP_ = "Min
Posterior Probability" _MAXP_ = "Max Posterior Probability" SCORE = "Model Score" ;
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   QUIT;
MPRINT(EM_ASSESS):   DATA WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   SET WORK._TEMPSCOREDIST (WHERE = (_MEANP_ > .));
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ........... END OF OUTDIST MODIFICATION;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ...........Start of OUTRANKS Modification;
MPRINT(EM_ASSESS):   *;
 
MPRINT(EM_ASSESS):   PROC DATASETS NOLIST LIB = WORK;
MPRINT(EM_ASSESS):   MODIFY _TEMPRANK;
MPRINT(EM_ASSESS):   RENAME __EVENT__ = EVENT P_RESP = RESP C_P_CAPT_RESP = CAPC P_CAPT_RESP =
CAP NUMNONRESP = NUMNEVENT NUMRESP = NUMEVENT BASEEVENTS = BASENUMBEROFEVENTS BESTNUMEVENTS =
BESTNUMBEROFEVENTS MAXPROB = _MAXP_ MINPROB = _MINP_ CBASELIFT = BASELIFTC C_LIFT = LIFTC
MNPROB = _MEANP_ PERCENTILE = DECILE NUMOBS = N NUMEVENT = NUMBEROFEVENTS C_P_RESP = RESPC ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ................. OUTRANKS;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   LABEL _MAXP_ = "Max Posterior Probability" _MINP_ = "Min Posterior
Probability" _MEANP_ = "Mean Posterior Probability" BASECAP = "Baseline % Captured Response"
BASECAPC = "Baseline Cumulative % Captured Response" BASENUMBEROFEVENTS = "Baseline Number of
Events" BASEGAIN = "Baseline Gain" BASELIFT = "Baseline Lift" BASELIFTC = "Baseline Cumulative
Lift" BASERESP = "Baseline % Response" BASERESPC = "Baseline Cumulative % Response" BASELIFTC
= "Baseline Cumulative Lift" BESTCAP = "Best % Captured Response" BESTCAPC = "Best Cumulative
% Captured Response" BESTGAIN = "Best Gain" BESTRESP = "Best % Response" BESTRESPC = "Best
Cumulative % Response" BESTLIFT = "Best Lift" BESTLIFTC = "Best Cumulative Lift"
BESTNUMBEROFEVENTS = "Best Number of Events" CAP = "% Captured Response" CAPC = "Cumulative %
Captured Response" DECILE = "Depth" GAIN = "Gain" LIFT = "Lift" LIFTC = "Cumulative Lift"
NUMNEVENT = "Number of Nonevents" N = "Number of Observations" EVENT = "Event" RESPC =
"Cumulative % Response" NUMBEROFEVENTS = "Number of Events" RESP = "% Response" ;
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   QUIT;
MPRINT(EM_ASSESS):   DATA WORK._TEMPRANK;
MPRINT(EM_ASSESS):   SET WORK._TEMPRANK (WHERE = (_MEANP_ > .));
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   proc datasets lib=work nolist;
MPRINT(EM_ASSESS):   delete _ea_tmpdata;
MPRINT(EM_ASSESS):   run;
MPRINT(EM_ASSESS):   quit;
MPRINT(EM_ASSESS):  ;
MPRINT(EM_ASSESS):   OPTION ERRORS = 20;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):    data WORK._TEMPRANK;
MPRINT(EM_DIAGRAM):   length target $32 TARGETLABEL $200 dataRole $20;
MPRINT(EM_DIAGRAM):   label TARGETLABEL = "Target Label";
MPRINT(EM_DIAGRAM):   set WORK._TEMPRANK;
MPRINT(EM_DIAGRAM):   retain target "Risk";
MPRINT(EM_DIAGRAM):   retain dataRole "VALIDATE";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data EMWS1.Neural2_EMRANK;
MPRINT(EM_DIAGRAM):   length target $32;
MPRINT(EM_DIAGRAM):   length TARGETLABEL $200;
MPRINT(EM_DIAGRAM):   length dataRole $20;
MPRINT(EM_DIAGRAM):   length EVENT $32;
MPRINT(EM_DIAGRAM):   set EMWS1.Neural2_EMRANK WORK._TEMPRANK;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data WORK._TEMPSCOREDIST;
MPRINT(EM_DIAGRAM):   length target $32 TARGETLABEL $200 dataRole $20;
MPRINT(EM_DIAGRAM):   label TARGETLABEL = "Target Label";
MPRINT(EM_DIAGRAM):   set WORK._TEMPSCOREDIST;
MPRINT(EM_DIAGRAM):   retain target "Risk";
MPRINT(EM_DIAGRAM):   retain dataRole "VALIDATE";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data EMWS1.Neural2_EMSCOREDIST;
MPRINT(EM_DIAGRAM):   length target $32;
MPRINT(EM_DIAGRAM):   length TARGETLABEL $200;
MPRINT(EM_DIAGRAM):   length dataRole $20;
MPRINT(EM_DIAGRAM):   length EVENT $32;
MPRINT(EM_DIAGRAM):   length P_LABEL $9;
MPRINT(EM_DIAGRAM):   set EMWS1.Neural2_EMSCOREDIST WORK._TEMPSCOREDIST;
MPRINT(EM_DIAGRAM):   run;
105611     %let _cn = %sysfunc(getoption(CENTER));
105612     options nocenter;
MPRINT(EM_DIAGRAM):    options nocenter;
105613     proc print data=EMWS1.Neural2_EMREPORTFIT noobs label;
MPRINT(EM_DIAGRAM):   proc print data=EMWS1.Neural2_EMREPORTFIT noobs label;
105614     var STAT LABEL TRAIN
105615     VALIDATE
105616     ;
MPRINT(EM_DIAGRAM):   var STAT LABEL TRAIN VALIDATE ;
105617     by TARGET TARGETLABEL;
MPRINT(EM_DIAGRAM):   by TARGET TARGETLABEL;
105618     title9 ' ';
MPRINT(EM_DIAGRAM):   title9 ' ';
105619     title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_fitstat_title  , NOQUOTE))";
MPRINT(EM_DIAGRAM):   title10 "Fit Statistics";
MPRINT(EM_DIAGRAM):   run;
105620     run;
 
NOTE: There were 21 observations read from the data set EMWS1.NEURAL2_EMREPORTFIT.
NOTE: The PROCEDURE PRINT printed page 76.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
105621     title10;
MPRINT(EM_DIAGRAM):   title10;
105622     options &_cn;
MPRINT(EM_DIAGRAM):   options NOCENTER;
105623     proc sort data=EMWS1.Neural2_EMCLASSIFICATION nothreads;
MPRINT(EM_DIAGRAM):    proc sort data=EMWS1.Neural2_EMCLASSIFICATION nothreads;
105624     by DATAROLE TARGET TARGETLABEL;
MPRINT(EM_DIAGRAM):   by DATAROLE TARGET TARGETLABEL;
105625     run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 8 observations read from the data set EMWS1.NEURAL2_EMCLASSIFICATION.
NOTE: The data set EMWS1.NEURAL2_EMCLASSIFICATION has 8 observations and 12 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.06 seconds
      cpu time            0.00 seconds
 
 
105626     %let _cn = %sysfunc(getoption(CENTER));
105627     options nocenter;
MPRINT(EM_DIAGRAM):   options nocenter;
105628     proc print data=EMWS1.Neural2_EMCLASSIFICATION noobs label;
MPRINT(EM_DIAGRAM):   proc print data=EMWS1.Neural2_EMCLASSIFICATION noobs label;
105629     var from into pct_row pct_col count percent
105630     ;
MPRINT(EM_DIAGRAM):   var from into pct_row pct_col count percent ;
105631     by DATAROLE TARGET TARGETLABEL;
MPRINT(EM_DIAGRAM):   by DATAROLE TARGET TARGETLABEL;
105632     label FROM = "%sysfunc(sasmsg(sashelp.dmine, rpt_target_vlabel ,     NOQUOTE))";
MPRINT(EM_DIAGRAM):   label FROM = "Target";
105633     label INTO = "%sysfunc(sasmsg(sashelp.dmine, rpt_outcome_vlabel ,    NOQUOTE))";
MPRINT(EM_DIAGRAM):   label INTO = "Outcome";
105634     label PCT_ROW = "%sysfunc(sasmsg(sashelp.dmine, rpt_targetpct_vlabel ,  NOQUOTE))";
MPRINT(EM_DIAGRAM):   label PCT_ROW = "Target Percentage";
105635     label PCT_COL = "%sysfunc(sasmsg(sashelp.dmine, rpt_outcomepct_vlabel , NOQUOTE))";
MPRINT(EM_DIAGRAM):   label PCT_COL = "Outcome Percentage";
105636     label COUNT = "%sysfunc(sasmsg(sashelp.dmine, rpt_count_vlabel ,      NOQUOTE))";
MPRINT(EM_DIAGRAM):   label COUNT = "Frequency Count";
105637     label PERCENT = "%sysfunc(sasmsg(sashelp.dmine, rpt_totalpct_vlabel ,   NOQUOTE))";
MPRINT(EM_DIAGRAM):   label PERCENT = "Total Percentage";
105638     where _TYPE_='PREDICTION';
MPRINT(EM_DIAGRAM):   where _TYPE_='PREDICTION';
105639     title9 ' ';
MPRINT(EM_DIAGRAM):   title9 ' ';
105640     title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_classification_title    , NOQUOTE))";
MPRINT(EM_DIAGRAM):   title10 "Classification Table";
MPRINT(EM_DIAGRAM):   run;
105641     run;
 
NOTE: There were 8 observations read from the data set EMWS1.NEURAL2_EMCLASSIFICATION.
      WHERE _TYPE_='PREDICTION';
NOTE: The PROCEDURE PRINT printed page 77.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.02 seconds
      cpu time            0.01 seconds
 
 
105642     title9;
MPRINT(EM_DIAGRAM):   title9;
105643     title10;
MPRINT(EM_DIAGRAM):   title10;
105644     options &_cn;
MPRINT(EM_DIAGRAM):   options NOCENTER;
105645     %let _cn = %sysfunc(getoption(CENTER));
105646     options nocenter;
MPRINT(EM_DIAGRAM):    options nocenter;
105647     data EMWS1.Neural2_EMEVENTREPORT;
MPRINT(EM_DIAGRAM):   data EMWS1.Neural2_EMEVENTREPORT;
105648     length DATAROLE TARGET $32 TARGETLABEL $200 FALSENEVENT TRUENEVENT FALSEEVENT
105648   ! TRUEEVENT 8;
MPRINT(EM_DIAGRAM):   length DATAROLE TARGET $32 TARGETLABEL $200 FALSENEVENT TRUENEVENT
FALSEEVENT TRUEEVENT 8;
105649     label DATAROLE = "%sysfunc(sasmsg(sashelp.dmine, rpt_datarole_vlabel ,    NOQUOTE))"
105649   !  TARGET = "%sysfunc(sasmsg(sashelp.dmine, rpt_target_vlabel ,      NOQUOTE))"
105649   ! TARGETLABEL = "%sysfunc(sasmsg(sashelp.dmine, meta_targetlabel_vlabel, NOQUOTE))"
105649   ! FALSEEVENT
105650     = "%sysfunc(sasmsg(sashelp.dmine, rpt_falseevent_vlabel ,  NOQUOTE))" FALSENEVENT =
105650   ! "%sysfunc(sasmsg(sashelp.dmine, rpt_falsenevent_vlabel , NOQUOTE))" TRUEEVENT =
105650   ! "%sysfunc(sasmsg(sashelp.dmine, rpt_trueevent_vlabel ,   NOQUOTE))" TRUENEVENT =
105651        "%sysfunc(sasmsg(sashelp.dmine, rpt_truenevent_vlabel ,  NOQUOTE))";
MPRINT(EM_DIAGRAM):   label DATAROLE = "Data Role" TARGET = "Target" TARGETLABEL = "Target
Label" FALSEEVENT = "False Positive" FALSENEVENT = "False Negative" TRUEEVENT = "True
Positive" TRUENEVENT = "True Negative";
105652     FALSEEVENT=0;
MPRINT(EM_DIAGRAM):   FALSEEVENT=0;
105653     FALSENEVENT=0;
MPRINT(EM_DIAGRAM):   FALSENEVENT=0;
105654     TRUEEVENT=0;
MPRINT(EM_DIAGRAM):   TRUEEVENT=0;
105655     TRUENEVENT=0;
MPRINT(EM_DIAGRAM):   TRUENEVENT=0;
105656     set EMWS1.Neural2_EMEVENTREPORT;
MPRINT(EM_DIAGRAM):   set EMWS1.Neural2_EMEVENTREPORT;
105657     run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 2 observations read from the data set EMWS1.NEURAL2_EMEVENTREPORT.
NOTE: The data set EMWS1.NEURAL2_EMEVENTREPORT has 2 observations and 7 variables.
NOTE: DATA statement used (Total process time):
      real time           0.12 seconds
      cpu time            0.01 seconds
 
 
105658     proc print data=EMWS1.Neural2_EMEVENTREPORT noobs label;
MPRINT(EM_DIAGRAM):   proc print data=EMWS1.Neural2_EMEVENTREPORT noobs label;
105659     title9 ' ';
MPRINT(EM_DIAGRAM):   title9 ' ';
105660     title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_eventtable_title    , NOQUOTE))";
MPRINT(EM_DIAGRAM):   title10 "Event Classification Table";
MPRINT(EM_DIAGRAM):   by notsorted DATAROLE notsorted TARGET notsorted TARGETLABEL;
MPRINT(EM_DIAGRAM):   run;
105661     by notsorted DATAROLE notsorted TARGET notsorted TARGETLABEL;
105662     run;
 
NOTE: There were 2 observations read from the data set EMWS1.NEURAL2_EMEVENTREPORT.
NOTE: The PROCEDURE PRINT printed page 78.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
105663     title10;
MPRINT(EM_DIAGRAM):   title10;
105664     options &_cn;
MPRINT(EM_DIAGRAM):   options NOCENTER;
105665     proc datasets library=EMWS1 nolist;
MPRINT(EM_DIAGRAM):    proc datasets library=EMWS1 nolist;
105666     modify Neural2_EMRANK;
MPRINT(EM_DIAGRAM):   modify Neural2_EMRANK;
MPRINT(EM_DIAGRAM):   label target = "Target Variable";
105667     label target = "%sysfunc(sasmsg(sashelp.dmine, rpt_targetvar_vlabel ,   NOQUOTE))";
MPRINT(EM_DIAGRAM):   label datarole = "Data Role";
105668     label datarole = "%sysfunc(sasmsg(sashelp.dmine, rpt_datarole_vlabel ,    NOQUOTE))"
105668   ! ;
MPRINT(EM_DIAGRAM):   run;
105669     run;
 
NOTE: MODIFY was successful for EMWS1.NEURAL2_EMRANK.DATA.
105670     quit;
MPRINT(EM_DIAGRAM):   quit;
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           5.10 seconds
      cpu time            0.70 seconds
 
 
105671     %let _cn = %sysfunc(getoption(CENTER));
105672     options nocenter;
MPRINT(EM_DIAGRAM):    options nocenter;
105673     proc print data=EMWS1.Neural2_EMRANK label noobs;
MPRINT(EM_DIAGRAM):   proc print data=EMWS1.Neural2_EMRANK label noobs;
105674     var
105675     decile gain lift liftc resp respc N _meanP_;
MPRINT(EM_DIAGRAM):   var decile gain lift liftc resp respc N _meanP_;
105676     by
105677     notsorted DATAROLE
105678     notsorted TARGET
105679     notsorted TARGETLABEL
105680     ;
MPRINT(EM_DIAGRAM):   by notsorted DATAROLE notsorted TARGET notsorted TARGETLABEL ;
105681     title9 ' ';
MPRINT(EM_DIAGRAM):   title9 ' ';
105682     title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_scoreranking_title , NOQUOTE))";
MPRINT(EM_DIAGRAM):   title10 "Assessment Score Rankings";
MPRINT(EM_DIAGRAM):   run;
105683     run;
 
NOTE: There were 40 observations read from the data set EMWS1.NEURAL2_EMRANK.
NOTE: The PROCEDURE PRINT printed page 79.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.04 seconds
      cpu time            0.01 seconds
 
 
105684     title10;
MPRINT(EM_DIAGRAM):   title10;
105685     options &_cn;
MPRINT(EM_DIAGRAM):   options NOCENTER;
105686     proc datasets library=EMWS1 nolist;
MPRINT(EM_DIAGRAM):    proc datasets library=EMWS1 nolist;
105687     modify Neural2_EMSCOREDIST;
MPRINT(EM_DIAGRAM):   modify Neural2_EMSCOREDIST;
MPRINT(EM_DIAGRAM):   label target = "Target Variable";
105688     label target = "%sysfunc(sasmsg(sashelp.dmine, rpt_targetvar_vlabel ,
105688   ! NOQUOTE))";
MPRINT(EM_DIAGRAM):   label datarole = "Data Role";
105689     label datarole = "%sysfunc(sasmsg(sashelp.dmine, rpt_datarole_vlabel ,    NOQUOTE))"
105689   ! ;
MPRINT(EM_DIAGRAM):   run;
105690     run;
 
NOTE: MODIFY was successful for EMWS1.NEURAL2_EMSCOREDIST.DATA.
105691     quit;
MPRINT(EM_DIAGRAM):   quit;
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           6.89 seconds
      cpu time            0.76 seconds
 
 
MPRINT(EM_DIAGRAM):    options nocenter;
MPRINT(EM_DIAGRAM):   proc print data=EMWS1.Neural2_EMSCOREDIST label noobs;
MPRINT(EM_DIAGRAM):   var p_label numberOfEvents numberOfNonEvents _meanp_ percentage;
MPRINT(EM_DIAGRAM):   by notsorted DATAROLE notsorted TARGET notsorted TARGETLABEL ;
MPRINT(EM_DIAGRAM):   where TARGET in( "Risk" );
MPRINT(EM_DIAGRAM):   title9 ' ';
MPRINT(EM_DIAGRAM):   title10 "Assessment Score Distribution";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   title10;
MPRINT(EM_DIAGRAM):   options NOCENTER;
MPRINT(EM_DIAGRAM):   proc printto;
MPRINT(EM_DIAGRAM):   run;
