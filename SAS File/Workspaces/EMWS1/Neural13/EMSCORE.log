MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   call symput('NLDATE', strip(put(date(), NLDATE.)));
MPRINT(EM_DIAGRAM):   call symput('NLTIME', strip(put(datetime(), NLTIME.)));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   nldate= sasmsg("sashelp.dmine", "log_date_note", 'N', "April 16, 2021" );
MPRINT(EM_DIAGRAM):   nltime= sasmsg("sashelp.dmine", "log_time_note", 'N', "11:36:55 o'clock" 
);
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "* Score Log";
MPRINT(EM_DIAGRAM):   put nldate;
MPRINT(EM_DIAGRAM):   put nltime;
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   run;
*------------------------------------------------------------*
* Score Log
Date:                April 16, 2021
Time:                11:36:55 o'clock
*------------------------------------------------------------*
MPRINT(EM_DIAGRAM):    filename O0SZ76NX "H:\746\Decision Tree 
test\Workspaces\EMWS1\Neural13\EMSCORE.out" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):   proc printto print=O0SZ76NX new;
MPRINT(EM_DIAGRAM):   run;
222725     data work.outkey;
MPRINT(EM_DIAGRAM):    data work.outkey;
222726     set EMWS1.Neural13_OUTKEY;
MPRINT(EM_DIAGRAM):   set EMWS1.Neural13_OUTKEY;
222727     if upcase(ROLE) = 'HIDDEN';
MPRINT(EM_DIAGRAM):   if upcase(ROLE) = 'HIDDEN';
222728     run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 23 observations read from the data set EMWS1.NEURAL13_OUTKEY.
NOTE: The data set WORK.OUTKEY has 4 observations and 8 variables.
NOTE: DATA statement used (Total process time):
      real time           0.02 seconds
      cpu time            0.01 seconds
      

222729     filename emflow "H:\746\Decision Tree
222729   ! test\Workspaces\EMWS1\Neural13\EMFLOWSCORE.sas";
MPRINT(EM_DIAGRAM):    filename emflow "H:\746\Decision Tree 
test\Workspaces\EMWS1\Neural13\EMFLOWSCORE.sas";
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Neural13: Scoring DATA data;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
222730     *------------------------------------------------------------*;
222731     * Neural13: Scoring DATA data;
222732     *------------------------------------------------------------*;
222733     data EMWS1.Neural13_TRAIN
222734     / view=EMWS1.Neural13_TRAIN
222735     ;
MPRINT(EM_DIAGRAM):   data EMWS1.Neural13_TRAIN / view=EMWS1.Neural13_TRAIN ;
222736     set EMWS1.Reg3_TRAIN
222737     ;
MPRINT(EM_DIAGRAM):   set EMWS1.Reg3_TRAIN ;
222738     %inc emflow;
NOTE: %INCLUDE (level 1) file EMFLOW is file H:\746\Decision Tree 
      test\Workspaces\EMWS1\Neural13\EMFLOWSCORE.sas.
222739    +***********************************;
MPRINT(EM_DIAGRAM):   ***********************************;
222740    +*** Begin Scoring Code for Neural;
MPRINT(EM_DIAGRAM):   *** Begin Scoring Code for Neural;
222741    +***********************************;
MPRINT(EM_DIAGRAM):   ***********************************;
222742    +DROP _DM_BAD _EPS _NOCL_ _MAX_ _MAXP_ _SUM_ _NTRIALS;
MPRINT(EM_DIAGRAM):   DROP _DM_BAD _EPS _NOCL_ _MAX_ _MAXP_ _SUM_ _NTRIALS;
222743    + _DM_BAD = 0;
MPRINT(EM_DIAGRAM):   _DM_BAD = 0;
222744    + _NOCL_ = .;
MPRINT(EM_DIAGRAM):   _NOCL_ = .;
222745    + _MAX_ = .;
MPRINT(EM_DIAGRAM):   _MAX_ = .;
222746    + _MAXP_ = .;
MPRINT(EM_DIAGRAM):   _MAXP_ = .;
222747    + _SUM_ = .;
MPRINT(EM_DIAGRAM):   _SUM_ = .;
222748    + _NTRIALS = .;
MPRINT(EM_DIAGRAM):   _NTRIALS = .;
222749    + _EPS =                1E-10;
MPRINT(EM_DIAGRAM):   _EPS = 1E-10;
222750    +LENGTH _WARN_ $4
222751    +      F_Risk  $ 12
222752    +;
MPRINT(EM_DIAGRAM):   LENGTH _WARN_ $4 F_Risk $ 12 ;
222753    +      label S_LOG_REP_engine_size = 'Standard: LOG_REP_engine_size' ;
MPRINT(EM_DIAGRAM):   label S_LOG_REP_engine_size = 'Standard: LOG_REP_engine_size' ;
222754    +
222755    +      label S_REP_city_mpg = 'Standard: REP_city_mpg' ;
MPRINT(EM_DIAGRAM):   label S_REP_city_mpg = 'Standard: REP_city_mpg' ;
222756    +
222757    +      label S_REP_highway_mpg = 'Standard: REP_highway_mpg' ;
MPRINT(EM_DIAGRAM):   label S_REP_highway_mpg = 'Standard: REP_highway_mpg' ;
222758    +
222759    +      label S_REP_wheel_base = 'Standard: REP_wheel_base' ;
MPRINT(EM_DIAGRAM):   label S_REP_wheel_base = 'Standard: REP_wheel_base' ;
222760    +
222761    +      label S_REP_width = 'Standard: REP_width' ;
MPRINT(EM_DIAGRAM):   label S_REP_width = 'Standard: REP_width' ;
222762    +
222763    +      label IMP_num_of_doors2 = 'Dummy: IMP_num_of_doors=2' ;
MPRINT(EM_DIAGRAM):   label IMP_num_of_doors2 = 'Dummy: IMP_num_of_doors=2' ;
222764    +
222765    +      label REP_num_of_cylinders__4 = 'Dummy: REP_num_of_cylinders=<=4' ;
MPRINT(EM_DIAGRAM):   label REP_num_of_cylinders__4 = 'Dummy: REP_num_of_cylinders=<=4' ;
222766    +
222767    +      label H11 = 'Hidden: H1=1' ;
MPRINT(EM_DIAGRAM):   label H11 = 'Hidden: H1=1' ;
222768    +
222769    +      label H12 = 'Hidden: H1=2' ;
MPRINT(EM_DIAGRAM):   label H12 = 'Hidden: H1=2' ;
222770    +
222771    +      label H13 = 'Hidden: H1=3' ;
MPRINT(EM_DIAGRAM):   label H13 = 'Hidden: H1=3' ;
222772    +
222773    +      label H14 = 'Hidden: H1=4' ;
MPRINT(EM_DIAGRAM):   label H14 = 'Hidden: H1=4' ;
222774    +
222775    +      label I_Risk = 'Into: Risk' ;
MPRINT(EM_DIAGRAM):   label I_Risk = 'Into: Risk' ;
222776    +
222777    +      label F_Risk = 'From: Risk' ;
MPRINT(EM_DIAGRAM):   label F_Risk = 'From: Risk' ;
222778    +
222779    +      label U_Risk = 'Unnormalized Into: Risk' ;
MPRINT(EM_DIAGRAM):   label U_Risk = 'Unnormalized Into: Risk' ;
222780    +
222781    +      label P_Risk1 = 'Predicted: Risk=1' ;
MPRINT(EM_DIAGRAM):   label P_Risk1 = 'Predicted: Risk=1' ;
222782    +
222783    +      label R_Risk1 = 'Residual: Risk=1' ;
MPRINT(EM_DIAGRAM):   label R_Risk1 = 'Residual: Risk=1' ;
222784    +
222785    +      label P_Risk0 = 'Predicted: Risk=0' ;
MPRINT(EM_DIAGRAM):   label P_Risk0 = 'Predicted: Risk=0' ;
222786    +
222787    +      label R_Risk0 = 'Residual: Risk=0' ;
MPRINT(EM_DIAGRAM):   label R_Risk0 = 'Residual: Risk=0' ;
222788    +
222789    +      label  _WARN_ = "Warnings";
MPRINT(EM_DIAGRAM):   label _WARN_ = "Warnings";
222790    +
222791    +*** Generate dummy variables for IMP_num_of_doors ;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for IMP_num_of_doors ;
222792    +drop IMP_num_of_doors2 ;
MPRINT(EM_DIAGRAM):   drop IMP_num_of_doors2 ;
222793    +if missing( IMP_num_of_doors ) then do;
MPRINT(EM_DIAGRAM):   if missing( IMP_num_of_doors ) then do;
222794    +   IMP_num_of_doors2 = .;
MPRINT(EM_DIAGRAM):   IMP_num_of_doors2 = .;
222795    +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
222796    +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
222797    +end;
MPRINT(EM_DIAGRAM):   end;
222798    +else do;
MPRINT(EM_DIAGRAM):   else do;
222799    +   length _dm12 $ 12; drop _dm12 ;
MPRINT(EM_DIAGRAM):   length _dm12 $ 12;
MPRINT(EM_DIAGRAM):   drop _dm12 ;
222800    +   _dm12 = put( IMP_num_of_doors , BEST12. );
MPRINT(EM_DIAGRAM):   _dm12 = put( IMP_num_of_doors , BEST12. );
222801    +   %DMNORMIP( _dm12 )
MPRINT(DMNORMIP):   call dmnorm(_dm12,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
222802    +   if _dm12 = '4'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 = '4' then do;
222803    +      IMP_num_of_doors2 = -1;
MPRINT(EM_DIAGRAM):   IMP_num_of_doors2 = -1;
222804    +   end;
MPRINT(EM_DIAGRAM):   end;
222805    +   else if _dm12 = '2'  then do;
MPRINT(EM_DIAGRAM):   else if _dm12 = '2' then do;
222806    +      IMP_num_of_doors2 = 1;
MPRINT(EM_DIAGRAM):   IMP_num_of_doors2 = 1;
222807    +   end;
MPRINT(EM_DIAGRAM):   end;
222808    +   else do;
MPRINT(EM_DIAGRAM):   else do;
222809    +      IMP_num_of_doors2 = .;
MPRINT(EM_DIAGRAM):   IMP_num_of_doors2 = .;
222810    +      substr(_warn_,2,1) = 'U';
MPRINT(EM_DIAGRAM):   substr(_warn_,2,1) = 'U';
222811    +      _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
222812    +   end;
MPRINT(EM_DIAGRAM):   end;
222813    +end;
MPRINT(EM_DIAGRAM):   end;
222814    +
222815    +*** Generate dummy variables for REP_num_of_cylinders ;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for REP_num_of_cylinders ;
222816    +drop REP_num_of_cylinders__4 ;
MPRINT(EM_DIAGRAM):   drop REP_num_of_cylinders__4 ;
222817    +if missing( REP_num_of_cylinders ) then do;
MPRINT(EM_DIAGRAM):   if missing( REP_num_of_cylinders ) then do;
222818    +   REP_num_of_cylinders__4 = .;
MPRINT(EM_DIAGRAM):   REP_num_of_cylinders__4 = .;
222819    +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
222820    +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
222821    +end;
MPRINT(EM_DIAGRAM):   end;
222822    +else do;
MPRINT(EM_DIAGRAM):   else do;
222823    +   length _dm6 $ 6; drop _dm6 ;
MPRINT(EM_DIAGRAM):   length _dm6 $ 6;
MPRINT(EM_DIAGRAM):   drop _dm6 ;
222824    +   %DMNORMCP( REP_num_of_cylinders , _dm6 )
MPRINT(DMNORMCP):   _dm6=dmnorm(REP_num_of_cylinders,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMCP):  );
222825    +   if _dm6 = '<=4'  then do;
MPRINT(EM_DIAGRAM):   if _dm6 = '<=4' then do;
222826    +      REP_num_of_cylinders__4 = 1;
MPRINT(EM_DIAGRAM):   REP_num_of_cylinders__4 = 1;
222827    +   end;
MPRINT(EM_DIAGRAM):   end;
222828    +   else if _dm6 = '>4'  then do;
MPRINT(EM_DIAGRAM):   else if _dm6 = '>4' then do;
222829    +      REP_num_of_cylinders__4 = -1;
MPRINT(EM_DIAGRAM):   REP_num_of_cylinders__4 = -1;
222830    +   end;
MPRINT(EM_DIAGRAM):   end;
222831    +   else do;
MPRINT(EM_DIAGRAM):   else do;
222832    +      REP_num_of_cylinders__4 = .;
MPRINT(EM_DIAGRAM):   REP_num_of_cylinders__4 = .;
222833    +      substr(_warn_,2,1) = 'U';
MPRINT(EM_DIAGRAM):   substr(_warn_,2,1) = 'U';
222834    +      _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
222835    +   end;
MPRINT(EM_DIAGRAM):   end;
222836    +end;
MPRINT(EM_DIAGRAM):   end;
222837    +
222838    +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
222839    +*** Checking missing input Interval
222840    +*** *************************;
MPRINT(EM_DIAGRAM):   *** Checking missing input Interval *** *************************;
222841    +
222842    +IF NMISS(
222843    +   LOG_REP_engine_size ,
222844    +   REP_city_mpg ,
222845    +   REP_highway_mpg ,
222846    +   REP_wheel_base ,
222847    +   REP_width   ) THEN DO;
MPRINT(EM_DIAGRAM):   IF NMISS( LOG_REP_engine_size , REP_city_mpg , REP_highway_mpg , 
REP_wheel_base , REP_width ) THEN DO;
222848    +   SUBSTR(_WARN_, 1, 1) = 'M';
MPRINT(EM_DIAGRAM):   SUBSTR(_WARN_, 1, 1) = 'M';
222849    +
222850    +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
222851    +END;
MPRINT(EM_DIAGRAM):   END;
222852    +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
222853    +*** Writing the Node intvl ;
MPRINT(EM_DIAGRAM):   *** Writing the Node intvl ;
222854    +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
222855    +IF _DM_BAD EQ 0 THEN DO;
MPRINT(EM_DIAGRAM):   IF _DM_BAD EQ 0 THEN DO;
222856    +   S_LOG_REP_engine_size  =    -19.3053254119757 +     4.02929302984948 *
222857    +        LOG_REP_engine_size ;
MPRINT(EM_DIAGRAM):   S_LOG_REP_engine_size = -19.3053254119757 + 4.02929302984948 * 
LOG_REP_engine_size ;
222858    +   S_REP_city_mpg  =    -4.23279255832632 +     0.16535248553422 *
222859    +        REP_city_mpg ;
MPRINT(EM_DIAGRAM):   S_REP_city_mpg = -4.23279255832632 + 0.16535248553422 * REP_city_mpg ;
222860    +   S_REP_highway_mpg  =    -4.99166764925563 +     0.16020006928199 *
222861    +        REP_highway_mpg ;
MPRINT(EM_DIAGRAM):   S_REP_highway_mpg = -4.99166764925563 + 0.16020006928199 * 
REP_highway_mpg ;
222862    +   S_REP_wheel_base  =    -17.8009087180129 +     0.18059887504832 *
222863    +        REP_wheel_base ;
MPRINT(EM_DIAGRAM):   S_REP_wheel_base = -17.8009087180129 + 0.18059887504832 * REP_wheel_base 
;
222864    +   S_REP_width  =    -35.9167499004784 +     0.54673628301566 * REP_width ;
MPRINT(EM_DIAGRAM):   S_REP_width = -35.9167499004784 + 0.54673628301566 * REP_width ;
222865    +END;
MPRINT(EM_DIAGRAM):   END;
222866    +ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
222867    +   IF MISSING( LOG_REP_engine_size ) THEN S_LOG_REP_engine_size  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( LOG_REP_engine_size ) THEN S_LOG_REP_engine_size = . ;
222868    +   ELSE S_LOG_REP_engine_size
222869    +          =    -19.3053254119757 +     4.02929302984948 * LOG_REP_engine_size
222870    +         ;
MPRINT(EM_DIAGRAM):   ELSE S_LOG_REP_engine_size = -19.3053254119757 + 4.02929302984948 * 
LOG_REP_engine_size ;
222871    +   IF MISSING( REP_city_mpg ) THEN S_REP_city_mpg  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( REP_city_mpg ) THEN S_REP_city_mpg = . ;
222872    +   ELSE S_REP_city_mpg  =    -4.23279255832632 +     0.16535248553422 *
222873    +        REP_city_mpg ;
MPRINT(EM_DIAGRAM):   ELSE S_REP_city_mpg = -4.23279255832632 + 0.16535248553422 * 
REP_city_mpg ;
222874    +   IF MISSING( REP_highway_mpg ) THEN S_REP_highway_mpg  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( REP_highway_mpg ) THEN S_REP_highway_mpg = . ;
222875    +   ELSE S_REP_highway_mpg  =    -4.99166764925563 +     0.16020006928199 *
222876    +        REP_highway_mpg ;
MPRINT(EM_DIAGRAM):   ELSE S_REP_highway_mpg = -4.99166764925563 + 0.16020006928199 * 
REP_highway_mpg ;
222877    +   IF MISSING( REP_wheel_base ) THEN S_REP_wheel_base  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( REP_wheel_base ) THEN S_REP_wheel_base = . ;
222878    +   ELSE S_REP_wheel_base  =    -17.8009087180129 +     0.18059887504832 *
222879    +        REP_wheel_base ;
MPRINT(EM_DIAGRAM):   ELSE S_REP_wheel_base = -17.8009087180129 + 0.18059887504832 * 
REP_wheel_base ;
222880    +   IF MISSING( REP_width ) THEN S_REP_width  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( REP_width ) THEN S_REP_width = . ;
222881    +   ELSE S_REP_width  =    -35.9167499004784 +     0.54673628301566 * REP_width
222882    +         ;
MPRINT(EM_DIAGRAM):   ELSE S_REP_width = -35.9167499004784 + 0.54673628301566 * REP_width ;
222883    +END;
MPRINT(EM_DIAGRAM):   END;
222884    +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
222885    +*** Writing the Node nom ;
MPRINT(EM_DIAGRAM):   *** Writing the Node nom ;
222886    +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
222887    +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
222888    +*** Writing the Node H1 ;
MPRINT(EM_DIAGRAM):   *** Writing the Node H1 ;
222889    +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
222890    +IF _DM_BAD EQ 0 THEN DO;
MPRINT(EM_DIAGRAM):   IF _DM_BAD EQ 0 THEN DO;
222891    +   H11  =    -0.08328000130634 * S_LOG_REP_engine_size
222892    +          +    -0.27082220070338 * S_REP_city_mpg  +      0.2941277656539 *
222893    +        S_REP_highway_mpg  +    -0.68178399229392 * S_REP_wheel_base
222894    +          +    -0.11636373594759 * S_REP_width ;
MPRINT(EM_DIAGRAM):   H11 = -0.08328000130634 * S_LOG_REP_engine_size + -0.27082220070338 * 
S_REP_city_mpg + 0.2941277656539 * S_REP_highway_mpg + -0.68178399229392 * S_REP_wheel_base + 
-0.11636373594759 * S_REP_width ;
222895    +   H12  =     0.46016954229273 * S_LOG_REP_engine_size
222896    +          +     0.58894660671161 * S_REP_city_mpg  +    -0.43707500512519 *
222897    +        S_REP_highway_mpg  +      0.9147558643471 * S_REP_wheel_base
222898    +          +    -0.54289170000161 * S_REP_width ;
MPRINT(EM_DIAGRAM):   H12 = 0.46016954229273 * S_LOG_REP_engine_size + 0.58894660671161 * 
S_REP_city_mpg + -0.43707500512519 * S_REP_highway_mpg + 0.9147558643471 * S_REP_wheel_base + 
-0.54289170000161 * S_REP_width ;
222899    +   H13  =      -0.374774625922 * S_LOG_REP_engine_size
222900    +          +     0.64219236202961 * S_REP_city_mpg  +    -0.30604011038026 *
222901    +        S_REP_highway_mpg  +     0.95470269724804 * S_REP_wheel_base
222902    +          +    -0.31074571191766 * S_REP_width ;
MPRINT(EM_DIAGRAM):   H13 = -0.374774625922 * S_LOG_REP_engine_size + 0.64219236202961 * 
S_REP_city_mpg + -0.30604011038026 * S_REP_highway_mpg + 0.95470269724804 * S_REP_wheel_base + 
-0.31074571191766 * S_REP_width ;
222903    +   H14  =     0.62415466000555 * S_LOG_REP_engine_size
222904    +          +     0.40215309156823 * S_REP_city_mpg  +     0.19194164537104 *
222905    +        S_REP_highway_mpg  +     0.42927771554025 * S_REP_wheel_base
222906    +          +      0.0470558538138 * S_REP_width ;
MPRINT(EM_DIAGRAM):   H14 = 0.62415466000555 * S_LOG_REP_engine_size + 0.40215309156823 * 
S_REP_city_mpg + 0.19194164537104 * S_REP_highway_mpg + 0.42927771554025 * S_REP_wheel_base + 
0.0470558538138 * S_REP_width ;
222907    +   H11  = H11  +     0.86289606388419 * IMP_num_of_doors2
222908    +          +     0.48494981900966 * REP_num_of_cylinders__4 ;
MPRINT(EM_DIAGRAM):   H11 = H11 + 0.86289606388419 * IMP_num_of_doors2 + 0.48494981900966 * 
REP_num_of_cylinders__4 ;
222909    +   H12  = H12  +    -0.41348646599925 * IMP_num_of_doors2
222910    +          +     0.23776642837172 * REP_num_of_cylinders__4 ;
MPRINT(EM_DIAGRAM):   H12 = H12 + -0.41348646599925 * IMP_num_of_doors2 + 0.23776642837172 * 
REP_num_of_cylinders__4 ;
222911    +   H13  = H13  +     0.69067623472442 * IMP_num_of_doors2
222912    +          +     0.59780083335342 * REP_num_of_cylinders__4 ;
MPRINT(EM_DIAGRAM):   H13 = H13 + 0.69067623472442 * IMP_num_of_doors2 + 0.59780083335342 * 
REP_num_of_cylinders__4 ;
222913    +   H14  = H14  +    -0.59899262566557 * IMP_num_of_doors2
222914    +          +    -0.37887024673783 * REP_num_of_cylinders__4 ;
MPRINT(EM_DIAGRAM):   H14 = H14 + -0.59899262566557 * IMP_num_of_doors2 + -0.37887024673783 * 
REP_num_of_cylinders__4 ;
222915    +   H11  =    -1.20756316808349 + H11 ;
MPRINT(EM_DIAGRAM):   H11 = -1.20756316808349 + H11 ;
222916    +   H12  =    -0.86401445071558 + H12 ;
MPRINT(EM_DIAGRAM):   H12 = -0.86401445071558 + H12 ;
222917    +   H13  =     0.30924578948537 + H13 ;
MPRINT(EM_DIAGRAM):   H13 = 0.30924578948537 + H13 ;
222918    +   H14  =    -0.73462981674119 + H14 ;
MPRINT(EM_DIAGRAM):   H14 = -0.73462981674119 + H14 ;
222919    +   H11  = TANH(H11 );
MPRINT(EM_DIAGRAM):   H11 = TANH(H11 );
222920    +   H12  = TANH(H12 );
MPRINT(EM_DIAGRAM):   H12 = TANH(H12 );
222921    +   H13  = TANH(H13 );
MPRINT(EM_DIAGRAM):   H13 = TANH(H13 );
222922    +   H14  = TANH(H14 );
MPRINT(EM_DIAGRAM):   H14 = TANH(H14 );
222923    +END;
MPRINT(EM_DIAGRAM):   END;
222924    +ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
222925    +   H11  = .;
MPRINT(EM_DIAGRAM):   H11 = .;
222926    +   H12  = .;
MPRINT(EM_DIAGRAM):   H12 = .;
222927    +   H13  = .;
MPRINT(EM_DIAGRAM):   H13 = .;
222928    +   H14  = .;
MPRINT(EM_DIAGRAM):   H14 = .;
222929    +END;
MPRINT(EM_DIAGRAM):   END;
222930    +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
222931    +*** Writing the Node Risk ;
MPRINT(EM_DIAGRAM):   *** Writing the Node Risk ;
222932    +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
222933    +
222934    +*** Generate dummy variables for Risk ;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for Risk ;
222935    +drop Risk1 Risk0 ;
MPRINT(EM_DIAGRAM):   drop Risk1 Risk0 ;
222936    +label F_Risk = 'From: Risk' ;
MPRINT(EM_DIAGRAM):   label F_Risk = 'From: Risk' ;
222937    +length F_Risk $ 12;
MPRINT(EM_DIAGRAM):   length F_Risk $ 12;
222938    +F_Risk = put( Risk , BEST12. );
MPRINT(EM_DIAGRAM):   F_Risk = put( Risk , BEST12. );
222939    +%DMNORMIP( F_Risk )
MPRINT(DMNORMIP):   call dmnorm(F_Risk,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
222940    +if missing( Risk ) then do;
MPRINT(EM_DIAGRAM):   if missing( Risk ) then do;
222941    +   Risk1 = .;
MPRINT(EM_DIAGRAM):   Risk1 = .;
222942    +   Risk0 = .;
MPRINT(EM_DIAGRAM):   Risk0 = .;
222943    +end;
MPRINT(EM_DIAGRAM):   end;
222944    +else do;
MPRINT(EM_DIAGRAM):   else do;
222945    +   if F_Risk = '1'  then do;
MPRINT(EM_DIAGRAM):   if F_Risk = '1' then do;
222946    +      Risk1 = 1;
MPRINT(EM_DIAGRAM):   Risk1 = 1;
222947    +      Risk0 = 0;
MPRINT(EM_DIAGRAM):   Risk0 = 0;
222948    +   end;
MPRINT(EM_DIAGRAM):   end;
222949    +   else if F_Risk = '0'  then do;
MPRINT(EM_DIAGRAM):   else if F_Risk = '0' then do;
222950    +      Risk1 = 0;
MPRINT(EM_DIAGRAM):   Risk1 = 0;
222951    +      Risk0 = 1;
MPRINT(EM_DIAGRAM):   Risk0 = 1;
222952    +   end;
MPRINT(EM_DIAGRAM):   end;
222953    +   else do;
MPRINT(EM_DIAGRAM):   else do;
222954    +      Risk1 = .;
MPRINT(EM_DIAGRAM):   Risk1 = .;
222955    +      Risk0 = .;
MPRINT(EM_DIAGRAM):   Risk0 = .;
222956    +   end;
MPRINT(EM_DIAGRAM):   end;
222957    +end;
MPRINT(EM_DIAGRAM):   end;
222958    +IF _DM_BAD EQ 0 THEN DO;
MPRINT(EM_DIAGRAM):   IF _DM_BAD EQ 0 THEN DO;
222959    +   P_Risk1  =     1.65496314420086 * H11  +    -2.65462601121748 * H12
222960    +          +    -0.84301923521356 * H13  +    -0.77284863209262 * H14 ;
MPRINT(EM_DIAGRAM):   P_Risk1 = 1.65496314420086 * H11 + -2.65462601121748 * H12 + 
-0.84301923521356 * H13 + -0.77284863209262 * H14 ;
222961    +   P_Risk1  =    -0.22714803089239 + P_Risk1 ;
MPRINT(EM_DIAGRAM):   P_Risk1 = -0.22714803089239 + P_Risk1 ;
222962    +   P_Risk0  = 0;
MPRINT(EM_DIAGRAM):   P_Risk0 = 0;
222963    +   _MAX_ = MAX (P_Risk1 , P_Risk0 );
MPRINT(EM_DIAGRAM):   _MAX_ = MAX (P_Risk1 , P_Risk0 );
222964    +   _SUM_ = 0.;
MPRINT(EM_DIAGRAM):   _SUM_ = 0.;
222965    +   P_Risk1  = EXP(P_Risk1  - _MAX_);
MPRINT(EM_DIAGRAM):   P_Risk1 = EXP(P_Risk1 - _MAX_);
222966    +   _SUM_ = _SUM_ + P_Risk1 ;
MPRINT(EM_DIAGRAM):   _SUM_ = _SUM_ + P_Risk1 ;
222967    +   P_Risk0  = EXP(P_Risk0  - _MAX_);
MPRINT(EM_DIAGRAM):   P_Risk0 = EXP(P_Risk0 - _MAX_);
222968    +   _SUM_ = _SUM_ + P_Risk0 ;
MPRINT(EM_DIAGRAM):   _SUM_ = _SUM_ + P_Risk0 ;
222969    +   P_Risk1  = P_Risk1  / _SUM_;
MPRINT(EM_DIAGRAM):   P_Risk1 = P_Risk1 / _SUM_;
222970    +   P_Risk0  = P_Risk0  / _SUM_;
MPRINT(EM_DIAGRAM):   P_Risk0 = P_Risk0 / _SUM_;
222971    +END;
MPRINT(EM_DIAGRAM):   END;
222972    +ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
222973    +   P_Risk1  = .;
MPRINT(EM_DIAGRAM):   P_Risk1 = .;
222974    +   P_Risk0  = .;
MPRINT(EM_DIAGRAM):   P_Risk0 = .;
222975    +END;
MPRINT(EM_DIAGRAM):   END;
222976    +IF _DM_BAD EQ 1 THEN DO;
MPRINT(EM_DIAGRAM):   IF _DM_BAD EQ 1 THEN DO;
222977    +   P_Risk1  =                 0.54;
MPRINT(EM_DIAGRAM):   P_Risk1 = 0.54;
222978    +   P_Risk0  =                 0.46;
MPRINT(EM_DIAGRAM):   P_Risk0 = 0.46;
222979    +END;
MPRINT(EM_DIAGRAM):   END;
222980    +*** *****************************;
MPRINT(EM_DIAGRAM):   *** *****************************;
222981    +*** Writing the Residuals  of the Node Risk ;
MPRINT(EM_DIAGRAM):   *** Writing the Residuals of the Node Risk ;
222982    +*** ******************************;
MPRINT(EM_DIAGRAM):   *** ******************************;
222983    +IF MISSING( Risk1 ) THEN R_Risk1  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( Risk1 ) THEN R_Risk1 = . ;
222984    +ELSE R_Risk1  = Risk1  - P_Risk1 ;
MPRINT(EM_DIAGRAM):   ELSE R_Risk1 = Risk1 - P_Risk1 ;
222985    +IF MISSING( Risk0 ) THEN R_Risk0  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( Risk0 ) THEN R_Risk0 = . ;
222986    +ELSE R_Risk0  = Risk0  - P_Risk0 ;
MPRINT(EM_DIAGRAM):   ELSE R_Risk0 = Risk0 - P_Risk0 ;
222987    +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
222988    +*** Writing the I_Risk  AND U_Risk ;
MPRINT(EM_DIAGRAM):   *** Writing the I_Risk AND U_Risk ;
222989    +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
222990    +_MAXP_ = P_Risk1 ;
MPRINT(EM_DIAGRAM):   _MAXP_ = P_Risk1 ;
222991    +I_Risk  = "1           " ;
MPRINT(EM_DIAGRAM):   I_Risk = "1           " ;
222992    +U_Risk  =                    1;
MPRINT(EM_DIAGRAM):   U_Risk = 1;
222993    +IF( _MAXP_ LT P_Risk0  ) THEN DO;
MPRINT(EM_DIAGRAM):   IF( _MAXP_ LT P_Risk0 ) THEN DO;
222994    +   _MAXP_ = P_Risk0 ;
MPRINT(EM_DIAGRAM):   _MAXP_ = P_Risk0 ;
222995    +   I_Risk  = "0           " ;
MPRINT(EM_DIAGRAM):   I_Risk = "0           " ;
222996    +   U_Risk  =                    0;
MPRINT(EM_DIAGRAM):   U_Risk = 0;
222997    +END;
MPRINT(EM_DIAGRAM):   END;
222998    +********************************;
MPRINT(EM_DIAGRAM):   ********************************;
222999    +*** End Scoring Code for Neural;
MPRINT(EM_DIAGRAM):   *** End Scoring Code for Neural;
223000    +********************************;
MPRINT(EM_DIAGRAM):   ********************************;
223001    +drop
223002    +H11
223003    +H12
223004    +H13
223005    +H14
223006    +;
MPRINT(EM_DIAGRAM):   drop H11 H12 H13 H14 ;
223007    +drop S_:;
MPRINT(EM_DIAGRAM):   drop S_:;
NOTE: %INCLUDE (level 1) ending.
MPRINT(EM_DIAGRAM):   run;
223008     run;

NOTE: DATA STEP view saved on file EMWS1.NEURAL13_TRAIN.
NOTE: A stored DATA STEP view cannot run under a different operating system.
NOTE: View EMWS1.REG3_TRAIN.VIEW used (Total process time):
      real time           0.24 seconds
      cpu time            0.20 seconds
      
NOTE: DATA statement used (Total process time):
      real time           0.25 seconds
      cpu time            0.20 seconds
      

MPRINT(EM_DIAGRAM):   quit;
223009     quit;
223010     filename emflow;
MPRINT(EM_DIAGRAM):   filename emflow;
NOTE: Fileref EMFLOW has been deassigned.
223011     filename emflow "H:\746\Decision Tree
223011   ! test\Workspaces\EMWS1\Neural13\EMFLOWSCORE.sas";
MPRINT(EM_DIAGRAM):    filename emflow "H:\746\Decision Tree 
test\Workspaces\EMWS1\Neural13\EMFLOWSCORE.sas";
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Neural13: Scoring VALIDATE data;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
223012     *------------------------------------------------------------*;
223013     * Neural13: Scoring VALIDATE data;
223014     *------------------------------------------------------------*;
223015     data EMWS1.Neural13_VALIDATE
223016     / view=EMWS1.Neural13_VALIDATE
223017     ;
MPRINT(EM_DIAGRAM):   data EMWS1.Neural13_VALIDATE / view=EMWS1.Neural13_VALIDATE ;
223018     set EMWS1.Reg3_VALIDATE
223019     ;
MPRINT(EM_DIAGRAM):   set EMWS1.Reg3_VALIDATE ;
223020     %inc emflow;
NOTE: %INCLUDE (level 1) file EMFLOW is file H:\746\Decision Tree 
      test\Workspaces\EMWS1\Neural13\EMFLOWSCORE.sas.
223021    +***********************************;
MPRINT(EM_DIAGRAM):   ***********************************;
223022    +*** Begin Scoring Code for Neural;
MPRINT(EM_DIAGRAM):   *** Begin Scoring Code for Neural;
223023    +***********************************;
MPRINT(EM_DIAGRAM):   ***********************************;
223024    +DROP _DM_BAD _EPS _NOCL_ _MAX_ _MAXP_ _SUM_ _NTRIALS;
MPRINT(EM_DIAGRAM):   DROP _DM_BAD _EPS _NOCL_ _MAX_ _MAXP_ _SUM_ _NTRIALS;
223025    + _DM_BAD = 0;
MPRINT(EM_DIAGRAM):   _DM_BAD = 0;
223026    + _NOCL_ = .;
MPRINT(EM_DIAGRAM):   _NOCL_ = .;
223027    + _MAX_ = .;
MPRINT(EM_DIAGRAM):   _MAX_ = .;
223028    + _MAXP_ = .;
MPRINT(EM_DIAGRAM):   _MAXP_ = .;
223029    + _SUM_ = .;
MPRINT(EM_DIAGRAM):   _SUM_ = .;
223030    + _NTRIALS = .;
MPRINT(EM_DIAGRAM):   _NTRIALS = .;
223031    + _EPS =                1E-10;
MPRINT(EM_DIAGRAM):   _EPS = 1E-10;
223032    +LENGTH _WARN_ $4
223033    +      F_Risk  $ 12
223034    +;
MPRINT(EM_DIAGRAM):   LENGTH _WARN_ $4 F_Risk $ 12 ;
223035    +      label S_LOG_REP_engine_size = 'Standard: LOG_REP_engine_size' ;
MPRINT(EM_DIAGRAM):   label S_LOG_REP_engine_size = 'Standard: LOG_REP_engine_size' ;
223036    +
223037    +      label S_REP_city_mpg = 'Standard: REP_city_mpg' ;
MPRINT(EM_DIAGRAM):   label S_REP_city_mpg = 'Standard: REP_city_mpg' ;
223038    +
223039    +      label S_REP_highway_mpg = 'Standard: REP_highway_mpg' ;
MPRINT(EM_DIAGRAM):   label S_REP_highway_mpg = 'Standard: REP_highway_mpg' ;
223040    +
223041    +      label S_REP_wheel_base = 'Standard: REP_wheel_base' ;
MPRINT(EM_DIAGRAM):   label S_REP_wheel_base = 'Standard: REP_wheel_base' ;
223042    +
223043    +      label S_REP_width = 'Standard: REP_width' ;
MPRINT(EM_DIAGRAM):   label S_REP_width = 'Standard: REP_width' ;
223044    +
223045    +      label IMP_num_of_doors2 = 'Dummy: IMP_num_of_doors=2' ;
MPRINT(EM_DIAGRAM):   label IMP_num_of_doors2 = 'Dummy: IMP_num_of_doors=2' ;
223046    +
223047    +      label REP_num_of_cylinders__4 = 'Dummy: REP_num_of_cylinders=<=4' ;
MPRINT(EM_DIAGRAM):   label REP_num_of_cylinders__4 = 'Dummy: REP_num_of_cylinders=<=4' ;
223048    +
223049    +      label H11 = 'Hidden: H1=1' ;
MPRINT(EM_DIAGRAM):   label H11 = 'Hidden: H1=1' ;
223050    +
223051    +      label H12 = 'Hidden: H1=2' ;
MPRINT(EM_DIAGRAM):   label H12 = 'Hidden: H1=2' ;
223052    +
223053    +      label H13 = 'Hidden: H1=3' ;
MPRINT(EM_DIAGRAM):   label H13 = 'Hidden: H1=3' ;
223054    +
223055    +      label H14 = 'Hidden: H1=4' ;
MPRINT(EM_DIAGRAM):   label H14 = 'Hidden: H1=4' ;
223056    +
223057    +      label I_Risk = 'Into: Risk' ;
MPRINT(EM_DIAGRAM):   label I_Risk = 'Into: Risk' ;
223058    +
223059    +      label F_Risk = 'From: Risk' ;
MPRINT(EM_DIAGRAM):   label F_Risk = 'From: Risk' ;
223060    +
223061    +      label U_Risk = 'Unnormalized Into: Risk' ;
MPRINT(EM_DIAGRAM):   label U_Risk = 'Unnormalized Into: Risk' ;
223062    +
223063    +      label P_Risk1 = 'Predicted: Risk=1' ;
MPRINT(EM_DIAGRAM):   label P_Risk1 = 'Predicted: Risk=1' ;
223064    +
223065    +      label R_Risk1 = 'Residual: Risk=1' ;
MPRINT(EM_DIAGRAM):   label R_Risk1 = 'Residual: Risk=1' ;
223066    +
223067    +      label P_Risk0 = 'Predicted: Risk=0' ;
MPRINT(EM_DIAGRAM):   label P_Risk0 = 'Predicted: Risk=0' ;
223068    +
223069    +      label R_Risk0 = 'Residual: Risk=0' ;
MPRINT(EM_DIAGRAM):   label R_Risk0 = 'Residual: Risk=0' ;
223070    +
223071    +      label  _WARN_ = "Warnings";
MPRINT(EM_DIAGRAM):   label _WARN_ = "Warnings";
223072    +
223073    +*** Generate dummy variables for IMP_num_of_doors ;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for IMP_num_of_doors ;
223074    +drop IMP_num_of_doors2 ;
MPRINT(EM_DIAGRAM):   drop IMP_num_of_doors2 ;
223075    +if missing( IMP_num_of_doors ) then do;
MPRINT(EM_DIAGRAM):   if missing( IMP_num_of_doors ) then do;
223076    +   IMP_num_of_doors2 = .;
MPRINT(EM_DIAGRAM):   IMP_num_of_doors2 = .;
223077    +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
223078    +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
223079    +end;
MPRINT(EM_DIAGRAM):   end;
223080    +else do;
MPRINT(EM_DIAGRAM):   else do;
223081    +   length _dm12 $ 12; drop _dm12 ;
MPRINT(EM_DIAGRAM):   length _dm12 $ 12;
MPRINT(EM_DIAGRAM):   drop _dm12 ;
223082    +   _dm12 = put( IMP_num_of_doors , BEST12. );
MPRINT(EM_DIAGRAM):   _dm12 = put( IMP_num_of_doors , BEST12. );
223083    +   %DMNORMIP( _dm12 )
MPRINT(DMNORMIP):   call dmnorm(_dm12,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
223084    +   if _dm12 = '4'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 = '4' then do;
223085    +      IMP_num_of_doors2 = -1;
MPRINT(EM_DIAGRAM):   IMP_num_of_doors2 = -1;
223086    +   end;
MPRINT(EM_DIAGRAM):   end;
223087    +   else if _dm12 = '2'  then do;
MPRINT(EM_DIAGRAM):   else if _dm12 = '2' then do;
223088    +      IMP_num_of_doors2 = 1;
MPRINT(EM_DIAGRAM):   IMP_num_of_doors2 = 1;
223089    +   end;
MPRINT(EM_DIAGRAM):   end;
223090    +   else do;
MPRINT(EM_DIAGRAM):   else do;
223091    +      IMP_num_of_doors2 = .;
MPRINT(EM_DIAGRAM):   IMP_num_of_doors2 = .;
223092    +      substr(_warn_,2,1) = 'U';
MPRINT(EM_DIAGRAM):   substr(_warn_,2,1) = 'U';
223093    +      _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
223094    +   end;
MPRINT(EM_DIAGRAM):   end;
223095    +end;
MPRINT(EM_DIAGRAM):   end;
223096    +
223097    +*** Generate dummy variables for REP_num_of_cylinders ;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for REP_num_of_cylinders ;
223098    +drop REP_num_of_cylinders__4 ;
MPRINT(EM_DIAGRAM):   drop REP_num_of_cylinders__4 ;
223099    +if missing( REP_num_of_cylinders ) then do;
MPRINT(EM_DIAGRAM):   if missing( REP_num_of_cylinders ) then do;
223100    +   REP_num_of_cylinders__4 = .;
MPRINT(EM_DIAGRAM):   REP_num_of_cylinders__4 = .;
223101    +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
223102    +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
223103    +end;
MPRINT(EM_DIAGRAM):   end;
223104    +else do;
MPRINT(EM_DIAGRAM):   else do;
223105    +   length _dm6 $ 6; drop _dm6 ;
MPRINT(EM_DIAGRAM):   length _dm6 $ 6;
MPRINT(EM_DIAGRAM):   drop _dm6 ;
223106    +   %DMNORMCP( REP_num_of_cylinders , _dm6 )
MPRINT(DMNORMCP):   _dm6=dmnorm(REP_num_of_cylinders,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMCP):  );
223107    +   if _dm6 = '<=4'  then do;
MPRINT(EM_DIAGRAM):   if _dm6 = '<=4' then do;
223108    +      REP_num_of_cylinders__4 = 1;
MPRINT(EM_DIAGRAM):   REP_num_of_cylinders__4 = 1;
223109    +   end;
MPRINT(EM_DIAGRAM):   end;
223110    +   else if _dm6 = '>4'  then do;
MPRINT(EM_DIAGRAM):   else if _dm6 = '>4' then do;
223111    +      REP_num_of_cylinders__4 = -1;
MPRINT(EM_DIAGRAM):   REP_num_of_cylinders__4 = -1;
223112    +   end;
MPRINT(EM_DIAGRAM):   end;
223113    +   else do;
MPRINT(EM_DIAGRAM):   else do;
223114    +      REP_num_of_cylinders__4 = .;
MPRINT(EM_DIAGRAM):   REP_num_of_cylinders__4 = .;
223115    +      substr(_warn_,2,1) = 'U';
MPRINT(EM_DIAGRAM):   substr(_warn_,2,1) = 'U';
223116    +      _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
223117    +   end;
MPRINT(EM_DIAGRAM):   end;
223118    +end;
MPRINT(EM_DIAGRAM):   end;
223119    +
223120    +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
223121    +*** Checking missing input Interval
223122    +*** *************************;
MPRINT(EM_DIAGRAM):   *** Checking missing input Interval *** *************************;
223123    +
223124    +IF NMISS(
223125    +   LOG_REP_engine_size ,
223126    +   REP_city_mpg ,
223127    +   REP_highway_mpg ,
223128    +   REP_wheel_base ,
223129    +   REP_width   ) THEN DO;
MPRINT(EM_DIAGRAM):   IF NMISS( LOG_REP_engine_size , REP_city_mpg , REP_highway_mpg , 
REP_wheel_base , REP_width ) THEN DO;
223130    +   SUBSTR(_WARN_, 1, 1) = 'M';
MPRINT(EM_DIAGRAM):   SUBSTR(_WARN_, 1, 1) = 'M';
223131    +
223132    +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
223133    +END;
MPRINT(EM_DIAGRAM):   END;
223134    +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
223135    +*** Writing the Node intvl ;
MPRINT(EM_DIAGRAM):   *** Writing the Node intvl ;
223136    +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
223137    +IF _DM_BAD EQ 0 THEN DO;
MPRINT(EM_DIAGRAM):   IF _DM_BAD EQ 0 THEN DO;
223138    +   S_LOG_REP_engine_size  =    -19.3053254119757 +     4.02929302984948 *
223139    +        LOG_REP_engine_size ;
MPRINT(EM_DIAGRAM):   S_LOG_REP_engine_size = -19.3053254119757 + 4.02929302984948 * 
LOG_REP_engine_size ;
223140    +   S_REP_city_mpg  =    -4.23279255832632 +     0.16535248553422 *
223141    +        REP_city_mpg ;
MPRINT(EM_DIAGRAM):   S_REP_city_mpg = -4.23279255832632 + 0.16535248553422 * REP_city_mpg ;
223142    +   S_REP_highway_mpg  =    -4.99166764925563 +     0.16020006928199 *
223143    +        REP_highway_mpg ;
MPRINT(EM_DIAGRAM):   S_REP_highway_mpg = -4.99166764925563 + 0.16020006928199 * 
REP_highway_mpg ;
223144    +   S_REP_wheel_base  =    -17.8009087180129 +     0.18059887504832 *
223145    +        REP_wheel_base ;
MPRINT(EM_DIAGRAM):   S_REP_wheel_base = -17.8009087180129 + 0.18059887504832 * REP_wheel_base 
;
223146    +   S_REP_width  =    -35.9167499004784 +     0.54673628301566 * REP_width ;
MPRINT(EM_DIAGRAM):   S_REP_width = -35.9167499004784 + 0.54673628301566 * REP_width ;
223147    +END;
MPRINT(EM_DIAGRAM):   END;
223148    +ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
223149    +   IF MISSING( LOG_REP_engine_size ) THEN S_LOG_REP_engine_size  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( LOG_REP_engine_size ) THEN S_LOG_REP_engine_size = . ;
223150    +   ELSE S_LOG_REP_engine_size
223151    +          =    -19.3053254119757 +     4.02929302984948 * LOG_REP_engine_size
223152    +         ;
MPRINT(EM_DIAGRAM):   ELSE S_LOG_REP_engine_size = -19.3053254119757 + 4.02929302984948 * 
LOG_REP_engine_size ;
223153    +   IF MISSING( REP_city_mpg ) THEN S_REP_city_mpg  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( REP_city_mpg ) THEN S_REP_city_mpg = . ;
223154    +   ELSE S_REP_city_mpg  =    -4.23279255832632 +     0.16535248553422 *
223155    +        REP_city_mpg ;
MPRINT(EM_DIAGRAM):   ELSE S_REP_city_mpg = -4.23279255832632 + 0.16535248553422 * 
REP_city_mpg ;
223156    +   IF MISSING( REP_highway_mpg ) THEN S_REP_highway_mpg  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( REP_highway_mpg ) THEN S_REP_highway_mpg = . ;
223157    +   ELSE S_REP_highway_mpg  =    -4.99166764925563 +     0.16020006928199 *
223158    +        REP_highway_mpg ;
MPRINT(EM_DIAGRAM):   ELSE S_REP_highway_mpg = -4.99166764925563 + 0.16020006928199 * 
REP_highway_mpg ;
223159    +   IF MISSING( REP_wheel_base ) THEN S_REP_wheel_base  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( REP_wheel_base ) THEN S_REP_wheel_base = . ;
223160    +   ELSE S_REP_wheel_base  =    -17.8009087180129 +     0.18059887504832 *
223161    +        REP_wheel_base ;
MPRINT(EM_DIAGRAM):   ELSE S_REP_wheel_base = -17.8009087180129 + 0.18059887504832 * 
REP_wheel_base ;
223162    +   IF MISSING( REP_width ) THEN S_REP_width  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( REP_width ) THEN S_REP_width = . ;
223163    +   ELSE S_REP_width  =    -35.9167499004784 +     0.54673628301566 * REP_width
223164    +         ;
MPRINT(EM_DIAGRAM):   ELSE S_REP_width = -35.9167499004784 + 0.54673628301566 * REP_width ;
223165    +END;
MPRINT(EM_DIAGRAM):   END;
223166    +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
223167    +*** Writing the Node nom ;
MPRINT(EM_DIAGRAM):   *** Writing the Node nom ;
223168    +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
223169    +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
223170    +*** Writing the Node H1 ;
MPRINT(EM_DIAGRAM):   *** Writing the Node H1 ;
223171    +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
223172    +IF _DM_BAD EQ 0 THEN DO;
MPRINT(EM_DIAGRAM):   IF _DM_BAD EQ 0 THEN DO;
223173    +   H11  =    -0.08328000130634 * S_LOG_REP_engine_size
223174    +          +    -0.27082220070338 * S_REP_city_mpg  +      0.2941277656539 *
223175    +        S_REP_highway_mpg  +    -0.68178399229392 * S_REP_wheel_base
223176    +          +    -0.11636373594759 * S_REP_width ;
MPRINT(EM_DIAGRAM):   H11 = -0.08328000130634 * S_LOG_REP_engine_size + -0.27082220070338 * 
S_REP_city_mpg + 0.2941277656539 * S_REP_highway_mpg + -0.68178399229392 * S_REP_wheel_base + 
-0.11636373594759 * S_REP_width ;
223177    +   H12  =     0.46016954229273 * S_LOG_REP_engine_size
223178    +          +     0.58894660671161 * S_REP_city_mpg  +    -0.43707500512519 *
223179    +        S_REP_highway_mpg  +      0.9147558643471 * S_REP_wheel_base
223180    +          +    -0.54289170000161 * S_REP_width ;
MPRINT(EM_DIAGRAM):   H12 = 0.46016954229273 * S_LOG_REP_engine_size + 0.58894660671161 * 
S_REP_city_mpg + -0.43707500512519 * S_REP_highway_mpg + 0.9147558643471 * S_REP_wheel_base + 
-0.54289170000161 * S_REP_width ;
223181    +   H13  =      -0.374774625922 * S_LOG_REP_engine_size
223182    +          +     0.64219236202961 * S_REP_city_mpg  +    -0.30604011038026 *
223183    +        S_REP_highway_mpg  +     0.95470269724804 * S_REP_wheel_base
223184    +          +    -0.31074571191766 * S_REP_width ;
MPRINT(EM_DIAGRAM):   H13 = -0.374774625922 * S_LOG_REP_engine_size + 0.64219236202961 * 
S_REP_city_mpg + -0.30604011038026 * S_REP_highway_mpg + 0.95470269724804 * S_REP_wheel_base + 
-0.31074571191766 * S_REP_width ;
223185    +   H14  =     0.62415466000555 * S_LOG_REP_engine_size
223186    +          +     0.40215309156823 * S_REP_city_mpg  +     0.19194164537104 *
223187    +        S_REP_highway_mpg  +     0.42927771554025 * S_REP_wheel_base
223188    +          +      0.0470558538138 * S_REP_width ;
MPRINT(EM_DIAGRAM):   H14 = 0.62415466000555 * S_LOG_REP_engine_size + 0.40215309156823 * 
S_REP_city_mpg + 0.19194164537104 * S_REP_highway_mpg + 0.42927771554025 * S_REP_wheel_base + 
0.0470558538138 * S_REP_width ;
223189    +   H11  = H11  +     0.86289606388419 * IMP_num_of_doors2
223190    +          +     0.48494981900966 * REP_num_of_cylinders__4 ;
MPRINT(EM_DIAGRAM):   H11 = H11 + 0.86289606388419 * IMP_num_of_doors2 + 0.48494981900966 * 
REP_num_of_cylinders__4 ;
223191    +   H12  = H12  +    -0.41348646599925 * IMP_num_of_doors2
223192    +          +     0.23776642837172 * REP_num_of_cylinders__4 ;
MPRINT(EM_DIAGRAM):   H12 = H12 + -0.41348646599925 * IMP_num_of_doors2 + 0.23776642837172 * 
REP_num_of_cylinders__4 ;
223193    +   H13  = H13  +     0.69067623472442 * IMP_num_of_doors2
223194    +          +     0.59780083335342 * REP_num_of_cylinders__4 ;
MPRINT(EM_DIAGRAM):   H13 = H13 + 0.69067623472442 * IMP_num_of_doors2 + 0.59780083335342 * 
REP_num_of_cylinders__4 ;
223195    +   H14  = H14  +    -0.59899262566557 * IMP_num_of_doors2
223196    +          +    -0.37887024673783 * REP_num_of_cylinders__4 ;
MPRINT(EM_DIAGRAM):   H14 = H14 + -0.59899262566557 * IMP_num_of_doors2 + -0.37887024673783 * 
REP_num_of_cylinders__4 ;
223197    +   H11  =    -1.20756316808349 + H11 ;
MPRINT(EM_DIAGRAM):   H11 = -1.20756316808349 + H11 ;
223198    +   H12  =    -0.86401445071558 + H12 ;
MPRINT(EM_DIAGRAM):   H12 = -0.86401445071558 + H12 ;
223199    +   H13  =     0.30924578948537 + H13 ;
MPRINT(EM_DIAGRAM):   H13 = 0.30924578948537 + H13 ;
223200    +   H14  =    -0.73462981674119 + H14 ;
MPRINT(EM_DIAGRAM):   H14 = -0.73462981674119 + H14 ;
223201    +   H11  = TANH(H11 );
MPRINT(EM_DIAGRAM):   H11 = TANH(H11 );
223202    +   H12  = TANH(H12 );
MPRINT(EM_DIAGRAM):   H12 = TANH(H12 );
223203    +   H13  = TANH(H13 );
MPRINT(EM_DIAGRAM):   H13 = TANH(H13 );
223204    +   H14  = TANH(H14 );
MPRINT(EM_DIAGRAM):   H14 = TANH(H14 );
223205    +END;
MPRINT(EM_DIAGRAM):   END;
223206    +ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
223207    +   H11  = .;
MPRINT(EM_DIAGRAM):   H11 = .;
223208    +   H12  = .;
MPRINT(EM_DIAGRAM):   H12 = .;
223209    +   H13  = .;
MPRINT(EM_DIAGRAM):   H13 = .;
223210    +   H14  = .;
MPRINT(EM_DIAGRAM):   H14 = .;
223211    +END;
MPRINT(EM_DIAGRAM):   END;
223212    +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
223213    +*** Writing the Node Risk ;
MPRINT(EM_DIAGRAM):   *** Writing the Node Risk ;
223214    +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
223215    +
223216    +*** Generate dummy variables for Risk ;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for Risk ;
223217    +drop Risk1 Risk0 ;
MPRINT(EM_DIAGRAM):   drop Risk1 Risk0 ;
223218    +label F_Risk = 'From: Risk' ;
MPRINT(EM_DIAGRAM):   label F_Risk = 'From: Risk' ;
223219    +length F_Risk $ 12;
MPRINT(EM_DIAGRAM):   length F_Risk $ 12;
223220    +F_Risk = put( Risk , BEST12. );
MPRINT(EM_DIAGRAM):   F_Risk = put( Risk , BEST12. );
223221    +%DMNORMIP( F_Risk )
MPRINT(DMNORMIP):   call dmnorm(F_Risk,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
223222    +if missing( Risk ) then do;
MPRINT(EM_DIAGRAM):   if missing( Risk ) then do;
223223    +   Risk1 = .;
MPRINT(EM_DIAGRAM):   Risk1 = .;
223224    +   Risk0 = .;
MPRINT(EM_DIAGRAM):   Risk0 = .;
223225    +end;
MPRINT(EM_DIAGRAM):   end;
223226    +else do;
MPRINT(EM_DIAGRAM):   else do;
223227    +   if F_Risk = '1'  then do;
MPRINT(EM_DIAGRAM):   if F_Risk = '1' then do;
223228    +      Risk1 = 1;
MPRINT(EM_DIAGRAM):   Risk1 = 1;
223229    +      Risk0 = 0;
MPRINT(EM_DIAGRAM):   Risk0 = 0;
223230    +   end;
MPRINT(EM_DIAGRAM):   end;
223231    +   else if F_Risk = '0'  then do;
MPRINT(EM_DIAGRAM):   else if F_Risk = '0' then do;
223232    +      Risk1 = 0;
MPRINT(EM_DIAGRAM):   Risk1 = 0;
223233    +      Risk0 = 1;
MPRINT(EM_DIAGRAM):   Risk0 = 1;
223234    +   end;
MPRINT(EM_DIAGRAM):   end;
223235    +   else do;
MPRINT(EM_DIAGRAM):   else do;
223236    +      Risk1 = .;
MPRINT(EM_DIAGRAM):   Risk1 = .;
223237    +      Risk0 = .;
MPRINT(EM_DIAGRAM):   Risk0 = .;
223238    +   end;
MPRINT(EM_DIAGRAM):   end;
223239    +end;
MPRINT(EM_DIAGRAM):   end;
223240    +IF _DM_BAD EQ 0 THEN DO;
MPRINT(EM_DIAGRAM):   IF _DM_BAD EQ 0 THEN DO;
223241    +   P_Risk1  =     1.65496314420086 * H11  +    -2.65462601121748 * H12
223242    +          +    -0.84301923521356 * H13  +    -0.77284863209262 * H14 ;
MPRINT(EM_DIAGRAM):   P_Risk1 = 1.65496314420086 * H11 + -2.65462601121748 * H12 + 
-0.84301923521356 * H13 + -0.77284863209262 * H14 ;
223243    +   P_Risk1  =    -0.22714803089239 + P_Risk1 ;
MPRINT(EM_DIAGRAM):   P_Risk1 = -0.22714803089239 + P_Risk1 ;
223244    +   P_Risk0  = 0;
MPRINT(EM_DIAGRAM):   P_Risk0 = 0;
223245    +   _MAX_ = MAX (P_Risk1 , P_Risk0 );
MPRINT(EM_DIAGRAM):   _MAX_ = MAX (P_Risk1 , P_Risk0 );
223246    +   _SUM_ = 0.;
MPRINT(EM_DIAGRAM):   _SUM_ = 0.;
223247    +   P_Risk1  = EXP(P_Risk1  - _MAX_);
MPRINT(EM_DIAGRAM):   P_Risk1 = EXP(P_Risk1 - _MAX_);
223248    +   _SUM_ = _SUM_ + P_Risk1 ;
MPRINT(EM_DIAGRAM):   _SUM_ = _SUM_ + P_Risk1 ;
223249    +   P_Risk0  = EXP(P_Risk0  - _MAX_);
MPRINT(EM_DIAGRAM):   P_Risk0 = EXP(P_Risk0 - _MAX_);
223250    +   _SUM_ = _SUM_ + P_Risk0 ;
MPRINT(EM_DIAGRAM):   _SUM_ = _SUM_ + P_Risk0 ;
223251    +   P_Risk1  = P_Risk1  / _SUM_;
MPRINT(EM_DIAGRAM):   P_Risk1 = P_Risk1 / _SUM_;
223252    +   P_Risk0  = P_Risk0  / _SUM_;
MPRINT(EM_DIAGRAM):   P_Risk0 = P_Risk0 / _SUM_;
223253    +END;
MPRINT(EM_DIAGRAM):   END;
223254    +ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
223255    +   P_Risk1  = .;
MPRINT(EM_DIAGRAM):   P_Risk1 = .;
223256    +   P_Risk0  = .;
MPRINT(EM_DIAGRAM):   P_Risk0 = .;
223257    +END;
MPRINT(EM_DIAGRAM):   END;
223258    +IF _DM_BAD EQ 1 THEN DO;
MPRINT(EM_DIAGRAM):   IF _DM_BAD EQ 1 THEN DO;
223259    +   P_Risk1  =                 0.54;
MPRINT(EM_DIAGRAM):   P_Risk1 = 0.54;
223260    +   P_Risk0  =                 0.46;
MPRINT(EM_DIAGRAM):   P_Risk0 = 0.46;
223261    +END;
MPRINT(EM_DIAGRAM):   END;
223262    +*** *****************************;
MPRINT(EM_DIAGRAM):   *** *****************************;
223263    +*** Writing the Residuals  of the Node Risk ;
MPRINT(EM_DIAGRAM):   *** Writing the Residuals of the Node Risk ;
223264    +*** ******************************;
MPRINT(EM_DIAGRAM):   *** ******************************;
223265    +IF MISSING( Risk1 ) THEN R_Risk1  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( Risk1 ) THEN R_Risk1 = . ;
223266    +ELSE R_Risk1  = Risk1  - P_Risk1 ;
MPRINT(EM_DIAGRAM):   ELSE R_Risk1 = Risk1 - P_Risk1 ;
223267    +IF MISSING( Risk0 ) THEN R_Risk0  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( Risk0 ) THEN R_Risk0 = . ;
223268    +ELSE R_Risk0  = Risk0  - P_Risk0 ;
MPRINT(EM_DIAGRAM):   ELSE R_Risk0 = Risk0 - P_Risk0 ;
223269    +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
223270    +*** Writing the I_Risk  AND U_Risk ;
MPRINT(EM_DIAGRAM):   *** Writing the I_Risk AND U_Risk ;
223271    +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
223272    +_MAXP_ = P_Risk1 ;
MPRINT(EM_DIAGRAM):   _MAXP_ = P_Risk1 ;
223273    +I_Risk  = "1           " ;
MPRINT(EM_DIAGRAM):   I_Risk = "1           " ;
223274    +U_Risk  =                    1;
MPRINT(EM_DIAGRAM):   U_Risk = 1;
223275    +IF( _MAXP_ LT P_Risk0  ) THEN DO;
MPRINT(EM_DIAGRAM):   IF( _MAXP_ LT P_Risk0 ) THEN DO;
223276    +   _MAXP_ = P_Risk0 ;
MPRINT(EM_DIAGRAM):   _MAXP_ = P_Risk0 ;
223277    +   I_Risk  = "0           " ;
MPRINT(EM_DIAGRAM):   I_Risk = "0           " ;
223278    +   U_Risk  =                    0;
MPRINT(EM_DIAGRAM):   U_Risk = 0;
223279    +END;
MPRINT(EM_DIAGRAM):   END;
223280    +********************************;
MPRINT(EM_DIAGRAM):   ********************************;
223281    +*** End Scoring Code for Neural;
MPRINT(EM_DIAGRAM):   *** End Scoring Code for Neural;
223282    +********************************;
MPRINT(EM_DIAGRAM):   ********************************;
223283    +drop
223284    +H11
223285    +H12
223286    +H13
223287    +H14
223288    +;
MPRINT(EM_DIAGRAM):   drop H11 H12 H13 H14 ;
223289    +drop S_:;
MPRINT(EM_DIAGRAM):   drop S_:;
NOTE: %INCLUDE (level 1) ending.
MPRINT(EM_DIAGRAM):   run;
223290     run;

NOTE: DATA STEP view saved on file EMWS1.NEURAL13_VALIDATE.
NOTE: A stored DATA STEP view cannot run under a different operating system.
NOTE: View EMWS1.REG3_VALIDATE.VIEW used (Total process time):
      real time           4.29 seconds
      cpu time            0.20 seconds
      
NOTE: DATA statement used (Total process time):
      real time           4.30 seconds
      cpu time            0.20 seconds
      

MPRINT(EM_DIAGRAM):   quit;
223291     quit;
223292     filename emflow;
MPRINT(EM_DIAGRAM):   filename emflow;
NOTE: Fileref EMFLOW has been deassigned.
223293     *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
223294     * Neural13: Computing metadata for TRAIN data;
MPRINT(EM_DIAGRAM):   * Neural13: Computing metadata for TRAIN data;
223295     *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;

NOTE: View EMWS1.NEURAL13_TRAIN.VIEW used (Total process time):
      real time           0.26 seconds
      cpu time            0.28 seconds
      
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * &nodeid: Computing Metadata for TRAIN data;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   filename _delta "H:\746\Decision Tree 
test\Workspaces\EMWS1\Neural13\CDELTA_TRAIN.sas";
MPRINT(EMADVISECOLUMNS):   proc display c=sashelp.emmeta.advisecolumns.scl;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    options validvarname=any;
MPRINT(EMADVISECOLUMNS):   proc contents data=EMWS1.Neural13_TRAIN out=_tempAdvisor noprint;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):   options validvarname=V7;
MPRINT(EMADVISECOLUMNS):    data _null_;
MPRINT(EMADVISECOLUMNS):   dsid = open('EMWS1.Neural13_TRAIN');
MPRINT(EMADVISECOLUMNS):   call symput('_dsidTable', strip(put(dsid, best.)));
MPRINT(EMADVISECOLUMNS):   if dsid then do;
MPRINT(EMADVISECOLUMNS):   call symput('_engineTable', attrc(dsid, 'ENGINE'));
MPRINT(EMADVISECOLUMNS):   dsid = close(dsid);
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    proc contents data=EMWS1.Neural13_TRAIN out=WORK.M1HBBKM1 noprint;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M1HBBKM1;
MPRINT(EMADVISECOLUMNS):   length NAME $ 64 TYPE $ 1 LABEL $ 200 FORMAT $ 36 INFORMAT $36 
INDEX $ 1 INDEXTYPE $ 9;
MPRINT(EMADVISECOLUMNS):   label NAME =;
MPRINT(EMADVISECOLUMNS):   set WORK.M1HBBKM1(keep=name type length label format formatl 
formatd informat informl informd idxusage rename=(type=itype));
MPRINT(EMADVISECOLUMNS):   if itype = 1 then type = 'N';
MPRINT(EMADVISECOLUMNS):   else type = 'C';
MPRINT(EMADVISECOLUMNS):   if formatl > 0 then do;
MPRINT(EMADVISECOLUMNS):   if format ne ' ' then format = strip(format)!!strip(put(formatl, 
best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EMADVISECOLUMNS):   else format = strip(put(formatl, best12.))!!'.'!!strip(put(formatd, 
best12.));
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if format ne '' then format = strip(format)!!'.';
MPRINT(EMADVISECOLUMNS):   if informl > 0 then do;
MPRINT(EMADVISECOLUMNS):   if informat ne ' ' then informat = 
strip(informat)!!strip(put(informl, best12.))!!'.'!!strip(put(informd, best12.));
MPRINT(EMADVISECOLUMNS):   else informat = strip(put(informl, 
best12.))!!'.'!!strip(put(informd, best12.));
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if informat ne '' then informat = strip(informat)!!'.';
MPRINT(EMADVISECOLUMNS):   if idxusage = 'NONE' then index ="N";
MPRINT(EMADVISECOLUMNS):   else index = "Y";
MPRINT(EMADVISECOLUMNS):   indextype = idxusage;
MPRINT(EMADVISECOLUMNS):   drop idxusage itype formatl formatd informl informd;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M1HBBKM1;
MPRINT(EMADVISECOLUMNS):   length UNAME $64;
MPRINT(EMADVISECOLUMNS):   set WORK.M1HBBKM1;
MPRINT(EMADVISECOLUMNS):   UNAME = upcase(NAME);
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    proc sort data=WORK.M0SV5VW0 NOTHREADS;
MPRINT(EMADVISECOLUMNS):   by UNAME;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M0SV5VW0;
MPRINT(EMADVISECOLUMNS):   drop UNAME;
MPRINT(EMADVISECOLUMNS):   set WORK.M0SV5VW0;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M3BMJ5XK(keep=NAME ATTR);
MPRINT(EMADVISECOLUMNS):   length ATTR $ 20;
MPRINT(EMADVISECOLUMNS):   set WORK.M0SV5VW0;
MPRINT(EMADVISECOLUMNS):   if level ne "INTERVAL" then do;
MPRINT(EMADVISECOLUMNS):   if order = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'ORDER';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if format ne ' ' and formattype = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'FORMATTYPE';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if role = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'ROLE';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if level = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'LEVEL';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if type = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'TYPE';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if index = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'INDEX';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if report = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'REPORT';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):   proc sort NOTHREADS;
MPRINT(EMADVISECOLUMNS):   by attr;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M0SV5VW0;
MPRINT(EMADVISECOLUMNS):   length NAME $64 ROLE $ 32 LEVEL $ 10 ORDER $ 8 CREATOR $32 
FORMATTYPE $ 10 FAMILY $ 10 LOWERLIMIT 8 UPPERLIMIT 8 REPORT $1 DISTRIBUTION $ 20 COMMENT $64;
MPRINT(EMADVISECOLUMNS):   length levelAssigned 8 roleAssigned 8 PRICE 8;
MPRINT(EMADVISECOLUMNS):   set WORK.M0SV5VW0;
MPRINT(EMADVISECOLUMNS):   if formattype = ' ' then do;
MPRINT(EMADVISECOLUMNS):   if format ne ' ' then do;
MPRINT(EMADVISECOLUMNS):   if type = 'N' then do;
MPRINT(EMADVISECOLUMNS):   pos = indexc(format,'.1234567890');
MPRINT(EMADVISECOLUMNS):   if pos > 1 then tempfmt = substr(format,1, pos-1);
MPRINT(EMADVISECOLUMNS):   else tempfmt = ' ';
MPRINT(EMADVISECOLUMNS):   flen = length(tempfmt);
MPRINT(EMADVISECOLUMNS):   select;
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("DATE" "DAY" "DDMMYY" "DOWNAME" "JULDAY" "JULIAN" 
"MMDDYY" "MMDDYYD" "MMDDYYC" "MMDDYYN" "MMDDYYP" "MMDDYYS" "MONNAME" "MONTH" "MONYY" "NENGO" 
"QTR" "QTRR" "WEEKDATE" "WEEKDATX" "WEEKDAY" "WORDDATE" "WORDDATX" "YEAR" "YYMMDD" "YYMON" 
"YYMMDDC" "YYMMDDD" "YYMMDDN" "YYMMDDP" "YYMMDDS" "EURDFDE" "NJDATE" "NLDATE" "EURDFDD" 
"EURDFDWN" "EURDFMN" "EURDFMY" "EURDFWK" "EURDFWKX" "EURDFWDX" "EURDFDN" "EURDFDE" )) 
formattype = 'DATE';
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("DATETIME" "EURDFDT" "TOD" )) formattype = 
"DATETIME";
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("HHMM" "HOUR" "MMSS" "TIME" "TIMEAMPM" )) 
formattype = "TIME";
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("COMMA" "COMMAX" "DOLLAR" "DOLLARX" "E" "FRACT" 
"NEGPAREN" "PERCENT")) formattype="QUANTITY";
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("BINARY" "HEX" "IB" "OCTAL" "PD" "PIB" "PK" "RB" 
"SSN" "Z" "ZD")) formattype = "CODING";
MPRINT(EMADVISECOLUMNS):   otherwise do;
MPRINT(EMADVISECOLUMNS):   formattype = "USER";
MPRINT(EMADVISECOLUMNS):   if substr(tempfmt, 1, 6)='NLDATE' then formattype = "DATE";
MPRINT(EMADVISECOLUMNS):   else if substr(tempfmt, 1, 6)='NLDATM' then formattype = "DATETIME";
MPRINT(EMADVISECOLUMNS):   else if substr(tempfmt, 1, 4)='NLTIM' then formattype = "TIME";
MPRINT(EMADVISECOLUMNS):   else if flen >= 4 then do;
MPRINT(EMADVISECOLUMNS):   str = substr(tempfmt,1,4);
MPRINT(EMADVISECOLUMNS):   if str in ("MMYY" "YYMM" "YYQR") then formattype ="DATE";
MPRINT(EMADVISECOLUMNS):   else if str = "S370" then formattype = "CODING";
MPRINT(EMADVISECOLUMNS):   else if str = "BEST" then formattype = "NUM";
MPRINT(EMADVISECOLUMNS):   drop str;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if flen >=3 and substr(tempfmt,1,3) = "YYQ" then formatType = 
"DATE";
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   drop flen tempfmt pos;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else do;
MPRINT(EMADVISECOLUMNS):   formatType = "CATEGORY";
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if formatType = "NUM" then do;
MPRINT(EMADVISECOLUMNS):   if index = "Y" then formatType = "DISCRETE";
MPRINT(EMADVISECOLUMNS):   else formatType = "QUANTITY";
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if level = ' ' then do;
MPRINT(EMADVISECOLUMNS):   if formatType in ("CATEGORY", "CODING", "ID") or type = "C" then 
level = "NOMINAL";
MPRINT(EMADVISECOLUMNS):   else level = "INTERVAL";
MPRINT(EMADVISECOLUMNS):   levelAssigned = 1;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else level = upcase(level);
MPRINT(EMADVISECOLUMNS):   if role = ' ' then do;
MPRINT(EMADVISECOLUMNS):   length name_prefix $8 _uname $64;
MPRINT(EMADVISECOLUMNS):   drop name_prefix _uname _freqflag;
MPRINT(EMADVISECOLUMNS):   retain _freqflag;
MPRINT(EMADVISECOLUMNS):   if LENGTH> 80 then ROLE = 'TEXT';
MPRINT(EMADVISECOLUMNS):   _uname = upcase(NAME);
MPRINT(EMADVISECOLUMNS):   select(_uname);
MPRINT(EMADVISECOLUMNS):   when('_PARTIND_') do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'ID';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   when('_WARN_') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_SEGMENT') do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'SEGMENT';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   when('_NODE_') do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'SEGMENT';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   when('EM_CLASSTARGET') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_VALUETARGET') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_PREDICTION') ROLE = 'PREDICT';
MPRINT(EMADVISECOLUMNS):   when('EM_PROBABILITY') ROLE = 'PREDICT';
MPRINT(EMADVISECOLUMNS):   when('EM_EVENTPROBABILITY') ROLE = 'PREDICT';
MPRINT(EMADVISECOLUMNS):   when('EM_CLASSIFICATION') ROLE = 'CLASSIFICATION';
MPRINT(EMADVISECOLUMNS):   when('EM_DECISION') ROLE = 'DECISION';
MPRINT(EMADVISECOLUMNS):   when('EM_PROFIT') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_LOSS') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_ROI') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('URI') ROLE = 'URL';
MPRINT(EMADVISECOLUMNS):   when('FILTERED') ROLE = 'TEXTLOC';
MPRINT(EMADVISECOLUMNS):   otherwise do;
MPRINT(EMADVISECOLUMNS):   if upcase(NAME) =: 'ZIP' then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'REJECTED';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   COMMENT = 'Rejected by: Exceed the maximum class level of %s';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if upcase(NAME) in('FREQ', 'FREQUENCY') then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'FREQ';
MPRINT(EMADVISECOLUMNS):   if TYPE = 'C' then ROLE = 'INPUT';
MPRINT(EMADVISECOLUMNS):   else if _freqflag =1 then ROLE='REJECTED';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else do;
MPRINT(EMADVISECOLUMNS):   name_prefix = scan(_uname, 1, '_');
MPRINT(EMADVISECOLUMNS):   if scan(_uname, 2, '_') = '' then name_prefix='';
MPRINT(EMADVISECOLUMNS):   if name_prefix in('F', 'I', 'U') then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'CLASSIFICATION';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if name_prefix in('P', 'V') then ROLE = 'PREDICT';
MPRINT(EMADVISECOLUMNS):   else if name_prefix in('R', 'RS', 'RT', 'RD', 'RDS', 'RDT', 'RA', 
'RAS', 'RAT') then ROLE = 'RESIDUAL';
MPRINT(EMADVISECOLUMNS):   else if name_prefix ='D' then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'DECISION';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if name_prefix ='B' then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'SEGMENT';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if name_prefix in('EP', 'BP', 'CP', 'EL', 'CL', 'BL', 'W', 
'ROI', 'IC') then ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   else do;
MPRINT(EMADVISECOLUMNS):   array _ROLE_ (19) $32 _TEMPORARY_ 
('ASSESS','CLASSIFICATION','CENSOR', 'COST', 'CROSSID', 'DECISION', 'ID','INPUT', 'LABEL', 
'MISSING','PREDICT','REFERRER','REJECTED', 'RESIDUAL','SEGMENT', 'SEQUENCE','TARGET', 'TEXT', 
'TIMEID');
MPRINT(EMADVISECOLUMNS):   drop _found_ i;
MPRINT(EMADVISECOLUMNS):   _found_=0;
MPRINT(EMADVISECOLUMNS):   do i=1 to 19 until(_found_=1);
MPRINT(EMADVISECOLUMNS):   if index(_uname, trim(_ROLE_{i}))=1 then do;
MPRINT(EMADVISECOLUMNS):   ROLE=_ROLE_{i};
MPRINT(EMADVISECOLUMNS):   if ROLE = 'ID' then LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   else if ROLE = 'SEGMENT' then LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   else if ROLE = 'TIMEID' and TYPE='N' then LEVEL = 'INTERVAL';
MPRINT(EMADVISECOLUMNS):   _found_=1;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if length(_uname)>2 then do;
MPRINT(EMADVISECOLUMNS):   if substr(reverse(trim(_uname)), 1, 3) = 'DI_' then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'ID';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if ROLE='FREQ' then _freqflag=1;
MPRINT(EMADVISECOLUMNS):   else if ROLE = 'CLASSIFICATION' then LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   if symexist('RATEMKG_ROLE') then do;
MPRINT(EMADVISECOLUMNS):   if upcase(symget('RATEMKG_ROLE')) in('Y', 'YES') then do;
MPRINT(EMADVISECOLUMNS):   if _uname =: 'POLICY' then ROLE = 'POLICYID';
MPRINT(EMADVISECOLUMNS):   else if _uname in ('PARTITION', '_PARTIND_') then ROLE = 
'PARTITION';
MPRINT(EMADVISECOLUMNS):   else if type = 'N' then do;
MPRINT(EMADVISECOLUMNS):   if _uname = 'EXPOSURE' then ROLE = 'EXPOSURE';
MPRINT(EMADVISECOLUMNS):   else if _uname = 'YEAR' then ROLE = 'YEAR';
MPRINT(EMADVISECOLUMNS):   else if _uname = 'WEIGHT' then ROLE = 'WEIGHT';
MPRINT(EMADVISECOLUMNS):   else if _uname = 'OFFSET' then ROLE = 'OFFSET';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if role = ' ' then do;
MPRINT(EMADVISECOLUMNS):   if formattype in('DATE', 'DATETIME', 'TIME') then role = 'TIMEID';
MPRINT(EMADVISECOLUMNS):   else role = 'INPUT';
MPRINT(EMADVISECOLUMNS):   roleAssigned = 1;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else role = upcase(role);
MPRINT(EMADVISECOLUMNS):   if REPORT = '' then REPORT = 'N';
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M0SV5VW0;
MPRINT(EMADVISECOLUMNS):   set WORK.M0SV5VW0;
MPRINT(EMADVISECOLUMNS):   label NAME = "Variable Name" TYPE = "Type" ROLE = "Role" LEVEL= 
"Measurement Level" ORDER= "Order" CREATOR= "Creator" FORMATTYPE= "Format Type" FAMILY= 
"Family" DISTRIBUTION= "Distribution" PRICE= "Price" LOWERLIMIT= "Lower limit" UPPERLIMIT= 
"Upper Limit" REPORT= "Report" COMMENT= "Comment" INDEX= "Index" INDEXTYPE= "IndexType" LABEL= 
"Label" LENGTH= "Length";
MPRINT(EMADVISECOLUMNS):   drop levelAssigned roleAssigned;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):   
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   proc sort data=WORK.COLUMNMETA;
MPRINT(EM_DIAGRAM):   by NAME;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * &nodeid: Merge incoming metadata;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   proc contents data=EMWS1.Reg3_TRAIN noprint out=_temp2(keep=NAME);
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=_temp2;
MPRINT(EM_DIAGRAM):   by NAME;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=EMWS1.Reg3_CMeta_TRAIN out=_temp;
MPRINT(EM_DIAGRAM):   by NAME;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data EMWS1.Neural13_CMeta_TRAIN;
MPRINT(EM_DIAGRAM):   merge WORK.COLUMNMETA(in=_a) _temp2(in=_b) _temp(drop=FORMAT INFORMAT 
LENGTH INDEX INDEXTYPE in=_c) end=_eof_;
MPRINT(EM_DIAGRAM):   by NAME;
MPRINT(EM_DIAGRAM):   if (^_a and _b) or (^_c and _a and _b) then delete;
MPRINT(EM_DIAGRAM):   if ^_b then CREATOR = "Neural13";
MPRINT(EM_DIAGRAM):   length model $200;
MPRINT(EM_DIAGRAM):   label MODEL = "Model Node";
MPRINT(EM_DIAGRAM):   select(upcase(name));
MPRINT(EM_DIAGRAM):   when("P_RISK1") creator = "Neural13";
MPRINT(EM_DIAGRAM):   when("R_RISK1") creator = "Neural13";
MPRINT(EM_DIAGRAM):   when("P_RISK0") creator = "Neural13";
MPRINT(EM_DIAGRAM):   when("R_RISK0") creator = "Neural13";
MPRINT(EM_DIAGRAM):   when("F_RISK") creator = "Neural13";
MPRINT(EM_DIAGRAM):   when("I_RISK") creator = "Neural13";
MPRINT(EM_DIAGRAM):   when("U_RISK") creator = "Neural13";
MPRINT(EM_DIAGRAM):   when("_WARN_") creator = "Neural13";
MPRINT(EM_DIAGRAM):   when("RISK") model = "Neural13";
MPRINT(EM_DIAGRAM):   when('');
MPRINT(EM_DIAGRAM):   otherwise;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Neural13: Apply Delta Code;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   filename _delta;
223634     data WORK.MODELTEMP_INFO;
MPRINT(EM_DIAGRAM):    data WORK.MODELTEMP_INFO;
223635     set EMWS1.Neural13_EMINFO;
MPRINT(EM_DIAGRAM):   set EMWS1.Neural13_EMINFO;
223636     where DATA='Neural13' and KEY ^in('DECDATA', 'DECMETA', 'IMPORTANCE', 'MODEL');
MPRINT(EM_DIAGRAM):   where DATA='Neural13' and KEY ^in('DECDATA', 'DECMETA', 'IMPORTANCE', 
'MODEL');
223637     run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 0 observations read from the data set EMWS1.NEURAL13_EMINFO.
      WHERE (DATA='Neural13') and KEY not in ('DECDATA', 'DECMETA', 'IMPORTANCE', 'MODEL');
NOTE: The data set WORK.MODELTEMP_INFO has 0 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

223638     data EMWS1.Neural13_EMINFO;
MPRINT(EM_DIAGRAM):    data EMWS1.Neural13_EMINFO;
223639     length TARGET KEY $32 DATA $43;
MPRINT(EM_DIAGRAM):   length TARGET KEY $32 DATA $43;
223640     input TARGET KEY DATA $;
MPRINT(EM_DIAGRAM):   input TARGET KEY DATA $;
223641     cards;
MPRINT(EM_DIAGRAM):   cards;

NOTE: The data set EMWS1.NEURAL13_EMINFO has 3 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.04 seconds
      cpu time            0.01 seconds
      

MPRINT(EM_DIAGRAM):   run;
223645     run;
223646     data EMWS1.Neural13_EMINFO;
MPRINT(EM_DIAGRAM):   data EMWS1.Neural13_EMINFO;
223647     set EMWS1.Neural13_EMINFO WORK.MODELTEMP_INFO;
MPRINT(EM_DIAGRAM):   set EMWS1.Neural13_EMINFO WORK.MODELTEMP_INFO;
223648     run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 3 observations read from the data set EMWS1.NEURAL13_EMINFO.
NOTE: There were 0 observations read from the data set WORK.MODELTEMP_INFO.
NOTE: The data set EMWS1.NEURAL13_EMINFO has 3 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.06 seconds
      cpu time            0.01 seconds
      

223649     proc sort data = EMWS1.Neural13_EMINFO NOTHREADS;
MPRINT(EM_DIAGRAM):    proc sort data = EMWS1.Neural13_EMINFO NOTHREADS;
223650     by TARGET KEY;
MPRINT(EM_DIAGRAM):   by TARGET KEY;
223651     run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 3 observations read from the data set EMWS1.NEURAL13_EMINFO.
NOTE: The data set EMWS1.NEURAL13_EMINFO has 3 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.07 seconds
      cpu time            0.01 seconds
      

223652     proc sort data = EMWS1.Reg3_EMINFO OUT=WORK.SORTEDEMINFO NOTHREADS;
MPRINT(EM_DIAGRAM):    proc sort data = EMWS1.Reg3_EMINFO OUT=WORK.SORTEDEMINFO NOTHREADS;
223653     by TARGET KEY;
MPRINT(EM_DIAGRAM):   by TARGET KEY;
223654     run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 4 observations read from the data set EMWS1.REG3_EMINFO.
NOTE: The data set WORK.SORTEDEMINFO has 4 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.02 seconds
      cpu time            0.00 seconds
      

223655     proc sort data = EMWS1.Neural13_EMINFO OUT=WORK.TEMP_INFO NOTHREADS;
MPRINT(EM_DIAGRAM):   proc sort data = EMWS1.Neural13_EMINFO OUT=WORK.TEMP_INFO NOTHREADS;
223656     by TARGET KEY;
MPRINT(EM_DIAGRAM):   by TARGET KEY;
223657     run;
MPRINT(EM_DIAGRAM):   run;

NOTE: Input data set is already sorted; it has been copied to the output data set.
NOTE: There were 3 observations read from the data set EMWS1.NEURAL13_EMINFO.
NOTE: The data set WORK.TEMP_INFO has 3 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.04 seconds
      cpu time            0.00 seconds
      

223658     data EMWS1.Neural13_EMINFO;
MPRINT(EM_DIAGRAM):   data EMWS1.Neural13_EMINFO;
223659     merge WORK.SORTEDEMINFO WORK.TEMP_INFO;
MPRINT(EM_DIAGRAM):   merge WORK.SORTEDEMINFO WORK.TEMP_INFO;
223660     by TARGET KEY;
MPRINT(EM_DIAGRAM):   by TARGET KEY;
223661     run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 4 observations read from the data set WORK.SORTEDEMINFO.
NOTE: There were 3 observations read from the data set WORK.TEMP_INFO.
NOTE: The data set EMWS1.NEURAL13_EMINFO has 4 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.07 seconds
      cpu time            0.00 seconds
      

223662     proc datasets lib=work nolist;
MPRINT(EM_DIAGRAM):   proc datasets lib=work nolist;
223663     delete TEMP_INFO SORTEDEMINFO;
MPRINT(EM_DIAGRAM):   delete TEMP_INFO SORTEDEMINFO;
223664     run;
MPRINT(EM_DIAGRAM):   run;

NOTE: Deleting WORK.TEMP_INFO (memtype=DATA).
NOTE: Deleting WORK.SORTEDEMINFO (memtype=DATA).
223665     quit;
MPRINT(EM_DIAGRAM):   quit;

NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.02 seconds
      cpu time            0.01 seconds
      

NOTE: View EMWS1.NEURAL13_TRAIN.VIEW used (Total process time):
      real time           0.22 seconds
      cpu time            0.21 seconds
      
NOTE: View EMWS1.NEURAL13_VALIDATE.VIEW used (Total process time):
      real time           0.22 seconds
      cpu time            0.23 seconds
      
MPRINT(EM_DIAGRAM):    proc printto;
MPRINT(EM_DIAGRAM):   run;
