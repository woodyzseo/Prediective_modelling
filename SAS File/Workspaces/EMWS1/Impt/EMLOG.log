*------------------------------------------------------------*
User:                301152869
Date:                April 05, 2021
Time:                13:09:31 o'clock
Site:                70104631
Platform:            W32_8PRO
Maintenance Release: 9.04.01M2P072314
EM Version:          13.2
* 
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   call symput('NLDATE', strip(put(date(), NLDATE.)));
MPRINT(EM_DIAGRAM):   call symput('NLTIME', strip(put(datetime(), NLTIME.)));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   nldate= sasmsg("sashelp.dmine", "log_date_note", 'N', "April 05, 2021" );
MPRINT(EM_DIAGRAM):   nltime= sasmsg("sashelp.dmine", "log_time_note", 'N', "13:09:27 o'clock" );
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "* Training Log";
MPRINT(EM_DIAGRAM):   put nldate;
MPRINT(EM_DIAGRAM):   put nltime;
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   run;
*------------------------------------------------------------*
* Training Log
Date:                April 05, 2021
Time:                13:09:27 o'clock
*------------------------------------------------------------*
MPRINT(EM_DIAGRAM):    filename O10W47ZG "H:\746\Decision Tree test\Workspaces\EMWS1\Impt\EMTRAIN.out" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):   proc printto print=O10W47ZG new;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _LOG "H:\746\Decision Tree test\Workspaces\EMWS1\Impt\EMLOG.log" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   call symput('NLDATE', strip(put(date(), NLDATE.)));
MPRINT(EM_DIAGRAM):   call symput('NLTIME', strip(put(datetime(), NLTIME.)));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   nldate= sasmsg("sashelp.dmine", "log_date_note", 'N', "April 05, 2021" );
MPRINT(EM_DIAGRAM):   nltime= sasmsg("sashelp.dmine", "log_time_note", 'N', "13:09:27 o'clock" );
MPRINT(EM_DIAGRAM):   file _LOG;
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "User:                301152869";
MPRINT(EM_DIAGRAM):   put nldate;
MPRINT(EM_DIAGRAM):   put nltime;
MPRINT(EM_DIAGRAM):   put "Site:                70104631";
MPRINT(EM_DIAGRAM):   put "Platform:            W32_8PRO";
MPRINT(EM_DIAGRAM):   put "Maintenance Release: 9.04.01M2P072314";
MPRINT(EM_DIAGRAM):   put "EM Version:          13.2";
MPRINT(EM_DIAGRAM):   put "* ";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _LOGIN "H:\746\Decision Tree test\Workspaces\EMWS1\Impt\EMTRAIN.log" encoding="UTF-8" NOBOM;
MPRINT(EM_COPYFILE):   data _null_;
MPRINT(EM_COPYFILE):   length line $20000;
MPRINT(EM_COPYFILE):   file _LOG MOD lrecl=20000;
MPRINT(EM_COPYFILE):   fid=fopen("_LOGIN",'i',20000,'v');
MPRINT(EM_COPYFILE):   if fid > 0 then do;
MPRINT(EM_COPYFILE):   do while(^fread(fid));
MPRINT(EM_COPYFILE):   rlen = frlen(fid);
MPRINT(EM_COPYFILE):   rc= fget(fid,line,20000);
MPRINT(EM_COPYFILE):   start = length(line)-length(left(line))+1;
MPRINT(EM_COPYFILE):   line=strip(line);
MPRINT(EM_COPYFILE):   put @start line;
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   if fid > 0 then rc=fclose(fid);
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   run;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   filename _LOGIN;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   file _LOG mod;
MPRINT(EM_DIAGRAM):   put _page_;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   filename _LOGIN "H:\746\Decision Tree test\Workspaces\EMWS1\Impt\EMSCORE.log" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   file _LOG mod;
MPRINT(EM_DIAGRAM):   put _page_;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _LOGIN "H:\746\Decision Tree test\Workspaces\EMWS1\Impt\EMREPORT.log" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   filename _LOGIN;
MPRINT(EM_DIAGRAM):    filename _LOG;
MPRINT(EM_DIAGRAM):    filename _OUT "H:\746\Decision Tree test\Workspaces\EMWS1\Impt\EMOUTPUT.out" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   call symput('NLDATE', strip(put(date(), NLDATE.)));
MPRINT(EM_DIAGRAM):   call symput('NLTIME', strip(put(datetime(), NLTIME.)));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   nldate= sasmsg("sashelp.dmine", "log_date_note", 'N', "April 05, 2021" );
MPRINT(EM_DIAGRAM):   nltime= sasmsg("sashelp.dmine", "log_time_note", 'N', "13:09:27 o'clock" );
MPRINT(EM_DIAGRAM):   file _OUT;
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "User:                301152869";
MPRINT(EM_DIAGRAM):   put nldate;
MPRINT(EM_DIAGRAM):   put nltime;
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "* Training Output";
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _OUTIN "H:\746\Decision Tree test\Workspaces\EMWS1\Impt\EMTRAIN.out" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):   ;
MPRINT(EM_COPYFILE):   data _null_;
MPRINT(EM_COPYFILE):   length line $20000;
MPRINT(EM_COPYFILE):   file _OUT MOD lrecl=20000;
MPRINT(EM_COPYFILE):   fid=fopen("_OUTIN",'i',20000,'v');
MPRINT(EM_COPYFILE):   if fid > 0 then do;
MPRINT(EM_COPYFILE):   do while(^fread(fid));
MPRINT(EM_COPYFILE):   rlen = frlen(fid);
MPRINT(EM_COPYFILE):   rc= fget(fid,line,20000);
MPRINT(EM_COPYFILE):   start = length(line)-length(left(line))+1;
MPRINT(EM_COPYFILE):   line=strip(line);
MPRINT(EM_COPYFILE):   put @start line;
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   if fid > 0 then rc=fclose(fid);
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   run;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   filename _OUTIN;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   file _OUT mod;
MPRINT(EM_DIAGRAM):   put _page_;
MPRINT(EM_DIAGRAM):   put // "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "* Score Output";
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _OUTIN "H:\746\Decision Tree test\Workspaces\EMWS1\Impt\EMSCORE.out" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   filename _OUTIN;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   file _OUT mod;
MPRINT(EM_DIAGRAM):   put _page_;
MPRINT(EM_DIAGRAM):   put // "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "* Report Output";
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _OUTIN "H:\746\Decision Tree test\Workspaces\EMWS1\Impt\EMREPORT.out" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   filename _OUTIN;
MPRINT(EM_DIAGRAM):    filename _OUT;
MPRINT(EM_DIAGRAM):    filename _emtool_ 'H:\746\Decision Tree test\Workspaces\EMWS1\Impt\EMRUNSTATUS.xml' encoding="UTF-8" NOBOM;
35230      proc freq data=EMWS1.Impt_VariableSet noprint;
MPRINT(EM_DIAGRAM):    proc freq data=EMWS1.Impt_VariableSet noprint;
35231      table ROLE*LEVEL/out=WORK.ImptMETA;
MPRINT(EM_DIAGRAM):   table ROLE*LEVEL/out=WORK.ImptMETA;
35232      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 27 observations read from the data set EMWS1.IMPT_VARIABLESET.
NOTE: The data set WORK.IMPTMETA has 5 observations and 4 variables.
NOTE: PROCEDURE FREQ used (Total process time):
      real time           0.07 seconds
      cpu time            0.00 seconds
 
 
35233      proc print data=WORK.ImptMETA label noobs;
MPRINT(EM_DIAGRAM):   proc print data=WORK.ImptMETA label noobs;
35234      var ROLE LEVEL COUNT;
MPRINT(EM_DIAGRAM):   var ROLE LEVEL COUNT;
35235      label ROLE = "%sysfunc(sasmsg(sashelp.dmine, meta_role_vlabel, NOQUOTE))" LEVEL = "%sysfunc(sasmsg(sashelp.dmine, meta_level_vlabel, NOQUOTE))" COUNT = "%sysfunc(sasmsg(sashelp.dmine, rpt_count_vlabel, NOQUOTE))";
MPRINT(EM_DIAGRAM):   label ROLE = "Role" LEVEL = "Measurement Level" COUNT = "Frequency Count";
35236      title9 ' ';
MPRINT(EM_DIAGRAM):   title9 ' ';
35237      title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_varSummary_title  , NOQUOTE))";
MPRINT(EM_DIAGRAM):   title10 "Variable Summary";
MPRINT(EM_DIAGRAM):   run;
35238      run;
 
NOTE: There were 5 observations read from the data set WORK.IMPTMETA.
NOTE: The PROCEDURE PRINT printed page 9.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
35239      title10;
MPRINT(EM_DIAGRAM):   title10;
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Impt: Preparing metadata for training;
MPRINT(EM_DIAGRAM):   ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   data WORK.M34GUFQL;
MPRINT(EM_DIAGRAM):   set WORK.M34GUFQL;
MPRINT(EM_DIAGRAM):   where(use = 'Y' or (ROLE ne 'REJECTED' and USE = 'D'));
MPRINT(EM_DIAGRAM):   if (role = 'REJECTED') then role = 'INPUT';
MPRINT(EM_DIAGRAM):   if role = 'INPUT' and METHOD='DEFAULT' then do;
MPRINT(EM_DIAGRAM):   if level ne 'INTERVAL' then METHOD = "COUNT";
MPRINT(EM_DIAGRAM):   else METHOD = "MEAN";
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if role = 'TARGET' and METHOD='DEFAULT' then do;
MPRINT(EM_DIAGRAM):   if level ne 'INTERVAL' then METHOD = "NONE";
MPRINT(EM_DIAGRAM):   else METHOD = "NONE";
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   run;
35257      data WORK.Impt_TREEINPUTS;
MPRINT(EM_DIAGRAM):    data WORK.Impt_TREEINPUTS;
35258      set WORK.M08FD88R;
MPRINT(EM_DIAGRAM):   set WORK.M08FD88R;
35259      if ROLE ne 'FREQ' then do;
MPRINT(EM_DIAGRAM):   if ROLE ne 'FREQ' then do;
35260      if ((ROLE in('TARGET','REJECTED') and useTree='D') or useTree='N') then delete;
MPRINT(EM_DIAGRAM):   if ((ROLE in('TARGET','REJECTED') and useTree='D') or useTree='N') then delete;
35261      ROLE = 'INPUT';
MPRINT(EM_DIAGRAM):   ROLE = 'INPUT';
35262      end;
MPRINT(EM_DIAGRAM):   end;
35263      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 24 observations read from the data set WORK.M08FD88R.
NOTE: The data set WORK.IMPT_TREEINPUTS has 23 observations and 31 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
35264      data WORK.M08FD88R;
MPRINT(EM_DIAGRAM):   data WORK.M08FD88R;
35265      set WORK.M08FD88R;
MPRINT(EM_DIAGRAM):   set WORK.M08FD88R;
35266      if METHOD in("TREE", "TREESURR") then role = 'TARGET';
MPRINT(EM_DIAGRAM):   if METHOD in("TREE", "TREESURR") then role = 'TARGET';
35267      else if (role = 'REJECTED') then role = 'INPUT';
MPRINT(EM_DIAGRAM):   else if (role = 'REJECTED') then role = 'INPUT';
35268      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 24 observations read from the data set WORK.M08FD88R.
NOTE: The data set WORK.M08FD88R has 24 observations and 31 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
35269      *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------* ;
35270      * Impt: DMDBClass Macro ;
MPRINT(EM_DIAGRAM):   * Impt: DMDBClass Macro ;
35271      *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
35272      %macro DMDBClass;
35273          Risk(DESC) aspiration(ASC) body_style(ASC) drive_wheels(ASC)
35274         engine_location(ASC) engine_type(ASC) fuel_system(ASC) fuel_type(ASC)
35275         num_of_cylinders(ASC) num_of_doors(ASC)
35276      %mend DMDBClass;
35277      *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
35278      * Impt: DMDBVar Macro ;
MPRINT(EM_DIAGRAM):   * Impt: DMDBVar Macro ;
35279      *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
35280      %macro DMDBVar;
35281          bore city_mpg compression_ratio curb_weight engine_size height highway_mpg
35282         horsepower length peak_rpm price stroke wheel_base width
35283      %mend DMDBVar;
35284      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
35285      * Impt: Create DMDB;
MPRINT(EM_DIAGRAM):   * Impt: Create DMDB;
35286      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
35287      proc dmdb batch data=EMWS1.Part_TRAIN
35288      dmdbcat=WORK.Impt_DMDB
35289      classout=WORK.Impt_DMDBCLASSOUT
35290      varout=WORK.IMPUTE_0FYP6_9_DMDBVAROUT
35291      maxlevel = 513
35292      ;
MPRINT(EM_DIAGRAM):   proc dmdb batch data=EMWS1.Part_TRAIN dmdbcat=WORK.Impt_DMDB classout=WORK.Impt_DMDBCLASSOUT varout=WORK.IMPUTE_0FYP6_9_DMDBVAROUT maxlevel = 513 ;
MPRINT(EM_DIAGRAM):   class
35293      class %DMDBClass;
MPRINT(DMDBCLASS):   Risk(DESC) aspiration(ASC) body_style(ASC) drive_wheels(ASC) engine_location(ASC) engine_type(ASC) fuel_system(ASC) fuel_type(ASC) num_of_cylinders(ASC) num_of_doors(ASC)
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   var
35294      var %DMDBVar;
MPRINT(DMDBVAR):   bore city_mpg compression_ratio curb_weight engine_size height highway_mpg horsepower length peak_rpm price stroke wheel_base width
MPRINT(EM_DIAGRAM):  ;
35295      target
35296      Risk
35297      ;
MPRINT(EM_DIAGRAM):   target Risk ;
35298      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: Records processed = 100   Memory used = 511K.
NOTE: There were 100 observations read from the data set EMWS1.PART_TRAIN.
NOTE: The data set WORK.IMPT_DMDBCLASSOUT has 35 observations and 9 variables.
NOTE: The data set WORK.IMPUTE_0FYP6_9_DMDBVAROUT has 14 observations and 9 variables.
NOTE: PROCEDURE DMDB used (Total process time):
      real time           0.02 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_DIAGRAM):   quit;
MPRINT(EM_DIAGRAM):   *--- end code ---*;
35299      quit;
35300      *--- end code ---*;
 
35301      proc sort data=WORK.Impt_DMDBCLASSOUT;
MPRINT(EM_DIAGRAM):    proc sort data=WORK.Impt_DMDBCLASSOUT;
35302      by NAME;
MPRINT(EM_DIAGRAM):   by NAME;
35303      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 35 observations read from the data set WORK.IMPT_DMDBCLASSOUT.
NOTE: The data set WORK.IMPT_DMDBCLASSOUT has 35 observations and 9 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
35304      data WORK.Impt_DMDBCLASSOUT;
MPRINT(EM_DIAGRAM):   data WORK.Impt_DMDBCLASSOUT;
35305      retain missFlag;
MPRINT(EM_DIAGRAM):   retain missFlag;
35306      set WORK.Impt_DMDBCLASSOUT;
MPRINT(EM_DIAGRAM):   set WORK.Impt_DMDBCLASSOUT;
35307      by NAME;
MPRINT(EM_DIAGRAM):   by NAME;
35308      output;
MPRINT(EM_DIAGRAM):   output;
35309      if first.name then missflag = 0;
MPRINT(EM_DIAGRAM):   if first.name then missflag = 0;
35310      if (TYPE='C' and CRAW='') or (TYPE='N' and NRAW=.) then missflag = 1;
MPRINT(EM_DIAGRAM):   if (TYPE='C' and CRAW='') or (TYPE='N' and NRAW=.) then missflag = 1;
35311      if last.name and ^missFlag then do;
MPRINT(EM_DIAGRAM):   if last.name and ^missFlag then do;
35312      if type = 'C' then do;
MPRINT(EM_DIAGRAM):   if type = 'C' then do;
35313      LEVEL= '';
MPRINT(EM_DIAGRAM):   LEVEL= '';
35314      CRAW = '';
MPRINT(EM_DIAGRAM):   CRAW = '';
35315      NRAW = .;
MPRINT(EM_DIAGRAM):   NRAW = .;
35316      end;
MPRINT(EM_DIAGRAM):   end;
35317      else do;
MPRINT(EM_DIAGRAM):   else do;
35318      LEVEL='.';
MPRINT(EM_DIAGRAM):   LEVEL='.';
35319      CRAW = '.';
MPRINT(EM_DIAGRAM):   CRAW = '.';
35320      NRAW= .;
MPRINT(EM_DIAGRAM):   NRAW= .;
35321      end;
MPRINT(EM_DIAGRAM):   end;
35322      FREQUENCY = 0;
MPRINT(EM_DIAGRAM):   FREQUENCY = 0;
35323      FREQPERCENT = 0;
MPRINT(EM_DIAGRAM):   FREQPERCENT = 0;
35324      NMISSPERCENT = 0;
MPRINT(EM_DIAGRAM):   NMISSPERCENT = 0;
35325      output;
MPRINT(EM_DIAGRAM):   output;
35326      end;
MPRINT(EM_DIAGRAM):   end;
35327      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 35 observations read from the data set WORK.IMPT_DMDBCLASSOUT.
NOTE: The data set WORK.IMPT_DMDBCLASSOUT has 44 observations and 10 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
35328      data WORK.Impt_MISS(KEEP=NAME NMISS PERCENTMISS);
MPRINT(EM_DIAGRAM):    data WORK.Impt_MISS(KEEP=NAME NMISS PERCENTMISS);
35329      length NAME $32;
MPRINT(EM_DIAGRAM):   length NAME $32;
35330      set
35331      WORK.Impt_DMDBCLASSOUT(rename=(freqpercent=PERCENTMISS frequency=NMISS) where=((TYPE='C' and CRAW='') or (TYPE='N' and NRAW=.)))
35332      WORK.IMPUTE_0FYP6_9_DMDBVAROUT
35333      ;
MPRINT(EM_DIAGRAM):   set WORK.Impt_DMDBCLASSOUT(rename=(freqpercent=PERCENTMISS frequency=NMISS) where=((TYPE='C' and CRAW='') or (TYPE='N' and NRAW=.))) WORK.IMPUTE_0FYP6_9_DMDBVAROUT ;
35334      if (NMISS ne . and N ne .) then PERCENTMISS = (NMISS/(NMISS+N))*100;
MPRINT(EM_DIAGRAM):   if (NMISS ne . and N ne .) then PERCENTMISS = (NMISS/(NMISS+N))*100;
35335      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 10 observations read from the data set WORK.IMPT_DMDBCLASSOUT.
      WHERE ((TYPE='C') and (CRAW=' ')) or ((TYPE='N') and (NRAW=.));
NOTE: There were 14 observations read from the data set WORK.IMPUTE_0FYP6_9_DMDBVAROUT.
NOTE: The data set WORK.IMPT_MISS has 24 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
35336      proc sort data=WORK.M34GUFQL NOTHREADS;
MPRINT(EM_DIAGRAM):   proc sort data=WORK.M34GUFQL NOTHREADS;
35337      by NAME;
MPRINT(EM_DIAGRAM):   by NAME;
35338      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 24 observations read from the data set WORK.M34GUFQL.
NOTE: The data set WORK.M34GUFQL has 24 observations and 31 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
35339      proc sort data=WORK.Impt_MISS NOTHREADS;
MPRINT(EM_DIAGRAM):   proc sort data=WORK.Impt_MISS NOTHREADS;
35340      by NAME;
MPRINT(EM_DIAGRAM):   by NAME;
35341      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 24 observations read from the data set WORK.IMPT_MISS.
NOTE: The data set WORK.IMPT_MISS has 24 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
35342      data WORK.M34GUFQL;
MPRINT(EM_DIAGRAM):   data WORK.M34GUFQL;
35343      merge WORK.M34GUFQL WORK.Impt_MISS(in=_b);
MPRINT(EM_DIAGRAM):   merge WORK.M34GUFQL WORK.Impt_MISS(in=_b);
35344      by NAME;
MPRINT(EM_DIAGRAM):   by NAME;
35345      if _b then output;
MPRINT(EM_DIAGRAM):   if _b then output;
35346      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 24 observations read from the data set WORK.M34GUFQL.
NOTE: There were 24 observations read from the data set WORK.IMPT_MISS.
NOTE: The data set WORK.M34GUFQL has 24 observations and 33 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
35347      data WORK.M34GUFQL;
MPRINT(EM_DIAGRAM):   data WORK.M34GUFQL;
35348      set WORK.M34GUFQL;
MPRINT(EM_DIAGRAM):   set WORK.M34GUFQL;
35349      if 0<PERCENTMISS<50 and method ne 'NONE' then IMPUTE = 1;
MPRINT(EM_DIAGRAM):   if 0<PERCENTMISS<50 and method ne 'NONE' then IMPUTE = 1;
35350      else IMPUTE = 0;
MPRINT(EM_DIAGRAM):   else IMPUTE = 0;
35351      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 24 observations read from the data set WORK.M34GUFQL.
NOTE: The data set WORK.M34GUFQL has 24 observations and 34 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
35352      proc dmdb data=WORK.M34GUFQL outtable=WORK.NEWNAMES nameserver;
MPRINT(EM_DIAGRAM):    proc dmdb data=WORK.M34GUFQL outtable=WORK.NEWNAMES nameserver;
35353      names NAME;
MPRINT(EM_DIAGRAM):   names NAME;
35354      prefix M_ IMP_;
MPRINT(EM_DIAGRAM):   prefix M_ IMP_;
35355      where IMPUTE=1;
MPRINT(EM_DIAGRAM):   where IMPUTE=1;
35356      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 4 observations read from the data set WORK.M34GUFQL.
      WHERE IMPUTE=1;
NOTE: The data set WORK.NEWNAMES has 4 observations and 3 variables.
NOTE: PROCEDURE DMDB used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
35357      data WORK.M34GUFQL;
MPRINT(EM_DIAGRAM):   data WORK.M34GUFQL;
35358      merge WORK.M34GUFQL WORK.NEWNAMES;
MPRINT(EM_DIAGRAM):   merge WORK.M34GUFQL WORK.NEWNAMES;
35359      by NAME;
MPRINT(EM_DIAGRAM):   by NAME;
35360      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 24 observations read from the data set WORK.M34GUFQL.
NOTE: There were 4 observations read from the data set WORK.NEWNAMES.
NOTE: The data set WORK.M34GUFQL has 24 observations and 36 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
35361      proc dmdb data=WORK.M34GUFQL outtable=WORK.NEWNAMES nameserver;
MPRINT(EM_DIAGRAM):   proc dmdb data=WORK.M34GUFQL outtable=WORK.NEWNAMES nameserver;
35362      names NAME;
MPRINT(EM_DIAGRAM):   names NAME;
35363      prefix M_;
MPRINT(EM_DIAGRAM):   prefix M_;
35364      where IMPUTE=0;
MPRINT(EM_DIAGRAM):   where IMPUTE=0;
35365      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 20 observations read from the data set WORK.M34GUFQL.
      WHERE IMPUTE=0;
NOTE: The data set WORK.NEWNAMES has 20 observations and 2 variables.
NOTE: PROCEDURE DMDB used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
35366      data WORK.M34GUFQL;
MPRINT(EM_DIAGRAM):   data WORK.M34GUFQL;
35367      merge WORK.M34GUFQL WORK.NEWNAMES;
MPRINT(EM_DIAGRAM):   merge WORK.M34GUFQL WORK.NEWNAMES;
35368      by NAME;
MPRINT(EM_DIAGRAM):   by NAME;
35369      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 24 observations read from the data set WORK.M34GUFQL.
NOTE: There were 20 observations read from the data set WORK.NEWNAMES.
NOTE: The data set WORK.M34GUFQL has 24 observations and 36 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
35370      data WORK.Impt;
MPRINT(EM_DIAGRAM):    data WORK.Impt;
35371      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: The data set WORK.IMPT has 1 observations and 0 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
35372      data WORK._IMPUTEDS;
MPRINT(EM_DIAGRAM):    data WORK._IMPUTEDS;
35373      num_of_doors = 4;
MPRINT(EM_DIAGRAM):   num_of_doors = 4;
35374      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: The data set WORK._IMPUTEDS has 1 observations and 1 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
35375      data WORK.Impt;
MPRINT(EM_DIAGRAM):   data WORK.Impt;
35376      merge WORK.Impt WORK._IMPUTEDS;
MPRINT(EM_DIAGRAM):   merge WORK.Impt WORK._IMPUTEDS;
35377      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 1 observations read from the data set WORK.IMPT.
NOTE: There were 1 observations read from the data set WORK._IMPUTEDS.
NOTE: The data set WORK.IMPT has 1 observations and 1 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
35378      proc sort data=WORK.METASET0CKKC_G out=_imputevar(keep=NAME METHOD);
MPRINT(EM_DIAGRAM):    proc sort data=WORK.METASET0CKKC_G out=_imputevar(keep=NAME METHOD);
35379      by NAME;
MPRINT(EM_DIAGRAM):   by NAME;
35380      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 3 observations read from the data set WORK.METASET0CKKC_G.
NOTE: The data set WORK._IMPUTEVAR has 3 observations and 2 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
35381      proc sort data=WORK.IMPUTE_0FYP6_9_DMDBVAROUT;
MPRINT(EM_DIAGRAM):   proc sort data=WORK.IMPUTE_0FYP6_9_DMDBVAROUT;
35382      by NAME;
MPRINT(EM_DIAGRAM):   by NAME;
35383      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 14 observations read from the data set WORK.IMPUTE_0FYP6_9_DMDBVAROUT.
NOTE: The data set WORK.IMPUTE_0FYP6_9_DMDBVAROUT has 14 observations and 9 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
35384      data _null_;
MPRINT(EM_DIAGRAM):   data _null_;
35385      merge WORK.IMPUTE_0FYP6_9_DMDBVAROUT(in=_a) _imputeVar(in=_b);
MPRINT(EM_DIAGRAM):   merge WORK.IMPUTE_0FYP6_9_DMDBVAROUT(in=_a) _imputeVar(in=_b);
35386      by NAME;
MPRINT(EM_DIAGRAM):   by NAME;
35387      if _N_=1 then do;
MPRINT(EM_DIAGRAM):   if _N_=1 then do;
35388      call execute("data WORK._IMPUTEDMDB;");
MPRINT(EM_DIAGRAM):   call execute("data WORK._IMPUTEDMDB;");
35389      end;
MPRINT(EM_DIAGRAM):   end;
35390      if _a and _b then do;
MPRINT(EM_DIAGRAM):   if _a and _b then do;
35391      select(METHOD);
MPRINT(EM_DIAGRAM):   select(METHOD);
35392      when('MEAN') value=mean;
MPRINT(EM_DIAGRAM):   when('MEAN') value=mean;
35393      when('MIN') value=min;
MPRINT(EM_DIAGRAM):   when('MIN') value=min;
35394      when('MAX') value=max;
MPRINT(EM_DIAGRAM):   when('MAX') value=max;
35395      when('RANGE') value=(max-min);
MPRINT(EM_DIAGRAM):   when('RANGE') value=(max-min);
35396      when('MIDRANGE') value=(max+min)/2;
MPRINT(EM_DIAGRAM):   when('MIDRANGE') value=(max+min)/2;
35397      otherwise;
MPRINT(EM_DIAGRAM):   otherwise;
35398      end;
MPRINT(EM_DIAGRAM):   end;
35399      call execute(NAME!!'='!!strip(put(value, best.))!!';');
MPRINT(EM_DIAGRAM):   call execute(NAME!!'='!!strip(put(value, best.))!!';');
35400      end;
MPRINT(EM_DIAGRAM):   end;
35401      run;
MPRINT(EM_DIAGRAM):   run;
 
WARNING: Multiple lengths were specified for the BY variable NAME by input data sets. This might cause unexpected results.
MPRINT(EM_DIAGRAM):   data WORK._IMPUTEDMDB;
MPRINT(EM_DIAGRAM):   bore =3.3026530612;
MPRINT(EM_DIAGRAM):   price =12773.191919;
MPRINT(EM_DIAGRAM):   stroke =3.2513265306;
NOTE: There were 14 observations read from the data set WORK.IMPUTE_0FYP6_9_DMDBVAROUT.
NOTE: There were 3 observations read from the data set WORK._IMPUTEVAR.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
NOTE: CALL EXECUTE generated line.
1         + data WORK._IMPUTEDMDB;
2         + bore                            =3.3026530612;
3         + price                           =12773.191919;
4         + stroke                          =3.2513265306;
 
NOTE: The data set WORK._IMPUTEDMDB has 1 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
35402      data WORK.Impt;
MPRINT(EM_DIAGRAM):   data WORK.Impt;
35403      merge WORK.Impt WORK._IMPUTEDMDB;
MPRINT(EM_DIAGRAM):   merge WORK.Impt WORK._IMPUTEDMDB;
35404      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 1 observations read from the data set WORK.IMPT.
NOTE: There were 1 observations read from the data set WORK._IMPUTEDMDB.
NOTE: The data set WORK.IMPT has 1 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
35405      proc transpose data=WORK.Impt out=WORK._IMPVALUE(drop =_LABEL_ rename=(_NAME_=NAME COL1=VALUE));
MPRINT(EM_DIAGRAM):    proc transpose data=WORK.Impt out=WORK._IMPVALUE(drop =_LABEL_ rename=(_NAME_=NAME COL1=VALUE));
35406      var
35407      num_of_doors
35408      bore
35409      price
35410      stroke
35411      ;
MPRINT(EM_DIAGRAM):   var num_of_doors bore price stroke ;
35412      run;
MPRINT(EM_DIAGRAM):   run;
 
WARNING: The variable _LABEL_ in the DROP, KEEP, or RENAME list has never been referenced.
NOTE: There were 1 observations read from the data set WORK.IMPT.
NOTE: The data set WORK._IMPVALUE has 4 observations and 2 variables.
NOTE: PROCEDURE TRANSPOSE used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
35413      proc sort data=WORK._IMPVALUE NOTHREADS;
MPRINT(EM_DIAGRAM):   proc sort data=WORK._IMPVALUE NOTHREADS;
35414      by NAME;
MPRINT(EM_DIAGRAM):   by NAME;
35415      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 4 observations read from the data set WORK._IMPVALUE.
NOTE: The data set WORK._IMPVALUE has 4 observations and 2 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
35416      data EMWS1.Impt_META;
MPRINT(EM_DIAGRAM):   data EMWS1.Impt_META;
35417      merge WORK.M34GUFQL WORK._IMPVALUE;
MPRINT(EM_DIAGRAM):   merge WORK.M34GUFQL WORK._IMPVALUE;
35418      by NAME;
MPRINT(EM_DIAGRAM):   by NAME;
35419      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 24 observations read from the data set WORK.M34GUFQL.
NOTE: There were 4 observations read from the data set WORK._IMPVALUE.
NOTE: The data set EMWS1.IMPT_META has 24 observations and 37 variables.
NOTE: DATA statement used (Total process time):
      real time           0.07 seconds
      cpu time            0.03 seconds
 
 
35420      proc print data=EMWS1.Impt_META(obs=500) label noobs;
MPRINT(EM_DIAGRAM):    proc print data=EMWS1.Impt_META(obs=500) label noobs;
35421      label NAME = "%sysfunc(sasmsg(sashelp.dmine, meta_name_vlabel,          NOQUOTE))" LABEL = "%sysfunc(sasmsg(sashelp.dmine, meta_label_vlabel,         NOQUOTE))" PERCENTMISS = "%sysfunc(sasmsg(sashelp.dmine, rpt_percentmissing_vlabel, NOQUOTE))";
MPRINT(EM_DIAGRAM):   label NAME = "Variable Name" LABEL = "Label" PERCENTMISS = "Percent Missing";
35422      var NAME LABEL PERCENTMISS;
MPRINT(EM_DIAGRAM):   var NAME LABEL PERCENTMISS;
35423      where IMP eq '' and PERCENTMISS>50;
MPRINT(EM_DIAGRAM):   where IMP eq '' and PERCENTMISS>50;
35424      title9 "%sysfunc(sasmsg(sashelp.dmine, rpt_rejectedsummary_title, NOQUOTE))";
MPRINT(EM_DIAGRAM):   title9 "Rejected Variables Summary";
35425      title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_numberobs_title,         NOQUOTE))";
MPRINT(EM_DIAGRAM):   title10 "Number Of Observations";
MPRINT(EM_DIAGRAM):   run;
35426      run;
 
NOTE: No observations were selected from data set EMWS1.IMPT_META.
NOTE: There were 0 observations read from the data set EMWS1.IMPT_META.
      WHERE (IMP=' ') and (PERCENTMISS>50);
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_DIAGRAM):    proc printto;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   call symput('NLDATE', strip(put(date(), NLDATE.)));
MPRINT(EM_DIAGRAM):   call symput('NLTIME', strip(put(datetime(), NLTIME.)));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   nldate= sasmsg("sashelp.dmine", "log_date_note", 'N', "April 05, 2021" );
MPRINT(EM_DIAGRAM):   nltime= sasmsg("sashelp.dmine", "log_time_note", 'N', "13:09:29 o'clock" );
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "* Score Log";
MPRINT(EM_DIAGRAM):   put nldate;
MPRINT(EM_DIAGRAM):   put nltime;
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   run;
*------------------------------------------------------------*
* Score Log
Date:                April 05, 2021
Time:                13:09:29 o'clock
*------------------------------------------------------------*
MPRINT(EM_DIAGRAM):    filename O2DDQKS8 "H:\746\Decision Tree test\Workspaces\EMWS1\Impt\EMSCORE.out" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):   proc printto print=O2DDQKS8 new;
MPRINT(EM_DIAGRAM):   run;
35528      data _null_;
MPRINT(EM_DIAGRAM):    data _null_;
35529      set EMWS1.Impt_META end=eof;
MPRINT(EM_DIAGRAM):   set EMWS1.Impt_META end=eof;
35530      length string $34;
MPRINT(EM_DIAGRAM):   length string $34;
35531      retain missTotal;
MPRINT(EM_DIAGRAM):   retain missTotal;
35532      file #LN00653;
MPRINT(EM_DIAGRAM):   file #LN00653;
35533      if _n_=1 then misstotal = percentmiss;
MPRINT(EM_DIAGRAM):   if _n_=1 then misstotal = percentmiss;
35534      missTotal = percentmiss+misstotal;
MPRINT(EM_DIAGRAM):   missTotal = percentmiss+misstotal;
35535      if IMP ne '' and METHOD ne 'NONE' then do;
MPRINT(EM_DIAGRAM):   if IMP ne '' and METHOD ne 'NONE' then do;
35536      string = '"'!!strip(NAME)!!'"';
MPRINT(EM_DIAGRAM):   string = '"'!!strip(NAME)!!'"';
35537      put 'if NAME = ' string 'then delete;';
MPRINT(EM_DIAGRAM):   put 'if NAME = ' string 'then delete;';
35538      put 'else ';
MPRINT(EM_DIAGRAM):   put 'else ';
35539      string = '"'!!strip(IMP)!!'"';
MPRINT(EM_DIAGRAM):   string = '"'!!strip(IMP)!!'"';
35540      put 'if NAME    = ' string ' then do;';
MPRINT(EM_DIAGRAM):   put 'if NAME    = ' string ' then do;';
35541      string = '"'!!strip(ROLE)!!'"';
MPRINT(EM_DIAGRAM):   string = '"'!!strip(ROLE)!!'"';
35542      put '   ROLE    = ' string ';';
MPRINT(EM_DIAGRAM):   put '   ROLE    = ' string ';';
35543      string = '"'!!strip(FAMILY)!!'"';
MPRINT(EM_DIAGRAM):   string = '"'!!strip(FAMILY)!!'"';
35544      put '   FAMILY  = ' string ';';
MPRINT(EM_DIAGRAM):   put '   FAMILY  = ' string ';';
35545      string = '"'!!strip(REPORT)!!'"';
MPRINT(EM_DIAGRAM):   string = '"'!!strip(REPORT)!!'"';
35546      put '   REPORT  = ' string ';';
MPRINT(EM_DIAGRAM):   put '   REPORT  = ' string ';';
35547      string = '"'!!strip(LEVEL)!!'"';
MPRINT(EM_DIAGRAM):   string = '"'!!strip(LEVEL)!!'"';
35548      put '   LEVEL   = ' string ';';
MPRINT(EM_DIAGRAM):   put '   LEVEL   = ' string ';';
35549      string = '"'!!strip(ORDER)!!'"';
MPRINT(EM_DIAGRAM):   string = '"'!!strip(ORDER)!!'"';
35550      put '   ORDER   = ' string ';';
MPRINT(EM_DIAGRAM):   put '   ORDER   = ' string ';';
35551      put 'end;';
MPRINT(EM_DIAGRAM):   put 'end;';
35552      end;
MPRINT(EM_DIAGRAM):   end;
35553      if percentmiss>50 and ROLE ne 'TARGET' then do;
MPRINT(EM_DIAGRAM):   if percentmiss>50 and ROLE ne 'TARGET' then do;
35554      string = '"'!!strip(NAME)!!'"';
MPRINT(EM_DIAGRAM):   string = '"'!!strip(NAME)!!'"';
35555      put 'if NAME = ' string ' then do;';
MPRINT(EM_DIAGRAM):   put 'if NAME = ' string ' then do;';
35556      put '   ROLE ="REJECTED";';
MPRINT(EM_DIAGRAM):   put '   ROLE ="REJECTED";';
35557      put '   COMMENT = "Percent of missing exceeds 50%";';
MPRINT(EM_DIAGRAM):   put '   COMMENT = "Percent of missing exceeds 50%";';
35558      put 'end;';
MPRINT(EM_DIAGRAM):   put 'end;';
35559      end;
MPRINT(EM_DIAGRAM):   end;
35560      put 'else ';
MPRINT(EM_DIAGRAM):   put 'else ';
35561      put 'if NAME  = "' M '" then do;';
MPRINT(EM_DIAGRAM):   put 'if NAME  = "' M '" then do;';
35562      put '   ROLE  ="INPUT";';
MPRINT(EM_DIAGRAM):   put '   ROLE  ="INPUT";';
35563      if percentmiss>0 then put '   LEVEL ="BINARY";';
MPRINT(EM_DIAGRAM):   if percentmiss>0 then put '   LEVEL ="BINARY";';
35564      else put '   LEVEL ="UNARY";';
MPRINT(EM_DIAGRAM):   else put '   LEVEL ="UNARY";';
35565      put ' end;';
MPRINT(EM_DIAGRAM):   put ' end;';
35566      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: The file #LN00653 is:
      Filename=H:\746\Decision Tree test\Workspaces\EMWS1\Impt\CDELTA_TRAIN.sas,
      RECFM=V,LRECL=32767,File Size (bytes)=0,
      Last Modified=April 05, 2021 13:09:29 o'cloc,
      Create Time=April 05, 2021 13:09:29 o'cloc
 
NOTE: 156 records were written to the file #LN00653.
      The minimum record length was 4.
      The maximum record length was 42.
NOTE: There were 24 observations read from the data set EMWS1.IMPT_META.
NOTE: DATA statement used (Total process time):
      real time           0.02 seconds
      cpu time            0.00 seconds
 
 
35567      filename emflow "H:\746\Decision Tree test\Workspaces\EMWS1\Impt\EMFLOWSCORE.sas";
MPRINT(EM_DIAGRAM):    filename emflow "H:\746\Decision Tree test\Workspaces\EMWS1\Impt\EMFLOWSCORE.sas";
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Impt: Scoring DATA data;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
35568      *------------------------------------------------------------*;
35569      * Impt: Scoring DATA data;
35570      *------------------------------------------------------------*;
35571      data EMWS1.Impt_TRAIN
35572      / view=EMWS1.Impt_TRAIN
35573      ;
MPRINT(EM_DIAGRAM):   data EMWS1.Impt_TRAIN / view=EMWS1.Impt_TRAIN ;
35574      set EMWS1.Part_TRAIN
35575      ;
MPRINT(EM_DIAGRAM):   set EMWS1.Part_TRAIN ;
35576      %inc emflow;
NOTE: %INCLUDE (level 1) file EMFLOW is file H:\746\Decision Tree test\Workspaces\EMWS1\Impt\EMFLOWSCORE.sas.
35577     +*;
MPRINT(EM_DIAGRAM):   *;
35578     +*MOST FREQUENT VALUE (COUNT);
MPRINT(EM_DIAGRAM):   *MOST FREQUENT VALUE (COUNT);
35579     +*;
MPRINT(EM_DIAGRAM):   *;
35580     +label IMP_num_of_doors = 'Imputed: num-of-doors';
MPRINT(EM_DIAGRAM):   label IMP_num_of_doors = 'Imputed: num-of-doors';
35581     +IMP_num_of_doors = num_of_doors;
MPRINT(EM_DIAGRAM):   IMP_num_of_doors = num_of_doors;
35582     +if missing(num_of_doors) then IMP_num_of_doors = 4;
MPRINT(EM_DIAGRAM):   if missing(num_of_doors) then IMP_num_of_doors = 4;
35583     +*;
MPRINT(EM_DIAGRAM):   *;
35584     +*MEAN-MAX-MIN-MEDIAN-MIDRANGE AND ROBUST ESTIMATES;
MPRINT(EM_DIAGRAM):   *MEAN-MAX-MIN-MEDIAN-MIDRANGE AND ROBUST ESTIMATES;
35585     +*;
MPRINT(EM_DIAGRAM):   *;
35586     +format IMP_bore BEST12.0;
MPRINT(EM_DIAGRAM):   format IMP_bore BEST12.0;
35587     +label IMP_bore = 'Imputed bore';
MPRINT(EM_DIAGRAM):   label IMP_bore = 'Imputed bore';
35588     +IMP_bore = bore;
MPRINT(EM_DIAGRAM):   IMP_bore = bore;
35589     +if missing(bore) then IMP_bore = 3.3026530612;
MPRINT(EM_DIAGRAM):   if missing(bore) then IMP_bore = 3.3026530612;
35590     +format IMP_price BEST12.0;
MPRINT(EM_DIAGRAM):   format IMP_price BEST12.0;
35591     +label IMP_price = 'Imputed price';
MPRINT(EM_DIAGRAM):   label IMP_price = 'Imputed price';
35592     +IMP_price = price;
MPRINT(EM_DIAGRAM):   IMP_price = price;
35593     +if missing(price) then IMP_price = 12773.191919;
MPRINT(EM_DIAGRAM):   if missing(price) then IMP_price = 12773.191919;
35594     +format IMP_stroke BEST12.0;
MPRINT(EM_DIAGRAM):   format IMP_stroke BEST12.0;
35595     +label IMP_stroke = 'Imputed stroke';
MPRINT(EM_DIAGRAM):   label IMP_stroke = 'Imputed stroke';
35596     +IMP_stroke = stroke;
MPRINT(EM_DIAGRAM):   IMP_stroke = stroke;
35597     +if missing(stroke) then IMP_stroke = 3.2513265306;
MPRINT(EM_DIAGRAM):   if missing(stroke) then IMP_stroke = 3.2513265306;
35598     +*;
MPRINT(EM_DIAGRAM):   *;
35599     +*INDICATOR VARIABLES;
MPRINT(EM_DIAGRAM):   *INDICATOR VARIABLES;
35600     +*;
MPRINT(EM_DIAGRAM):   *;
35601     +label M_bore = "Imputation Indicator for bore";
MPRINT(EM_DIAGRAM):   label M_bore = "Imputation Indicator for bore";
35602     +if missing(bore) then M_bore = 1;
MPRINT(EM_DIAGRAM):   if missing(bore) then M_bore = 1;
35603     +else M_bore= 0;
MPRINT(EM_DIAGRAM):   else M_bore= 0;
35604     +label M_num_of_doors = "Imputation Indicator for num_of_doors";
MPRINT(EM_DIAGRAM):   label M_num_of_doors = "Imputation Indicator for num_of_doors";
35605     +if missing(num_of_doors) then M_num_of_doors = 1;
MPRINT(EM_DIAGRAM):   if missing(num_of_doors) then M_num_of_doors = 1;
35606     +else M_num_of_doors= 0;
MPRINT(EM_DIAGRAM):   else M_num_of_doors= 0;
35607     +label M_price = "Imputation Indicator for price";
MPRINT(EM_DIAGRAM):   label M_price = "Imputation Indicator for price";
35608     +if missing(price) then M_price = 1;
MPRINT(EM_DIAGRAM):   if missing(price) then M_price = 1;
35609     +else M_price= 0;
MPRINT(EM_DIAGRAM):   else M_price= 0;
35610     +label M_stroke = "Imputation Indicator for stroke";
MPRINT(EM_DIAGRAM):   label M_stroke = "Imputation Indicator for stroke";
35611     +if missing(stroke) then M_stroke = 1;
MPRINT(EM_DIAGRAM):   if missing(stroke) then M_stroke = 1;
35612     +else M_stroke= 0;
MPRINT(EM_DIAGRAM):   else M_stroke= 0;
NOTE: %INCLUDE (level 1) ending.
MPRINT(EM_DIAGRAM):   run;
35613      run;
 
NOTE: DATA STEP view saved on file EMWS1.IMPT_TRAIN.
NOTE: A stored DATA STEP view cannot run under a different operating system.
NOTE: DATA statement used (Total process time):
      real time           0.05 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_DIAGRAM):   quit;
35614      quit;
35615      filename emflow;
MPRINT(EM_DIAGRAM):   filename emflow;
NOTE: Fileref EMFLOW has been deassigned.
35616      filename emflow "H:\746\Decision Tree test\Workspaces\EMWS1\Impt\EMFLOWSCORE.sas";
MPRINT(EM_DIAGRAM):    filename emflow "H:\746\Decision Tree test\Workspaces\EMWS1\Impt\EMFLOWSCORE.sas";
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Impt: Scoring VALIDATE data;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
35617      *------------------------------------------------------------*;
35618      * Impt: Scoring VALIDATE data;
35619      *------------------------------------------------------------*;
35620      data EMWS1.Impt_VALIDATE
35621      / view=EMWS1.Impt_VALIDATE
35622      ;
MPRINT(EM_DIAGRAM):   data EMWS1.Impt_VALIDATE / view=EMWS1.Impt_VALIDATE ;
35623      set EMWS1.Part_VALIDATE
35624      ;
MPRINT(EM_DIAGRAM):   set EMWS1.Part_VALIDATE ;
35625      %inc emflow;
NOTE: %INCLUDE (level 1) file EMFLOW is file H:\746\Decision Tree test\Workspaces\EMWS1\Impt\EMFLOWSCORE.sas.
35626     +*;
MPRINT(EM_DIAGRAM):   *;
35627     +*MOST FREQUENT VALUE (COUNT);
MPRINT(EM_DIAGRAM):   *MOST FREQUENT VALUE (COUNT);
35628     +*;
MPRINT(EM_DIAGRAM):   *;
35629     +label IMP_num_of_doors = 'Imputed: num-of-doors';
MPRINT(EM_DIAGRAM):   label IMP_num_of_doors = 'Imputed: num-of-doors';
35630     +IMP_num_of_doors = num_of_doors;
MPRINT(EM_DIAGRAM):   IMP_num_of_doors = num_of_doors;
35631     +if missing(num_of_doors) then IMP_num_of_doors = 4;
MPRINT(EM_DIAGRAM):   if missing(num_of_doors) then IMP_num_of_doors = 4;
35632     +*;
MPRINT(EM_DIAGRAM):   *;
35633     +*MEAN-MAX-MIN-MEDIAN-MIDRANGE AND ROBUST ESTIMATES;
MPRINT(EM_DIAGRAM):   *MEAN-MAX-MIN-MEDIAN-MIDRANGE AND ROBUST ESTIMATES;
35634     +*;
MPRINT(EM_DIAGRAM):   *;
35635     +format IMP_bore BEST12.0;
MPRINT(EM_DIAGRAM):   format IMP_bore BEST12.0;
35636     +label IMP_bore = 'Imputed bore';
MPRINT(EM_DIAGRAM):   label IMP_bore = 'Imputed bore';
35637     +IMP_bore = bore;
MPRINT(EM_DIAGRAM):   IMP_bore = bore;
35638     +if missing(bore) then IMP_bore = 3.3026530612;
MPRINT(EM_DIAGRAM):   if missing(bore) then IMP_bore = 3.3026530612;
35639     +format IMP_price BEST12.0;
MPRINT(EM_DIAGRAM):   format IMP_price BEST12.0;
35640     +label IMP_price = 'Imputed price';
MPRINT(EM_DIAGRAM):   label IMP_price = 'Imputed price';
35641     +IMP_price = price;
MPRINT(EM_DIAGRAM):   IMP_price = price;
35642     +if missing(price) then IMP_price = 12773.191919;
MPRINT(EM_DIAGRAM):   if missing(price) then IMP_price = 12773.191919;
35643     +format IMP_stroke BEST12.0;
MPRINT(EM_DIAGRAM):   format IMP_stroke BEST12.0;
35644     +label IMP_stroke = 'Imputed stroke';
MPRINT(EM_DIAGRAM):   label IMP_stroke = 'Imputed stroke';
35645     +IMP_stroke = stroke;
MPRINT(EM_DIAGRAM):   IMP_stroke = stroke;
35646     +if missing(stroke) then IMP_stroke = 3.2513265306;
MPRINT(EM_DIAGRAM):   if missing(stroke) then IMP_stroke = 3.2513265306;
35647     +*;
MPRINT(EM_DIAGRAM):   *;
35648     +*INDICATOR VARIABLES;
MPRINT(EM_DIAGRAM):   *INDICATOR VARIABLES;
35649     +*;
MPRINT(EM_DIAGRAM):   *;
35650     +label M_bore = "Imputation Indicator for bore";
MPRINT(EM_DIAGRAM):   label M_bore = "Imputation Indicator for bore";
35651     +if missing(bore) then M_bore = 1;
MPRINT(EM_DIAGRAM):   if missing(bore) then M_bore = 1;
35652     +else M_bore= 0;
MPRINT(EM_DIAGRAM):   else M_bore= 0;
35653     +label M_num_of_doors = "Imputation Indicator for num_of_doors";
MPRINT(EM_DIAGRAM):   label M_num_of_doors = "Imputation Indicator for num_of_doors";
35654     +if missing(num_of_doors) then M_num_of_doors = 1;
MPRINT(EM_DIAGRAM):   if missing(num_of_doors) then M_num_of_doors = 1;
35655     +else M_num_of_doors= 0;
MPRINT(EM_DIAGRAM):   else M_num_of_doors= 0;
35656     +label M_price = "Imputation Indicator for price";
MPRINT(EM_DIAGRAM):   label M_price = "Imputation Indicator for price";
35657     +if missing(price) then M_price = 1;
MPRINT(EM_DIAGRAM):   if missing(price) then M_price = 1;
35658     +else M_price= 0;
MPRINT(EM_DIAGRAM):   else M_price= 0;
35659     +label M_stroke = "Imputation Indicator for stroke";
MPRINT(EM_DIAGRAM):   label M_stroke = "Imputation Indicator for stroke";
35660     +if missing(stroke) then M_stroke = 1;
MPRINT(EM_DIAGRAM):   if missing(stroke) then M_stroke = 1;
35661     +else M_stroke= 0;
MPRINT(EM_DIAGRAM):   else M_stroke= 0;
NOTE: %INCLUDE (level 1) ending.
MPRINT(EM_DIAGRAM):   run;
35662      run;
 
NOTE: DATA STEP view saved on file EMWS1.IMPT_VALIDATE.
NOTE: A stored DATA STEP view cannot run under a different operating system.
NOTE: DATA statement used (Total process time):
      real time           0.05 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_DIAGRAM):   quit;
35663      quit;
35664      filename emflow;
MPRINT(EM_DIAGRAM):   filename emflow;
NOTE: Fileref EMFLOW has been deassigned.
35665      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
35666      * Impt: Computing metadata for TRAIN data;
MPRINT(EM_DIAGRAM):   * Impt: Computing metadata for TRAIN data;
35667      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
 
NOTE: View EMWS1.IMPT_TRAIN.VIEW used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
 
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * &nodeid: Computing Metadata for TRAIN data;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   filename _delta "H:\746\Decision Tree test\Workspaces\EMWS1\Impt\CDELTA_TRAIN.sas";
MPRINT(EMADVISECOLUMNS):   proc display c=sashelp.emmeta.advisecolumns.scl;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    options validvarname=any;
MPRINT(EMADVISECOLUMNS):   proc contents data=EMWS1.Impt_TRAIN out=_tempAdvisor noprint;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):   options validvarname=V7;
MPRINT(EMADVISECOLUMNS):    data _null_;
MPRINT(EMADVISECOLUMNS):   dsid = open('EMWS1.Impt_TRAIN');
MPRINT(EMADVISECOLUMNS):   call symput('_dsidTable', strip(put(dsid, best.)));
MPRINT(EMADVISECOLUMNS):   if dsid then do;
MPRINT(EMADVISECOLUMNS):   call symput('_engineTable', attrc(dsid, 'ENGINE'));
MPRINT(EMADVISECOLUMNS):   dsid = close(dsid);
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    proc contents data=EMWS1.Impt_TRAIN out=WORK.M3RTZ7JB noprint;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M3RTZ7JB;
MPRINT(EMADVISECOLUMNS):   length NAME $ 64 TYPE $ 1 LABEL $ 200 FORMAT $ 36 INFORMAT $36 INDEX $ 1 INDEXTYPE $ 9;
MPRINT(EMADVISECOLUMNS):   label NAME =;
MPRINT(EMADVISECOLUMNS):   set WORK.M3RTZ7JB(keep=name type length label format formatl formatd informat informl informd idxusage rename=(type=itype));
MPRINT(EMADVISECOLUMNS):   if itype = 1 then type = 'N';
MPRINT(EMADVISECOLUMNS):   else type = 'C';
MPRINT(EMADVISECOLUMNS):   if formatl > 0 then do;
MPRINT(EMADVISECOLUMNS):   if format ne ' ' then format = strip(format)!!strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EMADVISECOLUMNS):   else format = strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if format ne '' then format = strip(format)!!'.';
MPRINT(EMADVISECOLUMNS):   if informl > 0 then do;
MPRINT(EMADVISECOLUMNS):   if informat ne ' ' then informat = strip(informat)!!strip(put(informl, best12.))!!'.'!!strip(put(informd, best12.));
MPRINT(EMADVISECOLUMNS):   else informat = strip(put(informl, best12.))!!'.'!!strip(put(informd, best12.));
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if informat ne '' then informat = strip(informat)!!'.';
MPRINT(EMADVISECOLUMNS):   if idxusage = 'NONE' then index ="N";
MPRINT(EMADVISECOLUMNS):   else index = "Y";
MPRINT(EMADVISECOLUMNS):   indextype = idxusage;
MPRINT(EMADVISECOLUMNS):   drop idxusage itype formatl formatd informl informd;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M3RTZ7JB;
MPRINT(EMADVISECOLUMNS):   length UNAME $64;
MPRINT(EMADVISECOLUMNS):   set WORK.M3RTZ7JB;
MPRINT(EMADVISECOLUMNS):   UNAME = upcase(NAME);
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    proc sort data=WORK.M1ECJG3E NOTHREADS;
MPRINT(EMADVISECOLUMNS):   by UNAME;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M1ECJG3E;
MPRINT(EMADVISECOLUMNS):   drop UNAME;
MPRINT(EMADVISECOLUMNS):   set WORK.M1ECJG3E;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M0XS932_(keep=NAME ATTR);
MPRINT(EMADVISECOLUMNS):   length ATTR $ 20;
MPRINT(EMADVISECOLUMNS):   set WORK.M1ECJG3E;
MPRINT(EMADVISECOLUMNS):   if level ne "INTERVAL" then do;
MPRINT(EMADVISECOLUMNS):   if order = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'ORDER';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if format ne ' ' and formattype = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'FORMATTYPE';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if role = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'ROLE';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if level = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'LEVEL';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if type = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'TYPE';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if index = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'INDEX';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if report = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'REPORT';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):   proc sort NOTHREADS;
MPRINT(EMADVISECOLUMNS):   by attr;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M1ECJG3E;
MPRINT(EMADVISECOLUMNS):   length NAME $64 ROLE $ 32 LEVEL $ 10 ORDER $ 8 CREATOR $32 FORMATTYPE $ 10 FAMILY $ 10 LOWERLIMIT 8 UPPERLIMIT 8 REPORT $1 DISTRIBUTION $ 20 COMMENT $64;
MPRINT(EMADVISECOLUMNS):   length levelAssigned 8 roleAssigned 8 PRICE 8;
MPRINT(EMADVISECOLUMNS):   set WORK.M1ECJG3E;
MPRINT(EMADVISECOLUMNS):   if formattype = ' ' then do;
MPRINT(EMADVISECOLUMNS):   if format ne ' ' then do;
MPRINT(EMADVISECOLUMNS):   if type = 'N' then do;
MPRINT(EMADVISECOLUMNS):   pos = indexc(format,'.1234567890');
MPRINT(EMADVISECOLUMNS):   if pos > 1 then tempfmt = substr(format,1, pos-1);
MPRINT(EMADVISECOLUMNS):   else tempfmt = ' ';
MPRINT(EMADVISECOLUMNS):   flen = length(tempfmt);
MPRINT(EMADVISECOLUMNS):   select;
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("DATE" "DAY" "DDMMYY" "DOWNAME" "JULDAY" "JULIAN" "MMDDYY" "MMDDYYD" "MMDDYYC" "MMDDYYN" "MMDDYYP" "MMDDYYS" "MONNAME" "MONTH" "MONYY" "NENGO" "QTR" "QTRR" "WEEKDATE" "WEEKDATX" "WEEKDAY" "WORDDATE" "WORDDATX"
"YEAR" "YYMMDD" "YYMON" "YYMMDDC" "YYMMDDD" "YYMMDDN" "YYMMDDP" "YYMMDDS" "EURDFDE" "NJDATE" "NLDATE" "EURDFDD" "EURDFDWN" "EURDFMN" "EURDFMY" "EURDFWK" "EURDFWKX" "EURDFWDX" "EURDFDN" "EURDFDE" )) formattype = 'DATE';
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("DATETIME" "EURDFDT" "TOD" )) formattype = "DATETIME";
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("HHMM" "HOUR" "MMSS" "TIME" "TIMEAMPM" )) formattype = "TIME";
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("COMMA" "COMMAX" "DOLLAR" "DOLLARX" "E" "FRACT" "NEGPAREN" "PERCENT")) formattype="QUANTITY";
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("BINARY" "HEX" "IB" "OCTAL" "PD" "PIB" "PK" "RB" "SSN" "Z" "ZD")) formattype = "CODING";
MPRINT(EMADVISECOLUMNS):   otherwise do;
MPRINT(EMADVISECOLUMNS):   formattype = "USER";
MPRINT(EMADVISECOLUMNS):   if substr(tempfmt, 1, 6)='NLDATE' then formattype = "DATE";
MPRINT(EMADVISECOLUMNS):   else if substr(tempfmt, 1, 6)='NLDATM' then formattype = "DATETIME";
MPRINT(EMADVISECOLUMNS):   else if substr(tempfmt, 1, 4)='NLTIM' then formattype = "TIME";
MPRINT(EMADVISECOLUMNS):   else if flen >= 4 then do;
MPRINT(EMADVISECOLUMNS):   str = substr(tempfmt,1,4);
MPRINT(EMADVISECOLUMNS):   if str in ("MMYY" "YYMM" "YYQR") then formattype ="DATE";
MPRINT(EMADVISECOLUMNS):   else if str = "S370" then formattype = "CODING";
MPRINT(EMADVISECOLUMNS):   else if str = "BEST" then formattype = "NUM";
MPRINT(EMADVISECOLUMNS):   drop str;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if flen >=3 and substr(tempfmt,1,3) = "YYQ" then formatType = "DATE";
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   drop flen tempfmt pos;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else do;
MPRINT(EMADVISECOLUMNS):   formatType = "CATEGORY";
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if formatType = "NUM" then do;
MPRINT(EMADVISECOLUMNS):   if index = "Y" then formatType = "DISCRETE";
MPRINT(EMADVISECOLUMNS):   else formatType = "QUANTITY";
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if level = ' ' then do;
MPRINT(EMADVISECOLUMNS):   if formatType in ("CATEGORY", "CODING", "ID") or type = "C" then level = "NOMINAL";
MPRINT(EMADVISECOLUMNS):   else level = "INTERVAL";
MPRINT(EMADVISECOLUMNS):   levelAssigned = 1;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else level = upcase(level);
MPRINT(EMADVISECOLUMNS):   if role = ' ' then do;
MPRINT(EMADVISECOLUMNS):   length name_prefix $8 _uname $64;
MPRINT(EMADVISECOLUMNS):   drop name_prefix _uname _freqflag;
MPRINT(EMADVISECOLUMNS):   retain _freqflag;
MPRINT(EMADVISECOLUMNS):   if LENGTH> 80 then ROLE = 'TEXT';
MPRINT(EMADVISECOLUMNS):   _uname = upcase(NAME);
MPRINT(EMADVISECOLUMNS):   select(_uname);
MPRINT(EMADVISECOLUMNS):   when('_PARTIND_') do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'ID';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   when('_WARN_') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_SEGMENT') do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'SEGMENT';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   when('_NODE_') do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'SEGMENT';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   when('EM_CLASSTARGET') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_VALUETARGET') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_PREDICTION') ROLE = 'PREDICT';
MPRINT(EMADVISECOLUMNS):   when('EM_PROBABILITY') ROLE = 'PREDICT';
MPRINT(EMADVISECOLUMNS):   when('EM_EVENTPROBABILITY') ROLE = 'PREDICT';
MPRINT(EMADVISECOLUMNS):   when('EM_CLASSIFICATION') ROLE = 'CLASSIFICATION';
MPRINT(EMADVISECOLUMNS):   when('EM_DECISION') ROLE = 'DECISION';
MPRINT(EMADVISECOLUMNS):   when('EM_PROFIT') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_LOSS') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_ROI') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('URI') ROLE = 'URL';
MPRINT(EMADVISECOLUMNS):   when('FILTERED') ROLE = 'TEXTLOC';
MPRINT(EMADVISECOLUMNS):   otherwise do;
MPRINT(EMADVISECOLUMNS):   if upcase(NAME) =: 'ZIP' then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'REJECTED';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   COMMENT = 'Rejected by: Exceed the maximum class level of %s';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if upcase(NAME) in('FREQ', 'FREQUENCY') then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'FREQ';
MPRINT(EMADVISECOLUMNS):   if TYPE = 'C' then ROLE = 'INPUT';
MPRINT(EMADVISECOLUMNS):   else if _freqflag =1 then ROLE='REJECTED';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else do;
MPRINT(EMADVISECOLUMNS):   name_prefix = scan(_uname, 1, '_');
MPRINT(EMADVISECOLUMNS):   if scan(_uname, 2, '_') = '' then name_prefix='';
MPRINT(EMADVISECOLUMNS):   if name_prefix in('F', 'I', 'U') then do;
The SAS System
 
MPRINT(EMADVISECOLUMNS):   ROLE = 'CLASSIFICATION';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if name_prefix in('P', 'V') then ROLE = 'PREDICT';
MPRINT(EMADVISECOLUMNS):   else if name_prefix in('R', 'RS', 'RT', 'RD', 'RDS', 'RDT', 'RA', 'RAS', 'RAT') then ROLE = 'RESIDUAL';
MPRINT(EMADVISECOLUMNS):   else if name_prefix ='D' then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'DECISION';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if name_prefix ='B' then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'SEGMENT';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if name_prefix in('EP', 'BP', 'CP', 'EL', 'CL', 'BL', 'W', 'ROI', 'IC') then ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   else do;
MPRINT(EMADVISECOLUMNS):   array _ROLE_ (19) $32 _TEMPORARY_ ('ASSESS','CLASSIFICATION','CENSOR', 'COST', 'CROSSID', 'DECISION', 'ID','INPUT', 'LABEL', 'MISSING','PREDICT','REFERRER','REJECTED', 'RESIDUAL','SEGMENT', 'SEQUENCE','TARGET', 'TEXT', 'TIMEID');
MPRINT(EMADVISECOLUMNS):   drop _found_ i;
MPRINT(EMADVISECOLUMNS):   _found_=0;
MPRINT(EMADVISECOLUMNS):   do i=1 to 19 until(_found_=1);
MPRINT(EMADVISECOLUMNS):   if index(_uname, trim(_ROLE_{i}))=1 then do;
MPRINT(EMADVISECOLUMNS):   ROLE=_ROLE_{i};
MPRINT(EMADVISECOLUMNS):   if ROLE = 'ID' then LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   else if ROLE = 'SEGMENT' then LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   else if ROLE = 'TIMEID' and TYPE='N' then LEVEL = 'INTERVAL';
MPRINT(EMADVISECOLUMNS):   _found_=1;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if length(_uname)>2 then do;
MPRINT(EMADVISECOLUMNS):   if substr(reverse(trim(_uname)), 1, 3) = 'DI_' then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'ID';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if ROLE='FREQ' then _freqflag=1;
MPRINT(EMADVISECOLUMNS):   else if ROLE = 'CLASSIFICATION' then LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   if symexist('RATEMKG_ROLE') then do;
MPRINT(EMADVISECOLUMNS):   if upcase(symget('RATEMKG_ROLE')) in('Y', 'YES') then do;
MPRINT(EMADVISECOLUMNS):   if _uname =: 'POLICY' then ROLE = 'POLICYID';
MPRINT(EMADVISECOLUMNS):   else if _uname in ('PARTITION', '_PARTIND_') then ROLE = 'PARTITION';
MPRINT(EMADVISECOLUMNS):   else if type = 'N' then do;
MPRINT(EMADVISECOLUMNS):   if _uname = 'EXPOSURE' then ROLE = 'EXPOSURE';
MPRINT(EMADVISECOLUMNS):   else if _uname = 'YEAR' then ROLE = 'YEAR';
MPRINT(EMADVISECOLUMNS):   else if _uname = 'WEIGHT' then ROLE = 'WEIGHT';
MPRINT(EMADVISECOLUMNS):   else if _uname = 'OFFSET' then ROLE = 'OFFSET';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if role = ' ' then do;
MPRINT(EMADVISECOLUMNS):   if formattype in('DATE', 'DATETIME', 'TIME') then role = 'TIMEID';
MPRINT(EMADVISECOLUMNS):   else role = 'INPUT';
MPRINT(EMADVISECOLUMNS):   roleAssigned = 1;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else role = upcase(role);
MPRINT(EMADVISECOLUMNS):   if REPORT = '' then REPORT = 'N';
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M1ECJG3E;
MPRINT(EMADVISECOLUMNS):   set WORK.M1ECJG3E;
MPRINT(EMADVISECOLUMNS):   label NAME = "Variable Name" TYPE = "Type" ROLE = "Role" LEVEL= "Measurement Level" ORDER= "Order" CREATOR= "Creator" FORMATTYPE= "Format Type" FAMILY= "Family" DISTRIBUTION= "Distribution" PRICE= "Price" LOWERLIMIT= "Lower
limit" UPPERLIMIT= "Upper Limit" REPORT= "Report" COMMENT= "Comment" INDEX= "Index" INDEXTYPE= "IndexType" LABEL= "Label" LENGTH= "Length";
MPRINT(EMADVISECOLUMNS):   drop levelAssigned roleAssigned;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   proc sort data=WORK.COLUMNMETA;
MPRINT(EM_DIAGRAM):   by NAME;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * &nodeid: Merge incoming metadata;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   proc contents data=EMWS1.Part_TRAIN noprint out=_temp2(keep=NAME);
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=_temp2;
MPRINT(EM_DIAGRAM):   by NAME;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=EMWS1.Part_CMeta_TRAIN out=_temp;
MPRINT(EM_DIAGRAM):   by NAME;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data EMWS1.Impt_CMeta_TRAIN;
MPRINT(EM_DIAGRAM):   merge WORK.COLUMNMETA(in=_a) _temp2(in=_b) _temp(drop=FORMAT INFORMAT LENGTH INDEX INDEXTYPE in=_c) end=_eof_;
MPRINT(EM_DIAGRAM):   by NAME;
MPRINT(EM_DIAGRAM):   if (^_a and _b) or (^_c and _a and _b) then delete;
MPRINT(EM_DIAGRAM):   if ^_b then CREATOR = "Impt";
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Impt: Apply Delta Code;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   else if NAME = "M_Risk " then do;
MPRINT(EM_DIAGRAM):   ROLE ="INPUT";
MPRINT(EM_DIAGRAM):   LEVEL ="UNARY";
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if NAME = "M_aspiration " then do;
MPRINT(EM_DIAGRAM):   ROLE ="INPUT";
MPRINT(EM_DIAGRAM):   LEVEL ="UNARY";
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if NAME = "M_body_style " then do;
MPRINT(EM_DIAGRAM):   ROLE ="INPUT";
MPRINT(EM_DIAGRAM):   LEVEL ="UNARY";
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   if NAME = "bore" then delete;
MPRINT(EM_DIAGRAM):   else if NAME = "IMP_bore" then do;
MPRINT(EM_DIAGRAM):   ROLE = "INPUT" ;
MPRINT(EM_DIAGRAM):   FAMILY = "" ;
MPRINT(EM_DIAGRAM):   REPORT = "N" ;
MPRINT(EM_DIAGRAM):   LEVEL = "INTERVAL" ;
MPRINT(EM_DIAGRAM):   ORDER = "" ;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if NAME = "M_bore " then do;
MPRINT(EM_DIAGRAM):   ROLE ="INPUT";
MPRINT(EM_DIAGRAM):   LEVEL ="BINARY";
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if NAME = "M_city_mpg " then do;
MPRINT(EM_DIAGRAM):   ROLE ="INPUT";
MPRINT(EM_DIAGRAM):   LEVEL ="UNARY";
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if NAME = "M_compression_ratio " then do;
MPRINT(EM_DIAGRAM):   ROLE ="INPUT";
MPRINT(EM_DIAGRAM):   LEVEL ="UNARY";
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if NAME = "M_curb_weight " then do;
MPRINT(EM_DIAGRAM):   ROLE ="INPUT";
MPRINT(EM_DIAGRAM):   LEVEL ="UNARY";
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if NAME = "M_drive_wheels " then do;
MPRINT(EM_DIAGRAM):   ROLE ="INPUT";
MPRINT(EM_DIAGRAM):   LEVEL ="UNARY";
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if NAME = "M_engine_location " then do;
MPRINT(EM_DIAGRAM):   ROLE ="INPUT";
MPRINT(EM_DIAGRAM):   LEVEL ="UNARY";
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if NAME = "M_engine_size " then do;
MPRINT(EM_DIAGRAM):   ROLE ="INPUT";
MPRINT(EM_DIAGRAM):   LEVEL ="UNARY";
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if NAME = "M_engine_type " then do;
MPRINT(EM_DIAGRAM):   ROLE ="INPUT";
MPRINT(EM_DIAGRAM):   LEVEL ="UNARY";
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if NAME = "M_fuel_system " then do;
MPRINT(EM_DIAGRAM):   ROLE ="INPUT";
MPRINT(EM_DIAGRAM):   LEVEL ="UNARY";
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if NAME = "M_fuel_type " then do;
MPRINT(EM_DIAGRAM):   ROLE ="INPUT";
MPRINT(EM_DIAGRAM):   LEVEL ="UNARY";
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if NAME = "M_height " then do;
MPRINT(EM_DIAGRAM):   ROLE ="INPUT";
MPRINT(EM_DIAGRAM):   LEVEL ="UNARY";
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if NAME = "M_highway_mpg " then do;
MPRINT(EM_DIAGRAM):   ROLE ="INPUT";
MPRINT(EM_DIAGRAM):   LEVEL ="UNARY";
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if NAME = "M_horsepower " then do;
MPRINT(EM_DIAGRAM):   ROLE ="INPUT";
MPRINT(EM_DIAGRAM):   LEVEL ="UNARY";
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if NAME = "M_length " then do;
MPRINT(EM_DIAGRAM):   ROLE ="INPUT";
MPRINT(EM_DIAGRAM):   LEVEL ="UNARY";
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if NAME = "M_num_of_cylinders " then do;
MPRINT(EM_DIAGRAM):   ROLE ="INPUT";
MPRINT(EM_DIAGRAM):   LEVEL ="UNARY";
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   if NAME = "num_of_doors" then delete;
MPRINT(EM_DIAGRAM):   else if NAME = "IMP_num_of_doors" then do;
MPRINT(EM_DIAGRAM):   ROLE = "INPUT" ;
MPRINT(EM_DIAGRAM):   FAMILY = "" ;
MPRINT(EM_DIAGRAM):   REPORT = "N" ;
MPRINT(EM_DIAGRAM):   LEVEL = "NOMINAL" ;
MPRINT(EM_DIAGRAM):   ORDER = "" ;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if NAME = "M_num_of_doors " then do;
MPRINT(EM_DIAGRAM):   ROLE ="INPUT";
MPRINT(EM_DIAGRAM):   LEVEL ="BINARY";
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if NAME = "M_peak_rpm " then do;
MPRINT(EM_DIAGRAM):   ROLE ="INPUT";
MPRINT(EM_DIAGRAM):   LEVEL ="UNARY";
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   if NAME = "price" then delete;
MPRINT(EM_DIAGRAM):   else if NAME = "IMP_price" then do;
MPRINT(EM_DIAGRAM):   ROLE = "INPUT" ;
MPRINT(EM_DIAGRAM):   FAMILY = "" ;
MPRINT(EM_DIAGRAM):   REPORT = "N" ;
MPRINT(EM_DIAGRAM):   LEVEL = "INTERVAL" ;
MPRINT(EM_DIAGRAM):   ORDER = "" ;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if NAME = "M_price " then do;
MPRINT(EM_DIAGRAM):   ROLE ="INPUT";
MPRINT(EM_DIAGRAM):   LEVEL ="BINARY";
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   if NAME = "stroke" then delete;
MPRINT(EM_DIAGRAM):   else if NAME = "IMP_stroke" then do;
MPRINT(EM_DIAGRAM):   ROLE = "INPUT" ;
MPRINT(EM_DIAGRAM):   FAMILY = "" ;
MPRINT(EM_DIAGRAM):   REPORT = "N" ;
MPRINT(EM_DIAGRAM):   LEVEL = "INTERVAL" ;
MPRINT(EM_DIAGRAM):   ORDER = "" ;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if NAME = "M_stroke " then do;
MPRINT(EM_DIAGRAM):   ROLE ="INPUT";
MPRINT(EM_DIAGRAM):   LEVEL ="BINARY";
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if NAME = "M_wheel_base " then do;
MPRINT(EM_DIAGRAM):   ROLE ="INPUT";
MPRINT(EM_DIAGRAM):   LEVEL ="UNARY";
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if NAME = "M_width " then do;
MPRINT(EM_DIAGRAM):   ROLE ="INPUT";
MPRINT(EM_DIAGRAM):   LEVEL ="UNARY";
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   filename _delta;
NOTE: View EMWS1.IMPT_TRAIN.VIEW used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
 
NOTE: View EMWS1.IMPT_VALIDATE.VIEW used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
 
MPRINT(EM_DIAGRAM):    proc printto;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   call symput('NLDATE', strip(put(date(), NLDATE.)));
MPRINT(EM_DIAGRAM):   call symput('NLTIME', strip(put(datetime(), NLTIME.)));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   nldate= sasmsg("sashelp.dmine", "log_date_note", 'N', "April 05, 2021" );
MPRINT(EM_DIAGRAM):   nltime= sasmsg("sashelp.dmine", "log_time_note", 'N', "13:09:31 o'clock" );
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "* Report Log";
MPRINT(EM_DIAGRAM):   put nldate;
MPRINT(EM_DIAGRAM):   put nltime;
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   run;
*------------------------------------------------------------*
* Report Log
Date:                April 05, 2021
Time:                13:09:31 o'clock
*------------------------------------------------------------*
MPRINT(EM_DIAGRAM):    filename O0OGTP53 "H:\746\Decision Tree test\Workspaces\EMWS1\Impt\EMREPORT.out" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):   proc printto print=O0OGTP53 new;
MPRINT(EM_DIAGRAM):   run;
36170      %let _nimpute = 0;
36171      data EMWS1.Impt_RESULT;
MPRINT(EM_DIAGRAM):    data EMWS1.Impt_RESULT;
36172      label NAME = "%sysfunc(sasmsg(sashelp.dmine, meta_name_vlabel,        NOQUOTE))" METHOD = "%sysfunc(sasmsg(sashelp.dmine, rpt_imputemethod_vlabel, NOQUOTE))" IMPUTED = "%sysfunc(sasmsg(sashelp.dmine, rpt_imputedvar_vlabel,   NOQUOTE))" INDICATOR
36172    !  =
36173         "%sysfunc(sasmsg(sashelp.dmine, rpt_indicatorvar_vlabel, NOQUOTE))" VALUE = "%sysfunc(sasmsg(sashelp.dmine, rpt_imputevalue_vlabel,  NOQUOTE))" ROLE = "%sysfunc(sasmsg(sashelp.dmine, meta_role_vlabel,        NOQUOTE))" LEVEL =
36174         "%sysfunc(sasmsg(sashelp.dmine, meta_level_vlabel,       NOQUOTE))" LABEL = "%sysfunc(sasmsg(sashelp.dmine, meta_label_vlabel,       NOQUOTE))" TRAIN = "%sysfunc(sasmsg(sashelp.dmine, rpt_missingcount_vlabel, NOQUOTE, TRAIN))";
MPRINT(EM_DIAGRAM):   label NAME = "Variable Name" METHOD = "Impute Method" IMPUTED = "Imputed Variable" INDICATOR = "Indicator Variable" VALUE = "Impute Value" ROLE = "Role" LEVEL = "Measurement Level" LABEL = "Label" TRAIN = "Number of Missing for
TRAIN";
36175      set EMWS1.Impt_META(where=(IMPUTED ne '') keep=NAME METHOD IMP M VALUE ROLE NMISS LEVEL LABEL rename=(IMP=IMPUTED M=INDICATOR NMISS=TRAIN)) end=eof;
MPRINT(EM_DIAGRAM):   set EMWS1.Impt_META(where=(IMPUTED ne '') keep=NAME METHOD IMP M VALUE ROLE NMISS LEVEL LABEL rename=(IMP=IMPUTED M=INDICATOR NMISS=TRAIN)) end=eof;
36176      if eof then call symput('_nimpute', '1');
MPRINT(EM_DIAGRAM):   if eof then call symput('_nimpute', '1');
36177      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 4 observations read from the data set EMWS1.IMPT_META.
      WHERE IMPUTED not = ' ';
NOTE: The data set EMWS1.IMPT_RESULT has 4 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.05 seconds
      cpu time            0.01 seconds
 
 
36178      proc print data=EMWS1.Impt_RESULT(obs=500) label noobs;
MPRINT(EM_DIAGRAM):    proc print data=EMWS1.Impt_RESULT(obs=500) label noobs;
36179      title9 "%sysfunc(sasmsg(sashelp.dmine, rpt_imputationsummary_title, NOQUOTE))";
MPRINT(EM_DIAGRAM):   title9 "Imputation Summary";
36180      title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_numberobs_title,         NOQUOTE))";
MPRINT(EM_DIAGRAM):   title10 "Number Of Observations";
MPRINT(EM_DIAGRAM):   run;
36181      run;
 
NOTE: There were 4 observations read from the data set EMWS1.IMPT_RESULT.
NOTE: The PROCEDURE PRINT printed page 10.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
36182      proc freq data=EMWS1.Impt_RESULT noprint;
MPRINT(EM_DIAGRAM):    proc freq data=EMWS1.Impt_RESULT noprint;
36183      table train /out=WORK.ImptSUMMARY nocum;
MPRINT(EM_DIAGRAM):   table train /out=WORK.ImptSUMMARY nocum;
36184      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 4 observations read from the data set EMWS1.IMPT_RESULT.
NOTE: The data set WORK.IMPTSUMMARY has 2 observations and 3 variables.
NOTE: PROCEDURE FREQ used (Total process time):
      real time           0.02 seconds
      cpu time            0.00 seconds
 
 
36185      proc sort data=WORK.ImptSUMMARY NOTHREADS;
MPRINT(EM_DIAGRAM):   proc sort data=WORK.ImptSUMMARY NOTHREADS;
36186      by descending TRAIN;
MPRINT(EM_DIAGRAM):   by descending TRAIN;
36187      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 2 observations read from the data set WORK.IMPTSUMMARY.
NOTE: The data set WORK.IMPTSUMMARY has 2 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
36188      proc print data=WORK.ImptSUMMARY(obs=100) label;
MPRINT(EM_DIAGRAM):   proc print data=WORK.ImptSUMMARY(obs=100) label;
36189      label COUNT = "%sysfunc(sasmsg(sashelp.dmine, rpt_varcount_vlabel,  NOQUOTE))" PERCENT = "%sysfunc(sasmsg(sashelp.dmine, rpt_varpercent_vlabel,  NOQUOTE))";
MPRINT(EM_DIAGRAM):   label COUNT = "Number of Variables" PERCENT = "Percent of Variables";
36190      title9 ' ';
MPRINT(EM_DIAGRAM):   title9 ' ';
36191      title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_missingvardistribution_title, NOQUOTE))";
MPRINT(EM_DIAGRAM):   title10 "Variable Distribution Training Data";
MPRINT(EM_DIAGRAM):   run;
36192      run;
 
NOTE: There were 2 observations read from the data set WORK.IMPTSUMMARY.
NOTE: The PROCEDURE PRINT printed page 11.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
36193      data EMWS1.Impt_EMSCOREVAR;
MPRINT(EM_DIAGRAM):    data EMWS1.Impt_EMSCOREVAR;
36194      length Name $32 formula $70 file $200;
MPRINT(EM_DIAGRAM):   length Name $32 formula $70 file $200;
36195      keep NAME Formula file;
MPRINT(EM_DIAGRAM):   keep NAME Formula file;
36196      set EMWS1.Impt_META end=eof;
MPRINT(EM_DIAGRAM):   set EMWS1.Impt_META end=eof;
36197      *set EMWS1.Impt_RESULT end=eof;
MPRINT(EM_DIAGRAM):   *set EMWS1.Impt_RESULT end=eof;
36198      if M ne '' then do;
MPRINT(EM_DIAGRAM):   if M ne '' then do;
36199      NAME= M;
MPRINT(EM_DIAGRAM):   NAME= M;
36200      file="IMPUTECODE\"!!strip(NAME)!!'.sas';
MPRINT(EM_DIAGRAM):   file="IMPUTECODE\"!!strip(NAME)!!'.sas';
36201      output;
MPRINT(EM_DIAGRAM):   output;
36202      end;
MPRINT(EM_DIAGRAM):   end;
36203      if IMP ne '' then do;
MPRINT(EM_DIAGRAM):   if IMP ne '' then do;
36204      NAME= IMP;
MPRINT(EM_DIAGRAM):   NAME= IMP;
36205      file="IMPUTECODE\"!!strip(NAME)!!'.sas';
MPRINT(EM_DIAGRAM):   file="IMPUTECODE\"!!strip(NAME)!!'.sas';
36206      output;
MPRINT(EM_DIAGRAM):   output;
36207      end;
MPRINT(EM_DIAGRAM):   end;
36208      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: Variable formula is uninitialized.
NOTE: There were 24 observations read from the data set EMWS1.IMPT_META.
NOTE: The data set EMWS1.IMPT_EMSCOREVAR has 28 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.11 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_DIAGRAM):    proc printto;
MPRINT(EM_DIAGRAM):   run;
