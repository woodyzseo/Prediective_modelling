*------------------------------------------------------------*
User:                301152869
Date:                April 05, 2021
Time:                13:13:41 o'clock
Site:                70104631
Platform:            W32_8PRO
Maintenance Release: 9.04.01M2P072314
EM Version:          13.2
* 
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   call symput('NLDATE', strip(put(date(), NLDATE.)));
MPRINT(EM_DIAGRAM):   call symput('NLTIME', strip(put(datetime(), NLTIME.)));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   nldate= sasmsg("sashelp.dmine", "log_date_note", 'N', "April 05, 2021" );
MPRINT(EM_DIAGRAM):   nltime= sasmsg("sashelp.dmine", "log_time_note", 'N', "13:13:24 o'clock"
);
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "* Training Log";
MPRINT(EM_DIAGRAM):   put nldate;
MPRINT(EM_DIAGRAM):   put nltime;
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   run;
*------------------------------------------------------------*
* Training Log
Date:                April 05, 2021
Time:                13:13:24 o'clock
*------------------------------------------------------------*
MPRINT(EM_DIAGRAM):    filename O1PU8HKI "H:\746\Decision Tree
test\Workspaces\EMWS1\Neural\EMTRAIN.out" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):   proc printto print=O1PU8HKI new;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _LOG "H:\746\Decision Tree
test\Workspaces\EMWS1\Neural\EMLOG.log" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   call symput('NLDATE', strip(put(date(), NLDATE.)));
MPRINT(EM_DIAGRAM):   call symput('NLTIME', strip(put(datetime(), NLTIME.)));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   nldate= sasmsg("sashelp.dmine", "log_date_note", 'N', "April 05, 2021" );
MPRINT(EM_DIAGRAM):   nltime= sasmsg("sashelp.dmine", "log_time_note", 'N', "13:13:24 o'clock"
);
MPRINT(EM_DIAGRAM):   file _LOG;
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "User:                301152869";
MPRINT(EM_DIAGRAM):   put nldate;
MPRINT(EM_DIAGRAM):   put nltime;
MPRINT(EM_DIAGRAM):   put "Site:                70104631";
MPRINT(EM_DIAGRAM):   put "Platform:            W32_8PRO";
MPRINT(EM_DIAGRAM):   put "Maintenance Release: 9.04.01M2P072314";
MPRINT(EM_DIAGRAM):   put "EM Version:          13.2";
MPRINT(EM_DIAGRAM):   put "* ";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _LOGIN "H:\746\Decision Tree
test\Workspaces\EMWS1\Neural\EMTRAIN.log" encoding="UTF-8" NOBOM;
MPRINT(EM_COPYFILE):   data _null_;
MPRINT(EM_COPYFILE):   length line $20000;
MPRINT(EM_COPYFILE):   file _LOG MOD lrecl=20000;
MPRINT(EM_COPYFILE):   fid=fopen("_LOGIN",'i',20000,'v');
MPRINT(EM_COPYFILE):   if fid > 0 then do;
MPRINT(EM_COPYFILE):   do while(^fread(fid));
MPRINT(EM_COPYFILE):   rlen = frlen(fid);
MPRINT(EM_COPYFILE):   rc= fget(fid,line,20000);
MPRINT(EM_COPYFILE):   start = length(line)-length(left(line))+1;
MPRINT(EM_COPYFILE):   line=strip(line);
MPRINT(EM_COPYFILE):   put @start line;
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   if fid > 0 then rc=fclose(fid);
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   run;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   filename _LOGIN;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   file _LOG mod;
MPRINT(EM_DIAGRAM):   put _page_;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   filename _LOGIN "H:\746\Decision Tree
test\Workspaces\EMWS1\Neural\EMSCORE.log" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   file _LOG mod;
MPRINT(EM_DIAGRAM):   put _page_;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _LOGIN "H:\746\Decision Tree
test\Workspaces\EMWS1\Neural\EMREPORT.log" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   filename _LOGIN;
MPRINT(EM_DIAGRAM):    filename _LOG;
MPRINT(EM_DIAGRAM):    filename _OUT "H:\746\Decision Tree
test\Workspaces\EMWS1\Neural\EMOUTPUT.out" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   call symput('NLDATE', strip(put(date(), NLDATE.)));
MPRINT(EM_DIAGRAM):   call symput('NLTIME', strip(put(datetime(), NLTIME.)));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   nldate= sasmsg("sashelp.dmine", "log_date_note", 'N', "April 05, 2021" );
MPRINT(EM_DIAGRAM):   nltime= sasmsg("sashelp.dmine", "log_time_note", 'N', "13:13:24 o'clock"
);
MPRINT(EM_DIAGRAM):   file _OUT;
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "User:                301152869";
MPRINT(EM_DIAGRAM):   put nldate;
MPRINT(EM_DIAGRAM):   put nltime;
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "* Training Output";
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _OUTIN "H:\746\Decision Tree
test\Workspaces\EMWS1\Neural\EMTRAIN.out" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):   ;
MPRINT(EM_COPYFILE):   data _null_;
MPRINT(EM_COPYFILE):   length line $20000;
MPRINT(EM_COPYFILE):   file _OUT MOD lrecl=20000;
MPRINT(EM_COPYFILE):   fid=fopen("_OUTIN",'i',20000,'v');
MPRINT(EM_COPYFILE):   if fid > 0 then do;
MPRINT(EM_COPYFILE):   do while(^fread(fid));
MPRINT(EM_COPYFILE):   rlen = frlen(fid);
MPRINT(EM_COPYFILE):   rc= fget(fid,line,20000);
MPRINT(EM_COPYFILE):   start = length(line)-length(left(line))+1;
MPRINT(EM_COPYFILE):   line=strip(line);
MPRINT(EM_COPYFILE):   put @start line;
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   if fid > 0 then rc=fclose(fid);
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   run;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   filename _OUTIN;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   file _OUT mod;
MPRINT(EM_DIAGRAM):   put _page_;
MPRINT(EM_DIAGRAM):   put // "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "* Score Output";
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _OUTIN "H:\746\Decision Tree
test\Workspaces\EMWS1\Neural\EMSCORE.out" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   filename _OUTIN;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   file _OUT mod;
MPRINT(EM_DIAGRAM):   put _page_;
MPRINT(EM_DIAGRAM):   put // "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "* Report Output";
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _OUTIN "H:\746\Decision Tree
test\Workspaces\EMWS1\Neural\EMREPORT.out" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   filename _OUTIN;
MPRINT(EM_DIAGRAM):    filename _OUT;
MPRINT(EM_DIAGRAM):    filename _emtool_ 'H:\746\Decision Tree
test\Workspaces\EMWS1\Neural\EMRUNSTATUS.xml' encoding="UTF-8" NOBOM;
60166      proc freq data=EMWS1.Neural_VariableSet noprint;
MPRINT(EM_DIAGRAM):    proc freq data=EMWS1.Neural_VariableSet noprint;
60167      table ROLE*LEVEL/out=WORK.NeuralMETA;
MPRINT(EM_DIAGRAM):   table ROLE*LEVEL/out=WORK.NeuralMETA;
60168      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 31 observations read from the data set EMWS1.NEURAL_VARIABLESET.
NOTE: The data set WORK.NEURALMETA has 6 observations and 4 variables.
NOTE: PROCEDURE FREQ used (Total process time):
      real time           0.04 seconds
      cpu time            0.01 seconds
 
 
60169      proc print data=WORK.NeuralMETA label noobs;
MPRINT(EM_DIAGRAM):   proc print data=WORK.NeuralMETA label noobs;
60170      var ROLE LEVEL COUNT;
MPRINT(EM_DIAGRAM):   var ROLE LEVEL COUNT;
60171      label ROLE = "%sysfunc(sasmsg(sashelp.dmine, meta_role_vlabel, NOQUOTE))" LEVEL =
60171    ! "%sysfunc(sasmsg(sashelp.dmine, meta_level_vlabel, NOQUOTE))" COUNT =
60171    ! "%sysfunc(sasmsg(sashelp.dmine, rpt_count_vlabel, NOQUOTE))";
MPRINT(EM_DIAGRAM):   label ROLE = "Role" LEVEL = "Measurement Level" COUNT = "Frequency
Count";
60172      title9 ' ';
MPRINT(EM_DIAGRAM):   title9 ' ';
60173      title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_varSummary_title  , NOQUOTE))";
MPRINT(EM_DIAGRAM):   title10 "Variable Summary";
MPRINT(EM_DIAGRAM):   run;
60174      run;
 
NOTE: There were 6 observations read from the data set WORK.NEURALMETA.
NOTE: The PROCEDURE PRINT printed page 21.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
60175      title10;
MPRINT(EM_DIAGRAM):   title10;
60176      %let EMNORLEN = %DMNORLEN;
MPRINT(EM_DIAGRAM):
EMWS1.Impt_TRAIN EMWS1.Impt_TRAIN
EMWS1.Impt_TRAIN EMWS1.Impt_TRAIN EMWS1 Impt_TRAIN
EMWS1.Impt_TRAIN EMWS1.Impt_TRAIN
EMWS1.Impt_TRAIN EMWS1.Impt_TRAIN EMWS1 Impt_TRAIN
MPRINT(EM_DIAGRAM):    proc dmdb data=EMWS1.Impt_TRAIN
classout=WORK._DMDBCLASSTARGET(keep=NAME NRAW CRAW LEVEL FREQUENCY NMISSPERCENT);
MPRINT(EM_DIAGRAM):   class Risk(DESC) ;
MPRINT(EM_DIAGRAM):   run;
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL _INIT >>
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL setMetaData >>
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL next >>
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL setMetaData >>
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL next >>
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL _term >>
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   set WORK._DMDBCLASSTARGET;
MPRINT(EM_DIAGRAM):   where ^(NRAW eq . and CRAW eq '') and NAME="Risk";
MPRINT(EM_DIAGRAM):   if _N_=1 then call symput('_newevent', strip(LEVEL));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=WORK._DMDBCLASSTARGET out=_TEMPCLASS(keep=LEVEL FREQUENCY
NMISSPERCENT rename=(LEVEL=Risk));
MPRINT(EM_DIAGRAM):   by LEVEL;
MPRINT(EM_DIAGRAM):   where ^(NRAW eq . and CRAW eq '') and NAME="Risk";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data _TEMPCLASS;
MPRINT(EM_DIAGRAM):   set _TEMPCLASS;
MPRINT(EM_DIAGRAM):   NMISSPERCENT= NMISSPERCENT/100;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data _sortedDecData;
MPRINT(EM_DIAGRAM):   set EMWS1.Neural_Risk_DD;
MPRINT(EM_DIAGRAM):   _levelorder_=_N_;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=_sortedDecdata;
MPRINT(EM_DIAGRAM):   by Risk;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   merge _TEMPCLASS(in=_a) _sortedDecdata(in=_b);
MPRINT(EM_DIAGRAM):   by Risk;
MPRINT(EM_DIAGRAM):   if (_a and ^_b) or (^_a and _b) then call symput('_emresetDec', '1');
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data EMWS1.Neural_Risk_DD;
MPRINT(EM_DIAGRAM):   set EMWS1.Neural_Risk_DD;
MPRINT(EM_DIAGRAM):   _levelorder_=_N_;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=EMWS1.Neural_Risk_DD;
MPRINT(EM_DIAGRAM):   by Risk;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data EMWS1.Neural_Risk_DD;
MPRINT(EM_DIAGRAM):   merge EMWS1.Neural_Risk_DD _TEMPCLASS(rename=(NMISSPERCENT=TRAINPRIOR
FREQUENCY=COUNT));
MPRINT(EM_DIAGRAM):   by Risk;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=EMWS1.Neural_Risk_DD
out=EMWS1.Neural_Risk_DD(drop=_levelorder_);
MPRINT(EM_DIAGRAM):   by _levelorder_;
MPRINT(EM_DIAGRAM):   run;
60223      data WORK.Neural_EVENT(KEEP=VARIABLE LABEL LEVEL EVENT NUMLEVELS ORDER);
MPRINT(EM_DIAGRAM):    data WORK.Neural_EVENT(KEEP=VARIABLE LABEL LEVEL EVENT NUMLEVELS ORDER);
60224      length ORDER $20;
MPRINT(EM_DIAGRAM):   length ORDER $20;
60225      label VARIABLE = "%sysfunc(sasmsg(sashelp.dmine, rpt_target_vlabel,  NOQUOTE))"
60225    ! EVENT = "%sysfunc(sasmsg(sashelp.dmine, assmt_event_vlabel, NOQUOTE))" NUMLEVELS =
60225    ! "%sysfunc(sasmsg(sashelp.dmine, rpt_numcat_vlabel, NOQUOTE))" LEVEL =
60226         "%sysfunc(sasmsg(sashelp.dmine, meta_level_vlabel, NOQUOTE))" ORDER =
60226    ! "%sysfunc(sasmsg(sashelp.dmine, meta_order_vlabel, NOQUOTE))" LABEL =
60226    ! "%sysfunc(sasmsg(sashelp.dmine, meta_label_vlabel, NOQUOTE))";
MPRINT(EM_DIAGRAM):   label VARIABLE = "Target" EVENT = "Event" NUMLEVELS = "Number of Levels"
LEVEL = "Measurement Level" ORDER = "Order" LABEL = "Label";
60227      set EMWS1.NEURAL_RISK_DM( where=(_TYPE_="TARGET"));
MPRINT(EM_DIAGRAM):   set EMWS1.NEURAL_RISK_DM( where=(_TYPE_="TARGET"));
60228      NumLevels=2;
MPRINT(EM_DIAGRAM):   NumLevels=2;
60229      select(upcase(ORDER));
MPRINT(EM_DIAGRAM):   select(upcase(ORDER));
60230      when('DESC') ORDER = 'Descending';
MPRINT(EM_DIAGRAM):   when('DESC') ORDER = 'Descending';
60231      when('ASC') ORDER = 'Ascending';
MPRINT(EM_DIAGRAM):   when('ASC') ORDER = 'Ascending';
60232      when('FMTDESC') ORDER = 'Formatted Descending';
MPRINT(EM_DIAGRAM):   when('FMTDESC') ORDER = 'Formatted Descending';
60233      when('FMTASC') ORDER = 'Formatted Ascending';
MPRINT(EM_DIAGRAM):   when('FMTASC') ORDER = 'Formatted Ascending';
60234      otherwise ORDER = 'Descending';
MPRINT(EM_DIAGRAM):   otherwise ORDER = 'Descending';
60235      end;
MPRINT(EM_DIAGRAM):   end;
60236      output;
MPRINT(EM_DIAGRAM):   output;
60237      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 1 observations read from the data set EMWS1.NEURAL_RISK_DM.
      WHERE _TYPE_='TARGET';
NOTE: The data set WORK.NEURAL_EVENT has 1 observations and 6 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
60238      title9 ' ';
MPRINT(EM_DIAGRAM):   title9 ' ';
60239      proc print data=WORK.Neural_EVENT noobs label;
MPRINT(EM_DIAGRAM):   proc print data=WORK.Neural_EVENT noobs label;
60240      var VARIABLE EVENT LEVEL NUMLEVELS ORDER LABEL;
MPRINT(EM_DIAGRAM):   var VARIABLE EVENT LEVEL NUMLEVELS ORDER LABEL;
60241      title9 ' ';
MPRINT(EM_DIAGRAM):   title9 ' ';
60242      title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_modelEvent_title  , NOQUOTE))";
MPRINT(EM_DIAGRAM):   title10 "Model Events";
MPRINT(EM_DIAGRAM):   run;
60243      run;
 
NOTE: There were 1 observations read from the data set WORK.NEURAL_EVENT.
NOTE: The PROCEDURE PRINT printed page 22.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
60244      title10;
MPRINT(EM_DIAGRAM):   title10;
"No decisions defined for target "Risk"."
60245      proc print data = EMWS1.Neural_Risk_DM noobs label;
MPRINT(EM_DIAGRAM):    proc print data = EMWS1.Neural_Risk_DM noobs label;
60246      var _type_ variable label;
MPRINT(EM_DIAGRAM):   var _type_ variable label;
60247      where _type_ ^in('MATRIX', 'DECISION', 'TRAINPRIOR', 'DATAPRIOR', 'DECPRIOR');
MPRINT(EM_DIAGRAM):   where _type_ ^in('MATRIX', 'DECISION', 'TRAINPRIOR', 'DATAPRIOR',
'DECPRIOR');
60248      label _TYPE_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_type_vlabel,     NOQUOTE))"
60248    ! VARIABLE = "%sysfunc(sasmsg(sashelp.dmine, rpt_variable_vlabel, NOQUOTE))" LABEL =
60248    ! "%sysfunc(sasmsg(sashelp.dmine, meta_label_vlabel, NOQUOTE))";
MPRINT(EM_DIAGRAM):   label _TYPE_ = "Type" VARIABLE = "Variable" LABEL = "Label";
60249      title9 ' ';
MPRINT(EM_DIAGRAM):   title9 ' ';
60250      title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_predDecVars_title  , NOQUOTE))";
MPRINT(EM_DIAGRAM):   title10 "Predicted and decision variables";
MPRINT(EM_DIAGRAM):   run;
60251      run;
 
NOTE: There were 7 observations read from the data set EMWS1.NEURAL_RISK_DM.
      WHERE _type_ not in ('DATAPRIOR', 'DECISION', 'DECPRIOR', 'MATRIX', 'TRAINPRIOR');
NOTE: The PROCEDURE PRINT printed page 23.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
60252      title10;
MPRINT(EM_DIAGRAM):   title10;
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Neural: Preparing metadata for training;
MPRINT(EM_DIAGRAM):   ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   data WORK.M3O0S7XE;
MPRINT(EM_DIAGRAM):   set WORK.M3O0S7XE;
MPRINT(EM_DIAGRAM):   where(use = 'Y' or (role = 'INPUT' and use = 'D'));
MPRINT(EM_DIAGRAM):   if (role = 'REJECTED') then role = 'INPUT';
MPRINT(EM_DIAGRAM):   run;
60262      data WORK.M3O0S7XE;
MPRINT(EM_DIAGRAM):    data WORK.M3O0S7XE;
60263      set WORK.M3O0S7XE end=eof;
MPRINT(EM_DIAGRAM):   set WORK.M3O0S7XE end=eof;
60264      output;
MPRINT(EM_DIAGRAM):   output;
60265      if eof then do;
MPRINT(EM_DIAGRAM):   if eof then do;
60266      NAME="";
MPRINT(EM_DIAGRAM):   NAME="";
60267      ROLE="COST";
MPRINT(EM_DIAGRAM):   ROLE="COST";
60268      LEVEL="INTERVAL";
MPRINT(EM_DIAGRAM):   LEVEL="INTERVAL";
60269      TYPE="N";
MPRINT(EM_DIAGRAM):   TYPE="N";
60270      output;
MPRINT(EM_DIAGRAM):   output;
60271      end;
MPRINT(EM_DIAGRAM):   end;
60272      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 28 observations read from the data set WORK.M3O0S7XE.
NOTE: The data set WORK.M3O0S7XE has 29 observations and 29 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
NOTE: There were 2 observations read from the data set EMWS1.NEURAL_RISK_DD.
NOTE: The data set WORK.RISK has 2 observations and 7 variables.
NOTE: There were 2 observations read from the data set EMWS1.NEURAL_RISK_DD.
NOTE: The data set WORK.RISK has 2 observations and 7 variables.
60273      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
60274      * Neural: Create decision matrix;
MPRINT(EM_DIAGRAM):   * Neural: Create decision matrix;
60275      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
60276      data WORK.Risk;
MPRINT(EM_DIAGRAM):   data WORK.Risk;
60277        length   Risk                             $  32
60278                 COUNT                                8
60279                 DATAPRIOR                            8
60280                 TRAINPRIOR                           8
60281                 DECPRIOR                             8
60282                 DECISION1                            8
60283                 DECISION2                            8
60284                 ;
MPRINT(EM_DIAGRAM):   length Risk $ 32 COUNT 8 DATAPRIOR 8 TRAINPRIOR 8 DECPRIOR 8 DECISION1 8
DECISION2 8 ;
60285
60286        label    COUNT="Level Counts"
60287                 DATAPRIOR="Data Proportions"
60288                 TRAINPRIOR="Training Proportions"
60289                 DECPRIOR="Decision Priors"
60290                 DECISION1="1"
60291                 DECISION2="0"
60292                 ;
MPRINT(EM_DIAGRAM):   label COUNT= "Level Counts" DATAPRIOR= "Data Proportions" TRAINPRIOR=
"Training Proportions" DECPRIOR= "Decision Priors" DECISION1= "1" DECISION2= "0" ;
60293        format   COUNT 10.
60294                 ;
MPRINT(EM_DIAGRAM):   format COUNT 10. ;
60295      Risk="1"; COUNT=54; DATAPRIOR=0.55445544554455; TRAINPRIOR=0.54; DECPRIOR=.;
60295    ! DECISION1=1; DECISION2=0;
MPRINT(EM_DIAGRAM):   Risk="1";
MPRINT(EM_DIAGRAM):   COUNT=54;
MPRINT(EM_DIAGRAM):   DATAPRIOR=0.55445544554455;
MPRINT(EM_DIAGRAM):   TRAINPRIOR=0.54;
MPRINT(EM_DIAGRAM):   DECPRIOR=.;
MPRINT(EM_DIAGRAM):   DECISION1=1;
MPRINT(EM_DIAGRAM):   DECISION2=0;
60296      output;
MPRINT(EM_DIAGRAM):   output;
60297      Risk="0"; COUNT=46; DATAPRIOR=0.44554455445544; TRAINPRIOR=0.46; DECPRIOR=.;
60297    ! DECISION1=0; DECISION2=1;
MPRINT(EM_DIAGRAM):   Risk="0";
MPRINT(EM_DIAGRAM):   COUNT=46;
MPRINT(EM_DIAGRAM):   DATAPRIOR=0.44554455445544;
MPRINT(EM_DIAGRAM):   TRAINPRIOR=0.46;
MPRINT(EM_DIAGRAM):   DECPRIOR=.;
MPRINT(EM_DIAGRAM):   DECISION1=0;
MPRINT(EM_DIAGRAM):   DECISION2=1;
60298      output;
MPRINT(EM_DIAGRAM):   output;
60299      ;
MPRINT(EM_DIAGRAM):   ;
60300      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: The data set WORK.RISK has 2 observations and 7 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
60301      proc datasets lib=work nolist;
MPRINT(EM_DIAGRAM):   proc datasets lib=work nolist;
60302      modify Risk(type=PROFIT label=Risk);
MPRINT(EM_DIAGRAM):   modify Risk(type=PROFIT label= Risk);
MPRINT(EM_DIAGRAM):   label DECISION1= '1';
MPRINT(EM_DIAGRAM):   label DECISION2= '0';
MPRINT(EM_DIAGRAM):   run;
60303      label DECISION1= '1';
60304      label DECISION2= '0';
60305      run;
 
NOTE: MODIFY was successful for WORK.RISK.DATA.
60306      quit;
MPRINT(EM_DIAGRAM):   quit;
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.02 seconds
      cpu time            0.00 seconds
 
 
60307      data EM_Neural;
MPRINT(EM_DIAGRAM):   data EM_Neural;
60308      set EMWS1.Impt_TRAIN(keep=
60309      IMP_bore IMP_num_of_doors IMP_price IMP_stroke M_bore M_num_of_doors M_price
60310      M_stroke Risk aspiration body_style city_mpg compression_ratio curb_weight
60311      drive_wheels engine_location engine_size engine_type fuel_system fuel_type
60312      height highway_mpg horsepower length num_of_cylinders peak_rpm wheel_base width );
MPRINT(EM_DIAGRAM):   set EMWS1.Impt_TRAIN(keep= IMP_bore IMP_num_of_doors IMP_price
IMP_stroke M_bore M_num_of_doors M_price M_stroke Risk aspiration body_style city_mpg
compression_ratio curb_weight drive_wheels engine_location engine_size engine_type fuel_system
fuel_type height highway_mpg horsepower length num_of_cylinders peak_rpm wheel_base width );
60313      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: View EMWS1.IMPT_TRAIN.VIEW used (Total process time):
      real time           0.03 seconds
      cpu time            0.04 seconds
 
NOTE: There were 100 observations read from the data set EMWS1.PART_TRAIN.
NOTE: There were 100 observations read from the data set EMWS1.IMPT_TRAIN.
NOTE: The data set WORK.EM_NEURAL has 100 observations and 28 variables.
NOTE: DATA statement used (Total process time):
      real time           0.05 seconds
      cpu time            0.06 seconds
 
 
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   * Neural: DMDBClass Macro ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
60314      *------------------------------------------------------------* ;
60315      * Neural: DMDBClass Macro ;
60316      *------------------------------------------------------------* ;
60317      %macro DMDBClass;
60318          IMP_num_of_doors(ASC) M_bore(ASC) M_num_of_doors(ASC) M_price(ASC)
60319         M_stroke(ASC) Risk(DESC) aspiration(ASC) body_style(ASC) drive_wheels(ASC)
60320         engine_location(ASC) engine_type(ASC) fuel_system(ASC) fuel_type(ASC)
60321         num_of_cylinders(ASC)
60322      %mend DMDBClass;
60323      *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
60324      * Neural: DMDBVar Macro ;
MPRINT(EM_DIAGRAM):   * Neural: DMDBVar Macro ;
60325      *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
60326      %macro DMDBVar;
60327          IMP_bore IMP_price IMP_stroke city_mpg compression_ratio curb_weight
60328         engine_size height highway_mpg horsepower length peak_rpm wheel_base width
60329      %mend DMDBVar;
60330      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
60331      * Neural: Create DMDB;
MPRINT(EM_DIAGRAM):   * Neural: Create DMDB;
60332      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
60333      proc dmdb batch data=WORK.EM_Neural
60334      dmdbcat=WORK.Neural_DMDB
60335      maxlevel = 513
60336      ;
MPRINT(EM_DIAGRAM):   proc dmdb batch data=WORK.EM_Neural dmdbcat=WORK.Neural_DMDB maxlevel =
513 ;
MPRINT(EM_DIAGRAM):   class
60337      class %DMDBClass;
MPRINT(DMDBCLASS):   IMP_num_of_doors(ASC) M_bore(ASC) M_num_of_doors(ASC) M_price(ASC)
M_stroke(ASC) Risk(DESC) aspiration(ASC) body_style(ASC) drive_wheels(ASC)
engine_location(ASC) engine_type(ASC) fuel_system(ASC) fuel_type(ASC) num_of_cylinders(ASC)
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   var
60338      var %DMDBVar;
MPRINT(DMDBVAR):   IMP_bore IMP_price IMP_stroke city_mpg compression_ratio curb_weight
engine_size height highway_mpg horsepower length peak_rpm wheel_base width
MPRINT(EM_DIAGRAM):  ;
60339      target
60340      Risk
60341      ;
MPRINT(EM_DIAGRAM):   target Risk ;
60342      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: Records processed = 100   Memory used = 511K.
NOTE: There were 100 observations read from the data set WORK.EM_NEURAL.
NOTE: PROCEDURE DMDB used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_DIAGRAM):   quit;
MPRINT(EM_DIAGRAM):   *--- end code ---*;
60343      quit;
60344      *--- end code ---*;
 
60345      *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------* ;
60346      * Neural: Interval Input Variables Macro ;
MPRINT(EM_DIAGRAM):   * Neural: Interval Input Variables Macro ;
60347      *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
60348      %macro INTINPUTS;
60349          IMP_bore IMP_price IMP_stroke city_mpg compression_ratio curb_weight
60350         engine_size height highway_mpg horsepower length peak_rpm wheel_base width
60351      %mend INTINPUTS;
60352      *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
60353      * Neural: Binary Inputs Macro ;
MPRINT(EM_DIAGRAM):   * Neural: Binary Inputs Macro ;
60354      *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
60355      %macro BININPUTS;
60356          M_bore M_num_of_doors M_price M_stroke
60357      %mend BININPUTS;
60358      *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
60359      * Neural: Nominal Inputs Macro ;
MPRINT(EM_DIAGRAM):   * Neural: Nominal Inputs Macro ;
60360      *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
60361      %macro NOMINPUTS;
60362          IMP_num_of_doors aspiration body_style drive_wheels engine_location
60363         engine_type fuel_system fuel_type num_of_cylinders
60364      %mend NOMINPUTS;
60365      *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
60366      * Neural: Ordinal Inputs Macro ;
MPRINT(EM_DIAGRAM):   * Neural: Ordinal Inputs Macro ;
60367      *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
60368      %macro ORDINPUTS;
60369
60370      %mend ORDINPUTS;
60371      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
60372      * Neural Network Training;
MPRINT(EM_DIAGRAM):   * Neural Network Training;
60373      ;
MPRINT(EM_DIAGRAM):   ;
60374      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
60375      proc neural data=EM_Neural dmdbcat=WORK.Neural_DMDB
60376      validdata = EMWS1.Impt_VALIDATE
60377      random=12345
60378      ;
MPRINT(EM_DIAGRAM):   proc neural data=EM_Neural dmdbcat=WORK.Neural_DMDB validdata =
EMWS1.Impt_VALIDATE random=12345 ;
60379      nloptions
60380      ;
MPRINT(EM_DIAGRAM):   nloptions ;
60381      performance alldetails noutilfile;
MPRINT(EM_DIAGRAM):   performance alldetails noutilfile;
60382      netopts
60383      decay=0;
MPRINT(EM_DIAGRAM):   netopts decay=0;
MPRINT(EM_DIAGRAM):   input
60384      input %INTINPUTS / level=interval id=intvl
MPRINT(INTINPUTS):   IMP_bore IMP_price IMP_stroke city_mpg compression_ratio curb_weight
engine_size height highway_mpg horsepower length peak_rpm wheel_base width
60385      ;
MPRINT(EM_DIAGRAM):   / level=interval id=intvl ;
MPRINT(EM_DIAGRAM):   input
60386      input %BININPUTS / level=nominal id=bin
MPRINT(BININPUTS):   M_bore M_num_of_doors M_price M_stroke
60387      ;
MPRINT(EM_DIAGRAM):   / level=nominal id=bin ;
MPRINT(EM_DIAGRAM):   input
60388      input %NOMINPUTS / level=nominal id=nom
MPRINT(NOMINPUTS):   IMP_num_of_doors aspiration body_style drive_wheels engine_location
engine_type fuel_system fuel_type num_of_cylinders
60389      ;
MPRINT(EM_DIAGRAM):   / level=nominal id=nom ;
60390      target Risk / level=NOMINAL id=Risk
60391      bias
60392      ;
MPRINT(EM_DIAGRAM):   target Risk / level=NOMINAL id=Risk bias ;
60393      arch MLP
60394      Hidden=3
60395      ;
MPRINT(EM_DIAGRAM):   arch MLP Hidden=3 ;
60396      save network=EMWS1.Neural_NETWORK.dm_neural;
MPRINT(EM_DIAGRAM):   save network=EMWS1.Neural_NETWORK.dm_neural;
NOTE: Entry EMWS1.NEURAL_NETWORK.DM_NEURAL has been opened.
NOTE: Entry EMWS1.NEURAL_NETWORK.DM_NEURAL has been closed.
60397      train Maxiter=50
60398      maxtime=300
60399      Outest=EMWS1.Neural_outest estiter=1
60400      Outfit=EMWS1.Neural_OUTFIT
60401      ;
MPRINT(EM_DIAGRAM):   train Maxiter=50 maxtime=300 Outest=EMWS1.Neural_outest estiter=1
Outfit=EMWS1.Neural_OUTFIT ;
NOTE:  Synchronizing the objectives and the Solution.
NOTE: Convergence criterion (ABSCONV=0.0013927149) satisfied.
NOTE: At least one element of the gradient is greater than 1e-3.
NOTE: The data set EMWS1.NEURAL_OUTEST has 28 observations and 145 variables.
NOTE: The data set EMWS1.NEURAL_OUTFIT has 54 observations and 36 variables.
60402      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: The data set WORK.EM_NEURAL has 100 observations and 28 variables.
NOTE: The data set EMWS1.IMPT_VALIDATE has . observations and 36 variables.
NOTE: View EMWS1.IMPT_VALIDATE.VIEW used (Total process time):
      real time           0.32 seconds
      cpu time            0.14 seconds
 
NOTE: There were 100 observations read from the data set EMWS1.PART_VALIDATE.
NOTE: Closing the Neural Application.
NOTE: The PROCEDURE NEURAL printed pages 24-26.
NOTE: PROCEDURE NEURAL used (Total process time):
      real time           0.34 seconds
      cpu time            0.18 seconds
 
 
MPRINT(EM_DIAGRAM):   quit;
60403      quit;
 
60404      proc sort data=EMWS1.Neural_OUTFIT(where=(_iter_ ne . and _NAME_="OVERALL"))
60404    ! out=fit_Neural;
MPRINT(EM_DIAGRAM):    proc sort data=EMWS1.Neural_OUTFIT(where=(_iter_ ne . and
_NAME_="OVERALL")) out=fit_Neural;
60405      by _VAVERR_;
MPRINT(EM_DIAGRAM):   by _VAVERR_;
60406      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 27 observations read from the data set EMWS1.NEURAL_OUTFIT.
      WHERE (_iter_ not = .) and (_NAME_='OVERALL');
NOTE: The data set WORK.FIT_NEURAL has 27 observations and 36 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
60407      %GLOBAL ITER;
60408      data _null_;
MPRINT(EM_DIAGRAM):   data _null_;
60409      set fit_Neural(obs=1);
MPRINT(EM_DIAGRAM):   set fit_Neural(obs=1);
60410      call symput('ITER',put(_ITER_, 6.));
MPRINT(EM_DIAGRAM):   call symput('ITER',put(_ITER_, 6.));
60411      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 1 observations read from the data set WORK.FIT_NEURAL.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
60412      data EMWS1.Neural_INITIAL;
MPRINT(EM_DIAGRAM):   data EMWS1.Neural_INITIAL;
60413      set EMWS1.Neural_outest(where=(_ITER_ eq &ITER and _OBJ_ ne .));
MPRINT(EM_DIAGRAM):   set EMWS1.Neural_outest(where=(_ITER_ eq 14 and _OBJ_ ne .));
60414      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 1 observations read from the data set EMWS1.NEURAL_OUTEST.
      WHERE (_ITER_=14) and (_OBJ_ not = .);
NOTE: The data set EMWS1.NEURAL_INITIAL has 1 observations and 145 variables.
NOTE: DATA statement used (Total process time):
      real time           0.09 seconds
      cpu time            0.00 seconds
 
 
60415      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
60416      * Neural Network Model Selection;
MPRINT(EM_DIAGRAM):   * Neural Network Model Selection;
60417      ;
MPRINT(EM_DIAGRAM):   ;
60418      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
60419      proc neural data=EM_Neural dmdbcat=WORK.Neural_DMDB
60420      validdata = EMWS1.Impt_VALIDATE
60421      network = EMWS1.Neural_NETWORK.dm_neural
60422      random=12345
60423      ;
MPRINT(EM_DIAGRAM):   proc neural data=EM_Neural dmdbcat=WORK.Neural_DMDB validdata =
EMWS1.Impt_VALIDATE network = EMWS1.Neural_NETWORK.dm_neural random=12345 ;
NOTE: Entry EMWS1.NEURAL_NETWORK.DM_NEURAL has been opened.
NOTE: Entry EMWS1.NEURAL_NETWORK.DM_NEURAL has been closed.
60424      nloptions noprint;
MPRINT(EM_DIAGRAM):   nloptions noprint;
60425      performance alldetails noutilfile;
MPRINT(EM_DIAGRAM):   performance alldetails noutilfile;
60426      initial inest=EMWS1.Neural_INITIAL;
MPRINT(EM_DIAGRAM):   initial inest=EMWS1.Neural_INITIAL;
NOTE: The data set EMWS1.NEURAL_INITIAL has 1 observations and 145 variables.
60427      train tech=NONE;
MPRINT(EM_DIAGRAM):   train tech=NONE;
NOTE: No optimization performed.
60428      code file="H:\746\Decision Tree test\Workspaces\EMWS1\Neural\SCORECODE.sas"
60429      group=Neural
60430      ;
MPRINT(EM_DIAGRAM):   code file="H:\746\Decision Tree
test\Workspaces\EMWS1\Neural\SCORECODE.sas" group=Neural ;
NOTE: External file H:\746\Decision Tree test\Workspaces\EMWS1\Neural\SCORECODE.sas opened.
60431      ;
MPRINT(EM_DIAGRAM):   ;
60432      code file="H:\746\Decision Tree test\Workspaces\EMWS1\Neural\RESIDUALSCORECODE.sas"
60433      group=Neural
60434      residual
60435      ;
MPRINT(EM_DIAGRAM):   code file="H:\746\Decision Tree
test\Workspaces\EMWS1\Neural\RESIDUALSCORECODE.sas" group=Neural residual ;
NOTE: External file H:\746\Decision Tree test\Workspaces\EMWS1\Neural\RESIDUALSCORECODE.sas
      opened.
60436      ;
MPRINT(EM_DIAGRAM):   ;
60437      score data=EMWS1.Impt_TRAIN out=_NULL_
NOTE: View EMWS1.IMPT_TRAIN.VIEW used (Total process time):
      real time           0.11 seconds
      cpu time            0.06 seconds
 
60438      outfit=WORK.FIT1
60439      role=TRAIN
60440      outkey=EMWS1.Neural_OUTKEY;
MPRINT(EM_DIAGRAM):   score data=EMWS1.Impt_TRAIN out=_NULL_ outfit=WORK.FIT1 role=TRAIN
outkey=EMWS1.Neural_OUTKEY;
NOTE: The data set EMWS1.NEURAL_OUTKEY has 56 observations and 8 variables.
NOTE: The data set EMWS1.IMPT_TRAIN has . observations and 36 variables.
NOTE: There were 100 observations read from the data set EMWS1.PART_TRAIN.
NOTE: The data set WORK.FIT1 has 2 observations and 23 variables.
60441      score data=EMWS1.Impt_VALIDATE out=_NULL_
NOTE: View EMWS1.IMPT_VALIDATE.VIEW used (Total process time):
      real time           0.11 seconds
      cpu time            0.06 seconds
 
60442      outfit=WORK.FIT2
60443      role=VALID
60444      outkey=EMWS1.Neural_OUTKEY;
MPRINT(EM_DIAGRAM):   score data=EMWS1.Impt_VALIDATE out=_NULL_ outfit=WORK.FIT2 role=VALID
outkey=EMWS1.Neural_OUTKEY;
NOTE: The data set EMWS1.NEURAL_OUTKEY has 56 observations and 8 variables.
NOTE: The data set EMWS1.IMPT_VALIDATE has . observations and 36 variables.
NOTE: There were 100 observations read from the data set EMWS1.PART_VALIDATE.
NOTE: The data set WORK.FIT2 has 2 observations and 15 variables.
60445      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: The data set WORK.EM_NEURAL has 100 observations and 28 variables.
NOTE: The data set EMWS1.IMPT_VALIDATE has . observations and 36 variables.
NOTE: View EMWS1.IMPT_VALIDATE.VIEW used (Total process time):
      real time           0.47 seconds
      cpu time            0.25 seconds
 
NOTE: There were 100 observations read from the data set EMWS1.PART_VALIDATE.
NOTE: Closing the Neural Application.
NOTE: PROCEDURE NEURAL used (Total process time):
      real time           0.47 seconds
      cpu time            0.25 seconds
 
 
MPRINT(EM_DIAGRAM):   quit;
60446      quit;
60447      data EMWS1.Neural_OUTFIT;
MPRINT(EM_DIAGRAM):   data EMWS1.Neural_OUTFIT;
60448      merge WORK.FIT1 WORK.FIT2;
MPRINT(EM_DIAGRAM):   merge WORK.FIT1 WORK.FIT2;
60449      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 2 observations read from the data set WORK.FIT1.
NOTE: There were 2 observations read from the data set WORK.FIT2.
NOTE: The data set EMWS1.NEURAL_OUTFIT has 2 observations and 36 variables.
NOTE: DATA statement used (Total process time):
      real time           0.06 seconds
      cpu time            0.00 seconds
 
 
60450      data EMWS1.Neural_EMESTIMATE;
MPRINT(EM_DIAGRAM):   data EMWS1.Neural_EMESTIMATE;
60451      set EMWS1.Neural_outest;
MPRINT(EM_DIAGRAM):   set EMWS1.Neural_outest;
60452      if _type_ ^in('HESSIAN' 'GRAD');
MPRINT(EM_DIAGRAM):   if _type_ ^in('HESSIAN' 'GRAD');
60453      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 28 observations read from the data set EMWS1.NEURAL_OUTEST.
NOTE: The data set EMWS1.NEURAL_EMESTIMATE has 27 observations and 145 variables.
NOTE: DATA statement used (Total process time):
      real time           0.05 seconds
      cpu time            0.01 seconds
 
 
60454      proc datasets lib=work nolist;
MPRINT(EM_DIAGRAM):   proc datasets lib=work nolist;
60455      delete EM_Neural;
MPRINT(EM_DIAGRAM):   delete EM_Neural;
60456      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: Deleting WORK.EM_NEURAL (memtype=DATA).
60457      quit;
MPRINT(EM_DIAGRAM):   quit;
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
60458      data EMWS1.Neural_PLOTDS(where=(_iter_ ne . and _NAME_="OVERALL"));
MPRINT(EM_DIAGRAM):    data EMWS1.Neural_PLOTDS(where=(_iter_ ne . and _NAME_="OVERALL"));
60459      set fit_Neural;
MPRINT(EM_DIAGRAM):   set fit_Neural;
60460      attrib _ITER_ label="%sysfunc(sasmsg(sashelp.dmine, rpt_trainiterations_vlabel  ,
60460    ! NOQUOTE))";
MPRINT(EM_DIAGRAM):   attrib _ITER_ label="Training Iterations";
60461      attrib _NAME_ label="%sysfunc(sasmsg(sashelp.dmine, rpt_varsel_label_name  ,
60461    ! NOQUOTE))";
MPRINT(EM_DIAGRAM):   attrib _NAME_ label="Name";
60462      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 27 observations read from the data set WORK.FIT_NEURAL.
NOTE: The data set EMWS1.NEURAL_PLOTDS has 27 observations and 36 variables.
NOTE: DATA statement used (Total process time):
      real time           0.05 seconds
      cpu time            0.01 seconds
 
 
60463      proc sort data=EMWS1.Neural_PLOTDS;
MPRINT(EM_DIAGRAM):   proc sort data=EMWS1.Neural_PLOTDS;
60464      by _ITER_;
MPRINT(EM_DIAGRAM):   by _ITER_;
60465      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 27 observations read from the data set EMWS1.NEURAL_PLOTDS.
NOTE: The data set EMWS1.NEURAL_PLOTDS has 27 observations and 36 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.08 seconds
      cpu time            0.01 seconds
 
 
60466      data tempweight (drop= _tech_ _decay_ _seed_ _nobj_ _obj_ _objerr_ _averr_ _p_num_
60466    ! where=(_type_ eq "PARMS" and _iter_ eq 14) );
MPRINT(EM_DIAGRAM):    data tempweight (drop= _tech_ _decay_ _seed_ _nobj_ _obj_ _objerr_
_averr_ _p_num_ where=(_type_ eq "PARMS" and _iter_ eq 14) );
60467      set EMWS1.Neural_EMESTIMATE;
MPRINT(EM_DIAGRAM):   set EMWS1.Neural_EMESTIMATE;
60468      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 27 observations read from the data set EMWS1.NEURAL_EMESTIMATE.
NOTE: The data set WORK.TEMPWEIGHT has 1 observations and 137 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
60469      proc sort;
MPRINT(EM_DIAGRAM):   proc sort;
60470      by _name_;
MPRINT(EM_DIAGRAM):   by _name_;
60471      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 1 observations read from the data set WORK.TEMPWEIGHT.
NOTE: The data set WORK.TEMPWEIGHT has 1 observations and 137 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
60472      proc transpose data=tempweight out=EMWS1.Neural_WEIGHTDS;
MPRINT(EM_DIAGRAM):   proc transpose data=tempweight out=EMWS1.Neural_WEIGHTDS;
60473      by _name_;
MPRINT(EM_DIAGRAM):   by _name_;
60474      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 1 observations read from the data set WORK.TEMPWEIGHT.
NOTE: The data set EMWS1.NEURAL_WEIGHTDS has 135 observations and 3 variables.
NOTE: PROCEDURE TRANSPOSE used (Total process time):
      real time           0.05 seconds
      cpu time            0.01 seconds
 
 
60475      data EMWS1.Neural_WEIGHTDS;
MPRINT(EM_DIAGRAM):   data EMWS1.Neural_WEIGHTDS;
60476      set EMWS1.Neural_WEIGHTDS;
MPRINT(EM_DIAGRAM):   set EMWS1.Neural_WEIGHTDS;
60477      FROM = trim(left(scan(_LABEL_, 1, '->')));
MPRINT(EM_DIAGRAM):   FROM = trim(left(scan(_LABEL_, 1, '->')));
60478      TO = trim(left(scan(_LABEL_, 2, '>')));
MPRINT(EM_DIAGRAM):   TO = trim(left(scan(_LABEL_, 2, '>')));
60479      WEIGHT = COL1;
MPRINT(EM_DIAGRAM):   WEIGHT = COL1;
60480      if (TO eq '') or (FROM eq '') then delete;
MPRINT(EM_DIAGRAM):   if (TO eq '') or (FROM eq '') then delete;
60481      label _LABEL_ ="%sysfunc(sasmsg(sashelp.dmine, meta_label_vlabel  , NOQUOTE))" FROM
60481    ! = "%sysfunc(sasmsg(sashelp.dmine, rpt_from_vlabel  , NOQUOTE))" TO =
60481    ! "%sysfunc(sasmsg(sashelp.dmine, rpt_into_vlabel  , NOQUOTE))" WEIGHT =
60482         "%sysfunc(sasmsg(sashelp.dmine, rpt_weight_vlabel  , NOQUOTE))";
MPRINT(EM_DIAGRAM):   label _LABEL_ = "Label" FROM = "From" TO = "Into" WEIGHT = "Weight";
60483      keep FROM TO WEIGHT _LABEL_;
MPRINT(EM_DIAGRAM):   keep FROM TO WEIGHT _LABEL_;
60484      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 135 observations read from the data set EMWS1.NEURAL_WEIGHTDS.
NOTE: The data set EMWS1.NEURAL_WEIGHTDS has 130 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.08 seconds
      cpu time            0.01 seconds
 
 
60485      proc sort data=EMWS1.Neural_WEIGHTDS nodupkey;
MPRINT(EM_DIAGRAM):   proc sort data=EMWS1.Neural_WEIGHTDS nodupkey;
60486      by _LABEL_;
MPRINT(EM_DIAGRAM):   by _LABEL_;
60487      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 130 observations read from the data set EMWS1.NEURAL_WEIGHTDS.
NOTE: 0 observations with duplicate key values were deleted.
NOTE: The data set EMWS1.NEURAL_WEIGHTDS has 130 observations and 4 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.08 seconds
      cpu time            0.03 seconds
 
 
MPRINT(EM_DIAGRAM):    proc printto;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   call symput('NLDATE', strip(put(date(), NLDATE.)));
MPRINT(EM_DIAGRAM):   call symput('NLTIME', strip(put(datetime(), NLTIME.)));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   nldate= sasmsg("sashelp.dmine", "log_date_note", 'N', "April 05, 2021" );
MPRINT(EM_DIAGRAM):   nltime= sasmsg("sashelp.dmine", "log_time_note", 'N', "13:13:29 o'clock"
);
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "* Score Log";
MPRINT(EM_DIAGRAM):   put nldate;
MPRINT(EM_DIAGRAM):   put nltime;
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   run;
*------------------------------------------------------------*
* Score Log
Date:                April 05, 2021
Time:                13:13:29 o'clock
*------------------------------------------------------------*
MPRINT(EM_DIAGRAM):    filename O3COGN8H "H:\746\Decision Tree
test\Workspaces\EMWS1\Neural\EMSCORE.out" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):   proc printto print=O3COGN8H new;
MPRINT(EM_DIAGRAM):   run;
NOTE: This SAS session is using a registry in WORK.  All changes will be lost at the end of
      this session.
60589      data work.outkey;
MPRINT(EM_DIAGRAM):    data work.outkey;
60590      set EMWS1.Neural_OUTKEY;
MPRINT(EM_DIAGRAM):   set EMWS1.Neural_OUTKEY;
60591      if upcase(ROLE) = 'HIDDEN';
MPRINT(EM_DIAGRAM):   if upcase(ROLE) = 'HIDDEN';
60592      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 56 observations read from the data set EMWS1.NEURAL_OUTKEY.
NOTE: The data set WORK.OUTKEY has 3 observations and 8 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
60593      filename emflow "H:\746\Decision Tree test\Workspaces\EMWS1\Neural\EMFLOWSCORE.sas";
MPRINT(EM_DIAGRAM):    filename emflow "H:\746\Decision Tree
test\Workspaces\EMWS1\Neural\EMFLOWSCORE.sas";
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Neural: Scoring DATA data;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
60594      *------------------------------------------------------------*;
60595      * Neural: Scoring DATA data;
60596      *------------------------------------------------------------*;
60597      data EMWS1.Neural_TRAIN
60598      / view=EMWS1.Neural_TRAIN
60599      ;
MPRINT(EM_DIAGRAM):   data EMWS1.Neural_TRAIN / view=EMWS1.Neural_TRAIN ;
60600      set EMWS1.Impt_TRAIN
60601      ;
MPRINT(EM_DIAGRAM):   set EMWS1.Impt_TRAIN ;
60602      %inc emflow;
NOTE: %INCLUDE (level 1) file EMFLOW is file H:\746\Decision Tree
      test\Workspaces\EMWS1\Neural\EMFLOWSCORE.sas.
60603     +***********************************;
MPRINT(EM_DIAGRAM):   ***********************************;
60604     +*** Begin Scoring Code for Neural;
MPRINT(EM_DIAGRAM):   *** Begin Scoring Code for Neural;
60605     +***********************************;
MPRINT(EM_DIAGRAM):   ***********************************;
60606     +DROP _DM_BAD _EPS _NOCL_ _MAX_ _MAXP_ _SUM_ _NTRIALS;
MPRINT(EM_DIAGRAM):   DROP _DM_BAD _EPS _NOCL_ _MAX_ _MAXP_ _SUM_ _NTRIALS;
60607     + _DM_BAD = 0;
MPRINT(EM_DIAGRAM):   _DM_BAD = 0;
60608     + _NOCL_ = .;
MPRINT(EM_DIAGRAM):   _NOCL_ = .;
60609     + _MAX_ = .;
MPRINT(EM_DIAGRAM):   _MAX_ = .;
60610     + _MAXP_ = .;
MPRINT(EM_DIAGRAM):   _MAXP_ = .;
60611     + _SUM_ = .;
MPRINT(EM_DIAGRAM):   _SUM_ = .;
60612     + _NTRIALS = .;
MPRINT(EM_DIAGRAM):   _NTRIALS = .;
60613     + _EPS =                1E-10;
MPRINT(EM_DIAGRAM):   _EPS = 1E-10;
60614     +LENGTH _WARN_ $4
60615     +      F_Risk  $ 12
60616     +;
MPRINT(EM_DIAGRAM):   LENGTH _WARN_ $4 F_Risk $ 12 ;
60617     +      label S_IMP_bore = 'Standard: IMP_bore' ;
MPRINT(EM_DIAGRAM):   label S_IMP_bore = 'Standard: IMP_bore' ;
60618     +
60619     +      label S_IMP_price = 'Standard: IMP_price' ;
MPRINT(EM_DIAGRAM):   label S_IMP_price = 'Standard: IMP_price' ;
60620     +
60621     +      label S_IMP_stroke = 'Standard: IMP_stroke' ;
MPRINT(EM_DIAGRAM):   label S_IMP_stroke = 'Standard: IMP_stroke' ;
60622     +
60623     +      label S_city_mpg = 'Standard: city_mpg' ;
MPRINT(EM_DIAGRAM):   label S_city_mpg = 'Standard: city_mpg' ;
60624     +
60625     +      label S_compression_ratio = 'Standard: compression_ratio' ;
MPRINT(EM_DIAGRAM):   label S_compression_ratio = 'Standard: compression_ratio' ;
60626     +
60627     +      label S_curb_weight = 'Standard: curb_weight' ;
MPRINT(EM_DIAGRAM):   label S_curb_weight = 'Standard: curb_weight' ;
60628     +
60629     +      label S_engine_size = 'Standard: engine_size' ;
MPRINT(EM_DIAGRAM):   label S_engine_size = 'Standard: engine_size' ;
60630     +
60631     +      label S_height = 'Standard: height' ;
MPRINT(EM_DIAGRAM):   label S_height = 'Standard: height' ;
60632     +
60633     +      label S_highway_mpg = 'Standard: highway_mpg' ;
MPRINT(EM_DIAGRAM):   label S_highway_mpg = 'Standard: highway_mpg' ;
60634     +
60635     +      label S_horsepower = 'Standard: horsepower' ;
MPRINT(EM_DIAGRAM):   label S_horsepower = 'Standard: horsepower' ;
60636     +
60637     +      label S_length = 'Standard: length' ;
MPRINT(EM_DIAGRAM):   label S_length = 'Standard: length' ;
60638     +
60639     +      label S_peak_rpm = 'Standard: peak_rpm' ;
MPRINT(EM_DIAGRAM):   label S_peak_rpm = 'Standard: peak_rpm' ;
60640     +
60641     +      label S_wheel_base = 'Standard: wheel_base' ;
MPRINT(EM_DIAGRAM):   label S_wheel_base = 'Standard: wheel_base' ;
60642     +
60643     +      label S_width = 'Standard: width' ;
MPRINT(EM_DIAGRAM):   label S_width = 'Standard: width' ;
60644     +
60645     +      label M_bore0 = 'Dummy: M_bore=0' ;
MPRINT(EM_DIAGRAM):   label M_bore0 = 'Dummy: M_bore=0' ;
60646     +
60647     +      label M_num_of_doors0 = 'Dummy: M_num_of_doors=0' ;
MPRINT(EM_DIAGRAM):   label M_num_of_doors0 = 'Dummy: M_num_of_doors=0' ;
60648     +
60649     +      label M_price0 = 'Dummy: M_price=0' ;
MPRINT(EM_DIAGRAM):   label M_price0 = 'Dummy: M_price=0' ;
60650     +
60651     +      label M_stroke0 = 'Dummy: M_stroke=0' ;
MPRINT(EM_DIAGRAM):   label M_stroke0 = 'Dummy: M_stroke=0' ;
60652     +
60653     +      label IMP_num_of_doors2 = 'Dummy: IMP_num_of_doors=2' ;
MPRINT(EM_DIAGRAM):   label IMP_num_of_doors2 = 'Dummy: IMP_num_of_doors=2' ;
60654     +
60655     +      label aspirationstd = 'Dummy: aspiration=std' ;
MPRINT(EM_DIAGRAM):   label aspirationstd = 'Dummy: aspiration=std' ;
60656     +
60657     +      label body_styleconvertible = 'Dummy: body_style=convertible' ;
MPRINT(EM_DIAGRAM):   label body_styleconvertible = 'Dummy: body_style=convertible' ;
60658     +
60659     +      label body_stylehardtop = 'Dummy: body_style=hardtop' ;
MPRINT(EM_DIAGRAM):   label body_stylehardtop = 'Dummy: body_style=hardtop' ;
60660     +
60661     +      label body_stylehatchback = 'Dummy: body_style=hatchback' ;
MPRINT(EM_DIAGRAM):   label body_stylehatchback = 'Dummy: body_style=hatchback' ;
60662     +
60663     +      label body_stylesedan = 'Dummy: body_style=sedan' ;
MPRINT(EM_DIAGRAM):   label body_stylesedan = 'Dummy: body_style=sedan' ;
60664     +
60665     +      label drive_wheels4wd = 'Dummy: drive_wheels=4wd' ;
MPRINT(EM_DIAGRAM):   label drive_wheels4wd = 'Dummy: drive_wheels=4wd' ;
60666     +
60667     +      label drive_wheelsfwd = 'Dummy: drive_wheels=fwd' ;
MPRINT(EM_DIAGRAM):   label drive_wheelsfwd = 'Dummy: drive_wheels=fwd' ;
60668     +
60669     +      label engine_locationfront = 'Dummy: engine_location=front' ;
MPRINT(EM_DIAGRAM):   label engine_locationfront = 'Dummy: engine_location=front' ;
60670     +
60671     +      label engine_typedohc = 'Dummy: engine_type=dohc' ;
MPRINT(EM_DIAGRAM):   label engine_typedohc = 'Dummy: engine_type=dohc' ;
60672     +
60673     +      label engine_typel = 'Dummy: engine_type=l' ;
MPRINT(EM_DIAGRAM):   label engine_typel = 'Dummy: engine_type=l' ;
60674     +
60675     +      label engine_typeohc = 'Dummy: engine_type=ohc' ;
MPRINT(EM_DIAGRAM):   label engine_typeohc = 'Dummy: engine_type=ohc' ;
60676     +
60677     +      label engine_typeohcf = 'Dummy: engine_type=ohcf' ;
MPRINT(EM_DIAGRAM):   label engine_typeohcf = 'Dummy: engine_type=ohcf' ;
60678     +
60679     +      label engine_typeohcv = 'Dummy: engine_type=ohcv' ;
MPRINT(EM_DIAGRAM):   label engine_typeohcv = 'Dummy: engine_type=ohcv' ;
60680     +
60681     +      label fuel_system1bbl = 'Dummy: fuel_system=1bbl' ;
MPRINT(EM_DIAGRAM):   label fuel_system1bbl = 'Dummy: fuel_system=1bbl' ;
60682     +
60683     +      label fuel_system2bbl = 'Dummy: fuel_system=2bbl' ;
MPRINT(EM_DIAGRAM):   label fuel_system2bbl = 'Dummy: fuel_system=2bbl' ;
60684     +
60685     +      label fuel_system4bbl = 'Dummy: fuel_system=4bbl' ;
MPRINT(EM_DIAGRAM):   label fuel_system4bbl = 'Dummy: fuel_system=4bbl' ;
60686     +
60687     +      label fuel_systemidi = 'Dummy: fuel_system=idi' ;
MPRINT(EM_DIAGRAM):   label fuel_systemidi = 'Dummy: fuel_system=idi' ;
60688     +
60689     +      label fuel_systemmpfi = 'Dummy: fuel_system=mpfi' ;
MPRINT(EM_DIAGRAM):   label fuel_systemmpfi = 'Dummy: fuel_system=mpfi' ;
60690     +
60691     +      label fuel_typediesel = 'Dummy: fuel_type=diesel' ;
MPRINT(EM_DIAGRAM):   label fuel_typediesel = 'Dummy: fuel_type=diesel' ;
60692     +
60693     +      label num_of_cylindersfive = 'Dummy: num_of_cylinders=five' ;
MPRINT(EM_DIAGRAM):   label num_of_cylindersfive = 'Dummy: num_of_cylinders=five' ;
60694     +
60695     +      label num_of_cylindersfour = 'Dummy: num_of_cylinders=four' ;
MPRINT(EM_DIAGRAM):   label num_of_cylindersfour = 'Dummy: num_of_cylinders=four' ;
60696     +
60697     +      label num_of_cylinderssix = 'Dummy: num_of_cylinders=six' ;
MPRINT(EM_DIAGRAM):   label num_of_cylinderssix = 'Dummy: num_of_cylinders=six' ;
60698     +
60699     +      label H11 = 'Hidden: H1=1' ;
MPRINT(EM_DIAGRAM):   label H11 = 'Hidden: H1=1' ;
60700     +
60701     +      label H12 = 'Hidden: H1=2' ;
MPRINT(EM_DIAGRAM):   label H12 = 'Hidden: H1=2' ;
60702     +
60703     +      label H13 = 'Hidden: H1=3' ;
MPRINT(EM_DIAGRAM):   label H13 = 'Hidden: H1=3' ;
60704     +
60705     +      label I_Risk = 'Into: Risk' ;
MPRINT(EM_DIAGRAM):   label I_Risk = 'Into: Risk' ;
60706     +
60707     +      label F_Risk = 'From: Risk' ;
MPRINT(EM_DIAGRAM):   label F_Risk = 'From: Risk' ;
60708     +
60709     +      label U_Risk = 'Unnormalized Into: Risk' ;
MPRINT(EM_DIAGRAM):   label U_Risk = 'Unnormalized Into: Risk' ;
60710     +
60711     +      label P_Risk1 = 'Predicted: Risk=1' ;
MPRINT(EM_DIAGRAM):   label P_Risk1 = 'Predicted: Risk=1' ;
60712     +
60713     +      label R_Risk1 = 'Residual: Risk=1' ;
MPRINT(EM_DIAGRAM):   label R_Risk1 = 'Residual: Risk=1' ;
60714     +
60715     +      label P_Risk0 = 'Predicted: Risk=0' ;
MPRINT(EM_DIAGRAM):   label P_Risk0 = 'Predicted: Risk=0' ;
60716     +
60717     +      label R_Risk0 = 'Residual: Risk=0' ;
MPRINT(EM_DIAGRAM):   label R_Risk0 = 'Residual: Risk=0' ;
60718     +
60719     +      label  _WARN_ = "Warnings";
MPRINT(EM_DIAGRAM):   label _WARN_ = "Warnings";
60720     +
60721     +*** Generate dummy variables for M_bore ;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for M_bore ;
60722     +drop M_bore0 ;
MPRINT(EM_DIAGRAM):   drop M_bore0 ;
60723     +if missing( M_bore ) then do;
MPRINT(EM_DIAGRAM):   if missing( M_bore ) then do;
60724     +   M_bore0 = .;
MPRINT(EM_DIAGRAM):   M_bore0 = .;
60725     +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
60726     +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
60727     +end;
MPRINT(EM_DIAGRAM):   end;
60728     +else do;
MPRINT(EM_DIAGRAM):   else do;
60729     +   length _dm12 $ 12; drop _dm12 ;
MPRINT(EM_DIAGRAM):   length _dm12 $ 12;
MPRINT(EM_DIAGRAM):   drop _dm12 ;
60730     +   _dm12 = put( M_bore , BEST12. );
MPRINT(EM_DIAGRAM):   _dm12 = put( M_bore , BEST12. );
60731     +   %DMNORMIP( _dm12 )
MPRINT(DMNORMIP):   call dmnorm(_dm12,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
60732     +   if _dm12 = '0'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 = '0' then do;
60733     +      M_bore0 = 1;
MPRINT(EM_DIAGRAM):   M_bore0 = 1;
60734     +   end;
MPRINT(EM_DIAGRAM):   end;
60735     +   else if _dm12 = '1'  then do;
MPRINT(EM_DIAGRAM):   else if _dm12 = '1' then do;
60736     +      M_bore0 = -1;
MPRINT(EM_DIAGRAM):   M_bore0 = -1;
60737     +   end;
MPRINT(EM_DIAGRAM):   end;
60738     +   else do;
MPRINT(EM_DIAGRAM):   else do;
60739     +      M_bore0 = .;
MPRINT(EM_DIAGRAM):   M_bore0 = .;
60740     +      substr(_warn_,2,1) = 'U';
MPRINT(EM_DIAGRAM):   substr(_warn_,2,1) = 'U';
60741     +      _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
60742     +   end;
MPRINT(EM_DIAGRAM):   end;
60743     +end;
MPRINT(EM_DIAGRAM):   end;
60744     +
60745     +*** Generate dummy variables for M_num_of_doors ;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for M_num_of_doors ;
60746     +drop M_num_of_doors0 ;
MPRINT(EM_DIAGRAM):   drop M_num_of_doors0 ;
60747     +if missing( M_num_of_doors ) then do;
MPRINT(EM_DIAGRAM):   if missing( M_num_of_doors ) then do;
60748     +   M_num_of_doors0 = .;
MPRINT(EM_DIAGRAM):   M_num_of_doors0 = .;
60749     +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
60750     +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
60751     +end;
MPRINT(EM_DIAGRAM):   end;
60752     +else do;
MPRINT(EM_DIAGRAM):   else do;
60753     +   length _dm12 $ 12; drop _dm12 ;
MPRINT(EM_DIAGRAM):   length _dm12 $ 12;
MPRINT(EM_DIAGRAM):   drop _dm12 ;
60754     +   _dm12 = put( M_num_of_doors , BEST12. );
MPRINT(EM_DIAGRAM):   _dm12 = put( M_num_of_doors , BEST12. );
60755     +   %DMNORMIP( _dm12 )
MPRINT(DMNORMIP):   call dmnorm(_dm12,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
60756     +   if _dm12 = '0'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 = '0' then do;
60757     +      M_num_of_doors0 = 1;
MPRINT(EM_DIAGRAM):   M_num_of_doors0 = 1;
60758     +   end;
MPRINT(EM_DIAGRAM):   end;
60759     +   else if _dm12 = '1'  then do;
MPRINT(EM_DIAGRAM):   else if _dm12 = '1' then do;
60760     +      M_num_of_doors0 = -1;
MPRINT(EM_DIAGRAM):   M_num_of_doors0 = -1;
60761     +   end;
MPRINT(EM_DIAGRAM):   end;
60762     +   else do;
MPRINT(EM_DIAGRAM):   else do;
60763     +      M_num_of_doors0 = .;
MPRINT(EM_DIAGRAM):   M_num_of_doors0 = .;
60764     +      substr(_warn_,2,1) = 'U';
MPRINT(EM_DIAGRAM):   substr(_warn_,2,1) = 'U';
60765     +      _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
60766     +   end;
MPRINT(EM_DIAGRAM):   end;
60767     +end;
MPRINT(EM_DIAGRAM):   end;
60768     +
60769     +*** Generate dummy variables for M_price ;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for M_price ;
60770     +drop M_price0 ;
MPRINT(EM_DIAGRAM):   drop M_price0 ;
60771     +if missing( M_price ) then do;
MPRINT(EM_DIAGRAM):   if missing( M_price ) then do;
60772     +   M_price0 = .;
MPRINT(EM_DIAGRAM):   M_price0 = .;
60773     +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
60774     +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
60775     +end;
MPRINT(EM_DIAGRAM):   end;
60776     +else do;
MPRINT(EM_DIAGRAM):   else do;
60777     +   length _dm12 $ 12; drop _dm12 ;
MPRINT(EM_DIAGRAM):   length _dm12 $ 12;
MPRINT(EM_DIAGRAM):   drop _dm12 ;
60778     +   _dm12 = put( M_price , BEST12. );
MPRINT(EM_DIAGRAM):   _dm12 = put( M_price , BEST12. );
60779     +   %DMNORMIP( _dm12 )
MPRINT(DMNORMIP):   call dmnorm(_dm12,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
60780     +   if _dm12 = '0'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 = '0' then do;
60781     +      M_price0 = 1;
MPRINT(EM_DIAGRAM):   M_price0 = 1;
60782     +   end;
MPRINT(EM_DIAGRAM):   end;
60783     +   else if _dm12 = '1'  then do;
MPRINT(EM_DIAGRAM):   else if _dm12 = '1' then do;
60784     +      M_price0 = -1;
MPRINT(EM_DIAGRAM):   M_price0 = -1;
60785     +   end;
MPRINT(EM_DIAGRAM):   end;
60786     +   else do;
MPRINT(EM_DIAGRAM):   else do;
60787     +      M_price0 = .;
MPRINT(EM_DIAGRAM):   M_price0 = .;
60788     +      substr(_warn_,2,1) = 'U';
MPRINT(EM_DIAGRAM):   substr(_warn_,2,1) = 'U';
60789     +      _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
60790     +   end;
MPRINT(EM_DIAGRAM):   end;
60791     +end;
MPRINT(EM_DIAGRAM):   end;
60792     +
60793     +*** Generate dummy variables for M_stroke ;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for M_stroke ;
60794     +drop M_stroke0 ;
MPRINT(EM_DIAGRAM):   drop M_stroke0 ;
60795     +if missing( M_stroke ) then do;
MPRINT(EM_DIAGRAM):   if missing( M_stroke ) then do;
60796     +   M_stroke0 = .;
MPRINT(EM_DIAGRAM):   M_stroke0 = .;
60797     +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
60798     +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
60799     +end;
MPRINT(EM_DIAGRAM):   end;
60800     +else do;
MPRINT(EM_DIAGRAM):   else do;
60801     +   length _dm12 $ 12; drop _dm12 ;
MPRINT(EM_DIAGRAM):   length _dm12 $ 12;
MPRINT(EM_DIAGRAM):   drop _dm12 ;
60802     +   _dm12 = put( M_stroke , BEST12. );
MPRINT(EM_DIAGRAM):   _dm12 = put( M_stroke , BEST12. );
60803     +   %DMNORMIP( _dm12 )
MPRINT(DMNORMIP):   call dmnorm(_dm12,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
60804     +   if _dm12 = '0'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 = '0' then do;
60805     +      M_stroke0 = 1;
MPRINT(EM_DIAGRAM):   M_stroke0 = 1;
60806     +   end;
MPRINT(EM_DIAGRAM):   end;
60807     +   else if _dm12 = '1'  then do;
MPRINT(EM_DIAGRAM):   else if _dm12 = '1' then do;
60808     +      M_stroke0 = -1;
MPRINT(EM_DIAGRAM):   M_stroke0 = -1;
60809     +   end;
MPRINT(EM_DIAGRAM):   end;
60810     +   else do;
MPRINT(EM_DIAGRAM):   else do;
60811     +      M_stroke0 = .;
MPRINT(EM_DIAGRAM):   M_stroke0 = .;
60812     +      substr(_warn_,2,1) = 'U';
MPRINT(EM_DIAGRAM):   substr(_warn_,2,1) = 'U';
60813     +      _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
60814     +   end;
MPRINT(EM_DIAGRAM):   end;
60815     +end;
MPRINT(EM_DIAGRAM):   end;
60816     +
60817     +*** Generate dummy variables for IMP_num_of_doors ;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for IMP_num_of_doors ;
60818     +drop IMP_num_of_doors2 ;
MPRINT(EM_DIAGRAM):   drop IMP_num_of_doors2 ;
60819     +if missing( IMP_num_of_doors ) then do;
MPRINT(EM_DIAGRAM):   if missing( IMP_num_of_doors ) then do;
60820     +   IMP_num_of_doors2 = .;
MPRINT(EM_DIAGRAM):   IMP_num_of_doors2 = .;
60821     +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
60822     +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
60823     +end;
MPRINT(EM_DIAGRAM):   end;
60824     +else do;
MPRINT(EM_DIAGRAM):   else do;
60825     +   length _dm12 $ 12; drop _dm12 ;
MPRINT(EM_DIAGRAM):   length _dm12 $ 12;
MPRINT(EM_DIAGRAM):   drop _dm12 ;
60826     +   _dm12 = put( IMP_num_of_doors , BEST12. );
MPRINT(EM_DIAGRAM):   _dm12 = put( IMP_num_of_doors , BEST12. );
60827     +   %DMNORMIP( _dm12 )
MPRINT(DMNORMIP):   call dmnorm(_dm12,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
60828     +   if _dm12 = '4'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 = '4' then do;
60829     +      IMP_num_of_doors2 = -1;
MPRINT(EM_DIAGRAM):   IMP_num_of_doors2 = -1;
60830     +   end;
MPRINT(EM_DIAGRAM):   end;
60831     +   else if _dm12 = '2'  then do;
MPRINT(EM_DIAGRAM):   else if _dm12 = '2' then do;
60832     +      IMP_num_of_doors2 = 1;
MPRINT(EM_DIAGRAM):   IMP_num_of_doors2 = 1;
60833     +   end;
MPRINT(EM_DIAGRAM):   end;
60834     +   else do;
MPRINT(EM_DIAGRAM):   else do;
60835     +      IMP_num_of_doors2 = .;
MPRINT(EM_DIAGRAM):   IMP_num_of_doors2 = .;
60836     +      substr(_warn_,2,1) = 'U';
MPRINT(EM_DIAGRAM):   substr(_warn_,2,1) = 'U';
60837     +      _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
60838     +   end;
MPRINT(EM_DIAGRAM):   end;
60839     +end;
MPRINT(EM_DIAGRAM):   end;
60840     +
60841     +*** Generate dummy variables for aspiration ;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for aspiration ;
60842     +drop aspirationstd ;
MPRINT(EM_DIAGRAM):   drop aspirationstd ;
60843     +if missing( aspiration ) then do;
MPRINT(EM_DIAGRAM):   if missing( aspiration ) then do;
60844     +   aspirationstd = .;
MPRINT(EM_DIAGRAM):   aspirationstd = .;
60845     +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
60846     +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
60847     +end;
MPRINT(EM_DIAGRAM):   end;
60848     +else do;
MPRINT(EM_DIAGRAM):   else do;
60849     +   length _dm5 $ 5; drop _dm5 ;
MPRINT(EM_DIAGRAM):   length _dm5 $ 5;
MPRINT(EM_DIAGRAM):   drop _dm5 ;
60850     +   _dm5 = put( aspiration , $5. );
MPRINT(EM_DIAGRAM):   _dm5 = put( aspiration , $5. );
60851     +   %DMNORMIP( _dm5 )
MPRINT(DMNORMIP):   call dmnorm(_dm5,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
60852     +   if _dm5 = 'STD'  then do;
MPRINT(EM_DIAGRAM):   if _dm5 = 'STD' then do;
60853     +      aspirationstd = 1;
MPRINT(EM_DIAGRAM):   aspirationstd = 1;
60854     +   end;
MPRINT(EM_DIAGRAM):   end;
60855     +   else if _dm5 = 'TURBO'  then do;
MPRINT(EM_DIAGRAM):   else if _dm5 = 'TURBO' then do;
60856     +      aspirationstd = -1;
MPRINT(EM_DIAGRAM):   aspirationstd = -1;
60857     +   end;
MPRINT(EM_DIAGRAM):   end;
60858     +   else do;
MPRINT(EM_DIAGRAM):   else do;
60859     +      aspirationstd = .;
MPRINT(EM_DIAGRAM):   aspirationstd = .;
60860     +      substr(_warn_,2,1) = 'U';
MPRINT(EM_DIAGRAM):   substr(_warn_,2,1) = 'U';
60861     +      _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
60862     +   end;
MPRINT(EM_DIAGRAM):   end;
60863     +end;
MPRINT(EM_DIAGRAM):   end;
60864     +
60865     +*** Generate dummy variables for body_style ;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for body_style ;
60866     +drop body_styleconvertible body_stylehardtop body_stylehatchback
60867     +        body_stylesedan ;
MPRINT(EM_DIAGRAM):   drop body_styleconvertible body_stylehardtop body_stylehatchback
body_stylesedan ;
60868     +*** encoding is sparse, initialize to zero;
MPRINT(EM_DIAGRAM):   *** encoding is sparse, initialize to zero;
60869     +body_styleconvertible = 0;
MPRINT(EM_DIAGRAM):   body_styleconvertible = 0;
60870     +body_stylehardtop = 0;
MPRINT(EM_DIAGRAM):   body_stylehardtop = 0;
60871     +body_stylehatchback = 0;
MPRINT(EM_DIAGRAM):   body_stylehatchback = 0;
60872     +body_stylesedan = 0;
MPRINT(EM_DIAGRAM):   body_stylesedan = 0;
60873     +if missing( body_style ) then do;
MPRINT(EM_DIAGRAM):   if missing( body_style ) then do;
60874     +   body_styleconvertible = .;
MPRINT(EM_DIAGRAM):   body_styleconvertible = .;
60875     +   body_stylehardtop = .;
MPRINT(EM_DIAGRAM):   body_stylehardtop = .;
60876     +   body_stylehatchback = .;
MPRINT(EM_DIAGRAM):   body_stylehatchback = .;
60877     +   body_stylesedan = .;
MPRINT(EM_DIAGRAM):   body_stylesedan = .;
60878     +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
60879     +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
60880     +end;
MPRINT(EM_DIAGRAM):   end;
60881     +else do;
MPRINT(EM_DIAGRAM):   else do;
60882     +   length _dm11 $ 11; drop _dm11 ;
MPRINT(EM_DIAGRAM):   length _dm11 $ 11;
MPRINT(EM_DIAGRAM):   drop _dm11 ;
60883     +   %DMNORMCP( body_style , _dm11 )
MPRINT(DMNORMCP):   _dm11=dmnorm(body_style,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMCP):  );
60884     +   _dm_find = 0; drop _dm_find;
MPRINT(EM_DIAGRAM):   _dm_find = 0;
MPRINT(EM_DIAGRAM):   drop _dm_find;
60885     +   if _dm11 <= 'HATCHBACK'  then do;
MPRINT(EM_DIAGRAM):   if _dm11 <= 'HATCHBACK' then do;
60886     +      if _dm11 <= 'HARDTOP'  then do;
MPRINT(EM_DIAGRAM):   if _dm11 <= 'HARDTOP' then do;
60887     +         if _dm11 = 'CONVERTIBLE'  then do;
MPRINT(EM_DIAGRAM):   if _dm11 = 'CONVERTIBLE' then do;
60888     +            body_styleconvertible = 1;
MPRINT(EM_DIAGRAM):   body_styleconvertible = 1;
60889     +            _dm_find = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
60890     +         end;
MPRINT(EM_DIAGRAM):   end;
60891     +         else do;
MPRINT(EM_DIAGRAM):   else do;
60892     +            if _dm11 = 'HARDTOP'  then do;
MPRINT(EM_DIAGRAM):   if _dm11 = 'HARDTOP' then do;
60893     +               body_stylehardtop = 1;
MPRINT(EM_DIAGRAM):   body_stylehardtop = 1;
60894     +               _dm_find = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
60895     +            end;
MPRINT(EM_DIAGRAM):   end;
60896     +         end;
MPRINT(EM_DIAGRAM):   end;
60897     +      end;
MPRINT(EM_DIAGRAM):   end;
60898     +      else do;
MPRINT(EM_DIAGRAM):   else do;
60899     +         if _dm11 = 'HATCHBACK'  then do;
MPRINT(EM_DIAGRAM):   if _dm11 = 'HATCHBACK' then do;
60900     +            body_stylehatchback = 1;
MPRINT(EM_DIAGRAM):   body_stylehatchback = 1;
60901     +            _dm_find = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
60902     +         end;
MPRINT(EM_DIAGRAM):   end;
60903     +      end;
MPRINT(EM_DIAGRAM):   end;
60904     +   end;
MPRINT(EM_DIAGRAM):   end;
60905     +   else do;
MPRINT(EM_DIAGRAM):   else do;
60906     +      if _dm11 = 'SEDAN'  then do;
MPRINT(EM_DIAGRAM):   if _dm11 = 'SEDAN' then do;
60907     +         body_stylesedan = 1;
MPRINT(EM_DIAGRAM):   body_stylesedan = 1;
60908     +         _dm_find = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
60909     +      end;
MPRINT(EM_DIAGRAM):   end;
60910     +      else do;
MPRINT(EM_DIAGRAM):   else do;
60911     +         if _dm11 = 'WAGON'  then do;
MPRINT(EM_DIAGRAM):   if _dm11 = 'WAGON' then do;
60912     +            body_styleconvertible = -1;
MPRINT(EM_DIAGRAM):   body_styleconvertible = -1;
60913     +            body_stylehardtop = -1;
MPRINT(EM_DIAGRAM):   body_stylehardtop = -1;
60914     +            body_stylehatchback = -1;
MPRINT(EM_DIAGRAM):   body_stylehatchback = -1;
60915     +            body_stylesedan = -1;
MPRINT(EM_DIAGRAM):   body_stylesedan = -1;
60916     +            _dm_find = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
60917     +         end;
MPRINT(EM_DIAGRAM):   end;
60918     +      end;
MPRINT(EM_DIAGRAM):   end;
60919     +   end;
MPRINT(EM_DIAGRAM):   end;
60920     +   if not _dm_find then do;
MPRINT(EM_DIAGRAM):   if not _dm_find then do;
60921     +      body_styleconvertible = .;
MPRINT(EM_DIAGRAM):   body_styleconvertible = .;
60922     +      body_stylehardtop = .;
MPRINT(EM_DIAGRAM):   body_stylehardtop = .;
60923     +      body_stylehatchback = .;
MPRINT(EM_DIAGRAM):   body_stylehatchback = .;
60924     +      body_stylesedan = .;
MPRINT(EM_DIAGRAM):   body_stylesedan = .;
60925     +      substr(_warn_,2,1) = 'U';
MPRINT(EM_DIAGRAM):   substr(_warn_,2,1) = 'U';
60926     +      _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
60927     +   end;
MPRINT(EM_DIAGRAM):   end;
60928     +end;
MPRINT(EM_DIAGRAM):   end;
60929     +
60930     +*** Generate dummy variables for drive_wheels ;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for drive_wheels ;
60931     +drop drive_wheels4wd drive_wheelsfwd ;
MPRINT(EM_DIAGRAM):   drop drive_wheels4wd drive_wheelsfwd ;
60932     +if missing( drive_wheels ) then do;
MPRINT(EM_DIAGRAM):   if missing( drive_wheels ) then do;
60933     +   drive_wheels4wd = .;
MPRINT(EM_DIAGRAM):   drive_wheels4wd = .;
60934     +   drive_wheelsfwd = .;
MPRINT(EM_DIAGRAM):   drive_wheelsfwd = .;
60935     +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
60936     +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
60937     +end;
MPRINT(EM_DIAGRAM):   end;
60938     +else do;
MPRINT(EM_DIAGRAM):   else do;
60939     +   length _dm3 $ 3; drop _dm3 ;
MPRINT(EM_DIAGRAM):   length _dm3 $ 3;
MPRINT(EM_DIAGRAM):   drop _dm3 ;
60940     +   %DMNORMCP( drive_wheels , _dm3 )
MPRINT(DMNORMCP):   _dm3=dmnorm(drive_wheels,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMCP):  );
60941     +   if _dm3 = 'FWD'  then do;
MPRINT(EM_DIAGRAM):   if _dm3 = 'FWD' then do;
60942     +      drive_wheels4wd = 0;
MPRINT(EM_DIAGRAM):   drive_wheels4wd = 0;
60943     +      drive_wheelsfwd = 1;
MPRINT(EM_DIAGRAM):   drive_wheelsfwd = 1;
60944     +   end;
MPRINT(EM_DIAGRAM):   end;
60945     +   else if _dm3 = 'RWD'  then do;
MPRINT(EM_DIAGRAM):   else if _dm3 = 'RWD' then do;
60946     +      drive_wheels4wd = -1;
MPRINT(EM_DIAGRAM):   drive_wheels4wd = -1;
60947     +      drive_wheelsfwd = -1;
MPRINT(EM_DIAGRAM):   drive_wheelsfwd = -1;
60948     +   end;
MPRINT(EM_DIAGRAM):   end;
60949     +   else if _dm3 = '4WD'  then do;
MPRINT(EM_DIAGRAM):   else if _dm3 = '4WD' then do;
60950     +      drive_wheels4wd = 1;
MPRINT(EM_DIAGRAM):   drive_wheels4wd = 1;
60951     +      drive_wheelsfwd = 0;
MPRINT(EM_DIAGRAM):   drive_wheelsfwd = 0;
60952     +   end;
MPRINT(EM_DIAGRAM):   end;
60953     +   else do;
MPRINT(EM_DIAGRAM):   else do;
60954     +      drive_wheels4wd = .;
MPRINT(EM_DIAGRAM):   drive_wheels4wd = .;
60955     +      drive_wheelsfwd = .;
MPRINT(EM_DIAGRAM):   drive_wheelsfwd = .;
60956     +      substr(_warn_,2,1) = 'U';
MPRINT(EM_DIAGRAM):   substr(_warn_,2,1) = 'U';
60957     +      _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
60958     +   end;
MPRINT(EM_DIAGRAM):   end;
60959     +end;
MPRINT(EM_DIAGRAM):   end;
60960     +
60961     +*** Generate dummy variables for engine_location ;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for engine_location ;
60962     +drop engine_locationfront ;
MPRINT(EM_DIAGRAM):   drop engine_locationfront ;
60963     +if missing( engine_location ) then do;
MPRINT(EM_DIAGRAM):   if missing( engine_location ) then do;
60964     +   engine_locationfront = .;
MPRINT(EM_DIAGRAM):   engine_locationfront = .;
60965     +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
60966     +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
60967     +end;
MPRINT(EM_DIAGRAM):   end;
60968     +else do;
MPRINT(EM_DIAGRAM):   else do;
60969     +   length _dm5 $ 5; drop _dm5 ;
MPRINT(EM_DIAGRAM):   length _dm5 $ 5;
MPRINT(EM_DIAGRAM):   drop _dm5 ;
60970     +   %DMNORMCP( engine_location , _dm5 )
MPRINT(DMNORMCP):   _dm5=dmnorm(engine_location,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMCP):  );
60971     +   if _dm5 = 'FRONT'  then do;
MPRINT(EM_DIAGRAM):   if _dm5 = 'FRONT' then do;
60972     +      engine_locationfront = 1;
MPRINT(EM_DIAGRAM):   engine_locationfront = 1;
60973     +   end;
MPRINT(EM_DIAGRAM):   end;
60974     +   else if _dm5 = 'REAR'  then do;
MPRINT(EM_DIAGRAM):   else if _dm5 = 'REAR' then do;
60975     +      engine_locationfront = -1;
MPRINT(EM_DIAGRAM):   engine_locationfront = -1;
60976     +   end;
MPRINT(EM_DIAGRAM):   end;
60977     +   else do;
MPRINT(EM_DIAGRAM):   else do;
60978     +      engine_locationfront = .;
MPRINT(EM_DIAGRAM):   engine_locationfront = .;
60979     +      substr(_warn_,2,1) = 'U';
MPRINT(EM_DIAGRAM):   substr(_warn_,2,1) = 'U';
60980     +      _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
60981     +   end;
MPRINT(EM_DIAGRAM):   end;
60982     +end;
MPRINT(EM_DIAGRAM):   end;
60983     +
60984     +*** Generate dummy variables for engine_type ;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for engine_type ;
60985     +drop engine_typedohc engine_typel engine_typeohc engine_typeohcf
60986     +        engine_typeohcv ;
MPRINT(EM_DIAGRAM):   drop engine_typedohc engine_typel engine_typeohc engine_typeohcf
engine_typeohcv ;
60987     +*** encoding is sparse, initialize to zero;
MPRINT(EM_DIAGRAM):   *** encoding is sparse, initialize to zero;
60988     +engine_typedohc = 0;
MPRINT(EM_DIAGRAM):   engine_typedohc = 0;
60989     +engine_typel = 0;
MPRINT(EM_DIAGRAM):   engine_typel = 0;
60990     +engine_typeohc = 0;
MPRINT(EM_DIAGRAM):   engine_typeohc = 0;
60991     +engine_typeohcf = 0;
MPRINT(EM_DIAGRAM):   engine_typeohcf = 0;
60992     +engine_typeohcv = 0;
MPRINT(EM_DIAGRAM):   engine_typeohcv = 0;
60993     +if missing( engine_type ) then do;
MPRINT(EM_DIAGRAM):   if missing( engine_type ) then do;
60994     +   engine_typedohc = .;
MPRINT(EM_DIAGRAM):   engine_typedohc = .;
60995     +   engine_typel = .;
MPRINT(EM_DIAGRAM):   engine_typel = .;
60996     +   engine_typeohc = .;
MPRINT(EM_DIAGRAM):   engine_typeohc = .;
60997     +   engine_typeohcf = .;
MPRINT(EM_DIAGRAM):   engine_typeohcf = .;
60998     +   engine_typeohcv = .;
MPRINT(EM_DIAGRAM):   engine_typeohcv = .;
60999     +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
61000     +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
61001     +end;
MPRINT(EM_DIAGRAM):   end;
61002     +else do;
MPRINT(EM_DIAGRAM):   else do;
61003     +   length _dm5 $ 5; drop _dm5 ;
MPRINT(EM_DIAGRAM):   length _dm5 $ 5;
MPRINT(EM_DIAGRAM):   drop _dm5 ;
61004     +   %DMNORMCP( engine_type , _dm5 )
MPRINT(DMNORMCP):   _dm5=dmnorm(engine_type,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMCP):  );
61005     +   if _dm5 = 'OHC'  then do;
MPRINT(EM_DIAGRAM):   if _dm5 = 'OHC' then do;
61006     +      engine_typeohc = 1;
MPRINT(EM_DIAGRAM):   engine_typeohc = 1;
61007     +   end;
MPRINT(EM_DIAGRAM):   end;
61008     +   else if _dm5 = 'OHCF'  then do;
MPRINT(EM_DIAGRAM):   else if _dm5 = 'OHCF' then do;
61009     +      engine_typeohcf = 1;
MPRINT(EM_DIAGRAM):   engine_typeohcf = 1;
61010     +   end;
MPRINT(EM_DIAGRAM):   end;
61011     +   else if _dm5 = 'OHCV'  then do;
MPRINT(EM_DIAGRAM):   else if _dm5 = 'OHCV' then do;
61012     +      engine_typeohcv = 1;
MPRINT(EM_DIAGRAM):   engine_typeohcv = 1;
61013     +   end;
MPRINT(EM_DIAGRAM):   end;
61014     +   else if _dm5 = 'DOHC'  then do;
MPRINT(EM_DIAGRAM):   else if _dm5 = 'DOHC' then do;
61015     +      engine_typedohc = 1;
MPRINT(EM_DIAGRAM):   engine_typedohc = 1;
61016     +   end;
MPRINT(EM_DIAGRAM):   end;
61017     +   else if _dm5 = 'L'  then do;
MPRINT(EM_DIAGRAM):   else if _dm5 = 'L' then do;
61018     +      engine_typel = 1;
MPRINT(EM_DIAGRAM):   engine_typel = 1;
61019     +   end;
MPRINT(EM_DIAGRAM):   end;
61020     +   else if _dm5 = 'ROTOR'  then do;
MPRINT(EM_DIAGRAM):   else if _dm5 = 'ROTOR' then do;
61021     +      engine_typedohc = -1;
MPRINT(EM_DIAGRAM):   engine_typedohc = -1;
61022     +      engine_typel = -1;
MPRINT(EM_DIAGRAM):   engine_typel = -1;
61023     +      engine_typeohc = -1;
MPRINT(EM_DIAGRAM):   engine_typeohc = -1;
61024     +      engine_typeohcf = -1;
MPRINT(EM_DIAGRAM):   engine_typeohcf = -1;
61025     +      engine_typeohcv = -1;
MPRINT(EM_DIAGRAM):   engine_typeohcv = -1;
61026     +   end;
MPRINT(EM_DIAGRAM):   end;
61027     +   else do;
MPRINT(EM_DIAGRAM):   else do;
61028     +      engine_typedohc = .;
MPRINT(EM_DIAGRAM):   engine_typedohc = .;
61029     +      engine_typel = .;
MPRINT(EM_DIAGRAM):   engine_typel = .;
61030     +      engine_typeohc = .;
MPRINT(EM_DIAGRAM):   engine_typeohc = .;
61031     +      engine_typeohcf = .;
MPRINT(EM_DIAGRAM):   engine_typeohcf = .;
61032     +      engine_typeohcv = .;
MPRINT(EM_DIAGRAM):   engine_typeohcv = .;
61033     +      substr(_warn_,2,1) = 'U';
MPRINT(EM_DIAGRAM):   substr(_warn_,2,1) = 'U';
61034     +      _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
61035     +   end;
MPRINT(EM_DIAGRAM):   end;
61036     +end;
MPRINT(EM_DIAGRAM):   end;
61037     +
61038     +*** Generate dummy variables for fuel_system ;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for fuel_system ;
61039     +drop fuel_system1bbl fuel_system2bbl fuel_system4bbl fuel_systemidi
61040     +        fuel_systemmpfi ;
MPRINT(EM_DIAGRAM):   drop fuel_system1bbl fuel_system2bbl fuel_system4bbl fuel_systemidi
fuel_systemmpfi ;
61041     +*** encoding is sparse, initialize to zero;
MPRINT(EM_DIAGRAM):   *** encoding is sparse, initialize to zero;
61042     +fuel_system1bbl = 0;
MPRINT(EM_DIAGRAM):   fuel_system1bbl = 0;
61043     +fuel_system2bbl = 0;
MPRINT(EM_DIAGRAM):   fuel_system2bbl = 0;
61044     +fuel_system4bbl = 0;
MPRINT(EM_DIAGRAM):   fuel_system4bbl = 0;
61045     +fuel_systemidi = 0;
MPRINT(EM_DIAGRAM):   fuel_systemidi = 0;
61046     +fuel_systemmpfi = 0;
MPRINT(EM_DIAGRAM):   fuel_systemmpfi = 0;
61047     +if missing( fuel_system ) then do;
MPRINT(EM_DIAGRAM):   if missing( fuel_system ) then do;
61048     +   fuel_system1bbl = .;
MPRINT(EM_DIAGRAM):   fuel_system1bbl = .;
61049     +   fuel_system2bbl = .;
MPRINT(EM_DIAGRAM):   fuel_system2bbl = .;
61050     +   fuel_system4bbl = .;
MPRINT(EM_DIAGRAM):   fuel_system4bbl = .;
61051     +   fuel_systemidi = .;
MPRINT(EM_DIAGRAM):   fuel_systemidi = .;
61052     +   fuel_systemmpfi = .;
MPRINT(EM_DIAGRAM):   fuel_systemmpfi = .;
61053     +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
61054     +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
61055     +end;
MPRINT(EM_DIAGRAM):   end;
61056     +else do;
MPRINT(EM_DIAGRAM):   else do;
61057     +   length _dm4 $ 4; drop _dm4 ;
MPRINT(EM_DIAGRAM):   length _dm4 $ 4;
MPRINT(EM_DIAGRAM):   drop _dm4 ;
61058     +   %DMNORMCP( fuel_system , _dm4 )
MPRINT(DMNORMCP):   _dm4=dmnorm(fuel_system,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMCP):  );
61059     +   if _dm4 = 'MPFI'  then do;
MPRINT(EM_DIAGRAM):   if _dm4 = 'MPFI' then do;
61060     +      fuel_systemmpfi = 1;
MPRINT(EM_DIAGRAM):   fuel_systemmpfi = 1;
61061     +   end;
MPRINT(EM_DIAGRAM):   end;
61062     +   else if _dm4 = '2BBL'  then do;
MPRINT(EM_DIAGRAM):   else if _dm4 = '2BBL' then do;
61063     +      fuel_system2bbl = 1;
MPRINT(EM_DIAGRAM):   fuel_system2bbl = 1;
61064     +   end;
MPRINT(EM_DIAGRAM):   end;
61065     +   else if _dm4 = 'IDI'  then do;
MPRINT(EM_DIAGRAM):   else if _dm4 = 'IDI' then do;
61066     +      fuel_systemidi = 1;
MPRINT(EM_DIAGRAM):   fuel_systemidi = 1;
61067     +   end;
MPRINT(EM_DIAGRAM):   end;
61068     +   else if _dm4 = '1BBL'  then do;
MPRINT(EM_DIAGRAM):   else if _dm4 = '1BBL' then do;
61069     +      fuel_system1bbl = 1;
MPRINT(EM_DIAGRAM):   fuel_system1bbl = 1;
61070     +   end;
MPRINT(EM_DIAGRAM):   end;
61071     +   else if _dm4 = 'SPDI'  then do;
MPRINT(EM_DIAGRAM):   else if _dm4 = 'SPDI' then do;
61072     +      fuel_system1bbl = -1;
MPRINT(EM_DIAGRAM):   fuel_system1bbl = -1;
61073     +      fuel_system2bbl = -1;
MPRINT(EM_DIAGRAM):   fuel_system2bbl = -1;
61074     +      fuel_system4bbl = -1;
MPRINT(EM_DIAGRAM):   fuel_system4bbl = -1;
61075     +      fuel_systemidi = -1;
MPRINT(EM_DIAGRAM):   fuel_systemidi = -1;
61076     +      fuel_systemmpfi = -1;
MPRINT(EM_DIAGRAM):   fuel_systemmpfi = -1;
61077     +   end;
MPRINT(EM_DIAGRAM):   end;
61078     +   else if _dm4 = '4BBL'  then do;
MPRINT(EM_DIAGRAM):   else if _dm4 = '4BBL' then do;
61079     +      fuel_system4bbl = 1;
MPRINT(EM_DIAGRAM):   fuel_system4bbl = 1;
61080     +   end;
MPRINT(EM_DIAGRAM):   end;
61081     +   else do;
MPRINT(EM_DIAGRAM):   else do;
61082     +      fuel_system1bbl = .;
MPRINT(EM_DIAGRAM):   fuel_system1bbl = .;
61083     +      fuel_system2bbl = .;
MPRINT(EM_DIAGRAM):   fuel_system2bbl = .;
61084     +      fuel_system4bbl = .;
MPRINT(EM_DIAGRAM):   fuel_system4bbl = .;
61085     +      fuel_systemidi = .;
MPRINT(EM_DIAGRAM):   fuel_systemidi = .;
61086     +      fuel_systemmpfi = .;
MPRINT(EM_DIAGRAM):   fuel_systemmpfi = .;
61087     +      substr(_warn_,2,1) = 'U';
MPRINT(EM_DIAGRAM):   substr(_warn_,2,1) = 'U';
61088     +      _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
61089     +   end;
MPRINT(EM_DIAGRAM):   end;
61090     +end;
MPRINT(EM_DIAGRAM):   end;
61091     +
61092     +*** Generate dummy variables for fuel_type ;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for fuel_type ;
61093     +drop fuel_typediesel ;
MPRINT(EM_DIAGRAM):   drop fuel_typediesel ;
61094     +if missing( fuel_type ) then do;
MPRINT(EM_DIAGRAM):   if missing( fuel_type ) then do;
61095     +   fuel_typediesel = .;
MPRINT(EM_DIAGRAM):   fuel_typediesel = .;
61096     +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
61097     +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
61098     +end;
MPRINT(EM_DIAGRAM):   end;
61099     +else do;
MPRINT(EM_DIAGRAM):   else do;
61100     +   length _dm6 $ 6; drop _dm6 ;
MPRINT(EM_DIAGRAM):   length _dm6 $ 6;
MPRINT(EM_DIAGRAM):   drop _dm6 ;
61101     +   %DMNORMCP( fuel_type , _dm6 )
MPRINT(DMNORMCP):   _dm6=dmnorm(fuel_type,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMCP):  );
61102     +   if _dm6 = 'GAS'  then do;
MPRINT(EM_DIAGRAM):   if _dm6 = 'GAS' then do;
61103     +      fuel_typediesel = -1;
MPRINT(EM_DIAGRAM):   fuel_typediesel = -1;
61104     +   end;
MPRINT(EM_DIAGRAM):   end;
61105     +   else if _dm6 = 'DIESEL'  then do;
MPRINT(EM_DIAGRAM):   else if _dm6 = 'DIESEL' then do;
61106     +      fuel_typediesel = 1;
MPRINT(EM_DIAGRAM):   fuel_typediesel = 1;
61107     +   end;
MPRINT(EM_DIAGRAM):   end;
61108     +   else do;
MPRINT(EM_DIAGRAM):   else do;
61109     +      fuel_typediesel = .;
MPRINT(EM_DIAGRAM):   fuel_typediesel = .;
61110     +      substr(_warn_,2,1) = 'U';
MPRINT(EM_DIAGRAM):   substr(_warn_,2,1) = 'U';
61111     +      _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
61112     +   end;
MPRINT(EM_DIAGRAM):   end;
61113     +end;
MPRINT(EM_DIAGRAM):   end;
61114     +
61115     +*** Generate dummy variables for num_of_cylinders ;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for num_of_cylinders ;
61116     +drop num_of_cylindersfive num_of_cylindersfour num_of_cylinderssix ;
MPRINT(EM_DIAGRAM):   drop num_of_cylindersfive num_of_cylindersfour num_of_cylinderssix ;
61117     +if missing( num_of_cylinders ) then do;
MPRINT(EM_DIAGRAM):   if missing( num_of_cylinders ) then do;
61118     +   num_of_cylindersfive = .;
MPRINT(EM_DIAGRAM):   num_of_cylindersfive = .;
61119     +   num_of_cylindersfour = .;
MPRINT(EM_DIAGRAM):   num_of_cylindersfour = .;
61120     +   num_of_cylinderssix = .;
MPRINT(EM_DIAGRAM):   num_of_cylinderssix = .;
61121     +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
61122     +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
61123     +end;
MPRINT(EM_DIAGRAM):   end;
61124     +else do;
MPRINT(EM_DIAGRAM):   else do;
61125     +   length _dm6 $ 6; drop _dm6 ;
MPRINT(EM_DIAGRAM):   length _dm6 $ 6;
MPRINT(EM_DIAGRAM):   drop _dm6 ;
61126     +   %DMNORMCP( num_of_cylinders , _dm6 )
MPRINT(DMNORMCP):   _dm6=dmnorm(num_of_cylinders,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMCP):  );
61127     +   if _dm6 = 'FOUR'  then do;
MPRINT(EM_DIAGRAM):   if _dm6 = 'FOUR' then do;
61128     +      num_of_cylindersfive = 0;
MPRINT(EM_DIAGRAM):   num_of_cylindersfive = 0;
61129     +      num_of_cylindersfour = 1;
MPRINT(EM_DIAGRAM):   num_of_cylindersfour = 1;
61130     +      num_of_cylinderssix = 0;
MPRINT(EM_DIAGRAM):   num_of_cylinderssix = 0;
61131     +   end;
MPRINT(EM_DIAGRAM):   end;
61132     +   else if _dm6 = 'SIX'  then do;
MPRINT(EM_DIAGRAM):   else if _dm6 = 'SIX' then do;
61133     +      num_of_cylindersfive = 0;
MPRINT(EM_DIAGRAM):   num_of_cylindersfive = 0;
61134     +      num_of_cylindersfour = 0;
MPRINT(EM_DIAGRAM):   num_of_cylindersfour = 0;
61135     +      num_of_cylinderssix = 1;
MPRINT(EM_DIAGRAM):   num_of_cylinderssix = 1;
61136     +   end;
MPRINT(EM_DIAGRAM):   end;
61137     +   else if _dm6 = 'FIVE'  then do;
MPRINT(EM_DIAGRAM):   else if _dm6 = 'FIVE' then do;
61138     +      num_of_cylindersfive = 1;
MPRINT(EM_DIAGRAM):   num_of_cylindersfive = 1;
61139     +      num_of_cylindersfour = 0;
MPRINT(EM_DIAGRAM):   num_of_cylindersfour = 0;
61140     +      num_of_cylinderssix = 0;
MPRINT(EM_DIAGRAM):   num_of_cylinderssix = 0;
61141     +   end;
MPRINT(EM_DIAGRAM):   end;
61142     +   else if _dm6 = 'TWO'  then do;
MPRINT(EM_DIAGRAM):   else if _dm6 = 'TWO' then do;
61143     +      num_of_cylindersfive = -1;
MPRINT(EM_DIAGRAM):   num_of_cylindersfive = -1;
61144     +      num_of_cylindersfour = -1;
MPRINT(EM_DIAGRAM):   num_of_cylindersfour = -1;
61145     +      num_of_cylinderssix = -1;
MPRINT(EM_DIAGRAM):   num_of_cylinderssix = -1;
61146     +   end;
MPRINT(EM_DIAGRAM):   end;
61147     +   else do;
MPRINT(EM_DIAGRAM):   else do;
61148     +      num_of_cylindersfive = .;
MPRINT(EM_DIAGRAM):   num_of_cylindersfive = .;
61149     +      num_of_cylindersfour = .;
MPRINT(EM_DIAGRAM):   num_of_cylindersfour = .;
61150     +      num_of_cylinderssix = .;
MPRINT(EM_DIAGRAM):   num_of_cylinderssix = .;
61151     +      substr(_warn_,2,1) = 'U';
MPRINT(EM_DIAGRAM):   substr(_warn_,2,1) = 'U';
61152     +      _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
61153     +   end;
MPRINT(EM_DIAGRAM):   end;
61154     +end;
MPRINT(EM_DIAGRAM):   end;
61155     +
61156     +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
61157     +*** Checking missing input Interval
61158     +*** *************************;
MPRINT(EM_DIAGRAM):   *** Checking missing input Interval *** *************************;
61159     +
61160     +IF NMISS(
61161     +   IMP_bore ,
61162     +   IMP_price ,
61163     +   IMP_stroke ,
61164     +   city_mpg ,
61165     +   compression_ratio ,
61166     +   curb_weight ,
61167     +   engine_size ,
61168     +   height ,
61169     +   highway_mpg ,
61170     +   horsepower ,
61171     +   length ,
61172     +   peak_rpm ,
61173     +   wheel_base ,
61174     +   width   ) THEN DO;
MPRINT(EM_DIAGRAM):   IF NMISS( IMP_bore , IMP_price , IMP_stroke , city_mpg ,
compression_ratio , curb_weight , engine_size , height , highway_mpg , horsepower , length ,
peak_rpm , wheel_base , width ) THEN DO;
61175     +   SUBSTR(_WARN_, 1, 1) = 'M';
MPRINT(EM_DIAGRAM):   SUBSTR(_WARN_, 1, 1) = 'M';
61176     +
61177     +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
61178     +END;
MPRINT(EM_DIAGRAM):   END;
61179     +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
61180     +*** Writing the Node intvl ;
MPRINT(EM_DIAGRAM):   *** Writing the Node intvl ;
61181     +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
61182     +IF _DM_BAD EQ 0 THEN DO;
MPRINT(EM_DIAGRAM):   IF _DM_BAD EQ 0 THEN DO;
61183     +   S_IMP_bore  =    -13.3604302656684 +     4.04536293034574 * IMP_bore ;
MPRINT(EM_DIAGRAM):   S_IMP_bore = -13.3604302656684 + 4.04536293034574 * IMP_bore ;
61184     +   S_IMP_price  =    -1.76956867778247 +     0.00013853770372 * IMP_price ;
MPRINT(EM_DIAGRAM):   S_IMP_price = -1.76956867778247 + 0.00013853770372 * IMP_price ;
61185     +   S_IMP_stroke  =    -10.8668653654577 +     3.34228668303343 * IMP_stroke ;
MPRINT(EM_DIAGRAM):   S_IMP_stroke = -10.8668653654577 + 3.34228668303343 * IMP_stroke ;
61186     +   S_city_mpg  =    -4.20980412468247 +     0.16438126218986 * city_mpg ;
MPRINT(EM_DIAGRAM):   S_city_mpg = -4.20980412468247 + 0.16438126218986 * city_mpg ;
61187     +   S_compression_ratio  =    -2.46137870028453 +     0.23723903386806 *
61188     +        compression_ratio ;
MPRINT(EM_DIAGRAM):   S_compression_ratio = -2.46137870028453 + 0.23723903386806 *
compression_ratio ;
61189     +   S_curb_weight  =    -5.31291947276211 +     0.00211052077492 * curb_weight
61190     +         ;
MPRINT(EM_DIAGRAM):   S_curb_weight = -5.31291947276211 + 0.00211052077492 * curb_weight ;
61191     +   S_engine_size  =    -3.59635582610259 +      0.0290802605814 * engine_size
61192     +         ;
MPRINT(EM_DIAGRAM):   S_engine_size = -3.59635582610259 + 0.0290802605814 * engine_size ;
61193     +   S_height  =    -21.8926608140893 +     0.40589318675657 * height ;
MPRINT(EM_DIAGRAM):   S_height = -21.8926608140893 + 0.40589318675657 * height ;
61194     +   S_highway_mpg  =      -4.989308989555 +     0.16011903047352 * highway_mpg
61195     +         ;
MPRINT(EM_DIAGRAM):   S_highway_mpg = -4.989308989555 + 0.16011903047352 * highway_mpg ;
61196     +   S_horsepower  =    -2.74643097264309 +     0.02734944206973 * horsepower ;
MPRINT(EM_DIAGRAM):   S_horsepower = -2.74643097264309 + 0.02734944206973 * horsepower ;
61197     +   S_length  =    -15.2378498365576 +     0.08781104037663 * length ;
MPRINT(EM_DIAGRAM):   S_length = -15.2378498365576 + 0.08781104037663 * length ;
61198     +   S_peak_rpm  =    -10.6885709541859 +     0.00208333904184 * peak_rpm ;
MPRINT(EM_DIAGRAM):   S_peak_rpm = -10.6885709541859 + 0.00208333904184 * peak_rpm ;
61199     +   S_wheel_base  =    -17.8009087180129 +     0.18059887504832 * wheel_base ;
MPRINT(EM_DIAGRAM):   S_wheel_base = -17.8009087180129 + 0.18059887504832 * wheel_base ;
61200     +   S_width  =      -35.79721220308 +     0.54490010203333 * width ;
MPRINT(EM_DIAGRAM):   S_width = -35.79721220308 + 0.54490010203333 * width ;
61201     +END;
MPRINT(EM_DIAGRAM):   END;
61202     +ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
61203     +   IF MISSING( IMP_bore ) THEN S_IMP_bore  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( IMP_bore ) THEN S_IMP_bore = . ;
61204     +   ELSE S_IMP_bore  =    -13.3604302656684 +     4.04536293034574 * IMP_bore ;
MPRINT(EM_DIAGRAM):   ELSE S_IMP_bore = -13.3604302656684 + 4.04536293034574 * IMP_bore ;
61205     +   IF MISSING( IMP_price ) THEN S_IMP_price  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( IMP_price ) THEN S_IMP_price = . ;
61206     +   ELSE S_IMP_price  =    -1.76956867778247 +     0.00013853770372 * IMP_price
61207     +         ;
MPRINT(EM_DIAGRAM):   ELSE S_IMP_price = -1.76956867778247 + 0.00013853770372 * IMP_price ;
61208     +   IF MISSING( IMP_stroke ) THEN S_IMP_stroke  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( IMP_stroke ) THEN S_IMP_stroke = . ;
61209     +   ELSE S_IMP_stroke  =    -10.8668653654577 +     3.34228668303343 *
61210     +        IMP_stroke ;
MPRINT(EM_DIAGRAM):   ELSE S_IMP_stroke = -10.8668653654577 + 3.34228668303343 * IMP_stroke ;
61211     +   IF MISSING( city_mpg ) THEN S_city_mpg  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( city_mpg ) THEN S_city_mpg = . ;
61212     +   ELSE S_city_mpg  =    -4.20980412468247 +     0.16438126218986 * city_mpg ;
MPRINT(EM_DIAGRAM):   ELSE S_city_mpg = -4.20980412468247 + 0.16438126218986 * city_mpg ;
61213     +   IF MISSING( compression_ratio ) THEN S_compression_ratio  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( compression_ratio ) THEN S_compression_ratio = . ;
61214     +   ELSE S_compression_ratio  =    -2.46137870028453 +     0.23723903386806 *
61215     +        compression_ratio ;
MPRINT(EM_DIAGRAM):   ELSE S_compression_ratio = -2.46137870028453 + 0.23723903386806 *
compression_ratio ;
61216     +   IF MISSING( curb_weight ) THEN S_curb_weight  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( curb_weight ) THEN S_curb_weight = . ;
61217     +   ELSE S_curb_weight  =    -5.31291947276211 +     0.00211052077492 *
61218     +        curb_weight ;
MPRINT(EM_DIAGRAM):   ELSE S_curb_weight = -5.31291947276211 + 0.00211052077492 * curb_weight ;
61219     +   IF MISSING( engine_size ) THEN S_engine_size  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( engine_size ) THEN S_engine_size = . ;
61220     +   ELSE S_engine_size  =    -3.59635582610259 +      0.0290802605814 *
61221     +        engine_size ;
MPRINT(EM_DIAGRAM):   ELSE S_engine_size = -3.59635582610259 + 0.0290802605814 * engine_size ;
61222     +   IF MISSING( height ) THEN S_height  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( height ) THEN S_height = . ;
61223     +   ELSE S_height  =    -21.8926608140893 +     0.40589318675657 * height ;
MPRINT(EM_DIAGRAM):   ELSE S_height = -21.8926608140893 + 0.40589318675657 * height ;
61224     +   IF MISSING( highway_mpg ) THEN S_highway_mpg  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( highway_mpg ) THEN S_highway_mpg = . ;
61225     +   ELSE S_highway_mpg  =      -4.989308989555 +     0.16011903047352 *
61226     +        highway_mpg ;
MPRINT(EM_DIAGRAM):   ELSE S_highway_mpg = -4.989308989555 + 0.16011903047352 * highway_mpg ;
61227     +   IF MISSING( horsepower ) THEN S_horsepower  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( horsepower ) THEN S_horsepower = . ;
61228     +   ELSE S_horsepower  =    -2.74643097264309 +     0.02734944206973 *
61229     +        horsepower ;
MPRINT(EM_DIAGRAM):   ELSE S_horsepower = -2.74643097264309 + 0.02734944206973 * horsepower ;
61230     +   IF MISSING( length ) THEN S_length  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( length ) THEN S_length = . ;
61231     +   ELSE S_length  =    -15.2378498365576 +     0.08781104037663 * length ;
MPRINT(EM_DIAGRAM):   ELSE S_length = -15.2378498365576 + 0.08781104037663 * length ;
61232     +   IF MISSING( peak_rpm ) THEN S_peak_rpm  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( peak_rpm ) THEN S_peak_rpm = . ;
61233     +   ELSE S_peak_rpm  =    -10.6885709541859 +     0.00208333904184 * peak_rpm ;
MPRINT(EM_DIAGRAM):   ELSE S_peak_rpm = -10.6885709541859 + 0.00208333904184 * peak_rpm ;
61234     +   IF MISSING( wheel_base ) THEN S_wheel_base  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( wheel_base ) THEN S_wheel_base = . ;
61235     +   ELSE S_wheel_base  =    -17.8009087180129 +     0.18059887504832 *
61236     +        wheel_base ;
MPRINT(EM_DIAGRAM):   ELSE S_wheel_base = -17.8009087180129 + 0.18059887504832 * wheel_base ;
61237     +   IF MISSING( width ) THEN S_width  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( width ) THEN S_width = . ;
61238     +   ELSE S_width  =      -35.79721220308 +     0.54490010203333 * width ;
MPRINT(EM_DIAGRAM):   ELSE S_width = -35.79721220308 + 0.54490010203333 * width ;
61239     +END;
MPRINT(EM_DIAGRAM):   END;
61240     +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
61241     +*** Writing the Node bin ;
MPRINT(EM_DIAGRAM):   *** Writing the Node bin ;
61242     +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
61243     +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
61244     +*** Writing the Node nom ;
MPRINT(EM_DIAGRAM):   *** Writing the Node nom ;
61245     +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
61246     +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
61247     +*** Writing the Node H1 ;
MPRINT(EM_DIAGRAM):   *** Writing the Node H1 ;
61248     +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
61249     +IF _DM_BAD EQ 0 THEN DO;
MPRINT(EM_DIAGRAM):   IF _DM_BAD EQ 0 THEN DO;
61250     +   H11  =     0.24764702083622 * S_IMP_bore  +     0.28213326401805 *
61251     +        S_IMP_price  +    -0.53879116397667 * S_IMP_stroke
61252     +          +    -0.11931132274074 * S_city_mpg  +     0.09567849674331 *
61253     +        S_compression_ratio  +      0.1935255149849 * S_curb_weight
61254     +          +     -0.0815136152389 * S_engine_size  +     0.16188737913458 *
61255     +        S_height  +     0.09695051488223 * S_highway_mpg
61256     +          +     0.20225749653559 * S_horsepower  +    -0.07669105060228 *
61257     +        S_length  +    -0.47912199175711 * S_peak_rpm
61258     +          +     -0.1232784239268 * S_wheel_base  +     0.32967247826106 *
61259     +        S_width ;
MPRINT(EM_DIAGRAM):   H11 = 0.24764702083622 * S_IMP_bore + 0.28213326401805 * S_IMP_price +
-0.53879116397667 * S_IMP_stroke + -0.11931132274074 * S_city_mpg + 0.09567849674331 *
S_compression_ratio + 0.1935255149849 * S_curb_weight + -0.0815136152389 * S_engine_size +
0.16188737913458 * S_height + 0.09695051488223 * S_highway_mpg + 0.20225749653559 *
S_horsepower + -0.07669105060228 * S_length + -0.47912199175711 * S_peak_rpm +
-0.1232784239268 * S_wheel_base + 0.32967247826106 * S_width ;
61260     +   H12  =     0.25361356900853 * S_IMP_bore  +    -0.01705220399916 *
61261     +        S_IMP_price  +    -0.07011739266761 * S_IMP_stroke
61262     +          +       0.079977664863 * S_city_mpg  +    -0.01814747756212 *
61263     +        S_compression_ratio  +      0.2849876772342 * S_curb_weight
61264     +          +    -0.00397489455247 * S_engine_size  +     0.02719534553776 *
61265     +        S_height  +    -0.18309231474003 * S_highway_mpg
61266     +          +    -0.06204381675248 * S_horsepower  +     0.30761615298988 *
61267     +        S_length  +     0.73467282164771 * S_peak_rpm
61268     +          +     0.29150941282208 * S_wheel_base  +     -0.1117321224432 *
61269     +        S_width ;
MPRINT(EM_DIAGRAM):   H12 = 0.25361356900853 * S_IMP_bore + -0.01705220399916 * S_IMP_price +
-0.07011739266761 * S_IMP_stroke + 0.079977664863 * S_city_mpg + -0.01814747756212 *
S_compression_ratio + 0.2849876772342 * S_curb_weight + -0.00397489455247 * S_engine_size +
0.02719534553776 * S_height + -0.18309231474003 * S_highway_mpg + -0.06204381675248 *
S_horsepower + 0.30761615298988 * S_length + 0.73467282164771 * S_peak_rpm + 0.29150941282208
* S_wheel_base + -0.1117321224432 * S_width ;
61270     +   H13  =    -0.08447128816673 * S_IMP_bore  +    -0.29293151559674 *
61271     +        S_IMP_price  +     0.08250304233007 * S_IMP_stroke
61272     +          +     -0.9236441200224 * S_city_mpg  +     0.18249944739401 *
61273     +        S_compression_ratio  +    -0.41497236958385 * S_curb_weight
61274     +          +    -0.56883798262612 * S_engine_size  +    -0.07597879988065 *
61275     +        S_height  +     0.10515142048938 * S_highway_mpg
61276     +          +     0.15323355736007 * S_horsepower  +     0.18181421956378 *
61277     +        S_length  +     0.39257648170384 * S_peak_rpm
61278     +          +    -1.37993595763031 * S_wheel_base  +     0.45601171372661 *
61279     +        S_width ;
MPRINT(EM_DIAGRAM):   H13 = -0.08447128816673 * S_IMP_bore + -0.29293151559674 * S_IMP_price +
0.08250304233007 * S_IMP_stroke + -0.9236441200224 * S_city_mpg + 0.18249944739401 *
S_compression_ratio + -0.41497236958385 * S_curb_weight + -0.56883798262612 * S_engine_size +
-0.07597879988065 * S_height + 0.10515142048938 * S_highway_mpg + 0.15323355736007 *
S_horsepower + 0.18181421956378 * S_length + 0.39257648170384 * S_peak_rpm + -1.37993595763031
* S_wheel_base + 0.45601171372661 * S_width ;
61280     +   H11  = H11  +    -0.21919555405402 * M_bore0  +     0.15085903800231 *
61281     +        M_num_of_doors0  +    -0.00962570043438 * M_price0
61282     +          +    -0.32149134365324 * M_stroke0 ;
MPRINT(EM_DIAGRAM):   H11 = H11 + -0.21919555405402 * M_bore0 + 0.15085903800231 *
M_num_of_doors0 + -0.00962570043438 * M_price0 + -0.32149134365324 * M_stroke0 ;
61283     +   H12  = H12  +    -0.14016461842775 * M_bore0  +     0.25994321831867 *
61284     +        M_num_of_doors0  +    -0.12741801834042 * M_price0
61285     +          +    -0.31953414263151 * M_stroke0 ;
MPRINT(EM_DIAGRAM):   H12 = H12 + -0.14016461842775 * M_bore0 + 0.25994321831867 *
M_num_of_doors0 + -0.12741801834042 * M_price0 + -0.31953414263151 * M_stroke0 ;
61286     +   H13  = H13  +    -0.37841464171324 * M_bore0  +    -0.06345701158933 *
61287     +        M_num_of_doors0  +     0.28477929824556 * M_price0
61288     +          +    -0.49429909360858 * M_stroke0 ;
MPRINT(EM_DIAGRAM):   H13 = H13 + -0.37841464171324 * M_bore0 + -0.06345701158933 *
M_num_of_doors0 + 0.28477929824556 * M_price0 + -0.49429909360858 * M_stroke0 ;
61289     +   H11  = H11  +    -0.11477055440116 * IMP_num_of_doors2
61290     +          +    -0.07783399585187 * aspirationstd  +    -0.10994675941847 *
61291     +        body_styleconvertible  +    -0.13058366982583 * body_stylehardtop
61292     +          +    -0.21923114725556 * body_stylehatchback
61293     +          +     0.32821169408793 * body_stylesedan  +    -0.14484062500884 *
61294     +        drive_wheels4wd  +    -0.30105219504248 * drive_wheelsfwd
61295     +          +     0.04181245417934 * engine_locationfront
61296     +          +      0.1341639873628 * engine_typedohc  +    -0.13681100308426 *
61297     +        engine_typel  +    -0.08003968427127 * engine_typeohc
61298     +          +     0.17069702796575 * engine_typeohcf  +    -0.12178525541041 *
61299     +        engine_typeohcv  +    -0.07406679737738 * fuel_system1bbl
61300     +          +    -0.01476508675057 * fuel_system2bbl  +    -0.02342675380675 *
61301     +        fuel_system4bbl  +    -0.07761575246892 * fuel_systemidi
61302     +          +     0.07158065221534 * fuel_systemmpfi  +     0.27912180841842 *
61303     +        fuel_typediesel  +     0.02562471178527 * num_of_cylindersfive
61304     +          +    -0.06116758357011 * num_of_cylindersfour
61305     +          +    -0.17869082980453 * num_of_cylinderssix ;
MPRINT(EM_DIAGRAM):   H11 = H11 + -0.11477055440116 * IMP_num_of_doors2 + -0.07783399585187 *
aspirationstd + -0.10994675941847 * body_styleconvertible + -0.13058366982583 *
body_stylehardtop + -0.21923114725556 * body_stylehatchback + 0.32821169408793 *
body_stylesedan + -0.14484062500884 * drive_wheels4wd + -0.30105219504248 * drive_wheelsfwd +
0.04181245417934 * engine_locationfront + 0.1341639873628 * engine_typedohc +
-0.13681100308426 * engine_typel + -0.08003968427127 * engine_typeohc + 0.17069702796575 *
engine_typeohcf + -0.12178525541041 * engine_typeohcv + -0.07406679737738 * fuel_system1bbl +
-0.01476508675057 * fuel_system2bbl + -0.02342675380675 * fuel_system4bbl + -0.07761575246892
* fuel_systemidi + 0.07158065221534 * fuel_systemmpfi + 0.27912180841842 * fuel_typediesel +
0.02562471178527 * num_of_cylindersfive + -0.06116758357011 * num_of_cylindersfour +
-0.17869082980453 * num_of_cylinderssix ;
61306     +   H12  = H12  +    -0.79950652163205 * IMP_num_of_doors2
61307     +          +     0.06022503814421 * aspirationstd  +    -0.03934507532933 *
61308     +        body_styleconvertible  +    -0.19719644812026 * body_stylehardtop
61309     +          +     0.36229771168581 * body_stylehatchback
61310     +          +    -0.30618888006383 * body_stylesedan  +       0.436856065837 *
61311     +        drive_wheels4wd  +     0.43174171171681 * drive_wheelsfwd
61312     +          +     -0.3194288080945 * engine_locationfront
61313     +          +    -0.23077583867824 * engine_typedohc  +     0.01622151793299 *
61314     +        engine_typel  +    -0.00141499417135 * engine_typeohc
61315     +          +     0.25952209543266 * engine_typeohcf  +      0.0695342349125 *
61316     +        engine_typeohcv  +     0.64180901279902 * fuel_system1bbl
61317     +          +    -0.16773032066945 * fuel_system2bbl  +     0.12083740596009 *
61318     +        fuel_system4bbl  +    -0.01593356166188 * fuel_systemidi
61319     +          +    -0.39742729666636 * fuel_systemmpfi  +     0.16035360742573 *
61320     +        fuel_typediesel  +     0.12071629234633 * num_of_cylindersfive
61321     +          +     0.26750120232856 * num_of_cylindersfour
61322     +          +     0.01884923565656 * num_of_cylinderssix ;
MPRINT(EM_DIAGRAM):   H12 = H12 + -0.79950652163205 * IMP_num_of_doors2 + 0.06022503814421 *
aspirationstd + -0.03934507532933 * body_styleconvertible + -0.19719644812026 *
body_stylehardtop + 0.36229771168581 * body_stylehatchback + -0.30618888006383 *
body_stylesedan + 0.436856065837 * drive_wheels4wd + 0.43174171171681 * drive_wheelsfwd +
-0.3194288080945 * engine_locationfront + -0.23077583867824 * engine_typedohc +
0.01622151793299 * engine_typel + -0.00141499417135 * engine_typeohc + 0.25952209543266 *
engine_typeohcf + 0.0695342349125 * engine_typeohcv + 0.64180901279902 * fuel_system1bbl +
-0.16773032066945 * fuel_system2bbl + 0.12083740596009 * fuel_system4bbl + -0.01593356166188 *
fuel_systemidi + -0.39742729666636 * fuel_systemmpfi + 0.16035360742573 * fuel_typediesel +
0.12071629234633 * num_of_cylindersfive + 0.26750120232856 * num_of_cylindersfour +
0.01884923565656 * num_of_cylinderssix ;
61323     +   H13  = H13  +     0.33856869861001 * IMP_num_of_doors2
61324     +          +     0.03676626235743 * aspirationstd  +    -0.04561129850524 *
61325     +        body_styleconvertible  +    -0.04074069227269 * body_stylehardtop
61326     +          +     0.04874708222139 * body_stylehatchback
61327     +          +     0.05582731740112 * body_stylesedan  +     0.32883828198727 *
61328     +        drive_wheels4wd  +     0.22102114241081 * drive_wheelsfwd
61329     +          +    -0.19325018746552 * engine_locationfront
61330     +          +     0.39226207329319 * engine_typedohc  +    -0.29230716421671 *
61331     +        engine_typel  +     0.02671887453383 * engine_typeohc
61332     +          +    -0.76511456522233 * engine_typeohcf  +    -0.08642782539104 *
61333     +        engine_typeohcv  +    -1.37111302632063 * fuel_system1bbl
61334     +          +     0.19046186011514 * fuel_system2bbl  +     0.02802877071491 *
61335     +        fuel_system4bbl  +     0.18999405084301 * fuel_systemidi
61336     +          +     0.85076189905037 * fuel_systemmpfi  +     0.15524254676424 *
61337     +        fuel_typediesel  +      0.3037113350789 * num_of_cylindersfive
61338     +          +     0.16318456895222 * num_of_cylindersfour
61339     +          +    -0.29369169854782 * num_of_cylinderssix ;
MPRINT(EM_DIAGRAM):   H13 = H13 + 0.33856869861001 * IMP_num_of_doors2 + 0.03676626235743 *
aspirationstd + -0.04561129850524 * body_styleconvertible + -0.04074069227269 *
body_stylehardtop + 0.04874708222139 * body_stylehatchback + 0.05582731740112 *
body_stylesedan + 0.32883828198727 * drive_wheels4wd + 0.22102114241081 * drive_wheelsfwd +
-0.19325018746552 * engine_locationfront + 0.39226207329319 * engine_typedohc +
-0.29230716421671 * engine_typel + 0.02671887453383 * engine_typeohc + -0.76511456522233 *
engine_typeohcf + -0.08642782539104 * engine_typeohcv + -1.37111302632063 * fuel_system1bbl +
0.19046186011514 * fuel_system2bbl + 0.02802877071491 * fuel_system4bbl + 0.18999405084301 *
fuel_systemidi + 0.85076189905037 * fuel_systemmpfi + 0.15524254676424 * fuel_typediesel +
0.3037113350789 * num_of_cylindersfive + 0.16318456895222 * num_of_cylindersfour +
-0.29369169854782 * num_of_cylinderssix ;
61340     +   H11  =     -0.0510449793034 + H11 ;
MPRINT(EM_DIAGRAM):   H11 = -0.0510449793034 + H11 ;
61341     +   H12  =     0.56620299684424 + H12 ;
MPRINT(EM_DIAGRAM):   H12 = 0.56620299684424 + H12 ;
61342     +   H13  =     0.54252266558478 + H13 ;
MPRINT(EM_DIAGRAM):   H13 = 0.54252266558478 + H13 ;
61343     +   H11  = TANH(H11 );
MPRINT(EM_DIAGRAM):   H11 = TANH(H11 );
61344     +   H12  = TANH(H12 );
MPRINT(EM_DIAGRAM):   H12 = TANH(H12 );
61345     +   H13  = TANH(H13 );
MPRINT(EM_DIAGRAM):   H13 = TANH(H13 );
61346     +END;
MPRINT(EM_DIAGRAM):   END;
61347     +ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
61348     +   H11  = .;
MPRINT(EM_DIAGRAM):   H11 = .;
61349     +   H12  = .;
MPRINT(EM_DIAGRAM):   H12 = .;
61350     +   H13  = .;
MPRINT(EM_DIAGRAM):   H13 = .;
61351     +END;
MPRINT(EM_DIAGRAM):   END;
61352     +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
61353     +*** Writing the Node Risk ;
MPRINT(EM_DIAGRAM):   *** Writing the Node Risk ;
61354     +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
61355     +
61356     +*** Generate dummy variables for Risk ;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for Risk ;
61357     +drop Risk1 Risk0 ;
MPRINT(EM_DIAGRAM):   drop Risk1 Risk0 ;
61358     +label F_Risk = 'From: Risk' ;
MPRINT(EM_DIAGRAM):   label F_Risk = 'From: Risk' ;
61359     +length F_Risk $ 12;
MPRINT(EM_DIAGRAM):   length F_Risk $ 12;
61360     +F_Risk = put( Risk , BEST12. );
MPRINT(EM_DIAGRAM):   F_Risk = put( Risk , BEST12. );
61361     +%DMNORMIP( F_Risk )
MPRINT(DMNORMIP):   call dmnorm(F_Risk,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
61362     +if missing( Risk ) then do;
MPRINT(EM_DIAGRAM):   if missing( Risk ) then do;
61363     +   Risk1 = .;
MPRINT(EM_DIAGRAM):   Risk1 = .;
61364     +   Risk0 = .;
MPRINT(EM_DIAGRAM):   Risk0 = .;
61365     +end;
MPRINT(EM_DIAGRAM):   end;
61366     +else do;
MPRINT(EM_DIAGRAM):   else do;
61367     +   if F_Risk = '1'  then do;
MPRINT(EM_DIAGRAM):   if F_Risk = '1' then do;
61368     +      Risk1 = 1;
MPRINT(EM_DIAGRAM):   Risk1 = 1;
61369     +      Risk0 = 0;
MPRINT(EM_DIAGRAM):   Risk0 = 0;
61370     +   end;
MPRINT(EM_DIAGRAM):   end;
61371     +   else if F_Risk = '0'  then do;
MPRINT(EM_DIAGRAM):   else if F_Risk = '0' then do;
61372     +      Risk1 = 0;
MPRINT(EM_DIAGRAM):   Risk1 = 0;
61373     +      Risk0 = 1;
MPRINT(EM_DIAGRAM):   Risk0 = 1;
61374     +   end;
MPRINT(EM_DIAGRAM):   end;
61375     +   else do;
MPRINT(EM_DIAGRAM):   else do;
61376     +      Risk1 = .;
MPRINT(EM_DIAGRAM):   Risk1 = .;
61377     +      Risk0 = .;
MPRINT(EM_DIAGRAM):   Risk0 = .;
61378     +   end;
MPRINT(EM_DIAGRAM):   end;
61379     +end;
MPRINT(EM_DIAGRAM):   end;
61380     +IF _DM_BAD EQ 0 THEN DO;
MPRINT(EM_DIAGRAM):   IF _DM_BAD EQ 0 THEN DO;
61381     +   P_Risk1  =     0.49314885360637 * H11  +    -3.90210364732559 * H12
61382     +          +     5.29550173197034 * H13 ;
MPRINT(EM_DIAGRAM):   P_Risk1 = 0.49314885360637 * H11 + -3.90210364732559 * H12 +
5.29550173197034 * H13 ;
61383     +   P_Risk1  =     0.56802040802389 + P_Risk1 ;
MPRINT(EM_DIAGRAM):   P_Risk1 = 0.56802040802389 + P_Risk1 ;
61384     +   P_Risk0  = 0;
MPRINT(EM_DIAGRAM):   P_Risk0 = 0;
61385     +   _MAX_ = MAX (P_Risk1 , P_Risk0 );
MPRINT(EM_DIAGRAM):   _MAX_ = MAX (P_Risk1 , P_Risk0 );
61386     +   _SUM_ = 0.;
MPRINT(EM_DIAGRAM):   _SUM_ = 0.;
61387     +   P_Risk1  = EXP(P_Risk1  - _MAX_);
MPRINT(EM_DIAGRAM):   P_Risk1 = EXP(P_Risk1 - _MAX_);
61388     +   _SUM_ = _SUM_ + P_Risk1 ;
MPRINT(EM_DIAGRAM):   _SUM_ = _SUM_ + P_Risk1 ;
61389     +   P_Risk0  = EXP(P_Risk0  - _MAX_);
MPRINT(EM_DIAGRAM):   P_Risk0 = EXP(P_Risk0 - _MAX_);
61390     +   _SUM_ = _SUM_ + P_Risk0 ;
MPRINT(EM_DIAGRAM):   _SUM_ = _SUM_ + P_Risk0 ;
61391     +   P_Risk1  = P_Risk1  / _SUM_;
MPRINT(EM_DIAGRAM):   P_Risk1 = P_Risk1 / _SUM_;
61392     +   P_Risk0  = P_Risk0  / _SUM_;
MPRINT(EM_DIAGRAM):   P_Risk0 = P_Risk0 / _SUM_;
61393     +END;
MPRINT(EM_DIAGRAM):   END;
61394     +ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
61395     +   P_Risk1  = .;
MPRINT(EM_DIAGRAM):   P_Risk1 = .;
61396     +   P_Risk0  = .;
MPRINT(EM_DIAGRAM):   P_Risk0 = .;
61397     +END;
MPRINT(EM_DIAGRAM):   END;
61398     +IF _DM_BAD EQ 1 THEN DO;
MPRINT(EM_DIAGRAM):   IF _DM_BAD EQ 1 THEN DO;
61399     +   P_Risk1  =                 0.54;
MPRINT(EM_DIAGRAM):   P_Risk1 = 0.54;
61400     +   P_Risk0  =                 0.46;
MPRINT(EM_DIAGRAM):   P_Risk0 = 0.46;
61401     +END;
MPRINT(EM_DIAGRAM):   END;
61402     +*** *****************************;
MPRINT(EM_DIAGRAM):   *** *****************************;
61403     +*** Writing the Residuals  of the Node Risk ;
MPRINT(EM_DIAGRAM):   *** Writing the Residuals of the Node Risk ;
61404     +*** ******************************;
MPRINT(EM_DIAGRAM):   *** ******************************;
61405     +IF MISSING( Risk1 ) THEN R_Risk1  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( Risk1 ) THEN R_Risk1 = . ;
61406     +ELSE R_Risk1  = Risk1  - P_Risk1 ;
MPRINT(EM_DIAGRAM):   ELSE R_Risk1 = Risk1 - P_Risk1 ;
61407     +IF MISSING( Risk0 ) THEN R_Risk0  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( Risk0 ) THEN R_Risk0 = . ;
61408     +ELSE R_Risk0  = Risk0  - P_Risk0 ;
MPRINT(EM_DIAGRAM):   ELSE R_Risk0 = Risk0 - P_Risk0 ;
61409     +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
61410     +*** Writing the I_Risk  AND U_Risk ;
MPRINT(EM_DIAGRAM):   *** Writing the I_Risk AND U_Risk ;
61411     +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
61412     +_MAXP_ = P_Risk1 ;
MPRINT(EM_DIAGRAM):   _MAXP_ = P_Risk1 ;
61413     +I_Risk  = "1           " ;
MPRINT(EM_DIAGRAM):   I_Risk = "1           " ;
61414     +U_Risk  =                    1;
MPRINT(EM_DIAGRAM):   U_Risk = 1;
61415     +IF( _MAXP_ LT P_Risk0  ) THEN DO;
MPRINT(EM_DIAGRAM):   IF( _MAXP_ LT P_Risk0 ) THEN DO;
61416     +   _MAXP_ = P_Risk0 ;
MPRINT(EM_DIAGRAM):   _MAXP_ = P_Risk0 ;
61417     +   I_Risk  = "0           " ;
MPRINT(EM_DIAGRAM):   I_Risk = "0           " ;
61418     +   U_Risk  =                    0;
MPRINT(EM_DIAGRAM):   U_Risk = 0;
61419     +END;
MPRINT(EM_DIAGRAM):   END;
61420     +********************************;
MPRINT(EM_DIAGRAM):   ********************************;
61421     +*** End Scoring Code for Neural;
MPRINT(EM_DIAGRAM):   *** End Scoring Code for Neural;
61422     +********************************;
MPRINT(EM_DIAGRAM):   ********************************;
61423     +drop
61424     +H11
61425     +H12
61426     +H13
61427     +;
MPRINT(EM_DIAGRAM):   drop H11 H12 H13 ;
61428     +drop S_:;
MPRINT(EM_DIAGRAM):   drop S_:;
NOTE: %INCLUDE (level 1) ending.
MPRINT(EM_DIAGRAM):   run;
61429      run;
 
NOTE: DATA STEP view saved on file EMWS1.NEURAL_TRAIN.
NOTE: A stored DATA STEP view cannot run under a different operating system.
NOTE: View EMWS1.IMPT_TRAIN.VIEW used (Total process time):
      real time           0.09 seconds
      cpu time            0.04 seconds
 
NOTE: DATA statement used (Total process time):
      real time           0.10 seconds
      cpu time            0.04 seconds
 
 
MPRINT(EM_DIAGRAM):   quit;
61430      quit;
61431      filename emflow;
MPRINT(EM_DIAGRAM):   filename emflow;
NOTE: Fileref EMFLOW has been deassigned.
61432      filename emflow "H:\746\Decision Tree test\Workspaces\EMWS1\Neural\EMFLOWSCORE.sas";
MPRINT(EM_DIAGRAM):    filename emflow "H:\746\Decision Tree
test\Workspaces\EMWS1\Neural\EMFLOWSCORE.sas";
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Neural: Scoring VALIDATE data;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
61433      *------------------------------------------------------------*;
61434      * Neural: Scoring VALIDATE data;
61435      *------------------------------------------------------------*;
61436      data EMWS1.Neural_VALIDATE
61437      / view=EMWS1.Neural_VALIDATE
61438      ;
MPRINT(EM_DIAGRAM):   data EMWS1.Neural_VALIDATE / view=EMWS1.Neural_VALIDATE ;
61439      set EMWS1.Impt_VALIDATE
61440      ;
MPRINT(EM_DIAGRAM):   set EMWS1.Impt_VALIDATE ;
61441      %inc emflow;
NOTE: %INCLUDE (level 1) file EMFLOW is file H:\746\Decision Tree
      test\Workspaces\EMWS1\Neural\EMFLOWSCORE.sas.
61442     +***********************************;
MPRINT(EM_DIAGRAM):   ***********************************;
61443     +*** Begin Scoring Code for Neural;
MPRINT(EM_DIAGRAM):   *** Begin Scoring Code for Neural;
61444     +***********************************;
MPRINT(EM_DIAGRAM):   ***********************************;
61445     +DROP _DM_BAD _EPS _NOCL_ _MAX_ _MAXP_ _SUM_ _NTRIALS;
MPRINT(EM_DIAGRAM):   DROP _DM_BAD _EPS _NOCL_ _MAX_ _MAXP_ _SUM_ _NTRIALS;
61446     + _DM_BAD = 0;
MPRINT(EM_DIAGRAM):   _DM_BAD = 0;
61447     + _NOCL_ = .;
MPRINT(EM_DIAGRAM):   _NOCL_ = .;
61448     + _MAX_ = .;
MPRINT(EM_DIAGRAM):   _MAX_ = .;
61449     + _MAXP_ = .;
MPRINT(EM_DIAGRAM):   _MAXP_ = .;
61450     + _SUM_ = .;
MPRINT(EM_DIAGRAM):   _SUM_ = .;
61451     + _NTRIALS = .;
MPRINT(EM_DIAGRAM):   _NTRIALS = .;
61452     + _EPS =                1E-10;
MPRINT(EM_DIAGRAM):   _EPS = 1E-10;
61453     +LENGTH _WARN_ $4
61454     +      F_Risk  $ 12
61455     +;
MPRINT(EM_DIAGRAM):   LENGTH _WARN_ $4 F_Risk $ 12 ;
61456     +      label S_IMP_bore = 'Standard: IMP_bore' ;
MPRINT(EM_DIAGRAM):   label S_IMP_bore = 'Standard: IMP_bore' ;
61457     +
61458     +      label S_IMP_price = 'Standard: IMP_price' ;
MPRINT(EM_DIAGRAM):   label S_IMP_price = 'Standard: IMP_price' ;
61459     +
61460     +      label S_IMP_stroke = 'Standard: IMP_stroke' ;
MPRINT(EM_DIAGRAM):   label S_IMP_stroke = 'Standard: IMP_stroke' ;
61461     +
61462     +      label S_city_mpg = 'Standard: city_mpg' ;
MPRINT(EM_DIAGRAM):   label S_city_mpg = 'Standard: city_mpg' ;
61463     +
61464     +      label S_compression_ratio = 'Standard: compression_ratio' ;
MPRINT(EM_DIAGRAM):   label S_compression_ratio = 'Standard: compression_ratio' ;
61465     +
61466     +      label S_curb_weight = 'Standard: curb_weight' ;
MPRINT(EM_DIAGRAM):   label S_curb_weight = 'Standard: curb_weight' ;
61467     +
61468     +      label S_engine_size = 'Standard: engine_size' ;
MPRINT(EM_DIAGRAM):   label S_engine_size = 'Standard: engine_size' ;
61469     +
61470     +      label S_height = 'Standard: height' ;
MPRINT(EM_DIAGRAM):   label S_height = 'Standard: height' ;
61471     +
61472     +      label S_highway_mpg = 'Standard: highway_mpg' ;
MPRINT(EM_DIAGRAM):   label S_highway_mpg = 'Standard: highway_mpg' ;
61473     +
61474     +      label S_horsepower = 'Standard: horsepower' ;
MPRINT(EM_DIAGRAM):   label S_horsepower = 'Standard: horsepower' ;
61475     +
61476     +      label S_length = 'Standard: length' ;
MPRINT(EM_DIAGRAM):   label S_length = 'Standard: length' ;
61477     +
61478     +      label S_peak_rpm = 'Standard: peak_rpm' ;
MPRINT(EM_DIAGRAM):   label S_peak_rpm = 'Standard: peak_rpm' ;
61479     +
61480     +      label S_wheel_base = 'Standard: wheel_base' ;
MPRINT(EM_DIAGRAM):   label S_wheel_base = 'Standard: wheel_base' ;
61481     +
61482     +      label S_width = 'Standard: width' ;
MPRINT(EM_DIAGRAM):   label S_width = 'Standard: width' ;
61483     +
61484     +      label M_bore0 = 'Dummy: M_bore=0' ;
MPRINT(EM_DIAGRAM):   label M_bore0 = 'Dummy: M_bore=0' ;
61485     +
61486     +      label M_num_of_doors0 = 'Dummy: M_num_of_doors=0' ;
MPRINT(EM_DIAGRAM):   label M_num_of_doors0 = 'Dummy: M_num_of_doors=0' ;
61487     +
61488     +      label M_price0 = 'Dummy: M_price=0' ;
MPRINT(EM_DIAGRAM):   label M_price0 = 'Dummy: M_price=0' ;
61489     +
61490     +      label M_stroke0 = 'Dummy: M_stroke=0' ;
MPRINT(EM_DIAGRAM):   label M_stroke0 = 'Dummy: M_stroke=0' ;
61491     +
61492     +      label IMP_num_of_doors2 = 'Dummy: IMP_num_of_doors=2' ;
MPRINT(EM_DIAGRAM):   label IMP_num_of_doors2 = 'Dummy: IMP_num_of_doors=2' ;
61493     +
61494     +      label aspirationstd = 'Dummy: aspiration=std' ;
MPRINT(EM_DIAGRAM):   label aspirationstd = 'Dummy: aspiration=std' ;
61495     +
61496     +      label body_styleconvertible = 'Dummy: body_style=convertible' ;
MPRINT(EM_DIAGRAM):   label body_styleconvertible = 'Dummy: body_style=convertible' ;
61497     +
61498     +      label body_stylehardtop = 'Dummy: body_style=hardtop' ;
MPRINT(EM_DIAGRAM):   label body_stylehardtop = 'Dummy: body_style=hardtop' ;
61499     +
61500     +      label body_stylehatchback = 'Dummy: body_style=hatchback' ;
MPRINT(EM_DIAGRAM):   label body_stylehatchback = 'Dummy: body_style=hatchback' ;
61501     +
61502     +      label body_stylesedan = 'Dummy: body_style=sedan' ;
MPRINT(EM_DIAGRAM):   label body_stylesedan = 'Dummy: body_style=sedan' ;
61503     +
61504     +      label drive_wheels4wd = 'Dummy: drive_wheels=4wd' ;
MPRINT(EM_DIAGRAM):   label drive_wheels4wd = 'Dummy: drive_wheels=4wd' ;
61505     +
61506     +      label drive_wheelsfwd = 'Dummy: drive_wheels=fwd' ;
MPRINT(EM_DIAGRAM):   label drive_wheelsfwd = 'Dummy: drive_wheels=fwd' ;
61507     +
61508     +      label engine_locationfront = 'Dummy: engine_location=front' ;
MPRINT(EM_DIAGRAM):   label engine_locationfront = 'Dummy: engine_location=front' ;
61509     +
61510     +      label engine_typedohc = 'Dummy: engine_type=dohc' ;
MPRINT(EM_DIAGRAM):   label engine_typedohc = 'Dummy: engine_type=dohc' ;
61511     +
61512     +      label engine_typel = 'Dummy: engine_type=l' ;
MPRINT(EM_DIAGRAM):   label engine_typel = 'Dummy: engine_type=l' ;
61513     +
61514     +      label engine_typeohc = 'Dummy: engine_type=ohc' ;
MPRINT(EM_DIAGRAM):   label engine_typeohc = 'Dummy: engine_type=ohc' ;
61515     +
61516     +      label engine_typeohcf = 'Dummy: engine_type=ohcf' ;
MPRINT(EM_DIAGRAM):   label engine_typeohcf = 'Dummy: engine_type=ohcf' ;
61517     +
61518     +      label engine_typeohcv = 'Dummy: engine_type=ohcv' ;
MPRINT(EM_DIAGRAM):   label engine_typeohcv = 'Dummy: engine_type=ohcv' ;
61519     +
61520     +      label fuel_system1bbl = 'Dummy: fuel_system=1bbl' ;
MPRINT(EM_DIAGRAM):   label fuel_system1bbl = 'Dummy: fuel_system=1bbl' ;
61521     +
61522     +      label fuel_system2bbl = 'Dummy: fuel_system=2bbl' ;
MPRINT(EM_DIAGRAM):   label fuel_system2bbl = 'Dummy: fuel_system=2bbl' ;
61523     +
61524     +      label fuel_system4bbl = 'Dummy: fuel_system=4bbl' ;
MPRINT(EM_DIAGRAM):   label fuel_system4bbl = 'Dummy: fuel_system=4bbl' ;
61525     +
61526     +      label fuel_systemidi = 'Dummy: fuel_system=idi' ;
MPRINT(EM_DIAGRAM):   label fuel_systemidi = 'Dummy: fuel_system=idi' ;
61527     +
61528     +      label fuel_systemmpfi = 'Dummy: fuel_system=mpfi' ;
MPRINT(EM_DIAGRAM):   label fuel_systemmpfi = 'Dummy: fuel_system=mpfi' ;
61529     +
61530     +      label fuel_typediesel = 'Dummy: fuel_type=diesel' ;
MPRINT(EM_DIAGRAM):   label fuel_typediesel = 'Dummy: fuel_type=diesel' ;
61531     +
61532     +      label num_of_cylindersfive = 'Dummy: num_of_cylinders=five' ;
MPRINT(EM_DIAGRAM):   label num_of_cylindersfive = 'Dummy: num_of_cylinders=five' ;
61533     +
61534     +      label num_of_cylindersfour = 'Dummy: num_of_cylinders=four' ;
MPRINT(EM_DIAGRAM):   label num_of_cylindersfour = 'Dummy: num_of_cylinders=four' ;
61535     +
61536     +      label num_of_cylinderssix = 'Dummy: num_of_cylinders=six' ;
MPRINT(EM_DIAGRAM):   label num_of_cylinderssix = 'Dummy: num_of_cylinders=six' ;
61537     +
61538     +      label H11 = 'Hidden: H1=1' ;
MPRINT(EM_DIAGRAM):   label H11 = 'Hidden: H1=1' ;
61539     +
61540     +      label H12 = 'Hidden: H1=2' ;
MPRINT(EM_DIAGRAM):   label H12 = 'Hidden: H1=2' ;
61541     +
61542     +      label H13 = 'Hidden: H1=3' ;
MPRINT(EM_DIAGRAM):   label H13 = 'Hidden: H1=3' ;
61543     +
61544     +      label I_Risk = 'Into: Risk' ;
MPRINT(EM_DIAGRAM):   label I_Risk = 'Into: Risk' ;
61545     +
61546     +      label F_Risk = 'From: Risk' ;
MPRINT(EM_DIAGRAM):   label F_Risk = 'From: Risk' ;
61547     +
61548     +      label U_Risk = 'Unnormalized Into: Risk' ;
MPRINT(EM_DIAGRAM):   label U_Risk = 'Unnormalized Into: Risk' ;
61549     +
61550     +      label P_Risk1 = 'Predicted: Risk=1' ;
MPRINT(EM_DIAGRAM):   label P_Risk1 = 'Predicted: Risk=1' ;
61551     +
61552     +      label R_Risk1 = 'Residual: Risk=1' ;
MPRINT(EM_DIAGRAM):   label R_Risk1 = 'Residual: Risk=1' ;
61553     +
61554     +      label P_Risk0 = 'Predicted: Risk=0' ;
MPRINT(EM_DIAGRAM):   label P_Risk0 = 'Predicted: Risk=0' ;
61555     +
61556     +      label R_Risk0 = 'Residual: Risk=0' ;
MPRINT(EM_DIAGRAM):   label R_Risk0 = 'Residual: Risk=0' ;
61557     +
61558     +      label  _WARN_ = "Warnings";
MPRINT(EM_DIAGRAM):   label _WARN_ = "Warnings";
61559     +
61560     +*** Generate dummy variables for M_bore ;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for M_bore ;
61561     +drop M_bore0 ;
MPRINT(EM_DIAGRAM):   drop M_bore0 ;
61562     +if missing( M_bore ) then do;
MPRINT(EM_DIAGRAM):   if missing( M_bore ) then do;
61563     +   M_bore0 = .;
MPRINT(EM_DIAGRAM):   M_bore0 = .;
61564     +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
61565     +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
61566     +end;
MPRINT(EM_DIAGRAM):   end;
61567     +else do;
MPRINT(EM_DIAGRAM):   else do;
61568     +   length _dm12 $ 12; drop _dm12 ;
MPRINT(EM_DIAGRAM):   length _dm12 $ 12;
MPRINT(EM_DIAGRAM):   drop _dm12 ;
61569     +   _dm12 = put( M_bore , BEST12. );
MPRINT(EM_DIAGRAM):   _dm12 = put( M_bore , BEST12. );
61570     +   %DMNORMIP( _dm12 )
MPRINT(DMNORMIP):   call dmnorm(_dm12,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
61571     +   if _dm12 = '0'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 = '0' then do;
61572     +      M_bore0 = 1;
MPRINT(EM_DIAGRAM):   M_bore0 = 1;
61573     +   end;
MPRINT(EM_DIAGRAM):   end;
61574     +   else if _dm12 = '1'  then do;
MPRINT(EM_DIAGRAM):   else if _dm12 = '1' then do;
61575     +      M_bore0 = -1;
MPRINT(EM_DIAGRAM):   M_bore0 = -1;
61576     +   end;
MPRINT(EM_DIAGRAM):   end;
61577     +   else do;
MPRINT(EM_DIAGRAM):   else do;
61578     +      M_bore0 = .;
MPRINT(EM_DIAGRAM):   M_bore0 = .;
61579     +      substr(_warn_,2,1) = 'U';
MPRINT(EM_DIAGRAM):   substr(_warn_,2,1) = 'U';
61580     +      _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
61581     +   end;
MPRINT(EM_DIAGRAM):   end;
61582     +end;
MPRINT(EM_DIAGRAM):   end;
61583     +
61584     +*** Generate dummy variables for M_num_of_doors ;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for M_num_of_doors ;
61585     +drop M_num_of_doors0 ;
MPRINT(EM_DIAGRAM):   drop M_num_of_doors0 ;
61586     +if missing( M_num_of_doors ) then do;
MPRINT(EM_DIAGRAM):   if missing( M_num_of_doors ) then do;
61587     +   M_num_of_doors0 = .;
MPRINT(EM_DIAGRAM):   M_num_of_doors0 = .;
61588     +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
61589     +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
61590     +end;
MPRINT(EM_DIAGRAM):   end;
61591     +else do;
MPRINT(EM_DIAGRAM):   else do;
61592     +   length _dm12 $ 12; drop _dm12 ;
MPRINT(EM_DIAGRAM):   length _dm12 $ 12;
MPRINT(EM_DIAGRAM):   drop _dm12 ;
61593     +   _dm12 = put( M_num_of_doors , BEST12. );
MPRINT(EM_DIAGRAM):   _dm12 = put( M_num_of_doors , BEST12. );
61594     +   %DMNORMIP( _dm12 )
MPRINT(DMNORMIP):   call dmnorm(_dm12,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
61595     +   if _dm12 = '0'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 = '0' then do;
61596     +      M_num_of_doors0 = 1;
MPRINT(EM_DIAGRAM):   M_num_of_doors0 = 1;
61597     +   end;
MPRINT(EM_DIAGRAM):   end;
61598     +   else if _dm12 = '1'  then do;
MPRINT(EM_DIAGRAM):   else if _dm12 = '1' then do;
61599     +      M_num_of_doors0 = -1;
MPRINT(EM_DIAGRAM):   M_num_of_doors0 = -1;
61600     +   end;
MPRINT(EM_DIAGRAM):   end;
61601     +   else do;
MPRINT(EM_DIAGRAM):   else do;
61602     +      M_num_of_doors0 = .;
MPRINT(EM_DIAGRAM):   M_num_of_doors0 = .;
61603     +      substr(_warn_,2,1) = 'U';
MPRINT(EM_DIAGRAM):   substr(_warn_,2,1) = 'U';
61604     +      _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
61605     +   end;
MPRINT(EM_DIAGRAM):   end;
61606     +end;
MPRINT(EM_DIAGRAM):   end;
61607     +
61608     +*** Generate dummy variables for M_price ;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for M_price ;
61609     +drop M_price0 ;
MPRINT(EM_DIAGRAM):   drop M_price0 ;
61610     +if missing( M_price ) then do;
MPRINT(EM_DIAGRAM):   if missing( M_price ) then do;
61611     +   M_price0 = .;
MPRINT(EM_DIAGRAM):   M_price0 = .;
61612     +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
61613     +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
61614     +end;
MPRINT(EM_DIAGRAM):   end;
61615     +else do;
MPRINT(EM_DIAGRAM):   else do;
61616     +   length _dm12 $ 12; drop _dm12 ;
MPRINT(EM_DIAGRAM):   length _dm12 $ 12;
MPRINT(EM_DIAGRAM):   drop _dm12 ;
61617     +   _dm12 = put( M_price , BEST12. );
MPRINT(EM_DIAGRAM):   _dm12 = put( M_price , BEST12. );
61618     +   %DMNORMIP( _dm12 )
MPRINT(DMNORMIP):   call dmnorm(_dm12,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
61619     +   if _dm12 = '0'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 = '0' then do;
61620     +      M_price0 = 1;
MPRINT(EM_DIAGRAM):   M_price0 = 1;
61621     +   end;
MPRINT(EM_DIAGRAM):   end;
61622     +   else if _dm12 = '1'  then do;
MPRINT(EM_DIAGRAM):   else if _dm12 = '1' then do;
61623     +      M_price0 = -1;
MPRINT(EM_DIAGRAM):   M_price0 = -1;
61624     +   end;
MPRINT(EM_DIAGRAM):   end;
61625     +   else do;
MPRINT(EM_DIAGRAM):   else do;
61626     +      M_price0 = .;
MPRINT(EM_DIAGRAM):   M_price0 = .;
61627     +      substr(_warn_,2,1) = 'U';
MPRINT(EM_DIAGRAM):   substr(_warn_,2,1) = 'U';
61628     +      _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
61629     +   end;
MPRINT(EM_DIAGRAM):   end;
61630     +end;
MPRINT(EM_DIAGRAM):   end;
61631     +
61632     +*** Generate dummy variables for M_stroke ;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for M_stroke ;
61633     +drop M_stroke0 ;
MPRINT(EM_DIAGRAM):   drop M_stroke0 ;
61634     +if missing( M_stroke ) then do;
MPRINT(EM_DIAGRAM):   if missing( M_stroke ) then do;
61635     +   M_stroke0 = .;
MPRINT(EM_DIAGRAM):   M_stroke0 = .;
61636     +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
61637     +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
61638     +end;
MPRINT(EM_DIAGRAM):   end;
61639     +else do;
MPRINT(EM_DIAGRAM):   else do;
61640     +   length _dm12 $ 12; drop _dm12 ;
MPRINT(EM_DIAGRAM):   length _dm12 $ 12;
MPRINT(EM_DIAGRAM):   drop _dm12 ;
61641     +   _dm12 = put( M_stroke , BEST12. );
MPRINT(EM_DIAGRAM):   _dm12 = put( M_stroke , BEST12. );
61642     +   %DMNORMIP( _dm12 )
MPRINT(DMNORMIP):   call dmnorm(_dm12,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
61643     +   if _dm12 = '0'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 = '0' then do;
61644     +      M_stroke0 = 1;
MPRINT(EM_DIAGRAM):   M_stroke0 = 1;
61645     +   end;
MPRINT(EM_DIAGRAM):   end;
61646     +   else if _dm12 = '1'  then do;
MPRINT(EM_DIAGRAM):   else if _dm12 = '1' then do;
61647     +      M_stroke0 = -1;
MPRINT(EM_DIAGRAM):   M_stroke0 = -1;
61648     +   end;
MPRINT(EM_DIAGRAM):   end;
61649     +   else do;
MPRINT(EM_DIAGRAM):   else do;
61650     +      M_stroke0 = .;
MPRINT(EM_DIAGRAM):   M_stroke0 = .;
61651     +      substr(_warn_,2,1) = 'U';
MPRINT(EM_DIAGRAM):   substr(_warn_,2,1) = 'U';
61652     +      _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
61653     +   end;
MPRINT(EM_DIAGRAM):   end;
61654     +end;
MPRINT(EM_DIAGRAM):   end;
61655     +
61656     +*** Generate dummy variables for IMP_num_of_doors ;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for IMP_num_of_doors ;
61657     +drop IMP_num_of_doors2 ;
MPRINT(EM_DIAGRAM):   drop IMP_num_of_doors2 ;
61658     +if missing( IMP_num_of_doors ) then do;
MPRINT(EM_DIAGRAM):   if missing( IMP_num_of_doors ) then do;
61659     +   IMP_num_of_doors2 = .;
MPRINT(EM_DIAGRAM):   IMP_num_of_doors2 = .;
61660     +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
61661     +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
61662     +end;
MPRINT(EM_DIAGRAM):   end;
61663     +else do;
MPRINT(EM_DIAGRAM):   else do;
61664     +   length _dm12 $ 12; drop _dm12 ;
MPRINT(EM_DIAGRAM):   length _dm12 $ 12;
MPRINT(EM_DIAGRAM):   drop _dm12 ;
61665     +   _dm12 = put( IMP_num_of_doors , BEST12. );
MPRINT(EM_DIAGRAM):   _dm12 = put( IMP_num_of_doors , BEST12. );
61666     +   %DMNORMIP( _dm12 )
MPRINT(DMNORMIP):   call dmnorm(_dm12,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
61667     +   if _dm12 = '4'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 = '4' then do;
61668     +      IMP_num_of_doors2 = -1;
MPRINT(EM_DIAGRAM):   IMP_num_of_doors2 = -1;
61669     +   end;
MPRINT(EM_DIAGRAM):   end;
61670     +   else if _dm12 = '2'  then do;
MPRINT(EM_DIAGRAM):   else if _dm12 = '2' then do;
61671     +      IMP_num_of_doors2 = 1;
MPRINT(EM_DIAGRAM):   IMP_num_of_doors2 = 1;
61672     +   end;
MPRINT(EM_DIAGRAM):   end;
61673     +   else do;
MPRINT(EM_DIAGRAM):   else do;
61674     +      IMP_num_of_doors2 = .;
MPRINT(EM_DIAGRAM):   IMP_num_of_doors2 = .;
61675     +      substr(_warn_,2,1) = 'U';
MPRINT(EM_DIAGRAM):   substr(_warn_,2,1) = 'U';
61676     +      _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
61677     +   end;
MPRINT(EM_DIAGRAM):   end;
61678     +end;
MPRINT(EM_DIAGRAM):   end;
61679     +
61680     +*** Generate dummy variables for aspiration ;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for aspiration ;
61681     +drop aspirationstd ;
MPRINT(EM_DIAGRAM):   drop aspirationstd ;
61682     +if missing( aspiration ) then do;
MPRINT(EM_DIAGRAM):   if missing( aspiration ) then do;
61683     +   aspirationstd = .;
MPRINT(EM_DIAGRAM):   aspirationstd = .;
61684     +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
61685     +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
61686     +end;
MPRINT(EM_DIAGRAM):   end;
61687     +else do;
MPRINT(EM_DIAGRAM):   else do;
61688     +   length _dm5 $ 5; drop _dm5 ;
MPRINT(EM_DIAGRAM):   length _dm5 $ 5;
MPRINT(EM_DIAGRAM):   drop _dm5 ;
61689     +   _dm5 = put( aspiration , $5. );
MPRINT(EM_DIAGRAM):   _dm5 = put( aspiration , $5. );
61690     +   %DMNORMIP( _dm5 )
MPRINT(DMNORMIP):   call dmnorm(_dm5,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
61691     +   if _dm5 = 'STD'  then do;
MPRINT(EM_DIAGRAM):   if _dm5 = 'STD' then do;
61692     +      aspirationstd = 1;
MPRINT(EM_DIAGRAM):   aspirationstd = 1;
61693     +   end;
MPRINT(EM_DIAGRAM):   end;
61694     +   else if _dm5 = 'TURBO'  then do;
MPRINT(EM_DIAGRAM):   else if _dm5 = 'TURBO' then do;
61695     +      aspirationstd = -1;
MPRINT(EM_DIAGRAM):   aspirationstd = -1;
61696     +   end;
MPRINT(EM_DIAGRAM):   end;
61697     +   else do;
MPRINT(EM_DIAGRAM):   else do;
61698     +      aspirationstd = .;
MPRINT(EM_DIAGRAM):   aspirationstd = .;
61699     +      substr(_warn_,2,1) = 'U';
MPRINT(EM_DIAGRAM):   substr(_warn_,2,1) = 'U';
61700     +      _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
61701     +   end;
MPRINT(EM_DIAGRAM):   end;
61702     +end;
MPRINT(EM_DIAGRAM):   end;
61703     +
61704     +*** Generate dummy variables for body_style ;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for body_style ;
61705     +drop body_styleconvertible body_stylehardtop body_stylehatchback
61706     +        body_stylesedan ;
MPRINT(EM_DIAGRAM):   drop body_styleconvertible body_stylehardtop body_stylehatchback
body_stylesedan ;
61707     +*** encoding is sparse, initialize to zero;
MPRINT(EM_DIAGRAM):   *** encoding is sparse, initialize to zero;
61708     +body_styleconvertible = 0;
MPRINT(EM_DIAGRAM):   body_styleconvertible = 0;
61709     +body_stylehardtop = 0;
MPRINT(EM_DIAGRAM):   body_stylehardtop = 0;
61710     +body_stylehatchback = 0;
MPRINT(EM_DIAGRAM):   body_stylehatchback = 0;
61711     +body_stylesedan = 0;
MPRINT(EM_DIAGRAM):   body_stylesedan = 0;
61712     +if missing( body_style ) then do;
MPRINT(EM_DIAGRAM):   if missing( body_style ) then do;
61713     +   body_styleconvertible = .;
MPRINT(EM_DIAGRAM):   body_styleconvertible = .;
61714     +   body_stylehardtop = .;
MPRINT(EM_DIAGRAM):   body_stylehardtop = .;
61715     +   body_stylehatchback = .;
MPRINT(EM_DIAGRAM):   body_stylehatchback = .;
61716     +   body_stylesedan = .;
MPRINT(EM_DIAGRAM):   body_stylesedan = .;
61717     +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
61718     +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
61719     +end;
MPRINT(EM_DIAGRAM):   end;
61720     +else do;
MPRINT(EM_DIAGRAM):   else do;
61721     +   length _dm11 $ 11; drop _dm11 ;
MPRINT(EM_DIAGRAM):   length _dm11 $ 11;
MPRINT(EM_DIAGRAM):   drop _dm11 ;
61722     +   %DMNORMCP( body_style , _dm11 )
MPRINT(DMNORMCP):   _dm11=dmnorm(body_style,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMCP):  );
61723     +   _dm_find = 0; drop _dm_find;
MPRINT(EM_DIAGRAM):   _dm_find = 0;
MPRINT(EM_DIAGRAM):   drop _dm_find;
61724     +   if _dm11 <= 'HATCHBACK'  then do;
MPRINT(EM_DIAGRAM):   if _dm11 <= 'HATCHBACK' then do;
61725     +      if _dm11 <= 'HARDTOP'  then do;
MPRINT(EM_DIAGRAM):   if _dm11 <= 'HARDTOP' then do;
61726     +         if _dm11 = 'CONVERTIBLE'  then do;
MPRINT(EM_DIAGRAM):   if _dm11 = 'CONVERTIBLE' then do;
61727     +            body_styleconvertible = 1;
MPRINT(EM_DIAGRAM):   body_styleconvertible = 1;
61728     +            _dm_find = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
61729     +         end;
MPRINT(EM_DIAGRAM):   end;
61730     +         else do;
MPRINT(EM_DIAGRAM):   else do;
61731     +            if _dm11 = 'HARDTOP'  then do;
MPRINT(EM_DIAGRAM):   if _dm11 = 'HARDTOP' then do;
61732     +               body_stylehardtop = 1;
MPRINT(EM_DIAGRAM):   body_stylehardtop = 1;
61733     +               _dm_find = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
61734     +            end;
MPRINT(EM_DIAGRAM):   end;
61735     +         end;
MPRINT(EM_DIAGRAM):   end;
61736     +      end;
MPRINT(EM_DIAGRAM):   end;
61737     +      else do;
MPRINT(EM_DIAGRAM):   else do;
61738     +         if _dm11 = 'HATCHBACK'  then do;
MPRINT(EM_DIAGRAM):   if _dm11 = 'HATCHBACK' then do;
61739     +            body_stylehatchback = 1;
MPRINT(EM_DIAGRAM):   body_stylehatchback = 1;
61740     +            _dm_find = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
61741     +         end;
MPRINT(EM_DIAGRAM):   end;
61742     +      end;
MPRINT(EM_DIAGRAM):   end;
61743     +   end;
MPRINT(EM_DIAGRAM):   end;
61744     +   else do;
MPRINT(EM_DIAGRAM):   else do;
61745     +      if _dm11 = 'SEDAN'  then do;
MPRINT(EM_DIAGRAM):   if _dm11 = 'SEDAN' then do;
61746     +         body_stylesedan = 1;
MPRINT(EM_DIAGRAM):   body_stylesedan = 1;
61747     +         _dm_find = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
61748     +      end;
MPRINT(EM_DIAGRAM):   end;
61749     +      else do;
MPRINT(EM_DIAGRAM):   else do;
61750     +         if _dm11 = 'WAGON'  then do;
MPRINT(EM_DIAGRAM):   if _dm11 = 'WAGON' then do;
61751     +            body_styleconvertible = -1;
MPRINT(EM_DIAGRAM):   body_styleconvertible = -1;
61752     +            body_stylehardtop = -1;
MPRINT(EM_DIAGRAM):   body_stylehardtop = -1;
61753     +            body_stylehatchback = -1;
MPRINT(EM_DIAGRAM):   body_stylehatchback = -1;
61754     +            body_stylesedan = -1;
MPRINT(EM_DIAGRAM):   body_stylesedan = -1;
61755     +            _dm_find = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
61756     +         end;
MPRINT(EM_DIAGRAM):   end;
61757     +      end;
MPRINT(EM_DIAGRAM):   end;
61758     +   end;
MPRINT(EM_DIAGRAM):   end;
61759     +   if not _dm_find then do;
MPRINT(EM_DIAGRAM):   if not _dm_find then do;
61760     +      body_styleconvertible = .;
MPRINT(EM_DIAGRAM):   body_styleconvertible = .;
61761     +      body_stylehardtop = .;
MPRINT(EM_DIAGRAM):   body_stylehardtop = .;
61762     +      body_stylehatchback = .;
MPRINT(EM_DIAGRAM):   body_stylehatchback = .;
61763     +      body_stylesedan = .;
MPRINT(EM_DIAGRAM):   body_stylesedan = .;
61764     +      substr(_warn_,2,1) = 'U';
MPRINT(EM_DIAGRAM):   substr(_warn_,2,1) = 'U';
61765     +      _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
61766     +   end;
MPRINT(EM_DIAGRAM):   end;
61767     +end;
MPRINT(EM_DIAGRAM):   end;
61768     +
61769     +*** Generate dummy variables for drive_wheels ;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for drive_wheels ;
61770     +drop drive_wheels4wd drive_wheelsfwd ;
MPRINT(EM_DIAGRAM):   drop drive_wheels4wd drive_wheelsfwd ;
61771     +if missing( drive_wheels ) then do;
MPRINT(EM_DIAGRAM):   if missing( drive_wheels ) then do;
61772     +   drive_wheels4wd = .;
MPRINT(EM_DIAGRAM):   drive_wheels4wd = .;
61773     +   drive_wheelsfwd = .;
MPRINT(EM_DIAGRAM):   drive_wheelsfwd = .;
61774     +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
61775     +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
61776     +end;
MPRINT(EM_DIAGRAM):   end;
61777     +else do;
MPRINT(EM_DIAGRAM):   else do;
61778     +   length _dm3 $ 3; drop _dm3 ;
MPRINT(EM_DIAGRAM):   length _dm3 $ 3;
MPRINT(EM_DIAGRAM):   drop _dm3 ;
61779     +   %DMNORMCP( drive_wheels , _dm3 )
MPRINT(DMNORMCP):   _dm3=dmnorm(drive_wheels,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMCP):  );
61780     +   if _dm3 = 'FWD'  then do;
MPRINT(EM_DIAGRAM):   if _dm3 = 'FWD' then do;
61781     +      drive_wheels4wd = 0;
MPRINT(EM_DIAGRAM):   drive_wheels4wd = 0;
61782     +      drive_wheelsfwd = 1;
MPRINT(EM_DIAGRAM):   drive_wheelsfwd = 1;
61783     +   end;
MPRINT(EM_DIAGRAM):   end;
61784     +   else if _dm3 = 'RWD'  then do;
MPRINT(EM_DIAGRAM):   else if _dm3 = 'RWD' then do;
61785     +      drive_wheels4wd = -1;
MPRINT(EM_DIAGRAM):   drive_wheels4wd = -1;
61786     +      drive_wheelsfwd = -1;
MPRINT(EM_DIAGRAM):   drive_wheelsfwd = -1;
61787     +   end;
MPRINT(EM_DIAGRAM):   end;
61788     +   else if _dm3 = '4WD'  then do;
MPRINT(EM_DIAGRAM):   else if _dm3 = '4WD' then do;
61789     +      drive_wheels4wd = 1;
MPRINT(EM_DIAGRAM):   drive_wheels4wd = 1;
61790     +      drive_wheelsfwd = 0;
MPRINT(EM_DIAGRAM):   drive_wheelsfwd = 0;
61791     +   end;
MPRINT(EM_DIAGRAM):   end;
61792     +   else do;
MPRINT(EM_DIAGRAM):   else do;
61793     +      drive_wheels4wd = .;
MPRINT(EM_DIAGRAM):   drive_wheels4wd = .;
61794     +      drive_wheelsfwd = .;
MPRINT(EM_DIAGRAM):   drive_wheelsfwd = .;
61795     +      substr(_warn_,2,1) = 'U';
MPRINT(EM_DIAGRAM):   substr(_warn_,2,1) = 'U';
61796     +      _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
61797     +   end;
MPRINT(EM_DIAGRAM):   end;
61798     +end;
MPRINT(EM_DIAGRAM):   end;
61799     +
61800     +*** Generate dummy variables for engine_location ;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for engine_location ;
61801     +drop engine_locationfront ;
MPRINT(EM_DIAGRAM):   drop engine_locationfront ;
61802     +if missing( engine_location ) then do;
MPRINT(EM_DIAGRAM):   if missing( engine_location ) then do;
61803     +   engine_locationfront = .;
MPRINT(EM_DIAGRAM):   engine_locationfront = .;
61804     +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
61805     +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
61806     +end;
MPRINT(EM_DIAGRAM):   end;
61807     +else do;
MPRINT(EM_DIAGRAM):   else do;
61808     +   length _dm5 $ 5; drop _dm5 ;
MPRINT(EM_DIAGRAM):   length _dm5 $ 5;
MPRINT(EM_DIAGRAM):   drop _dm5 ;
61809     +   %DMNORMCP( engine_location , _dm5 )
MPRINT(DMNORMCP):   _dm5=dmnorm(engine_location,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMCP):  );
61810     +   if _dm5 = 'FRONT'  then do;
MPRINT(EM_DIAGRAM):   if _dm5 = 'FRONT' then do;
61811     +      engine_locationfront = 1;
MPRINT(EM_DIAGRAM):   engine_locationfront = 1;
61812     +   end;
MPRINT(EM_DIAGRAM):   end;
61813     +   else if _dm5 = 'REAR'  then do;
MPRINT(EM_DIAGRAM):   else if _dm5 = 'REAR' then do;
61814     +      engine_locationfront = -1;
MPRINT(EM_DIAGRAM):   engine_locationfront = -1;
61815     +   end;
MPRINT(EM_DIAGRAM):   end;
61816     +   else do;
MPRINT(EM_DIAGRAM):   else do;
61817     +      engine_locationfront = .;
MPRINT(EM_DIAGRAM):   engine_locationfront = .;
61818     +      substr(_warn_,2,1) = 'U';
MPRINT(EM_DIAGRAM):   substr(_warn_,2,1) = 'U';
61819     +      _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
61820     +   end;
MPRINT(EM_DIAGRAM):   end;
61821     +end;
MPRINT(EM_DIAGRAM):   end;
61822     +
61823     +*** Generate dummy variables for engine_type ;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for engine_type ;
61824     +drop engine_typedohc engine_typel engine_typeohc engine_typeohcf
61825     +        engine_typeohcv ;
MPRINT(EM_DIAGRAM):   drop engine_typedohc engine_typel engine_typeohc engine_typeohcf
engine_typeohcv ;
61826     +*** encoding is sparse, initialize to zero;
MPRINT(EM_DIAGRAM):   *** encoding is sparse, initialize to zero;
61827     +engine_typedohc = 0;
MPRINT(EM_DIAGRAM):   engine_typedohc = 0;
61828     +engine_typel = 0;
MPRINT(EM_DIAGRAM):   engine_typel = 0;
61829     +engine_typeohc = 0;
MPRINT(EM_DIAGRAM):   engine_typeohc = 0;
61830     +engine_typeohcf = 0;
MPRINT(EM_DIAGRAM):   engine_typeohcf = 0;
61831     +engine_typeohcv = 0;
MPRINT(EM_DIAGRAM):   engine_typeohcv = 0;
61832     +if missing( engine_type ) then do;
MPRINT(EM_DIAGRAM):   if missing( engine_type ) then do;
61833     +   engine_typedohc = .;
MPRINT(EM_DIAGRAM):   engine_typedohc = .;
61834     +   engine_typel = .;
MPRINT(EM_DIAGRAM):   engine_typel = .;
61835     +   engine_typeohc = .;
MPRINT(EM_DIAGRAM):   engine_typeohc = .;
61836     +   engine_typeohcf = .;
MPRINT(EM_DIAGRAM):   engine_typeohcf = .;
61837     +   engine_typeohcv = .;
MPRINT(EM_DIAGRAM):   engine_typeohcv = .;
61838     +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
61839     +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
61840     +end;
MPRINT(EM_DIAGRAM):   end;
61841     +else do;
MPRINT(EM_DIAGRAM):   else do;
61842     +   length _dm5 $ 5; drop _dm5 ;
MPRINT(EM_DIAGRAM):   length _dm5 $ 5;
MPRINT(EM_DIAGRAM):   drop _dm5 ;
61843     +   %DMNORMCP( engine_type , _dm5 )
MPRINT(DMNORMCP):   _dm5=dmnorm(engine_type,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMCP):  );
61844     +   if _dm5 = 'OHC'  then do;
MPRINT(EM_DIAGRAM):   if _dm5 = 'OHC' then do;
61845     +      engine_typeohc = 1;
MPRINT(EM_DIAGRAM):   engine_typeohc = 1;
61846     +   end;
MPRINT(EM_DIAGRAM):   end;
61847     +   else if _dm5 = 'OHCF'  then do;
MPRINT(EM_DIAGRAM):   else if _dm5 = 'OHCF' then do;
61848     +      engine_typeohcf = 1;
MPRINT(EM_DIAGRAM):   engine_typeohcf = 1;
61849     +   end;
MPRINT(EM_DIAGRAM):   end;
61850     +   else if _dm5 = 'OHCV'  then do;
MPRINT(EM_DIAGRAM):   else if _dm5 = 'OHCV' then do;
61851     +      engine_typeohcv = 1;
MPRINT(EM_DIAGRAM):   engine_typeohcv = 1;
61852     +   end;
MPRINT(EM_DIAGRAM):   end;
61853     +   else if _dm5 = 'DOHC'  then do;
MPRINT(EM_DIAGRAM):   else if _dm5 = 'DOHC' then do;
61854     +      engine_typedohc = 1;
MPRINT(EM_DIAGRAM):   engine_typedohc = 1;
61855     +   end;
MPRINT(EM_DIAGRAM):   end;
61856     +   else if _dm5 = 'L'  then do;
MPRINT(EM_DIAGRAM):   else if _dm5 = 'L' then do;
61857     +      engine_typel = 1;
MPRINT(EM_DIAGRAM):   engine_typel = 1;
61858     +   end;
MPRINT(EM_DIAGRAM):   end;
61859     +   else if _dm5 = 'ROTOR'  then do;
MPRINT(EM_DIAGRAM):   else if _dm5 = 'ROTOR' then do;
61860     +      engine_typedohc = -1;
MPRINT(EM_DIAGRAM):   engine_typedohc = -1;
61861     +      engine_typel = -1;
MPRINT(EM_DIAGRAM):   engine_typel = -1;
61862     +      engine_typeohc = -1;
MPRINT(EM_DIAGRAM):   engine_typeohc = -1;
61863     +      engine_typeohcf = -1;
MPRINT(EM_DIAGRAM):   engine_typeohcf = -1;
61864     +      engine_typeohcv = -1;
MPRINT(EM_DIAGRAM):   engine_typeohcv = -1;
61865     +   end;
MPRINT(EM_DIAGRAM):   end;
61866     +   else do;
MPRINT(EM_DIAGRAM):   else do;
61867     +      engine_typedohc = .;
MPRINT(EM_DIAGRAM):   engine_typedohc = .;
61868     +      engine_typel = .;
MPRINT(EM_DIAGRAM):   engine_typel = .;
61869     +      engine_typeohc = .;
MPRINT(EM_DIAGRAM):   engine_typeohc = .;
61870     +      engine_typeohcf = .;
MPRINT(EM_DIAGRAM):   engine_typeohcf = .;
61871     +      engine_typeohcv = .;
MPRINT(EM_DIAGRAM):   engine_typeohcv = .;
61872     +      substr(_warn_,2,1) = 'U';
MPRINT(EM_DIAGRAM):   substr(_warn_,2,1) = 'U';
61873     +      _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
61874     +   end;
MPRINT(EM_DIAGRAM):   end;
61875     +end;
MPRINT(EM_DIAGRAM):   end;
61876     +
61877     +*** Generate dummy variables for fuel_system ;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for fuel_system ;
61878     +drop fuel_system1bbl fuel_system2bbl fuel_system4bbl fuel_systemidi
61879     +        fuel_systemmpfi ;
MPRINT(EM_DIAGRAM):   drop fuel_system1bbl fuel_system2bbl fuel_system4bbl fuel_systemidi
fuel_systemmpfi ;
61880     +*** encoding is sparse, initialize to zero;
MPRINT(EM_DIAGRAM):   *** encoding is sparse, initialize to zero;
61881     +fuel_system1bbl = 0;
MPRINT(EM_DIAGRAM):   fuel_system1bbl = 0;
61882     +fuel_system2bbl = 0;
MPRINT(EM_DIAGRAM):   fuel_system2bbl = 0;
61883     +fuel_system4bbl = 0;
MPRINT(EM_DIAGRAM):   fuel_system4bbl = 0;
61884     +fuel_systemidi = 0;
MPRINT(EM_DIAGRAM):   fuel_systemidi = 0;
61885     +fuel_systemmpfi = 0;
MPRINT(EM_DIAGRAM):   fuel_systemmpfi = 0;
61886     +if missing( fuel_system ) then do;
MPRINT(EM_DIAGRAM):   if missing( fuel_system ) then do;
61887     +   fuel_system1bbl = .;
MPRINT(EM_DIAGRAM):   fuel_system1bbl = .;
61888     +   fuel_system2bbl = .;
MPRINT(EM_DIAGRAM):   fuel_system2bbl = .;
61889     +   fuel_system4bbl = .;
MPRINT(EM_DIAGRAM):   fuel_system4bbl = .;
61890     +   fuel_systemidi = .;
MPRINT(EM_DIAGRAM):   fuel_systemidi = .;
61891     +   fuel_systemmpfi = .;
MPRINT(EM_DIAGRAM):   fuel_systemmpfi = .;
61892     +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
61893     +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
61894     +end;
MPRINT(EM_DIAGRAM):   end;
61895     +else do;
MPRINT(EM_DIAGRAM):   else do;
61896     +   length _dm4 $ 4; drop _dm4 ;
MPRINT(EM_DIAGRAM):   length _dm4 $ 4;
MPRINT(EM_DIAGRAM):   drop _dm4 ;
61897     +   %DMNORMCP( fuel_system , _dm4 )
MPRINT(DMNORMCP):   _dm4=dmnorm(fuel_system,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMCP):  );
61898     +   if _dm4 = 'MPFI'  then do;
MPRINT(EM_DIAGRAM):   if _dm4 = 'MPFI' then do;
61899     +      fuel_systemmpfi = 1;
MPRINT(EM_DIAGRAM):   fuel_systemmpfi = 1;
61900     +   end;
MPRINT(EM_DIAGRAM):   end;
61901     +   else if _dm4 = '2BBL'  then do;
MPRINT(EM_DIAGRAM):   else if _dm4 = '2BBL' then do;
61902     +      fuel_system2bbl = 1;
MPRINT(EM_DIAGRAM):   fuel_system2bbl = 1;
61903     +   end;
MPRINT(EM_DIAGRAM):   end;
61904     +   else if _dm4 = 'IDI'  then do;
MPRINT(EM_DIAGRAM):   else if _dm4 = 'IDI' then do;
61905     +      fuel_systemidi = 1;
MPRINT(EM_DIAGRAM):   fuel_systemidi = 1;
61906     +   end;
MPRINT(EM_DIAGRAM):   end;
61907     +   else if _dm4 = '1BBL'  then do;
MPRINT(EM_DIAGRAM):   else if _dm4 = '1BBL' then do;
61908     +      fuel_system1bbl = 1;
MPRINT(EM_DIAGRAM):   fuel_system1bbl = 1;
61909     +   end;
MPRINT(EM_DIAGRAM):   end;
61910     +   else if _dm4 = 'SPDI'  then do;
MPRINT(EM_DIAGRAM):   else if _dm4 = 'SPDI' then do;
61911     +      fuel_system1bbl = -1;
MPRINT(EM_DIAGRAM):   fuel_system1bbl = -1;
61912     +      fuel_system2bbl = -1;
MPRINT(EM_DIAGRAM):   fuel_system2bbl = -1;
61913     +      fuel_system4bbl = -1;
MPRINT(EM_DIAGRAM):   fuel_system4bbl = -1;
61914     +      fuel_systemidi = -1;
MPRINT(EM_DIAGRAM):   fuel_systemidi = -1;
61915     +      fuel_systemmpfi = -1;
MPRINT(EM_DIAGRAM):   fuel_systemmpfi = -1;
61916     +   end;
MPRINT(EM_DIAGRAM):   end;
61917     +   else if _dm4 = '4BBL'  then do;
MPRINT(EM_DIAGRAM):   else if _dm4 = '4BBL' then do;
61918     +      fuel_system4bbl = 1;
MPRINT(EM_DIAGRAM):   fuel_system4bbl = 1;
61919     +   end;
MPRINT(EM_DIAGRAM):   end;
61920     +   else do;
MPRINT(EM_DIAGRAM):   else do;
61921     +      fuel_system1bbl = .;
MPRINT(EM_DIAGRAM):   fuel_system1bbl = .;
61922     +      fuel_system2bbl = .;
MPRINT(EM_DIAGRAM):   fuel_system2bbl = .;
61923     +      fuel_system4bbl = .;
MPRINT(EM_DIAGRAM):   fuel_system4bbl = .;
61924     +      fuel_systemidi = .;
MPRINT(EM_DIAGRAM):   fuel_systemidi = .;
61925     +      fuel_systemmpfi = .;
MPRINT(EM_DIAGRAM):   fuel_systemmpfi = .;
61926     +      substr(_warn_,2,1) = 'U';
MPRINT(EM_DIAGRAM):   substr(_warn_,2,1) = 'U';
61927     +      _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
61928     +   end;
MPRINT(EM_DIAGRAM):   end;
61929     +end;
MPRINT(EM_DIAGRAM):   end;
61930     +
61931     +*** Generate dummy variables for fuel_type ;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for fuel_type ;
61932     +drop fuel_typediesel ;
MPRINT(EM_DIAGRAM):   drop fuel_typediesel ;
61933     +if missing( fuel_type ) then do;
MPRINT(EM_DIAGRAM):   if missing( fuel_type ) then do;
61934     +   fuel_typediesel = .;
MPRINT(EM_DIAGRAM):   fuel_typediesel = .;
61935     +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
61936     +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
61937     +end;
MPRINT(EM_DIAGRAM):   end;
61938     +else do;
MPRINT(EM_DIAGRAM):   else do;
61939     +   length _dm6 $ 6; drop _dm6 ;
MPRINT(EM_DIAGRAM):   length _dm6 $ 6;
MPRINT(EM_DIAGRAM):   drop _dm6 ;
61940     +   %DMNORMCP( fuel_type , _dm6 )
MPRINT(DMNORMCP):   _dm6=dmnorm(fuel_type,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMCP):  );
61941     +   if _dm6 = 'GAS'  then do;
MPRINT(EM_DIAGRAM):   if _dm6 = 'GAS' then do;
61942     +      fuel_typediesel = -1;
MPRINT(EM_DIAGRAM):   fuel_typediesel = -1;
61943     +   end;
MPRINT(EM_DIAGRAM):   end;
61944     +   else if _dm6 = 'DIESEL'  then do;
MPRINT(EM_DIAGRAM):   else if _dm6 = 'DIESEL' then do;
61945     +      fuel_typediesel = 1;
MPRINT(EM_DIAGRAM):   fuel_typediesel = 1;
61946     +   end;
MPRINT(EM_DIAGRAM):   end;
61947     +   else do;
MPRINT(EM_DIAGRAM):   else do;
61948     +      fuel_typediesel = .;
MPRINT(EM_DIAGRAM):   fuel_typediesel = .;
61949     +      substr(_warn_,2,1) = 'U';
MPRINT(EM_DIAGRAM):   substr(_warn_,2,1) = 'U';
61950     +      _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
61951     +   end;
MPRINT(EM_DIAGRAM):   end;
61952     +end;
MPRINT(EM_DIAGRAM):   end;
61953     +
61954     +*** Generate dummy variables for num_of_cylinders ;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for num_of_cylinders ;
61955     +drop num_of_cylindersfive num_of_cylindersfour num_of_cylinderssix ;
MPRINT(EM_DIAGRAM):   drop num_of_cylindersfive num_of_cylindersfour num_of_cylinderssix ;
61956     +if missing( num_of_cylinders ) then do;
MPRINT(EM_DIAGRAM):   if missing( num_of_cylinders ) then do;
61957     +   num_of_cylindersfive = .;
MPRINT(EM_DIAGRAM):   num_of_cylindersfive = .;
61958     +   num_of_cylindersfour = .;
MPRINT(EM_DIAGRAM):   num_of_cylindersfour = .;
61959     +   num_of_cylinderssix = .;
MPRINT(EM_DIAGRAM):   num_of_cylinderssix = .;
61960     +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
61961     +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
61962     +end;
MPRINT(EM_DIAGRAM):   end;
61963     +else do;
MPRINT(EM_DIAGRAM):   else do;
61964     +   length _dm6 $ 6; drop _dm6 ;
MPRINT(EM_DIAGRAM):   length _dm6 $ 6;
MPRINT(EM_DIAGRAM):   drop _dm6 ;
61965     +   %DMNORMCP( num_of_cylinders , _dm6 )
MPRINT(DMNORMCP):   _dm6=dmnorm(num_of_cylinders,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMCP):  );
61966     +   if _dm6 = 'FOUR'  then do;
MPRINT(EM_DIAGRAM):   if _dm6 = 'FOUR' then do;
61967     +      num_of_cylindersfive = 0;
MPRINT(EM_DIAGRAM):   num_of_cylindersfive = 0;
61968     +      num_of_cylindersfour = 1;
MPRINT(EM_DIAGRAM):   num_of_cylindersfour = 1;
61969     +      num_of_cylinderssix = 0;
MPRINT(EM_DIAGRAM):   num_of_cylinderssix = 0;
61970     +   end;
MPRINT(EM_DIAGRAM):   end;
61971     +   else if _dm6 = 'SIX'  then do;
MPRINT(EM_DIAGRAM):   else if _dm6 = 'SIX' then do;
61972     +      num_of_cylindersfive = 0;
MPRINT(EM_DIAGRAM):   num_of_cylindersfive = 0;
61973     +      num_of_cylindersfour = 0;
MPRINT(EM_DIAGRAM):   num_of_cylindersfour = 0;
61974     +      num_of_cylinderssix = 1;
MPRINT(EM_DIAGRAM):   num_of_cylinderssix = 1;
61975     +   end;
MPRINT(EM_DIAGRAM):   end;
61976     +   else if _dm6 = 'FIVE'  then do;
MPRINT(EM_DIAGRAM):   else if _dm6 = 'FIVE' then do;
61977     +      num_of_cylindersfive = 1;
MPRINT(EM_DIAGRAM):   num_of_cylindersfive = 1;
61978     +      num_of_cylindersfour = 0;
MPRINT(EM_DIAGRAM):   num_of_cylindersfour = 0;
61979     +      num_of_cylinderssix = 0;
MPRINT(EM_DIAGRAM):   num_of_cylinderssix = 0;
61980     +   end;
MPRINT(EM_DIAGRAM):   end;
61981     +   else if _dm6 = 'TWO'  then do;
MPRINT(EM_DIAGRAM):   else if _dm6 = 'TWO' then do;
61982     +      num_of_cylindersfive = -1;
MPRINT(EM_DIAGRAM):   num_of_cylindersfive = -1;
61983     +      num_of_cylindersfour = -1;
MPRINT(EM_DIAGRAM):   num_of_cylindersfour = -1;
61984     +      num_of_cylinderssix = -1;
MPRINT(EM_DIAGRAM):   num_of_cylinderssix = -1;
61985     +   end;
MPRINT(EM_DIAGRAM):   end;
61986     +   else do;
MPRINT(EM_DIAGRAM):   else do;
61987     +      num_of_cylindersfive = .;
MPRINT(EM_DIAGRAM):   num_of_cylindersfive = .;
61988     +      num_of_cylindersfour = .;
MPRINT(EM_DIAGRAM):   num_of_cylindersfour = .;
61989     +      num_of_cylinderssix = .;
MPRINT(EM_DIAGRAM):   num_of_cylinderssix = .;
61990     +      substr(_warn_,2,1) = 'U';
MPRINT(EM_DIAGRAM):   substr(_warn_,2,1) = 'U';
61991     +      _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
61992     +   end;
MPRINT(EM_DIAGRAM):   end;
61993     +end;
MPRINT(EM_DIAGRAM):   end;
61994     +
61995     +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
61996     +*** Checking missing input Interval
61997     +*** *************************;
MPRINT(EM_DIAGRAM):   *** Checking missing input Interval *** *************************;
61998     +
61999     +IF NMISS(
62000     +   IMP_bore ,
62001     +   IMP_price ,
62002     +   IMP_stroke ,
62003     +   city_mpg ,
62004     +   compression_ratio ,
62005     +   curb_weight ,
62006     +   engine_size ,
62007     +   height ,
62008     +   highway_mpg ,
62009     +   horsepower ,
62010     +   length ,
62011     +   peak_rpm ,
62012     +   wheel_base ,
62013     +   width   ) THEN DO;
MPRINT(EM_DIAGRAM):   IF NMISS( IMP_bore , IMP_price , IMP_stroke , city_mpg ,
compression_ratio , curb_weight , engine_size , height , highway_mpg , horsepower , length ,
peak_rpm , wheel_base , width ) THEN DO;
62014     +   SUBSTR(_WARN_, 1, 1) = 'M';
MPRINT(EM_DIAGRAM):   SUBSTR(_WARN_, 1, 1) = 'M';
62015     +
62016     +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
62017     +END;
MPRINT(EM_DIAGRAM):   END;
62018     +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
62019     +*** Writing the Node intvl ;
MPRINT(EM_DIAGRAM):   *** Writing the Node intvl ;
62020     +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
62021     +IF _DM_BAD EQ 0 THEN DO;
MPRINT(EM_DIAGRAM):   IF _DM_BAD EQ 0 THEN DO;
62022     +   S_IMP_bore  =    -13.3604302656684 +     4.04536293034574 * IMP_bore ;
MPRINT(EM_DIAGRAM):   S_IMP_bore = -13.3604302656684 + 4.04536293034574 * IMP_bore ;
62023     +   S_IMP_price  =    -1.76956867778247 +     0.00013853770372 * IMP_price ;
MPRINT(EM_DIAGRAM):   S_IMP_price = -1.76956867778247 + 0.00013853770372 * IMP_price ;
62024     +   S_IMP_stroke  =    -10.8668653654577 +     3.34228668303343 * IMP_stroke ;
MPRINT(EM_DIAGRAM):   S_IMP_stroke = -10.8668653654577 + 3.34228668303343 * IMP_stroke ;
62025     +   S_city_mpg  =    -4.20980412468247 +     0.16438126218986 * city_mpg ;
MPRINT(EM_DIAGRAM):   S_city_mpg = -4.20980412468247 + 0.16438126218986 * city_mpg ;
62026     +   S_compression_ratio  =    -2.46137870028453 +     0.23723903386806 *
62027     +        compression_ratio ;
MPRINT(EM_DIAGRAM):   S_compression_ratio = -2.46137870028453 + 0.23723903386806 *
compression_ratio ;
62028     +   S_curb_weight  =    -5.31291947276211 +     0.00211052077492 * curb_weight
62029     +         ;
MPRINT(EM_DIAGRAM):   S_curb_weight = -5.31291947276211 + 0.00211052077492 * curb_weight ;
62030     +   S_engine_size  =    -3.59635582610259 +      0.0290802605814 * engine_size
62031     +         ;
MPRINT(EM_DIAGRAM):   S_engine_size = -3.59635582610259 + 0.0290802605814 * engine_size ;
62032     +   S_height  =    -21.8926608140893 +     0.40589318675657 * height ;
MPRINT(EM_DIAGRAM):   S_height = -21.8926608140893 + 0.40589318675657 * height ;
62033     +   S_highway_mpg  =      -4.989308989555 +     0.16011903047352 * highway_mpg
62034     +         ;
MPRINT(EM_DIAGRAM):   S_highway_mpg = -4.989308989555 + 0.16011903047352 * highway_mpg ;
62035     +   S_horsepower  =    -2.74643097264309 +     0.02734944206973 * horsepower ;
MPRINT(EM_DIAGRAM):   S_horsepower = -2.74643097264309 + 0.02734944206973 * horsepower ;
62036     +   S_length  =    -15.2378498365576 +     0.08781104037663 * length ;
MPRINT(EM_DIAGRAM):   S_length = -15.2378498365576 + 0.08781104037663 * length ;
62037     +   S_peak_rpm  =    -10.6885709541859 +     0.00208333904184 * peak_rpm ;
MPRINT(EM_DIAGRAM):   S_peak_rpm = -10.6885709541859 + 0.00208333904184 * peak_rpm ;
62038     +   S_wheel_base  =    -17.8009087180129 +     0.18059887504832 * wheel_base ;
MPRINT(EM_DIAGRAM):   S_wheel_base = -17.8009087180129 + 0.18059887504832 * wheel_base ;
62039     +   S_width  =      -35.79721220308 +     0.54490010203333 * width ;
MPRINT(EM_DIAGRAM):   S_width = -35.79721220308 + 0.54490010203333 * width ;
62040     +END;
MPRINT(EM_DIAGRAM):   END;
62041     +ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
62042     +   IF MISSING( IMP_bore ) THEN S_IMP_bore  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( IMP_bore ) THEN S_IMP_bore = . ;
62043     +   ELSE S_IMP_bore  =    -13.3604302656684 +     4.04536293034574 * IMP_bore ;
MPRINT(EM_DIAGRAM):   ELSE S_IMP_bore = -13.3604302656684 + 4.04536293034574 * IMP_bore ;
62044     +   IF MISSING( IMP_price ) THEN S_IMP_price  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( IMP_price ) THEN S_IMP_price = . ;
62045     +   ELSE S_IMP_price  =    -1.76956867778247 +     0.00013853770372 * IMP_price
62046     +         ;
MPRINT(EM_DIAGRAM):   ELSE S_IMP_price = -1.76956867778247 + 0.00013853770372 * IMP_price ;
62047     +   IF MISSING( IMP_stroke ) THEN S_IMP_stroke  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( IMP_stroke ) THEN S_IMP_stroke = . ;
62048     +   ELSE S_IMP_stroke  =    -10.8668653654577 +     3.34228668303343 *
62049     +        IMP_stroke ;
MPRINT(EM_DIAGRAM):   ELSE S_IMP_stroke = -10.8668653654577 + 3.34228668303343 * IMP_stroke ;
62050     +   IF MISSING( city_mpg ) THEN S_city_mpg  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( city_mpg ) THEN S_city_mpg = . ;
62051     +   ELSE S_city_mpg  =    -4.20980412468247 +     0.16438126218986 * city_mpg ;
MPRINT(EM_DIAGRAM):   ELSE S_city_mpg = -4.20980412468247 + 0.16438126218986 * city_mpg ;
62052     +   IF MISSING( compression_ratio ) THEN S_compression_ratio  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( compression_ratio ) THEN S_compression_ratio = . ;
62053     +   ELSE S_compression_ratio  =    -2.46137870028453 +     0.23723903386806 *
62054     +        compression_ratio ;
MPRINT(EM_DIAGRAM):   ELSE S_compression_ratio = -2.46137870028453 + 0.23723903386806 *
compression_ratio ;
62055     +   IF MISSING( curb_weight ) THEN S_curb_weight  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( curb_weight ) THEN S_curb_weight = . ;
62056     +   ELSE S_curb_weight  =    -5.31291947276211 +     0.00211052077492 *
62057     +        curb_weight ;
MPRINT(EM_DIAGRAM):   ELSE S_curb_weight = -5.31291947276211 + 0.00211052077492 * curb_weight ;
62058     +   IF MISSING( engine_size ) THEN S_engine_size  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( engine_size ) THEN S_engine_size = . ;
62059     +   ELSE S_engine_size  =    -3.59635582610259 +      0.0290802605814 *
62060     +        engine_size ;
MPRINT(EM_DIAGRAM):   ELSE S_engine_size = -3.59635582610259 + 0.0290802605814 * engine_size ;
62061     +   IF MISSING( height ) THEN S_height  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( height ) THEN S_height = . ;
62062     +   ELSE S_height  =    -21.8926608140893 +     0.40589318675657 * height ;
MPRINT(EM_DIAGRAM):   ELSE S_height = -21.8926608140893 + 0.40589318675657 * height ;
62063     +   IF MISSING( highway_mpg ) THEN S_highway_mpg  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( highway_mpg ) THEN S_highway_mpg = . ;
62064     +   ELSE S_highway_mpg  =      -4.989308989555 +     0.16011903047352 *
62065     +        highway_mpg ;
MPRINT(EM_DIAGRAM):   ELSE S_highway_mpg = -4.989308989555 + 0.16011903047352 * highway_mpg ;
62066     +   IF MISSING( horsepower ) THEN S_horsepower  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( horsepower ) THEN S_horsepower = . ;
62067     +   ELSE S_horsepower  =    -2.74643097264309 +     0.02734944206973 *
62068     +        horsepower ;
MPRINT(EM_DIAGRAM):   ELSE S_horsepower = -2.74643097264309 + 0.02734944206973 * horsepower ;
62069     +   IF MISSING( length ) THEN S_length  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( length ) THEN S_length = . ;
62070     +   ELSE S_length  =    -15.2378498365576 +     0.08781104037663 * length ;
MPRINT(EM_DIAGRAM):   ELSE S_length = -15.2378498365576 + 0.08781104037663 * length ;
62071     +   IF MISSING( peak_rpm ) THEN S_peak_rpm  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( peak_rpm ) THEN S_peak_rpm = . ;
62072     +   ELSE S_peak_rpm  =    -10.6885709541859 +     0.00208333904184 * peak_rpm ;
MPRINT(EM_DIAGRAM):   ELSE S_peak_rpm = -10.6885709541859 + 0.00208333904184 * peak_rpm ;
62073     +   IF MISSING( wheel_base ) THEN S_wheel_base  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( wheel_base ) THEN S_wheel_base = . ;
62074     +   ELSE S_wheel_base  =    -17.8009087180129 +     0.18059887504832 *
62075     +        wheel_base ;
MPRINT(EM_DIAGRAM):   ELSE S_wheel_base = -17.8009087180129 + 0.18059887504832 * wheel_base ;
62076     +   IF MISSING( width ) THEN S_width  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( width ) THEN S_width = . ;
62077     +   ELSE S_width  =      -35.79721220308 +     0.54490010203333 * width ;
MPRINT(EM_DIAGRAM):   ELSE S_width = -35.79721220308 + 0.54490010203333 * width ;
62078     +END;
MPRINT(EM_DIAGRAM):   END;
62079     +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
62080     +*** Writing the Node bin ;
MPRINT(EM_DIAGRAM):   *** Writing the Node bin ;
62081     +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
62082     +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
62083     +*** Writing the Node nom ;
MPRINT(EM_DIAGRAM):   *** Writing the Node nom ;
62084     +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
62085     +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
62086     +*** Writing the Node H1 ;
MPRINT(EM_DIAGRAM):   *** Writing the Node H1 ;
62087     +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
62088     +IF _DM_BAD EQ 0 THEN DO;
MPRINT(EM_DIAGRAM):   IF _DM_BAD EQ 0 THEN DO;
62089     +   H11  =     0.24764702083622 * S_IMP_bore  +     0.28213326401805 *
62090     +        S_IMP_price  +    -0.53879116397667 * S_IMP_stroke
62091     +          +    -0.11931132274074 * S_city_mpg  +     0.09567849674331 *
62092     +        S_compression_ratio  +      0.1935255149849 * S_curb_weight
62093     +          +     -0.0815136152389 * S_engine_size  +     0.16188737913458 *
62094     +        S_height  +     0.09695051488223 * S_highway_mpg
62095     +          +     0.20225749653559 * S_horsepower  +    -0.07669105060228 *
62096     +        S_length  +    -0.47912199175711 * S_peak_rpm
62097     +          +     -0.1232784239268 * S_wheel_base  +     0.32967247826106 *
62098     +        S_width ;
MPRINT(EM_DIAGRAM):   H11 = 0.24764702083622 * S_IMP_bore + 0.28213326401805 * S_IMP_price +
-0.53879116397667 * S_IMP_stroke + -0.11931132274074 * S_city_mpg + 0.09567849674331 *
S_compression_ratio + 0.1935255149849 * S_curb_weight + -0.0815136152389 * S_engine_size +
0.16188737913458 * S_height + 0.09695051488223 * S_highway_mpg + 0.20225749653559 *
S_horsepower + -0.07669105060228 * S_length + -0.47912199175711 * S_peak_rpm +
-0.1232784239268 * S_wheel_base + 0.32967247826106 * S_width ;
62099     +   H12  =     0.25361356900853 * S_IMP_bore  +    -0.01705220399916 *
62100     +        S_IMP_price  +    -0.07011739266761 * S_IMP_stroke
62101     +          +       0.079977664863 * S_city_mpg  +    -0.01814747756212 *
62102     +        S_compression_ratio  +      0.2849876772342 * S_curb_weight
62103     +          +    -0.00397489455247 * S_engine_size  +     0.02719534553776 *
62104     +        S_height  +    -0.18309231474003 * S_highway_mpg
62105     +          +    -0.06204381675248 * S_horsepower  +     0.30761615298988 *
62106     +        S_length  +     0.73467282164771 * S_peak_rpm
62107     +          +     0.29150941282208 * S_wheel_base  +     -0.1117321224432 *
62108     +        S_width ;
MPRINT(EM_DIAGRAM):   H12 = 0.25361356900853 * S_IMP_bore + -0.01705220399916 * S_IMP_price +
-0.07011739266761 * S_IMP_stroke + 0.079977664863 * S_city_mpg + -0.01814747756212 *
S_compression_ratio + 0.2849876772342 * S_curb_weight + -0.00397489455247 * S_engine_size +
0.02719534553776 * S_height + -0.18309231474003 * S_highway_mpg + -0.06204381675248 *
S_horsepower + 0.30761615298988 * S_length + 0.73467282164771 * S_peak_rpm + 0.29150941282208
* S_wheel_base + -0.1117321224432 * S_width ;
62109     +   H13  =    -0.08447128816673 * S_IMP_bore  +    -0.29293151559674 *
62110     +        S_IMP_price  +     0.08250304233007 * S_IMP_stroke
62111     +          +     -0.9236441200224 * S_city_mpg  +     0.18249944739401 *
62112     +        S_compression_ratio  +    -0.41497236958385 * S_curb_weight
62113     +          +    -0.56883798262612 * S_engine_size  +    -0.07597879988065 *
62114     +        S_height  +     0.10515142048938 * S_highway_mpg
62115     +          +     0.15323355736007 * S_horsepower  +     0.18181421956378 *
62116     +        S_length  +     0.39257648170384 * S_peak_rpm
62117     +          +    -1.37993595763031 * S_wheel_base  +     0.45601171372661 *
62118     +        S_width ;
MPRINT(EM_DIAGRAM):   H13 = -0.08447128816673 * S_IMP_bore + -0.29293151559674 * S_IMP_price +
0.08250304233007 * S_IMP_stroke + -0.9236441200224 * S_city_mpg + 0.18249944739401 *
S_compression_ratio + -0.41497236958385 * S_curb_weight + -0.56883798262612 * S_engine_size +
-0.07597879988065 * S_height + 0.10515142048938 * S_highway_mpg + 0.15323355736007 *
S_horsepower + 0.18181421956378 * S_length + 0.39257648170384 * S_peak_rpm + -1.37993595763031
* S_wheel_base + 0.45601171372661 * S_width ;
62119     +   H11  = H11  +    -0.21919555405402 * M_bore0  +     0.15085903800231 *
62120     +        M_num_of_doors0  +    -0.00962570043438 * M_price0
62121     +          +    -0.32149134365324 * M_stroke0 ;
MPRINT(EM_DIAGRAM):   H11 = H11 + -0.21919555405402 * M_bore0 + 0.15085903800231 *
M_num_of_doors0 + -0.00962570043438 * M_price0 + -0.32149134365324 * M_stroke0 ;
62122     +   H12  = H12  +    -0.14016461842775 * M_bore0  +     0.25994321831867 *
62123     +        M_num_of_doors0  +    -0.12741801834042 * M_price0
62124     +          +    -0.31953414263151 * M_stroke0 ;
MPRINT(EM_DIAGRAM):   H12 = H12 + -0.14016461842775 * M_bore0 + 0.25994321831867 *
M_num_of_doors0 + -0.12741801834042 * M_price0 + -0.31953414263151 * M_stroke0 ;
62125     +   H13  = H13  +    -0.37841464171324 * M_bore0  +    -0.06345701158933 *
62126     +        M_num_of_doors0  +     0.28477929824556 * M_price0
62127     +          +    -0.49429909360858 * M_stroke0 ;
MPRINT(EM_DIAGRAM):   H13 = H13 + -0.37841464171324 * M_bore0 + -0.06345701158933 *
M_num_of_doors0 + 0.28477929824556 * M_price0 + -0.49429909360858 * M_stroke0 ;
62128     +   H11  = H11  +    -0.11477055440116 * IMP_num_of_doors2
62129     +          +    -0.07783399585187 * aspirationstd  +    -0.10994675941847 *
62130     +        body_styleconvertible  +    -0.13058366982583 * body_stylehardtop
62131     +          +    -0.21923114725556 * body_stylehatchback
62132     +          +     0.32821169408793 * body_stylesedan  +    -0.14484062500884 *
62133     +        drive_wheels4wd  +    -0.30105219504248 * drive_wheelsfwd
62134     +          +     0.04181245417934 * engine_locationfront
62135     +          +      0.1341639873628 * engine_typedohc  +    -0.13681100308426 *
62136     +        engine_typel  +    -0.08003968427127 * engine_typeohc
62137     +          +     0.17069702796575 * engine_typeohcf  +    -0.12178525541041 *
62138     +        engine_typeohcv  +    -0.07406679737738 * fuel_system1bbl
62139     +          +    -0.01476508675057 * fuel_system2bbl  +    -0.02342675380675 *
62140     +        fuel_system4bbl  +    -0.07761575246892 * fuel_systemidi
62141     +          +     0.07158065221534 * fuel_systemmpfi  +     0.27912180841842 *
62142     +        fuel_typediesel  +     0.02562471178527 * num_of_cylindersfive
62143     +          +    -0.06116758357011 * num_of_cylindersfour
62144     +          +    -0.17869082980453 * num_of_cylinderssix ;
MPRINT(EM_DIAGRAM):   H11 = H11 + -0.11477055440116 * IMP_num_of_doors2 + -0.07783399585187 *
aspirationstd + -0.10994675941847 * body_styleconvertible + -0.13058366982583 *
body_stylehardtop + -0.21923114725556 * body_stylehatchback + 0.32821169408793 *
body_stylesedan + -0.14484062500884 * drive_wheels4wd + -0.30105219504248 * drive_wheelsfwd +
0.04181245417934 * engine_locationfront + 0.1341639873628 * engine_typedohc +
-0.13681100308426 * engine_typel + -0.08003968427127 * engine_typeohc + 0.17069702796575 *
engine_typeohcf + -0.12178525541041 * engine_typeohcv + -0.07406679737738 * fuel_system1bbl +
-0.01476508675057 * fuel_system2bbl + -0.02342675380675 * fuel_system4bbl + -0.07761575246892
* fuel_systemidi + 0.07158065221534 * fuel_systemmpfi + 0.27912180841842 * fuel_typediesel +
0.02562471178527 * num_of_cylindersfive + -0.06116758357011 * num_of_cylindersfour +
-0.17869082980453 * num_of_cylinderssix ;
62145     +   H12  = H12  +    -0.79950652163205 * IMP_num_of_doors2
62146     +          +     0.06022503814421 * aspirationstd  +    -0.03934507532933 *
62147     +        body_styleconvertible  +    -0.19719644812026 * body_stylehardtop
62148     +          +     0.36229771168581 * body_stylehatchback
62149     +          +    -0.30618888006383 * body_stylesedan  +       0.436856065837 *
62150     +        drive_wheels4wd  +     0.43174171171681 * drive_wheelsfwd
62151     +          +     -0.3194288080945 * engine_locationfront
62152     +          +    -0.23077583867824 * engine_typedohc  +     0.01622151793299 *
62153     +        engine_typel  +    -0.00141499417135 * engine_typeohc
62154     +          +     0.25952209543266 * engine_typeohcf  +      0.0695342349125 *
62155     +        engine_typeohcv  +     0.64180901279902 * fuel_system1bbl
62156     +          +    -0.16773032066945 * fuel_system2bbl  +     0.12083740596009 *
62157     +        fuel_system4bbl  +    -0.01593356166188 * fuel_systemidi
62158     +          +    -0.39742729666636 * fuel_systemmpfi  +     0.16035360742573 *
62159     +        fuel_typediesel  +     0.12071629234633 * num_of_cylindersfive
62160     +          +     0.26750120232856 * num_of_cylindersfour
62161     +          +     0.01884923565656 * num_of_cylinderssix ;
MPRINT(EM_DIAGRAM):   H12 = H12 + -0.79950652163205 * IMP_num_of_doors2 + 0.06022503814421 *
aspirationstd + -0.03934507532933 * body_styleconvertible + -0.19719644812026 *
body_stylehardtop + 0.36229771168581 * body_stylehatchback + -0.30618888006383 *
body_stylesedan + 0.436856065837 * drive_wheels4wd + 0.43174171171681 * drive_wheelsfwd +
-0.3194288080945 * engine_locationfront + -0.23077583867824 * engine_typedohc +
0.01622151793299 * engine_typel + -0.00141499417135 * engine_typeohc + 0.25952209543266 *
engine_typeohcf + 0.0695342349125 * engine_typeohcv + 0.64180901279902 * fuel_system1bbl +
-0.16773032066945 * fuel_system2bbl + 0.12083740596009 * fuel_system4bbl + -0.01593356166188 *
fuel_systemidi + -0.39742729666636 * fuel_systemmpfi + 0.16035360742573 * fuel_typediesel +
0.12071629234633 * num_of_cylindersfive + 0.26750120232856 * num_of_cylindersfour +
0.01884923565656 * num_of_cylinderssix ;
62162     +   H13  = H13  +     0.33856869861001 * IMP_num_of_doors2
62163     +          +     0.03676626235743 * aspirationstd  +    -0.04561129850524 *
62164     +        body_styleconvertible  +    -0.04074069227269 * body_stylehardtop
62165     +          +     0.04874708222139 * body_stylehatchback
62166     +          +     0.05582731740112 * body_stylesedan  +     0.32883828198727 *
62167     +        drive_wheels4wd  +     0.22102114241081 * drive_wheelsfwd
62168     +          +    -0.19325018746552 * engine_locationfront
62169     +          +     0.39226207329319 * engine_typedohc  +    -0.29230716421671 *
62170     +        engine_typel  +     0.02671887453383 * engine_typeohc
62171     +          +    -0.76511456522233 * engine_typeohcf  +    -0.08642782539104 *
62172     +        engine_typeohcv  +    -1.37111302632063 * fuel_system1bbl
62173     +          +     0.19046186011514 * fuel_system2bbl  +     0.02802877071491 *
62174     +        fuel_system4bbl  +     0.18999405084301 * fuel_systemidi
62175     +          +     0.85076189905037 * fuel_systemmpfi  +     0.15524254676424 *
62176     +        fuel_typediesel  +      0.3037113350789 * num_of_cylindersfive
62177     +          +     0.16318456895222 * num_of_cylindersfour
62178     +          +    -0.29369169854782 * num_of_cylinderssix ;
MPRINT(EM_DIAGRAM):   H13 = H13 + 0.33856869861001 * IMP_num_of_doors2 + 0.03676626235743 *
aspirationstd + -0.04561129850524 * body_styleconvertible + -0.04074069227269 *
body_stylehardtop + 0.04874708222139 * body_stylehatchback + 0.05582731740112 *
body_stylesedan + 0.32883828198727 * drive_wheels4wd + 0.22102114241081 * drive_wheelsfwd +
-0.19325018746552 * engine_locationfront + 0.39226207329319 * engine_typedohc +
-0.29230716421671 * engine_typel + 0.02671887453383 * engine_typeohc + -0.76511456522233 *
engine_typeohcf + -0.08642782539104 * engine_typeohcv + -1.37111302632063 * fuel_system1bbl +
0.19046186011514 * fuel_system2bbl + 0.02802877071491 * fuel_system4bbl + 0.18999405084301 *
fuel_systemidi + 0.85076189905037 * fuel_systemmpfi + 0.15524254676424 * fuel_typediesel +
0.3037113350789 * num_of_cylindersfive + 0.16318456895222 * num_of_cylindersfour +
-0.29369169854782 * num_of_cylinderssix ;
62179     +   H11  =     -0.0510449793034 + H11 ;
MPRINT(EM_DIAGRAM):   H11 = -0.0510449793034 + H11 ;
62180     +   H12  =     0.56620299684424 + H12 ;
MPRINT(EM_DIAGRAM):   H12 = 0.56620299684424 + H12 ;
62181     +   H13  =     0.54252266558478 + H13 ;
MPRINT(EM_DIAGRAM):   H13 = 0.54252266558478 + H13 ;
62182     +   H11  = TANH(H11 );
MPRINT(EM_DIAGRAM):   H11 = TANH(H11 );
62183     +   H12  = TANH(H12 );
MPRINT(EM_DIAGRAM):   H12 = TANH(H12 );
62184     +   H13  = TANH(H13 );
MPRINT(EM_DIAGRAM):   H13 = TANH(H13 );
62185     +END;
MPRINT(EM_DIAGRAM):   END;
62186     +ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
62187     +   H11  = .;
MPRINT(EM_DIAGRAM):   H11 = .;
62188     +   H12  = .;
MPRINT(EM_DIAGRAM):   H12 = .;
62189     +   H13  = .;
MPRINT(EM_DIAGRAM):   H13 = .;
62190     +END;
MPRINT(EM_DIAGRAM):   END;
62191     +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
62192     +*** Writing the Node Risk ;
MPRINT(EM_DIAGRAM):   *** Writing the Node Risk ;
62193     +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
62194     +
62195     +*** Generate dummy variables for Risk ;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for Risk ;
62196     +drop Risk1 Risk0 ;
MPRINT(EM_DIAGRAM):   drop Risk1 Risk0 ;
62197     +label F_Risk = 'From: Risk' ;
MPRINT(EM_DIAGRAM):   label F_Risk = 'From: Risk' ;
62198     +length F_Risk $ 12;
MPRINT(EM_DIAGRAM):   length F_Risk $ 12;
62199     +F_Risk = put( Risk , BEST12. );
MPRINT(EM_DIAGRAM):   F_Risk = put( Risk , BEST12. );
62200     +%DMNORMIP( F_Risk )
MPRINT(DMNORMIP):   call dmnorm(F_Risk,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
62201     +if missing( Risk ) then do;
MPRINT(EM_DIAGRAM):   if missing( Risk ) then do;
62202     +   Risk1 = .;
MPRINT(EM_DIAGRAM):   Risk1 = .;
62203     +   Risk0 = .;
MPRINT(EM_DIAGRAM):   Risk0 = .;
62204     +end;
MPRINT(EM_DIAGRAM):   end;
62205     +else do;
MPRINT(EM_DIAGRAM):   else do;
62206     +   if F_Risk = '1'  then do;
MPRINT(EM_DIAGRAM):   if F_Risk = '1' then do;
62207     +      Risk1 = 1;
MPRINT(EM_DIAGRAM):   Risk1 = 1;
62208     +      Risk0 = 0;
MPRINT(EM_DIAGRAM):   Risk0 = 0;
62209     +   end;
MPRINT(EM_DIAGRAM):   end;
62210     +   else if F_Risk = '0'  then do;
MPRINT(EM_DIAGRAM):   else if F_Risk = '0' then do;
62211     +      Risk1 = 0;
MPRINT(EM_DIAGRAM):   Risk1 = 0;
62212     +      Risk0 = 1;
MPRINT(EM_DIAGRAM):   Risk0 = 1;
62213     +   end;
MPRINT(EM_DIAGRAM):   end;
62214     +   else do;
MPRINT(EM_DIAGRAM):   else do;
62215     +      Risk1 = .;
MPRINT(EM_DIAGRAM):   Risk1 = .;
62216     +      Risk0 = .;
MPRINT(EM_DIAGRAM):   Risk0 = .;
62217     +   end;
MPRINT(EM_DIAGRAM):   end;
62218     +end;
MPRINT(EM_DIAGRAM):   end;
62219     +IF _DM_BAD EQ 0 THEN DO;
MPRINT(EM_DIAGRAM):   IF _DM_BAD EQ 0 THEN DO;
62220     +   P_Risk1  =     0.49314885360637 * H11  +    -3.90210364732559 * H12
62221     +          +     5.29550173197034 * H13 ;
MPRINT(EM_DIAGRAM):   P_Risk1 = 0.49314885360637 * H11 + -3.90210364732559 * H12 +
5.29550173197034 * H13 ;
62222     +   P_Risk1  =     0.56802040802389 + P_Risk1 ;
MPRINT(EM_DIAGRAM):   P_Risk1 = 0.56802040802389 + P_Risk1 ;
62223     +   P_Risk0  = 0;
MPRINT(EM_DIAGRAM):   P_Risk0 = 0;
62224     +   _MAX_ = MAX (P_Risk1 , P_Risk0 );
MPRINT(EM_DIAGRAM):   _MAX_ = MAX (P_Risk1 , P_Risk0 );
62225     +   _SUM_ = 0.;
MPRINT(EM_DIAGRAM):   _SUM_ = 0.;
62226     +   P_Risk1  = EXP(P_Risk1  - _MAX_);
MPRINT(EM_DIAGRAM):   P_Risk1 = EXP(P_Risk1 - _MAX_);
62227     +   _SUM_ = _SUM_ + P_Risk1 ;
MPRINT(EM_DIAGRAM):   _SUM_ = _SUM_ + P_Risk1 ;
62228     +   P_Risk0  = EXP(P_Risk0  - _MAX_);
MPRINT(EM_DIAGRAM):   P_Risk0 = EXP(P_Risk0 - _MAX_);
62229     +   _SUM_ = _SUM_ + P_Risk0 ;
MPRINT(EM_DIAGRAM):   _SUM_ = _SUM_ + P_Risk0 ;
62230     +   P_Risk1  = P_Risk1  / _SUM_;
MPRINT(EM_DIAGRAM):   P_Risk1 = P_Risk1 / _SUM_;
62231     +   P_Risk0  = P_Risk0  / _SUM_;
MPRINT(EM_DIAGRAM):   P_Risk0 = P_Risk0 / _SUM_;
62232     +END;
MPRINT(EM_DIAGRAM):   END;
62233     +ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
62234     +   P_Risk1  = .;
MPRINT(EM_DIAGRAM):   P_Risk1 = .;
62235     +   P_Risk0  = .;
MPRINT(EM_DIAGRAM):   P_Risk0 = .;
62236     +END;
MPRINT(EM_DIAGRAM):   END;
62237     +IF _DM_BAD EQ 1 THEN DO;
MPRINT(EM_DIAGRAM):   IF _DM_BAD EQ 1 THEN DO;
62238     +   P_Risk1  =                 0.54;
MPRINT(EM_DIAGRAM):   P_Risk1 = 0.54;
62239     +   P_Risk0  =                 0.46;
MPRINT(EM_DIAGRAM):   P_Risk0 = 0.46;
62240     +END;
MPRINT(EM_DIAGRAM):   END;
62241     +*** *****************************;
MPRINT(EM_DIAGRAM):   *** *****************************;
62242     +*** Writing the Residuals  of the Node Risk ;
MPRINT(EM_DIAGRAM):   *** Writing the Residuals of the Node Risk ;
62243     +*** ******************************;
MPRINT(EM_DIAGRAM):   *** ******************************;
62244     +IF MISSING( Risk1 ) THEN R_Risk1  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( Risk1 ) THEN R_Risk1 = . ;
62245     +ELSE R_Risk1  = Risk1  - P_Risk1 ;
MPRINT(EM_DIAGRAM):   ELSE R_Risk1 = Risk1 - P_Risk1 ;
62246     +IF MISSING( Risk0 ) THEN R_Risk0  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( Risk0 ) THEN R_Risk0 = . ;
62247     +ELSE R_Risk0  = Risk0  - P_Risk0 ;
MPRINT(EM_DIAGRAM):   ELSE R_Risk0 = Risk0 - P_Risk0 ;
62248     +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
62249     +*** Writing the I_Risk  AND U_Risk ;
MPRINT(EM_DIAGRAM):   *** Writing the I_Risk AND U_Risk ;
62250     +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
62251     +_MAXP_ = P_Risk1 ;
MPRINT(EM_DIAGRAM):   _MAXP_ = P_Risk1 ;
62252     +I_Risk  = "1           " ;
MPRINT(EM_DIAGRAM):   I_Risk = "1           " ;
62253     +U_Risk  =                    1;
MPRINT(EM_DIAGRAM):   U_Risk = 1;
62254     +IF( _MAXP_ LT P_Risk0  ) THEN DO;
MPRINT(EM_DIAGRAM):   IF( _MAXP_ LT P_Risk0 ) THEN DO;
62255     +   _MAXP_ = P_Risk0 ;
MPRINT(EM_DIAGRAM):   _MAXP_ = P_Risk0 ;
62256     +   I_Risk  = "0           " ;
MPRINT(EM_DIAGRAM):   I_Risk = "0           " ;
62257     +   U_Risk  =                    0;
MPRINT(EM_DIAGRAM):   U_Risk = 0;
62258     +END;
MPRINT(EM_DIAGRAM):   END;
62259     +********************************;
MPRINT(EM_DIAGRAM):   ********************************;
62260     +*** End Scoring Code for Neural;
MPRINT(EM_DIAGRAM):   *** End Scoring Code for Neural;
62261     +********************************;
MPRINT(EM_DIAGRAM):   ********************************;
62262     +drop
62263     +H11
62264     +H12
62265     +H13
62266     +;
MPRINT(EM_DIAGRAM):   drop H11 H12 H13 ;
62267     +drop S_:;
MPRINT(EM_DIAGRAM):   drop S_:;
NOTE: %INCLUDE (level 1) ending.
MPRINT(EM_DIAGRAM):   run;
62268      run;
 
NOTE: DATA STEP view saved on file EMWS1.NEURAL_VALIDATE.
NOTE: A stored DATA STEP view cannot run under a different operating system.
NOTE: View EMWS1.IMPT_VALIDATE.VIEW used (Total process time):
      real time           0.10 seconds
      cpu time            0.04 seconds
 
NOTE: DATA statement used (Total process time):
      real time           0.11 seconds
      cpu time            0.04 seconds
 
 
MPRINT(EM_DIAGRAM):   quit;
62269      quit;
62270      filename emflow;
MPRINT(EM_DIAGRAM):   filename emflow;
NOTE: Fileref EMFLOW has been deassigned.
62271      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
62272      * Neural: Computing metadata for TRAIN data;
MPRINT(EM_DIAGRAM):   * Neural: Computing metadata for TRAIN data;
62273      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
 
NOTE: View EMWS1.NEURAL_TRAIN.VIEW used (Total process time):
      real time           0.06 seconds
      cpu time            0.07 seconds
 
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * &nodeid: Computing Metadata for TRAIN data;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   filename _delta "H:\746\Decision Tree
test\Workspaces\EMWS1\Neural\CDELTA_TRAIN.sas";
MPRINT(EMADVISECOLUMNS):   proc display c=sashelp.emmeta.advisecolumns.scl;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    options validvarname=any;
MPRINT(EMADVISECOLUMNS):   proc contents data=EMWS1.Neural_TRAIN out=_tempAdvisor noprint;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):   options validvarname=V7;
MPRINT(EMADVISECOLUMNS):    data _null_;
MPRINT(EMADVISECOLUMNS):   dsid = open('EMWS1.Neural_TRAIN');
MPRINT(EMADVISECOLUMNS):   call symput('_dsidTable', strip(put(dsid, best.)));
MPRINT(EMADVISECOLUMNS):   if dsid then do;
MPRINT(EMADVISECOLUMNS):   call symput('_engineTable', attrc(dsid, 'ENGINE'));
MPRINT(EMADVISECOLUMNS):   dsid = close(dsid);
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    proc contents data=EMWS1.Neural_TRAIN out=WORK.M344BZUP noprint;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M344BZUP;
MPRINT(EMADVISECOLUMNS):   length NAME $ 64 TYPE $ 1 LABEL $ 200 FORMAT $ 36 INFORMAT $36
INDEX $ 1 INDEXTYPE $ 9;
MPRINT(EMADVISECOLUMNS):   label NAME =;
MPRINT(EMADVISECOLUMNS):   set WORK.M344BZUP(keep=name type length label format formatl
formatd informat informl informd idxusage rename=(type=itype));
MPRINT(EMADVISECOLUMNS):   if itype = 1 then type = 'N';
MPRINT(EMADVISECOLUMNS):   else type = 'C';
MPRINT(EMADVISECOLUMNS):   if formatl > 0 then do;
MPRINT(EMADVISECOLUMNS):   if format ne ' ' then format = strip(format)!!strip(put(formatl,
best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EMADVISECOLUMNS):   else format = strip(put(formatl, best12.))!!'.'!!strip(put(formatd,
best12.));
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if format ne '' then format = strip(format)!!'.';
MPRINT(EMADVISECOLUMNS):   if informl > 0 then do;
MPRINT(EMADVISECOLUMNS):   if informat ne ' ' then informat =
strip(informat)!!strip(put(informl, best12.))!!'.'!!strip(put(informd, best12.));
MPRINT(EMADVISECOLUMNS):   else informat = strip(put(informl,
best12.))!!'.'!!strip(put(informd, best12.));
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if informat ne '' then informat = strip(informat)!!'.';
MPRINT(EMADVISECOLUMNS):   if idxusage = 'NONE' then index ="N";
MPRINT(EMADVISECOLUMNS):   else index = "Y";
MPRINT(EMADVISECOLUMNS):   indextype = idxusage;
MPRINT(EMADVISECOLUMNS):   drop idxusage itype formatl formatd informl informd;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M344BZUP;
MPRINT(EMADVISECOLUMNS):   length UNAME $64;
MPRINT(EMADVISECOLUMNS):   set WORK.M344BZUP;
MPRINT(EMADVISECOLUMNS):   UNAME = upcase(NAME);
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    proc sort data=WORK.M2N8BSQM NOTHREADS;
MPRINT(EMADVISECOLUMNS):   by UNAME;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M2N8BSQM;
MPRINT(EMADVISECOLUMNS):   drop UNAME;
MPRINT(EMADVISECOLUMNS):   set WORK.M2N8BSQM;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M0QT2LXV(keep=NAME ATTR);
MPRINT(EMADVISECOLUMNS):   length ATTR $ 20;
MPRINT(EMADVISECOLUMNS):   set WORK.M2N8BSQM;
MPRINT(EMADVISECOLUMNS):   if level ne "INTERVAL" then do;
MPRINT(EMADVISECOLUMNS):   if order = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'ORDER';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if format ne ' ' and formattype = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'FORMATTYPE';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if role = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'ROLE';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if level = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'LEVEL';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if type = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'TYPE';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if index = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'INDEX';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if report = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'REPORT';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):   proc sort NOTHREADS;
MPRINT(EMADVISECOLUMNS):   by attr;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M2N8BSQM;
MPRINT(EMADVISECOLUMNS):   length NAME $64 ROLE $ 32 LEVEL $ 10 ORDER $ 8 CREATOR $32
FORMATTYPE $ 10 FAMILY $ 10 LOWERLIMIT 8 UPPERLIMIT 8 REPORT $1 DISTRIBUTION $ 20 COMMENT $64;
MPRINT(EMADVISECOLUMNS):   length levelAssigned 8 roleAssigned 8 PRICE 8;
MPRINT(EMADVISECOLUMNS):   set WORK.M2N8BSQM;
MPRINT(EMADVISECOLUMNS):   if formattype = ' ' then do;
MPRINT(EMADVISECOLUMNS):   if format ne ' ' then do;
MPRINT(EMADVISECOLUMNS):   if type = 'N' then do;
MPRINT(EMADVISECOLUMNS):   pos = indexc(format,'.1234567890');
MPRINT(EMADVISECOLUMNS):   if pos > 1 then tempfmt = substr(format,1, pos-1);
MPRINT(EMADVISECOLUMNS):   else tempfmt = ' ';
MPRINT(EMADVISECOLUMNS):   flen = length(tempfmt);
MPRINT(EMADVISECOLUMNS):   select;
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("DATE" "DAY" "DDMMYY" "DOWNAME" "JULDAY" "JULIAN"
"MMDDYY" "MMDDYYD" "MMDDYYC" "MMDDYYN" "MMDDYYP" "MMDDYYS" "MONNAME" "MONTH" "MONYY" "NENGO"
"QTR" "QTRR" "WEEKDATE" "WEEKDATX" "WEEKDAY" "WORDDATE" "WORDDATX" "YEAR" "YYMMDD" "YYMON"
"YYMMDDC" "YYMMDDD" "YYMMDDN" "YYMMDDP" "YYMMDDS" "EURDFDE" "NJDATE" "NLDATE" "EURDFDD"
"EURDFDWN" "EURDFMN" "EURDFMY" "EURDFWK" "EURDFWKX" "EURDFWDX" "EURDFDN" "EURDFDE" ))
formattype = 'DATE';
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("DATETIME" "EURDFDT" "TOD" )) formattype =
"DATETIME";
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("HHMM" "HOUR" "MMSS" "TIME" "TIMEAMPM" ))
formattype = "TIME";
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("COMMA" "COMMAX" "DOLLAR" "DOLLARX" "E" "FRACT"
"NEGPAREN" "PERCENT")) formattype="QUANTITY";
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("BINARY" "HEX" "IB" "OCTAL" "PD" "PIB" "PK" "RB"
"SSN" "Z" "ZD")) formattype = "CODING";
MPRINT(EMADVISECOLUMNS):   otherwise do;
MPRINT(EMADVISECOLUMNS):   formattype = "USER";
MPRINT(EMADVISECOLUMNS):   if substr(tempfmt, 1, 6)='NLDATE' then formattype = "DATE";
MPRINT(EMADVISECOLUMNS):   else if substr(tempfmt, 1, 6)='NLDATM' then formattype = "DATETIME";
MPRINT(EMADVISECOLUMNS):   else if substr(tempfmt, 1, 4)='NLTIM' then formattype = "TIME";
MPRINT(EMADVISECOLUMNS):   else if flen >= 4 then do;
MPRINT(EMADVISECOLUMNS):   str = substr(tempfmt,1,4);
MPRINT(EMADVISECOLUMNS):   if str in ("MMYY" "YYMM" "YYQR") then formattype ="DATE";
MPRINT(EMADVISECOLUMNS):   else if str = "S370" then formattype = "CODING";
MPRINT(EMADVISECOLUMNS):   else if str = "BEST" then formattype = "NUM";
MPRINT(EMADVISECOLUMNS):   drop str;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if flen >=3 and substr(tempfmt,1,3) = "YYQ" then formatType =
"DATE";
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   drop flen tempfmt pos;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else do;
MPRINT(EMADVISECOLUMNS):   formatType = "CATEGORY";
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if formatType = "NUM" then do;
MPRINT(EMADVISECOLUMNS):   if index = "Y" then formatType = "DISCRETE";
MPRINT(EMADVISECOLUMNS):   else formatType = "QUANTITY";
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if level = ' ' then do;
MPRINT(EMADVISECOLUMNS):   if formatType in ("CATEGORY", "CODING", "ID") or type = "C" then
level = "NOMINAL";
MPRINT(EMADVISECOLUMNS):   else level = "INTERVAL";
MPRINT(EMADVISECOLUMNS):   levelAssigned = 1;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else level = upcase(level);
MPRINT(EMADVISECOLUMNS):   if role = ' ' then do;
MPRINT(EMADVISECOLUMNS):   length name_prefix $8 _uname $64;
MPRINT(EMADVISECOLUMNS):   drop name_prefix _uname _freqflag;
MPRINT(EMADVISECOLUMNS):   retain _freqflag;
MPRINT(EMADVISECOLUMNS):   if LENGTH> 80 then ROLE = 'TEXT';
MPRINT(EMADVISECOLUMNS):   _uname = upcase(NAME);
MPRINT(EMADVISECOLUMNS):   select(_uname);
MPRINT(EMADVISECOLUMNS):   when('_PARTIND_') do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'ID';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   when('_WARN_') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_SEGMENT') do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'SEGMENT';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   when('_NODE_') do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'SEGMENT';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   when('EM_CLASSTARGET') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_VALUETARGET') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_PREDICTION') ROLE = 'PREDICT';
MPRINT(EMADVISECOLUMNS):   when('EM_PROBABILITY') ROLE = 'PREDICT';
MPRINT(EMADVISECOLUMNS):   when('EM_EVENTPROBABILITY') ROLE = 'PREDICT';
MPRINT(EMADVISECOLUMNS):   when('EM_CLASSIFICATION') ROLE = 'CLASSIFICATION';
MPRINT(EMADVISECOLUMNS):   when('EM_DECISION') ROLE = 'DECISION';
MPRINT(EMADVISECOLUMNS):   when('EM_PROFIT') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_LOSS') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_ROI') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('URI') ROLE = 'URL';
MPRINT(EMADVISECOLUMNS):   when('FILTERED') ROLE = 'TEXTLOC';
MPRINT(EMADVISECOLUMNS):   otherwise do;
MPRINT(EMADVISECOLUMNS):   if upcase(NAME) =: 'ZIP' then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'REJECTED';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   COMMENT = 'Rejected by: Exceed the maximum class level of %s';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if upcase(NAME) in('FREQ', 'FREQUENCY') then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'FREQ';
MPRINT(EMADVISECOLUMNS):   if TYPE = 'C' then ROLE = 'INPUT';
MPRINT(EMADVISECOLUMNS):   else if _freqflag =1 then ROLE='REJECTED';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else do;
MPRINT(EMADVISECOLUMNS):   name_prefix = scan(_uname, 1, '_');
MPRINT(EMADVISECOLUMNS):   if scan(_uname, 2, '_') = '' then name_prefix='';
MPRINT(EMADVISECOLUMNS):   if name_prefix in('F', 'I', 'U') then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'CLASSIFICATION';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if name_prefix in('P', 'V') then ROLE = 'PREDICT';
MPRINT(EMADVISECOLUMNS):   else if name_prefix in('R', 'RS', 'RT', 'RD', 'RDS', 'RDT', 'RA',
'RAS', 'RAT') then ROLE = 'RESIDUAL';
MPRINT(EMADVISECOLUMNS):   else if name_prefix ='D' then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'DECISION';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if name_prefix ='B' then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'SEGMENT';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if name_prefix in('EP', 'BP', 'CP', 'EL', 'CL', 'BL', 'W',
'ROI', 'IC') then ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   else do;
MPRINT(EMADVISECOLUMNS):   array _ROLE_ (19) $32 _TEMPORARY_
('ASSESS','CLASSIFICATION','CENSOR', 'COST', 'CROSSID', 'DECISION', 'ID','INPUT', 'LABEL',
'MISSING','PREDICT','REFERRER','REJECTED', 'RESIDUAL','SEGMENT', 'SEQUENCE','TARGET', 'TEXT',
'TIMEID');
MPRINT(EMADVISECOLUMNS):   drop _found_ i;
MPRINT(EMADVISECOLUMNS):   _found_=0;
MPRINT(EMADVISECOLUMNS):   do i=1 to 19 until(_found_=1);
MPRINT(EMADVISECOLUMNS):   if index(_uname, trim(_ROLE_{i}))=1 then do;
MPRINT(EMADVISECOLUMNS):   ROLE=_ROLE_{i};
MPRINT(EMADVISECOLUMNS):   if ROLE = 'ID' then LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   else if ROLE = 'SEGMENT' then LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   else if ROLE = 'TIMEID' and TYPE='N' then LEVEL = 'INTERVAL';
MPRINT(EMADVISECOLUMNS):   _found_=1;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if length(_uname)>2 then do;
MPRINT(EMADVISECOLUMNS):   if substr(reverse(trim(_uname)), 1, 3) = 'DI_' then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'ID';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if ROLE='FREQ' then _freqflag=1;
MPRINT(EMADVISECOLUMNS):   else if ROLE = 'CLASSIFICATION' then LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   if symexist('RATEMKG_ROLE') then do;
MPRINT(EMADVISECOLUMNS):   if upcase(symget('RATEMKG_ROLE')) in('Y', 'YES') then do;
MPRINT(EMADVISECOLUMNS):   if _uname =: 'POLICY' then ROLE = 'POLICYID';
MPRINT(EMADVISECOLUMNS):   else if _uname in ('PARTITION', '_PARTIND_') then ROLE =
'PARTITION';
MPRINT(EMADVISECOLUMNS):   else if type = 'N' then do;
MPRINT(EMADVISECOLUMNS):   if _uname = 'EXPOSURE' then ROLE = 'EXPOSURE';
MPRINT(EMADVISECOLUMNS):   else if _uname = 'YEAR' then ROLE = 'YEAR';
MPRINT(EMADVISECOLUMNS):   else if _uname = 'WEIGHT' then ROLE = 'WEIGHT';
MPRINT(EMADVISECOLUMNS):   else if _uname = 'OFFSET' then ROLE = 'OFFSET';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if role = ' ' then do;
MPRINT(EMADVISECOLUMNS):   if formattype in('DATE', 'DATETIME', 'TIME') then role = 'TIMEID';
MPRINT(EMADVISECOLUMNS):   else role = 'INPUT';
MPRINT(EMADVISECOLUMNS):   roleAssigned = 1;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else role = upcase(role);
MPRINT(EMADVISECOLUMNS):   if REPORT = '' then REPORT = 'N';
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M2N8BSQM;
MPRINT(EMADVISECOLUMNS):   set WORK.M2N8BSQM;
MPRINT(EMADVISECOLUMNS):   label NAME = "Variable Name" TYPE = "Type" ROLE = "Role" LEVEL=
"Measurement Level" ORDER= "Order" CREATOR= "Creator" FORMATTYPE= "Format Type" FAMILY=
"Family" DISTRIBUTION= "Distribution" PRICE= "Price" LOWERLIMIT= "Lower limit" UPPERLIMIT=
"Upper Limit" REPORT= "Report" COMMENT= "Comment" INDEX= "Index" INDEXTYPE= "IndexType" LABEL=
"Label" LENGTH= "Length";
MPRINT(EMADVISECOLUMNS):   drop levelAssigned roleAssigned;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   proc sort data=WORK.COLUMNMETA;
MPRINT(EM_DIAGRAM):   by NAME;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * &nodeid: Merge incoming metadata;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   proc contents data=EMWS1.Impt_TRAIN noprint out=_temp2(keep=NAME);
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=_temp2;
MPRINT(EM_DIAGRAM):   by NAME;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=EMWS1.Impt_CMeta_TRAIN out=_temp;
MPRINT(EM_DIAGRAM):   by NAME;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data EMWS1.Neural_CMeta_TRAIN;
MPRINT(EM_DIAGRAM):   merge WORK.COLUMNMETA(in=_a) _temp2(in=_b) _temp(drop=FORMAT INFORMAT
LENGTH INDEX INDEXTYPE in=_c) end=_eof_;
MPRINT(EM_DIAGRAM):   by NAME;
MPRINT(EM_DIAGRAM):   if (^_a and _b) or (^_c and _a and _b) then delete;
MPRINT(EM_DIAGRAM):   if ^_b then CREATOR = "Neural";
MPRINT(EM_DIAGRAM):   length model $200;
MPRINT(EM_DIAGRAM):   label MODEL = "Model Node";
MPRINT(EM_DIAGRAM):   select(upcase(name));
MPRINT(EM_DIAGRAM):   when("P_RISK1") creator = "Neural";
MPRINT(EM_DIAGRAM):   when("R_RISK1") creator = "Neural";
MPRINT(EM_DIAGRAM):   when("P_RISK0") creator = "Neural";
MPRINT(EM_DIAGRAM):   when("R_RISK0") creator = "Neural";
MPRINT(EM_DIAGRAM):   when("F_RISK") creator = "Neural";
MPRINT(EM_DIAGRAM):   when("I_RISK") creator = "Neural";
MPRINT(EM_DIAGRAM):   when("U_RISK") creator = "Neural";
MPRINT(EM_DIAGRAM):   when("_WARN_") creator = "Neural";
MPRINT(EM_DIAGRAM):   when("RISK") model = "Neural";
MPRINT(EM_DIAGRAM):   when('');
MPRINT(EM_DIAGRAM):   otherwise;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Neural: Apply Delta Code;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   filename _delta;
62612      data WORK.MODELTEMP_INFO;
MPRINT(EM_DIAGRAM):    data WORK.MODELTEMP_INFO;
62613      set EMWS1.Neural_EMINFO;
MPRINT(EM_DIAGRAM):   set EMWS1.Neural_EMINFO;
62614      where DATA='Neural' and KEY ^in('DECDATA', 'DECMETA', 'IMPORTANCE', 'MODEL');
MPRINT(EM_DIAGRAM):   where DATA='Neural' and KEY ^in('DECDATA', 'DECMETA', 'IMPORTANCE',
'MODEL');
62615      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 0 observations read from the data set EMWS1.NEURAL_EMINFO.
      WHERE (DATA='Neural') and KEY not in ('DECDATA', 'DECMETA', 'IMPORTANCE', 'MODEL');
NOTE: The data set WORK.MODELTEMP_INFO has 0 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
62616      data EMWS1.Neural_EMINFO;
MPRINT(EM_DIAGRAM):    data EMWS1.Neural_EMINFO;
62617      length TARGET KEY $32 DATA $43;
MPRINT(EM_DIAGRAM):   length TARGET KEY $32 DATA $43;
62618      input TARGET KEY DATA $;
MPRINT(EM_DIAGRAM):   input TARGET KEY DATA $;
62619      cards;
MPRINT(EM_DIAGRAM):   cards;
 
NOTE: The data set EMWS1.NEURAL_EMINFO has 3 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.04 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_DIAGRAM):   run;
62623      run;
62624      data EMWS1.Neural_EMINFO;
MPRINT(EM_DIAGRAM):   data EMWS1.Neural_EMINFO;
62625      set EMWS1.Neural_EMINFO WORK.MODELTEMP_INFO;
MPRINT(EM_DIAGRAM):   set EMWS1.Neural_EMINFO WORK.MODELTEMP_INFO;
62626      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 3 observations read from the data set EMWS1.NEURAL_EMINFO.
NOTE: There were 0 observations read from the data set WORK.MODELTEMP_INFO.
NOTE: The data set EMWS1.NEURAL_EMINFO has 3 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.06 seconds
      cpu time            0.03 seconds
 
 
62627      proc sort data = EMWS1.Neural_EMINFO NOTHREADS;
MPRINT(EM_DIAGRAM):    proc sort data = EMWS1.Neural_EMINFO NOTHREADS;
62628      by TARGET KEY;
MPRINT(EM_DIAGRAM):   by TARGET KEY;
62629      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 3 observations read from the data set EMWS1.NEURAL_EMINFO.
NOTE: The data set EMWS1.NEURAL_EMINFO has 3 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.08 seconds
      cpu time            0.03 seconds
 
 
62630      proc sort data = EMWS1.FIMPORT_EMINFO OUT=WORK.SORTEDEMINFO NOTHREADS;
MPRINT(EM_DIAGRAM):    proc sort data = EMWS1.FIMPORT_EMINFO OUT=WORK.SORTEDEMINFO NOTHREADS;
62631      by TARGET KEY;
MPRINT(EM_DIAGRAM):   by TARGET KEY;
62632      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 1 observations read from the data set EMWS1.FIMPORT_EMINFO.
NOTE: The data set WORK.SORTEDEMINFO has 1 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
62633      proc sort data = EMWS1.Neural_EMINFO OUT=WORK.TEMP_INFO NOTHREADS;
MPRINT(EM_DIAGRAM):   proc sort data = EMWS1.Neural_EMINFO OUT=WORK.TEMP_INFO NOTHREADS;
62634      by TARGET KEY;
MPRINT(EM_DIAGRAM):   by TARGET KEY;
62635      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: Input data set is already sorted; it has been copied to the output data set.
NOTE: There were 3 observations read from the data set EMWS1.NEURAL_EMINFO.
NOTE: The data set WORK.TEMP_INFO has 3 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
62636      data EMWS1.Neural_EMINFO;
MPRINT(EM_DIAGRAM):   data EMWS1.Neural_EMINFO;
62637      merge WORK.SORTEDEMINFO WORK.TEMP_INFO;
MPRINT(EM_DIAGRAM):   merge WORK.SORTEDEMINFO WORK.TEMP_INFO;
62638      by TARGET KEY;
MPRINT(EM_DIAGRAM):   by TARGET KEY;
62639      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 1 observations read from the data set WORK.SORTEDEMINFO.
NOTE: There were 3 observations read from the data set WORK.TEMP_INFO.
NOTE: The data set EMWS1.NEURAL_EMINFO has 4 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.07 seconds
      cpu time            0.01 seconds
 
 
62640      proc datasets lib=work nolist;
MPRINT(EM_DIAGRAM):   proc datasets lib=work nolist;
62641      delete TEMP_INFO SORTEDEMINFO;
MPRINT(EM_DIAGRAM):   delete TEMP_INFO SORTEDEMINFO;
62642      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: Deleting WORK.TEMP_INFO (memtype=DATA).
NOTE: Deleting WORK.SORTEDEMINFO (memtype=DATA).
62643      quit;
MPRINT(EM_DIAGRAM):   quit;
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
NOTE: View EMWS1.NEURAL_TRAIN.VIEW used (Total process time):
      real time           0.06 seconds
      cpu time            0.06 seconds
 
NOTE: View EMWS1.NEURAL_VALIDATE.VIEW used (Total process time):
      real time           0.07 seconds
      cpu time            0.07 seconds
 
MPRINT(EM_DIAGRAM):    proc printto;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   call symput('NLDATE', strip(put(date(), NLDATE.)));
MPRINT(EM_DIAGRAM):   call symput('NLTIME', strip(put(datetime(), NLTIME.)));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   nldate= sasmsg("sashelp.dmine", "log_date_note", 'N', "April 05, 2021" );
MPRINT(EM_DIAGRAM):   nltime= sasmsg("sashelp.dmine", "log_time_note", 'N', "13:13:31 o'clock"
);
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "* Report Log";
MPRINT(EM_DIAGRAM):   put nldate;
MPRINT(EM_DIAGRAM):   put nltime;
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   run;
*------------------------------------------------------------*
* Report Log
Date:                April 05, 2021
Time:                13:13:31 o'clock
*------------------------------------------------------------*
MPRINT(EM_DIAGRAM):    filename O2KYVVAV "H:\746\Decision Tree
test\Workspaces\EMWS1\Neural\EMREPORT.out" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):   proc printto print=O2KYVVAV new;
MPRINT(EM_DIAGRAM):   run;
62667      data EMWS1.Neural_EMOUTFIT(rename=(_NAME_=TARGET));
MPRINT(EM_DIAGRAM):    data EMWS1.Neural_EMOUTFIT(rename=(_NAME_=TARGET));
62668      set EMWS1.Neural_OUTFIT(where=(_NAME_ eq 'OVERALL'));
MPRINT(EM_DIAGRAM):   set EMWS1.Neural_OUTFIT(where=(_NAME_ eq 'OVERALL'));
62669      label _NAME_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_target_vlabel  , NOQUOTE))";
MPRINT(EM_DIAGRAM):   label _NAME_ = "Target";
62670      if _NAME_='OVERALL' then _NAME_='Risk';
MPRINT(EM_DIAGRAM):   if _NAME_='OVERALL' then _NAME_='Risk';
62671      drop _ITER_;
MPRINT(EM_DIAGRAM):   drop _ITER_;
62672      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 1 observations read from the data set EMWS1.NEURAL_OUTFIT.
      WHERE _NAME_='OVERALL';
NOTE: The data set EMWS1.NEURAL_EMOUTFIT has 1 observations and 35 variables.
NOTE: DATA statement used (Total process time):
      real time           0.06 seconds
      cpu time            0.00 seconds
 
 
62673      proc sort data=EMWS1.Neural_EMOUTFIT nodupkey;
MPRINT(EM_DIAGRAM):   proc sort data=EMWS1.Neural_EMOUTFIT nodupkey;
62674      by TARGET;
MPRINT(EM_DIAGRAM):   by TARGET;
62675      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 1 observations read from the data set EMWS1.NEURAL_EMOUTFIT.
NOTE: 0 observations with duplicate key values were deleted.
NOTE: The data set EMWS1.NEURAL_EMOUTFIT has 1 observations and 35 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.07 seconds
      cpu time            0.01 seconds
 
 
62676      data EMWS1.Neural_EMOUTFIT;
MPRINT(EM_DIAGRAM):    data EMWS1.Neural_EMOUTFIT;
62677      set EMWS1.Neural_EMOUTFIT;
MPRINT(EM_DIAGRAM):   set EMWS1.Neural_EMOUTFIT;
62678      length TargetLabel $200;
MPRINT(EM_DIAGRAM):   length TargetLabel $200;
62679      label targetLabel = "%sysfunc(sasmsg(sashelp.dmine, meta_targetlabel_vlabel,
62679    ! NOQUOTE))";
MPRINT(EM_DIAGRAM):   label targetLabel = "Target Label";
62680      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: Variable TargetLabel is uninitialized.
NOTE: There were 1 observations read from the data set EMWS1.NEURAL_EMOUTFIT.
NOTE: The data set EMWS1.NEURAL_EMOUTFIT has 1 observations and 36 variables.
NOTE: DATA statement used (Total process time):
      real time           0.08 seconds
      cpu time            0.01 seconds
 
 
62681      proc sort data=EMWS1.Neural_EMREPORTFIT nothreads;
MPRINT(EM_DIAGRAM):    proc sort data=EMWS1.Neural_EMREPORTFIT nothreads;
62682      by TARGET;
MPRINT(EM_DIAGRAM):   by TARGET;
62683      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 21 observations read from the data set EMWS1.NEURAL_EMREPORTFIT.
NOTE: The data set EMWS1.NEURAL_EMREPORTFIT has 21 observations and 7 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.07 seconds
      cpu time            0.00 seconds
 
 
62684      %let _EMwarndup = 0;
62685      %let _EMtargetdup =;
62686      %let _EMASEtargetdup =;
62687      data _null_;
MPRINT(EM_DIAGRAM):    data _null_;
62688      set EMWS1.Neural_EMOUTFIT;
MPRINT(EM_DIAGRAM):   set EMWS1.Neural_EMOUTFIT;
62689      if .<_ASE_<0.000001 then do;
MPRINT(EM_DIAGRAM):   if .<_ASE_<0.000001 then do;
62690      call symput('_EMwarndup', '1');
MPRINT(EM_DIAGRAM):   call symput('_EMwarndup', '1');
62691      call symput('_EMtargetdup', target);
MPRINT(EM_DIAGRAM):   call symput('_EMtargetdup', target);
62692      call symput('_EMASEtargetdup', put(_ASE_, best.));
MPRINT(EM_DIAGRAM):   call symput('_EMASEtargetdup', put(_ASE_, best.));
62693      end;
MPRINT(EM_DIAGRAM):   end;
62694      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 1 observations read from the data set EMWS1.NEURAL_EMOUTFIT.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
62695      proc sort data=EMWS1.Impt_CMeta_TRAIN out=WORK.SUBSETINMETA;
MPRINT(EM_DIAGRAM):    proc sort data=EMWS1.Impt_CMeta_TRAIN out=WORK.SUBSETINMETA;
62696      by NAME;
MPRINT(EM_DIAGRAM):   by NAME;
62697      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 32 observations read from the data set EMWS1.IMPT_CMETA_TRAIN.
NOTE: The data set WORK.SUBSETINMETA has 32 observations and 28 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
62698      proc sort data=EMWS1.Neural_VariableSet out=WORK.SUBSETVARSET(keep=NAME REPORT);
MPRINT(EM_DIAGRAM):   proc sort data=EMWS1.Neural_VariableSet out=WORK.SUBSETVARSET(keep=NAME
REPORT);
62699      by NAME;
MPRINT(EM_DIAGRAM):   by NAME;
62700      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 31 observations read from the data set EMWS1.NEURAL_VARIABLESET.
NOTE: The data set WORK.SUBSETVARSET has 31 observations and 2 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.02 seconds
      cpu time            0.00 seconds
 
 
62701      data WORK.ASSESS_META;
MPRINT(EM_DIAGRAM):   data WORK.ASSESS_META;
62702      merge WORK.SUBSETINMETA WORK.SUBSETVARSET;
MPRINT(EM_DIAGRAM):   merge WORK.SUBSETINMETA WORK.SUBSETVARSET;
62703      by NAME;
MPRINT(EM_DIAGRAM):   by NAME;
62704      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 32 observations read from the data set WORK.SUBSETINMETA.
NOTE: There were 31 observations read from the data set WORK.SUBSETVARSET.
NOTE: The data set WORK.ASSESS_META has 32 observations and 28 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
62705      data EM_temp_assessMeta;
MPRINT(EM_DIAGRAM):    data EM_temp_assessMeta;
62706      set EMWS1.Neural_CMeta_TRAIN;
MPRINT(EM_DIAGRAM):   set EMWS1.Neural_CMeta_TRAIN;
62707      where role in('DECISION', 'PREDICT', 'RESIDUAL', 'CLASSIFICATION', 'ASSESS', 'COST')
62707    ! ;
MPRINT(EM_DIAGRAM):   where role in('DECISION', 'PREDICT', 'RESIDUAL', 'CLASSIFICATION',
'ASSESS', 'COST');
62708      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 8 observations read from the data set EMWS1.NEURAL_CMETA_TRAIN.
      WHERE role in ('ASSESS', 'CLASSIFICATION', 'COST', 'DECISION', 'PREDICT', 'RESIDUAL');
NOTE: The data set WORK.EM_TEMP_ASSESSMETA has 8 observations and 29 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
62709      data EM_temp_assessdata;
MPRINT(EM_DIAGRAM):    data EM_temp_assessdata;
62710      set EMWS1.Neural_TRAIN(keep=
62711      F_Risk
62712      I_Risk
62713      P_Risk0
62714      P_Risk1
62715      R_Risk0
62716      R_Risk1
62717      U_Risk
62718      _WARN_
62719      Risk
62720      );
MPRINT(EM_DIAGRAM):   set EMWS1.Neural_TRAIN(keep= F_Risk I_Risk P_Risk0 P_Risk1 R_Risk0
R_Risk1 U_Risk _WARN_ Risk );
62721      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 100 observations read from the data set EMWS1.PART_TRAIN.
NOTE: View EMWS1.NEURAL_TRAIN.VIEW used (Total process time):
      real time           0.07 seconds
      cpu time            0.06 seconds
 
NOTE: There were 100 observations read from the data set EMWS1.IMPT_TRAIN.
NOTE: There were 100 observations read from the data set EMWS1.NEURAL_TRAIN.
NOTE: The data set WORK.EM_TEMP_ASSESSDATA has 100 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.09 seconds
      cpu time            0.06 seconds
 
 
MPRINT(EM_DIAGRAM):    proc freq data=EM_temp_assessdata noprint;
MPRINT(EM_DIAGRAM):   table I_Risk*F_Risk / out = WORK.Neural_3KUSG3L nocol norow outpct;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data WORK.Neural_3KUSG3L;
MPRINT(EM_DIAGRAM):   length _TYPE_ $10 DATAROLE TARGET $32 TARGETLABEL $200 FROM INTO $32
CORRECTTEXT $40 ;
MPRINT(EM_DIAGRAM):   label _TYPE_ = "Outcome Type";
MPRINT(EM_DIAGRAM):   label DATAROLE = "Data Role";
MPRINT(EM_DIAGRAM):   label TARGET = "Target Variable";
MPRINT(EM_DIAGRAM):   label TARGETLABEL = "Target Label";
MPRINT(EM_DIAGRAM):   label FROM = "Target";
MPRINT(EM_DIAGRAM):   label INTO = "Outcome";
MPRINT(EM_DIAGRAM):   label PCT_ROW = "Target Percentage";
MPRINT(EM_DIAGRAM):   label PCT_COL = "Outcome Percentage";
MPRINT(EM_DIAGRAM):   label COUNT = "Frequency Count";
MPRINT(EM_DIAGRAM):   label PERCENT = "Total Percentage";
MPRINT(EM_DIAGRAM):   label CORRECTTEXT = "Correct Text";
MPRINT(EM_DIAGRAM):   label CORRECT = "Correct";
MPRINT(EM_DIAGRAM):   set WORK.Neural_3KUSG3L(rename=(F_Risk=FROM I_Risk=INTO));
MPRINT(EM_DIAGRAM):   retain _TYPE_ 'PREDICTION' DATAROLE "TRAIN" TARGET "Risk";
MPRINT(EM_DIAGRAM):   if FROM eq INTO then do;
MPRINT(EM_DIAGRAM):   CORRECT = 0;
MPRINT(EM_DIAGRAM):   CORRECTTEXT="Correct";
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   CORRECT = 1;
MPRINT(EM_DIAGRAM):   CORRECTTEXT="Incorrect";
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data EMWS1.Neural_EMCLASSIFICATION;
MPRINT(EM_DIAGRAM):   set WORK.Neural_3KUSG3L;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data WORK.MISCREPORT;
MPRINT(EM_DIAGRAM):   set WORK.Neural_3KUSG3L;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data WORK.MISCREPORT(drop=INTO FROM _TYPE_);
MPRINT(EM_DIAGRAM):   set WORK.MISCREPORT;
MPRINT(EM_DIAGRAM):   length MISC $12;
MPRINT(EM_DIAGRAM):   if FROM='1' and INTO='1' then MISC='TRUEEVENT';
MPRINT(EM_DIAGRAM):   else if FROM='1' and INTO ne '1' then MISC='FALSENEVENT';
MPRINT(EM_DIAGRAM):   else if FROM ne '1' and INTO='1' then MISC='FALSEEVENT';
MPRINT(EM_DIAGRAM):   else if FROM ne'1' and INTO ne '1' then MISC='TRUENEVENT';
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=WORK.MISCREPORT nothreads;
MPRINT(EM_DIAGRAM):   by DATAROLE TARGET;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc summary data=WORK.MISCREPORT NWAY;
MPRINT(EM_DIAGRAM):   output out=WORK.MISCCOUNT(drop=_FREQ_ _TYPE_) SUM=COUNT;
MPRINT(EM_DIAGRAM):   CLASS MISC;
MPRINT(EM_DIAGRAM):   VAR COUNT;
MPRINT(EM_DIAGRAM):   by DATAROLE TARGET;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc transpose data=WORK.MISCCOUNT out=WORK.MISCREPORT(drop=_NAME_
_LABEL_);
MPRINT(EM_DIAGRAM):   by DATAROLE TARGET;
MPRINT(EM_DIAGRAM):   ID MISC;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data EMWS1.Neural_EMEVENTREPORT;
MPRINT(EM_DIAGRAM):   length TARGETLABEL $200;
MPRINT(EM_DIAGRAM):   label TARGETLABEL = "Target Label";
MPRINT(EM_DIAGRAM):   set WORK.MISCREPORT;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data ASSESS_REPORTMETA;
MPRINT(EM_DIAGRAM):   set EMWS1.Neural_VariableSet;
MPRINT(EM_DIAGRAM):   where REPORT='Y';
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   filename temp catalog 'sashelp.emassmt.em_assess.source';
MPRINT(EM_DIAGRAM):   filename temp;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   set EMWS1.Neural_Risk_DM;
MPRINT(EM_DIAGRAM):   where _TYPE_="TARGET";
MPRINT(EM_DIAGRAM):   call symput('ASSMT_EVENT', strip(event));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):
MPRINT(EM_ASSESS):   data _ea_tmpdata;
MPRINT(EM_ASSESS):   set EM_temp_assessdata;
MPRINT(EM_ASSESS):   _tmpfreqvar_=1;
MPRINT(EM_ASSESS):   run;
MPRINT(EM_CHECKEMSETINIT):   DATA _NULL_;
MPRINT(EM_CHECKEMSETINIT):   EM_SETINIT = 'N';
MPRINT(EM_CHECKEMSETINIT):   IF SYSPROD('PRODNUM50') THEN EM_SETINIT = 'Y';
MPRINT(EM_CHECKEMSETINIT):   ELSE IF SYSPROD('PRODNUM448') THEN EM_SETINIT = 'Y';
MPRINT(EM_CHECKEMSETINIT):   ELSE IF SYSPROD('PRODNUM102') THEN EM_SETINIT = 'Y';
MPRINT(EM_CHECKEMSETINIT):   ELSE IF SYSPROD('PRODNUM103') THEN EM_SETINIT = 'Y';
MPRINT(EM_CHECKEMSETINIT):   CALL SYMPUT('EM_SETINIT', EM_SETINIT);
MPRINT(EM_CHECKEMSETINIT):   RUN;
MPRINT(EM_ASSESS):  ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ............ Reading in reporting data set;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   DATA _NULL_;
MPRINT(EM_ASSESS):   SET ASSESS_REPORTMETA END = EOF;
MPRINT(EM_ASSESS):   IF TYPE = "C" OR UPCASE (LEVEL) IN ("NOMINAL", "BINARY" , "ORDINAL") THEN
DO;
MPRINT(EM_ASSESS):   IF UPCASE (NAME) NE UPCASE ("F_Risk") THEN DO;
MPRINT(EM_ASSESS):   NUMCTOREPORT + 1;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("REPORTC" || LEFT (PUT (NUMCTOREPORT, 5.)), NAME);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE CALL SYMPUTX ("RPRT_TRGT", "C");
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE IF TYPE = "N" THEN DO;
MPRINT(EM_ASSESS):   IF UPCASE(NAME) NE UPCASE ("F_Risk") THEN DO;
MPRINT(EM_ASSESS):   NUMNTOREPORT + 1;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("REPORTN" || LEFT (PUT (NUMNTOREPORT, 5.)), NAME);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE CALL SYMPUTX ("RPRT_TRGT", "N");
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   IF EOF THEN DO;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("NUMNTOREPORT", NUMNTOREPORT);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("NUMCTOREPORT", NUMCTOREPORT);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("NUMTOREPORT", SUM (NUMNTOREPORT, NUMCTOREPORT));
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   PROC DMDB DATA = _ea_tmpdata VAROUT = VAROUT DMDBCAT = _D CLASSOUT =
_ASSMT_CLASSOUT;
MPRINT(EM_ASSESS):   CLASS F_Risk ;
 
MPRINT(EM_ASSESS):   VAR P_Risk1 _tmpfreqvar_ ;
MPRINT(EM_ASSESS):   FREQ _tmpfreqvar_;
MPRINT(EM_ASSESS):   RUN ;
MPRINT(EM_ASSESS):   QUIT;
MPRINT(EM_ASSESS):   PROC SORT DATA = _ASSMT_CLASSOUT;
MPRINT(EM_ASSESS):   BY NAME;
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   DATA _auxeventname (keep = __event__) ;
MPRINT(EM_ASSESS):   * ;
MPRINT(EM_ASSESS):   * ...FLAG0_1 = ..... TARGET IS 0, 1 & EVENT = 1;
 
MPRINT(EM_ASSESS):   ;
MPRINT(EM_ASSESS):   length __event__ $ 32;
MPRINT(EM_ASSESS):   RETAIN FLAG0_1 1 NUM1 . NUM0 . __event__ "_missing_" ;
 
MPRINT(EM_ASSESS):   SET _ASSMT_CLASSOUT END = EOF;
MPRINT(EM_ASSESS):   BY NAME;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ....... LEVEL = BINARY OR NOMINAL OR ORDINAL;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
 
MPRINT(EM_ASSESS):   IF UPCASE(NAME) = UPCASE ("F_Risk") THEN DO;
MPRINT(EM_ASSESS):   CUMFREQ + FREQUENCY;
MPRINT(EM_ASSESS):   IF LEVEL NE "." THEN DO;
MPRINT(EM_ASSESS):   N1 + 1;
MPRINT(EM_ASSESS):   IF (NRAW NE 0 AND NRAW NE 1) OR TYPE NE "N" OR "" > " " THEN FLAG0_1 = 0;
MPRINT(EM_ASSESS):   * ;
MPRINT(EM_ASSESS):   * ......................... IF EVENT NE BLANK;
MPRINT(EM_ASSESS):   * ....................LEVEL IS CHAR VAR ;
MPRINT(EM_ASSESS):   * ;
MPRINT(EM_ASSESS):   IF UPCASE("1") = UPCASE(LEVEL) THEN DO;
MPRINT(EM_ASSESS):   NUM1 = FREQUENCY;
MPRINT(EM_ASSESS):   IF TYPE = "C" THEN do;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("EVENTVALUERAW", CRAW );
MPRINT(EM_ASSESS):   __event__ = craw;
MPRINT(EM_ASSESS):   end;
MPRINT(EM_ASSESS):   ELSE do;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("EVENTVALUERAW", NRAW );
MPRINT(EM_ASSESS):   __event__ = nraw;
MPRINT(EM_ASSESS):   end;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   IF LAST.NAME THEN DO;
 
MPRINT(EM_ASSESS):   * ;
MPRINT(EM_ASSESS):   * .............. IN NOMINAL CASE, NEED TO GROUP ALL '0' ;
MPRINT(EM_ASSESS):   *;
 
MPRINT(EM_ASSESS):   NUM0 = SUM (CUMFREQ, - NUM1);
MPRINT(EM_ASSESS):   IF NUM0 < 0 THEN NUM0 = 0;
MPRINT(EM_ASSESS):   IF NUM1 = . THEN NUM1 = 0;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("NUM0", NUM0 );
MPRINT(EM_ASSESS):   CALL SYMPUTX ("NUM1", NUM1);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("PNUM1", NUM1 / CUMFREQ);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("PNUM0", (CUMFREQ - NUM1) / CUMFREQ);
MPRINT(EM_ASSESS):   IF TYPE = "C" THEN DO;
MPRINT(EM_ASSESS):   FLAG0_1 = 0;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("TARGETTYPE", "C" );
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE IF TYPE = "N" THEN DO;
MPRINT(EM_ASSESS):   IF "" = " " THEN DO;
MPRINT(EM_ASSESS):   IF "1" NE "1" THEN FLAG0_1 = 0;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("TARGETTYPE", "N" );
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   * ................... IF TYPE = N;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("FLAG0_1", FLAG0_1 );
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   * ..................IF LAST.NAME ;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   * ...............IF LEVEL NE '.' ;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   * .............. IF NAME = TARGET;
MPRINT(EM_ASSESS):   ELSE IF "" > " " AND UPCASE(NAME) = UPCASE("") THEN DO;
MPRINT(EM_ASSESS):   NUMDECISIONS + 1;
MPRINT(EM_ASSESS):   LEVEL = TRANSLATE (LEVEL, "_", "'", "_", '"');
MPRINT(EM_ASSESS):   CALL SYMPUTX ("D_LABEL" || LEFT (PUT (NUMDECISIONS, 3.)), LEVEL );
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   * ..................... ELSE IF UPCASE;
MPRINT(EM_ASSESS):   IF EOF THEN DO;
MPRINT(EM_ASSESS):   output _auxeventname;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("NUMOBS", CUMFREQ);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("NUMDECISIONS", NUMDECISIONS);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   DATA _NULL_;
MPRINT(EM_ASSESS):   SET VAROUT END = EOF;
MPRINT(EM_ASSESS):   IF UPCASE (NAME) = UPCASE ("P_Risk1") THEN DO;
MPRINT(EM_ASSESS):   IF N = 0 THEN DO;
MPRINT(EM_ASSESS):   PUT //// "          Warning: All posterior probabilities are missing
values ";
MPRINT(EM_ASSESS):   PUT ///;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("ALLMISS", 1);
MPRINT(EM_ASSESS):   STOP;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE CALL SYMPUTX ("ALLMISS", 0);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("MINPROB", MIN);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("MAXPROB", MAX);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("DIFF", MAX - MIN);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("NMISSPROB", NMISS);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE IF UPCASE (NAME) = UPCASE ("_tmpfreqvar_") THEN DO;
MPRINT(EM_ASSESS):   AUXMIN = MIN - INT (MIN);
MPRINT(EM_ASSESS):   AUXMAX = MAX - INT (MAX);
MPRINT(EM_ASSESS):   IF AUXMIN > 0 OR AUXMAX > 0 THEN CALL SYMPUTX ("USEWEIGHT", "Y");
MPRINT(EM_ASSESS):   ELSE CALL SYMPUTX ("USEWEIGHT", "N");
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   DATA _ANY0;
MPRINT(EM_ASSESS):   SET _ea_tmpdata (KEEP = F_Risk P_Risk1 _tmpfreqvar_ );
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ................... No Formats;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   IF LEFT ( F_Risk ) = "1" THEN NTARGET = 1;
MPRINT(EM_ASSESS):   ELSE NTARGET = 0;
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * .............. Before proc summary of binary case;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   PROC SUMMARY DATA = _ANY0 (KEEP = P_Risk1 NTARGET _tmpfreqvar_ WHERE =
(NTARGET > . )) NWAY MISSING;
MPRINT(EM_ASSESS):   ;
MPRINT(EM_ASSESS):   CLASS P_Risk1 ;
MPRINT(EM_ASSESS):   VAR NTARGET ;
MPRINT(EM_ASSESS):   FREQ _tmpfreqvar_ ;
MPRINT(EM_ASSESS):   OUTPUT OUT = ANYSUM (DROP = _TYPE_) MEAN = _MEANTARGET _MEANFREQVAR ;
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   QUIT;
MPRINT(EM_ASSESS):   ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * .................... Main Data Set Processing, Binary case;
MPRINT(EM_ASSESS):   *;
 
MPRINT(EM_ASSESS):   DATA WORK._TEMPRANK (KEEP = BASECAPC BASECAP __EVENT__ BASEEVENTS
BASEGAIN BASELIFT BASERESP BASERESPC BESTCAP BESTCAPC BESTGAIN BESTLIFT BESTLIFTC
BESTNUMEVENTS BESTRESP BESTRESPC BIN CBASELIFT C_LIFT C_P_CAPT_RESP C_P_RESP GAIN LIFT MAXPROB
MINPROB MNPROB NUMNONRESP NUMOBS NUMRESP PERCENTILE P_CAPT_RESP P_RESP ) WORK._TEMPSCOREDIST
(KEEP = BIN LOWERPROB UPPERPROB EVENTVALUE SCR_NUMEVENTS MODELSCORE SCR_NUMNONEVENTS RANGE
NUMOBSINGROUP PERCOBSINGROUP C_PERCOBSINGROUP SCR_P_EVENTS SCR_CP_EVENTS SCR_P_NONEVENTS
SCR_CP_NONEVENTS SCR_MNPROB SCR_MINPROB SCR_MAXPROB ) ;
 
MPRINT(EM_ASSESS):   SET ANYSUM END = EOF;
 
MPRINT(EM_ASSESS):   IF _N_ = 1 THEN SET _AUXEVENTNAME;
 
MPRINT(EM_ASSESS):   RETAIN MINPROB1 - MINPROB20 1 MAXPROB1 - MAXPROB20 0 MNPROB1 - MNPROB20 0
NUMOBS1 - NUMOBS20 0 NUMRESP1 - NUMRESP20 0 TRUEPOS1 - TRUEPOS100 0 TRUENEG1 - TRUENEG100 0
FALSEPOS1 - FALSEPOS100 0 FALSENEG1 - FALSENEG100 0 EVENTS1 - EVENTS100 NONEVENTS1 -
NONEVENTS100 0 FIRSTIN1 - FIRSTIN100 . LASTIN1 - LASTIN100 . RESPRATE 0.54 _NEVENTS 54
_NNONEVENTS 46 TARGET "NTARGET" ;
MPRINT(EM_ASSESS):   ARRAY MINPROBS (20) MINPROB1 - MINPROB20;
MPRINT(EM_ASSESS):   ARRAY MAXPROBS (20) MAXPROB1 - MAXPROB20;
MPRINT(EM_ASSESS):   ARRAY MNPROBS (20) MNPROB1 - MNPROB20;
MPRINT(EM_ASSESS):   ARRAY NUMOBSS (20) NUMOBS1 - NUMOBS20;
MPRINT(EM_ASSESS):   ARRAY NUMRESPS (20) NUMRESP1 - NUMRESP20;
MPRINT(EM_ASSESS):   ARRAY TRUEPOSX (100) TRUEPOS1 - TRUEPOS100;
MPRINT(EM_ASSESS):   ARRAY FALSEPOSX (100) FALSEPOS1 - FALSEPOS100;
MPRINT(EM_ASSESS):   ARRAY FALSENEGX (100) FALSENEG1 - FALSENEG100;
MPRINT(EM_ASSESS):   ARRAY TRUENEGX (100) TRUENEG1 - TRUENEG100;
MPRINT(EM_ASSESS):   ARRAY _EVENTS (100) EVENTS1 - EVENTS100;
MPRINT(EM_ASSESS):   ARRAY NONEVENTS (100) NONEVENTS1 - NONEVENTS100;
MPRINT(EM_ASSESS):   ARRAY FIRSTIN (100) FIRSTIN1 - FIRSTIN100;
MPRINT(EM_ASSESS):   ARRAY LASTIN (100) LASTIN1 - LASTIN100;
MPRINT(EM_ASSESS):   RETAIN SCR_MNPROB1 - SCR_MNPROB100 0 SCR_MINPROB1 - SCR_MINPROB100 1
SCR_MAXPROB1 - SCR_MAXPROB100 0;
MPRINT(EM_ASSESS):   ARRAY SCR_MNPROBS (100) SCR_MNPROB1 - SCR_MNPROB100;
MPRINT(EM_ASSESS):   ARRAY SCR_MINPROBS (100) SCR_MINPROB1 - SCR_MINPROB100;
MPRINT(EM_ASSESS):   ARRAY SCR_MAXPROBS (100) SCR_MAXPROB1 - SCR_MAXPROB100;
MPRINT(EM_ASSESS):   DROP SCR_MINPROB1 - SCR_MINPROB100 SCR_MAXPROB1 - SCR_MAXPROB100
SCR_MNPROB1 - SCR_MNPROB100 ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ...... Area For 8 Financials ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   IF _MEANTARGET = . THEN _MEANTARGET = RESPRATE;
MPRINT(EM_ASSESS):   DROP N1 _K SUMWEIGHTS ;
MPRINT(EM_ASSESS):   SUMWEIGHTS = 1;
 
MPRINT(EM_ASSESS):   DO _K = 1 TO CEIL (_FREQ_);
MPRINT(EM_ASSESS):   IF _K = CEIL (_FREQ_) THEN DO;
MPRINT(EM_ASSESS):   IF _FREQ_ < CEIL (_FREQ_) THEN _WEIGHT = _FREQ_ - FLOOR (_FREQ_);
MPRINT(EM_ASSESS):   ELSE _WEIGHT = 1;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE _WEIGHT = 1;
MPRINT(EM_ASSESS):   N1 + _WEIGHT;
MPRINT(EM_ASSESS):   NTARGET = _MEANTARGET ;
MPRINT(EM_ASSESS):   DECILE = MIN (20, CEIL (N1 * 20 / 100));
MPRINT(EM_ASSESS):   MINPROBS ( DECILE) = MIN (MINPROBS ( DECILE), P_Risk1 );
MPRINT(EM_ASSESS):   MAXPROBS ( DECILE) = MAX (MAXPROBS ( DECILE), P_Risk1 );
MPRINT(EM_ASSESS):   MNPROBS ( DECILE) = SUM (MNPROBS ( DECILE), P_Risk1 * _WEIGHT);
MPRINT(EM_ASSESS):   NUMOBSS ( DECILE) = NUMOBSS ( DECILE) + _WEIGHT;
MPRINT(EM_ASSESS):   NUMRESPS ( DECILE) = NUMRESPS ( DECILE) + _MEANTARGET * _WEIGHT;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ........ outside of do loop, Area for final ROC;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   RANKDELTA = (ROUND ( _FREQ_ ) + 1) / 2;
MPRINT(EM_ASSESS):   RANK = UNTIEDRANK + RANKDELTA;
MPRINT(EM_ASSESS):   DROP RANK ;
MPRINT(EM_ASSESS):   SUMRANK1 + RANK * ROUND (_MEANTARGET * _FREQ_, .0000001);
MPRINT(EM_ASSESS):   UNTIEDRANK + ROUND (_FREQ_, .00000001);
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ............ Area For ROC Curve;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   DO _K = 1 TO 100;
MPRINT(EM_ASSESS):   IF P_Risk1 * 100 >= _K THEN DO;
MPRINT(EM_ASSESS):   TRUEPOSX ( _K ) + _FREQ_ * _MEANTARGET ;
MPRINT(EM_ASSESS):   FALSEPOSX ( _K ) + _FREQ_ * (1 - _MEANTARGET) ;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   TRUENEGX ( _K ) + _FREQ_ * ( 1 - _MEANTARGET) ;
MPRINT(EM_ASSESS):   FALSENEGX ( _K ) + _FREQ_ * _MEANTARGET ;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   SLOT = MIN (MAX (CEIL (P_Risk1 * 100), 1), 100) ;
MPRINT(EM_ASSESS):   DROP SLOT;
MPRINT(EM_ASSESS):   FIRSTIN ( SLOT ) = MIN ( FIRSTIN ( SLOT ), P_Risk1);
MPRINT(EM_ASSESS):   LASTIN ( SLOT ) = MAX ( LASTIN ( SLOT ), P_Risk1);
MPRINT(EM_ASSESS):   _EVENTS ( SLOT) = _EVENTS ( SLOT) + _FREQ_ * _MEANTARGET;
MPRINT(EM_ASSESS):   NONEVENTS ( SLOT) = NONEVENTS ( SLOT) + _FREQ_ * (1 - _MEANTARGET);
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ........ START OF OUTDIST IN BINARY CASE MAIN DATA STEP ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   SCR_MNPROBS ( SLOT ) = SUM (SCR_MNPROBS (SLOT), P_Risk1 * _FREQ_ );
MPRINT(EM_ASSESS):   SCR_MINPROBS ( SLOT ) = MIN (SCR_MINPROBS (SLOT), P_Risk1 );
MPRINT(EM_ASSESS):   SCR_MAXPROBS ( SLOT ) = MAX (SCR_MAXPROBS (SLOT), P_Risk1 );
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ........ End of Outdist in Binary case main DATA STEP ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   IF EOF THEN DO;
MPRINT(EM_ASSESS):   PUT //;
MPRINT(EM_ASSESS):   DO K = 1 TO 20;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   LENGTH EVENTVALUE $ 32;
MPRINT(EM_ASSESS):   RETAIN EVENTVALUE "1" ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ......... Start of EOF area of BINARY processing of main data set ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SUMRANK1", SUMRANK1);
MPRINT(EM_ASSESS):   LENGTH DATAROLE $ 10;
MPRINT(EM_ASSESS):   RETAIN DATAROLE "TRAIN" ;
MPRINT(EM_ASSESS):   RETAIN OVLMIN 0.0002395767 OVLMAX 0.9999537883 ;
MPRINT(EM_ASSESS):   DROP OVLMIN OVLMAX ;
MPRINT(EM_ASSESS):   C_NUMOBS = 0;
MPRINT(EM_ASSESS):   C_NUM_RESP = 0;
MPRINT(EM_ASSESS):   C_NUM_NONRESP = 0;
MPRINT(EM_ASSESS):   C_P_RESP = 0;
MPRINT(EM_ASSESS):   P_CAPT_RESP = 0;
MPRINT(EM_ASSESS):   C_P_CAPT_RESP = 0;
MPRINT(EM_ASSESS):   PREVIOUSPROFIT = 0;
MPRINT(EM_ASSESS):   MAXPROFIT = 0;
MPRINT(EM_ASSESS):   _KS_BIN_ = 0;
MPRINT(EM_ASSESS):   DROP _KS_BIN_;
MPRINT(EM_ASSESS):   AVGNUMRESP = _NEVENTS / 20;
MPRINT(EM_ASSESS):   BASERESP = 100 * RESPRATE;
MPRINT(EM_ASSESS):   BASERESPC = BASERESP;
MPRINT(EM_ASSESS):   BASECAP = 100 / 20;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ........................Start OF Gainschart = Outranks Area;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   _KS_BIN_PROB = 0;
MPRINT(EM_ASSESS):   DO GROUP = 20 TO 1 BY -1;
 
MPRINT(EM_ASSESS):   BASECAPC + BASECAP;
MPRINT(EM_ASSESS):   PERCENTILE = GROUP * (100 / 20);
MPRINT(EM_ASSESS):   MINPROB = MINPROBS ( GROUP);
MPRINT(EM_ASSESS):   MAXPROB = MAXPROBS ( GROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("MINPROB" || LEFT ( PUT (GROUP, 3.)), MINPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("MAXPROB" || LEFT ( PUT (GROUP, 3.)), MAXPROB);
MPRINT(EM_ASSESS):   NUMOBS = NUMOBSS ( GROUP);
MPRINT(EM_ASSESS):   IF NUMOBS > 0 THEN MNPROB = MNPROBS ( GROUP) / NUMOBS;
MPRINT(EM_ASSESS):   ELSE MNPROB = .;
MPRINT(EM_ASSESS):   C_NUMOBS = SUM (NUMOBS, C_NUMOBS);
MPRINT(EM_ASSESS):   NUMRESP = NUMRESPS ( GROUP);
MPRINT(EM_ASSESS):   NUMNONRESP = NUMOBS - NUMRESP;
MPRINT(EM_ASSESS):   C_AVGNUM_RESP + AVGNUMRESP;
MPRINT(EM_ASSESS):   IF C_NUMOBS <= _NEVENTS THEN DO;
MPRINT(EM_ASSESS):   BESTNUMEVENTS = NUMOBS;
MPRINT(EM_ASSESS):   BESTCAPC = C_NUMOBS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   BASEEVENTS = _NEVENTS / 20;
MPRINT(EM_ASSESS):   BASENONEVENTS = 0;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   FLAG + 1;
MPRINT(EM_ASSESS):   DROP FLAG;
MPRINT(EM_ASSESS):   BESTNUMEVENTS = _NEVENTS - C_NUMOBS + NUMOBS;
MPRINT(EM_ASSESS):   IF FLAG > 1 THEN BESTNUMEVENTS = 0;
MPRINT(EM_ASSESS):   BESTCAPC = 100;
MPRINT(EM_ASSESS):   IF C_NUMOBS - _NEVENTS <= NUMOBS THEN DO;
MPRINT(EM_ASSESS):   BASEEVENTS = C_NUMOBS - _NEVENTS;
MPRINT(EM_ASSESS):   BASENONEVENTS = NUMOBS - C_NUMOBS + _NEVENTS;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   BASEEVENTS = 0;
MPRINT(EM_ASSESS):   BASENONEVENTS = NUMOBS;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   BESTCAP = BESTNUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   IF C_NUMOBS <= _NEVENTS THEN DO;
MPRINT(EM_ASSESS):   BESTLIFT = ((_NEVENTS+_NNONEVENTS) / 20) /AVGNUMRESP;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   BESTLIFT = BESTNUMEVENTS / AVGNUMRESP;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   C_BESTNUMEVENTS + BESTNUMEVENTS;
MPRINT(EM_ASSESS):   DROP C_BESTNUMEVENTS;
MPRINT(EM_ASSESS):   IF C_NUMOBS > 0 THEN BESTLIFTC = C_BESTNUMEVENTS / (_NEVENTS / 100 *
C_NUMOBS);
MPRINT(EM_ASSESS):   ELSE BESTLIFTC = .;
MPRINT(EM_ASSESS):   IF NUMOBS > 0 THEN DO;
MPRINT(EM_ASSESS):   BESTRESP = BESTNUMEVENTS * 100 / NUMOBS;
MPRINT(EM_ASSESS):   P_RESP = NUMRESP * 100 / NUMOBS;
MPRINT(EM_ASSESS):   P_NONRESP = NUMNONRESP * 100 / NUMOBS;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   BESTRESP = .;
MPRINT(EM_ASSESS):   P_RESP = .;
MPRINT(EM_ASSESS):   P_NONRESP = .;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   IF C_NUMOBS > 0 THEN DO;
MPRINT(EM_ASSESS):   BESTRESPC = C_BESTNUMEVENTS * 100 / C_NUMOBS;
MPRINT(EM_ASSESS):   BESTGAIN = MAX (0, ((C_BESTNUMEVENTS / C_NUMOBS ) / ( AVGNUMRESP /
(100/20)) - 1) * 100);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   BESTRESPC = .;
MPRINT(EM_ASSESS):   BESTGAIN = .;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   IF NUMNONRESP > 0 THEN ODDS = NUMRESP / NUMNONRESP;
MPRINT(EM_ASSESS):   ELSE ODDS = .;
MPRINT(EM_ASSESS):   C_NUM_RESP = SUM (C_NUM_RESP , NUMRESP );
MPRINT(EM_ASSESS):   C_NUM_NONRESP = SUM (C_NUM_NONRESP, NUMNONRESP );
MPRINT(EM_ASSESS):   IF C_NUM_NONRESP > 0 THEN C_ODDS = C_NUM_RESP / C_NUM_NONRESP;
MPRINT(EM_ASSESS):   ELSE C_ODDS = .;
MPRINT(EM_ASSESS):   IF C_NUMOBS > 0 THEN DO;
MPRINT(EM_ASSESS):   C_P_RESP = C_NUM_RESP * 100 / C_NUMOBS;
MPRINT(EM_ASSESS):   GAIN = ABS(100 * (((C_NUM_RESP / C_NUMOBS ) / (_NEVENTS / 100)) - 1));
MPRINT(EM_ASSESS):   BASEGAIN = 100 * (( (C_AVGNUM_RESP /((20-GROUP+1)* 100/20) ) / (
AVGNUMRESP / (100/20))) - 1);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   GAIN = .;
MPRINT(EM_ASSESS):   BASEGAIN = .;
MPRINT(EM_ASSESS):   C_P_RESP = .;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   IF BASEGAIN <= 0 THEN BASEGAIN = 0;
MPRINT(EM_ASSESS):   P_CAPT_RESP = NUMRESP * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   P_CAPT_NONRESP = NUMNONRESP * 100 / ( 100 - _NEVENTS);
MPRINT(EM_ASSESS):   C_P_CAPT_RESP = C_NUM_RESP * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   C_P_CAPT_NONRESP = C_NUM_NONRESP * 100 / ( 100 - _NEVENTS);
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * Area For Binned KS in Outranks area;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   _DIFFERENCE = C_P_CAPT_RESP - C_P_CAPT_NONRESP ;
MPRINT(EM_ASSESS):   IF _KS_BIN_ < _DIFFERENCE THEN DO;
MPRINT(EM_ASSESS):   _KS_BIN_ = _DIFFERENCE;
MPRINT(EM_ASSESS):   _KS_BIN_PROB = MINPROB + (MAXPROB - MINPROB) / 2 ;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   LIFT = P_RESP * .01 / RESPRATE ;
MPRINT(EM_ASSESS):   C_LIFT = C_P_RESP * .01 / RESPRATE;
MPRINT(EM_ASSESS):   IF NUMOBS > 0 THEN DO;
MPRINT(EM_ASSESS):   BASELIFT = AVGNUMRESP / ( RESPRATE * 100/20 );
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE BASELIFT = .;
MPRINT(EM_ASSESS):   IF C_NUMOBS > 0 THEN CBASELIFT = C_AVGNUM_RESP / (RESPRATE *
((20-GROUP+1)* 100/20));
MPRINT(EM_ASSESS):   ELSE CBASELIFT = .;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ........ WITHIN DO LOOP FOR OUTRANKS;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   BIN = 20 + 1 - GROUP;
MPRINT(EM_ASSESS):   PERCENTILE = BIN * (100 / 20);
MPRINT(EM_ASSESS):   B_C_P_RESP = PERCENTILE;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPRANK ;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ........................ END OF GAINSCHART = OUTRANKS AREA;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("MAXPROFITGROUP" , MAXPROFITGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("MAXPROFIT" , MAXPROFIT );
MPRINT(EM_ASSESS):   KS_ABSDIFF = 0 ;
MPRINT(EM_ASSESS):   MINPRECTPR = 9999;
MPRINT(EM_ASSESS):   Y0 = 1 - RESPRATE;
MPRINT(EM_ASSESS):   Y1 = RESPRATE;
MPRINT(EM_ASSESS):   MAXMUTUAL = 0;
MPRINT(EM_ASSESS):   DROP MAXMUTUAL KSPROB Y0 Y1 KS_ABSDIFF MINPRECTPR;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * .....................About to start Processing Outroc ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ........................... Finished Processing Outroc ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * .............. Outdist ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   BIN = 20 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS96 - EVENTS100 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS96 - NONEVENTS100);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB96 -
SCR_MNPROB100) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB96 - SCR_MINPROB100) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB96 - SCR_MAXPROB100) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 100;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 20;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 19 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS91 - EVENTS95 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS91 - NONEVENTS95);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB91 -
SCR_MNPROB95) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB91 - SCR_MINPROB95) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB91 - SCR_MAXPROB95) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 100;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 19;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 18 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS86 - EVENTS90 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS86 - NONEVENTS90);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB86 -
SCR_MNPROB90) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB86 - SCR_MINPROB90) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB86 - SCR_MAXPROB90) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 100;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 18;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 17 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS81 - EVENTS85 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS81 - NONEVENTS85);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB81 -
SCR_MNPROB85) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB81 - SCR_MINPROB85) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB81 - SCR_MAXPROB85) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 100;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 17;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 16 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS76 - EVENTS80 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS76 - NONEVENTS80);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB76 -
SCR_MNPROB80) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB76 - SCR_MINPROB80) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB76 - SCR_MAXPROB80) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 100;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 16;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 15 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS71 - EVENTS75 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS71 - NONEVENTS75);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB71 -
SCR_MNPROB75) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB71 - SCR_MINPROB75) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB71 - SCR_MAXPROB75) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 100;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 15;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 14 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS66 - EVENTS70 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS66 - NONEVENTS70);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB66 -
SCR_MNPROB70) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB66 - SCR_MINPROB70) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB66 - SCR_MAXPROB70) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 100;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 14;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 13 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS61 - EVENTS65 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS61 - NONEVENTS65);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB61 -
SCR_MNPROB65) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB61 - SCR_MINPROB65) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB61 - SCR_MAXPROB65) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 100;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 13;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 12 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS56 - EVENTS60 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS56 - NONEVENTS60);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB56 -
SCR_MNPROB60) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB56 - SCR_MINPROB60) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB56 - SCR_MAXPROB60) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 100;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 12;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 11 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS51 - EVENTS55 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS51 - NONEVENTS55);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB51 -
SCR_MNPROB55) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB51 - SCR_MINPROB55) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB51 - SCR_MAXPROB55) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 100;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 11;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 10 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS46 - EVENTS50 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS46 - NONEVENTS50);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB46 -
SCR_MNPROB50) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB46 - SCR_MINPROB50) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB46 - SCR_MAXPROB50) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 100;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 10;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 9 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS41 - EVENTS45 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS41 - NONEVENTS45);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB41 -
SCR_MNPROB45) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB41 - SCR_MINPROB45) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB41 - SCR_MAXPROB45) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 100;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 9;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 8 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS36 - EVENTS40 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS36 - NONEVENTS40);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB36 -
SCR_MNPROB40) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB36 - SCR_MINPROB40) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB36 - SCR_MAXPROB40) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 100;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 8;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 7 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS31 - EVENTS35 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS31 - NONEVENTS35);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB31 -
SCR_MNPROB35) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB31 - SCR_MINPROB35) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB31 - SCR_MAXPROB35) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 100;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 7;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 6 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS26 - EVENTS30 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS26 - NONEVENTS30);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB26 -
SCR_MNPROB30) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB26 - SCR_MINPROB30) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB26 - SCR_MAXPROB30) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 100;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 6;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 5 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS21 - EVENTS25 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS21 - NONEVENTS25);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB21 -
SCR_MNPROB25) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB21 - SCR_MINPROB25) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB21 - SCR_MAXPROB25) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 100;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 5;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 4 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS16 - EVENTS20 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS16 - NONEVENTS20);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB16 -
SCR_MNPROB20) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB16 - SCR_MINPROB20) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB16 - SCR_MAXPROB20) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 100;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 4;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 3 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS11 - EVENTS15 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS11 - NONEVENTS15);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB11 -
SCR_MNPROB15) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB11 - SCR_MINPROB15) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB11 - SCR_MAXPROB15) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 100;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 3;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 2 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS6 - EVENTS10 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS6 - NONEVENTS10);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB6 -
SCR_MNPROB10) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB6 - SCR_MINPROB10) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB6 - SCR_MAXPROB10) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 100;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 2;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 1 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS1 - EVENTS5 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS1 - NONEVENTS5);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB1 - SCR_MNPROB5)
/ NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB1 - SCR_MINPROB5) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB1 - SCR_MAXPROB5) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 100;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 1;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("KSPROB" , PUT (KSPROB, 5.3 ) );
MPRINT(EM_ASSESS):   CALL SYMPUTX ("_KS_BIN_PROB" , _KS_BIN_PROB );
MPRINT(EM_ASSESS):   CALL SYMPUTX ("_KS_BIN_" , _KS_BIN_ / 100 );
MPRINT(EM_ASSESS):   CALL SYMPUTX ("KSDIFF" , KS_ABSDIFF );
MPRINT(EM_ASSESS):   CALL SYMPUTX ("PRECTPR" , PRECTPR );
MPRINT(EM_ASSESS):   CALL SYMPUTX ("MAXMUTUALPROB" , MAXMUTUALPROB);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   LABEL __EVENT__ = "Event" DECILE = "Depth" BIN = "Bin" NUMOBS = "Number
of Observations" ;
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * RUN for large data set;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   PROC DATASETS NOLIST;
MPRINT(EM_ASSESS):   DELETE _AUXEVENTNAME;
MPRINT(EM_ASSESS):   QUIT;
 
MPRINT(EM_ASSESS):   OPTION NOCENTER LS = 95;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * Report Vars Area.;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ...........Start OF Outdist Modification;
MPRINT(EM_ASSESS):   *;
 
MPRINT(EM_ASSESS):   PROC DATASETS NOLIST LIB = WORK;
MPRINT(EM_ASSESS):   MODIFY _TEMPSCOREDIST;
MPRINT(EM_ASSESS):   RENAME MODELSCORE = SCORE UPPERPROB = UPPOSTERIOR SCR_CP_EVENTS =
CUMULATIVEPERCENTAGEOFEVENTS SCR_CP_NONEVENTS = CUMULATIVEPERCENTAGEOFNONEVENTS EVENTVALUE =
EVENT LOWERPROB = LOWPOSTERIOR NUMOBSINGROUP = N PERCOBSINGROUP = PERCENTAGE SCR_MINPROB =
_MINP_ SCR_MAXPROB = _MAXP_ SCR_MNPROB = _MEANP_ RANGE = P_LABEL C_PERCOBSINGROUP =
CUMULATIVEPERCENTAGE SCR_NUMEVENTS = NUMBEROFEVENTS SCR_NUMNONEVENTS = NUMBEROFNONEVENTS
SCR_P_EVENTS = PERCENTAGEOFEVENTS SCR_P_NONEVENTS = PERCENTAGEOFNONEVENTS ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * .................... OUTDIST MODIFICATION LABEL AREA;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   LABEL BIN = "Bin" N = "Number of Observations" P_LABEL = "Posterior
Probability Range" EVENT = "Event" LOWPOSTERIOR = "Lower Bound Posterior Probability"
PERCENTAGEOFEVENTS = "Percentage of Events" CUMULATIVEPERCENTAGEOFNONEVENTS = "Cumulative
Percentage of Nonevents" CUMULATIVEPERCENTAGE = "Cumulative Percentage" PERCENTAGEOFEVENTS =
"Percentage of Events" PERCENTAGEOFNONEVENTS = "Percentage of Nonevents"
CUMULATIVEPERCENTAGEOFEVENTS = "Cumulative Percentage of Events" UPPOSTERIOR = "Upper Bound
Posterior Probability" NUMBEROFEVENTS = "Number of Events" PERCENTAGE = "Percentage"
NUMBEROFNONEVENTS = "Number of Nonevents" _MEANP_ = "Mean Posterior Probability" _MINP_ = "Min
Posterior Probability" _MAXP_ = "Max Posterior Probability" SCORE = "Model Score" ;
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   QUIT;
MPRINT(EM_ASSESS):   DATA WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   SET WORK._TEMPSCOREDIST (WHERE = (_MEANP_ > .));
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ........... END OF OUTDIST MODIFICATION;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ...........Start of OUTRANKS Modification;
MPRINT(EM_ASSESS):   *;
 
MPRINT(EM_ASSESS):   PROC DATASETS NOLIST LIB = WORK;
MPRINT(EM_ASSESS):   MODIFY _TEMPRANK;
MPRINT(EM_ASSESS):   RENAME __EVENT__ = EVENT P_RESP = RESP C_P_CAPT_RESP = CAPC P_CAPT_RESP =
CAP NUMNONRESP = NUMNEVENT NUMRESP = NUMEVENT BASEEVENTS = BASENUMBEROFEVENTS BESTNUMEVENTS =
BESTNUMBEROFEVENTS MAXPROB = _MAXP_ MINPROB = _MINP_ CBASELIFT = BASELIFTC C_LIFT = LIFTC
MNPROB = _MEANP_ PERCENTILE = DECILE NUMOBS = N NUMEVENT = NUMBEROFEVENTS C_P_RESP = RESPC ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ................. OUTRANKS;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   LABEL _MAXP_ = "Max Posterior Probability" _MINP_ = "Min Posterior
Probability" _MEANP_ = "Mean Posterior Probability" BASECAP = "Baseline % Captured Response"
BASECAPC = "Baseline Cumulative % Captured Response" BASENUMBEROFEVENTS = "Baseline Number of
Events" BASEGAIN = "Baseline Gain" BASELIFT = "Baseline Lift" BASELIFTC = "Baseline Cumulative
Lift" BASERESP = "Baseline % Response" BASERESPC = "Baseline Cumulative % Response" BASELIFTC
= "Baseline Cumulative Lift" BESTCAP = "Best % Captured Response" BESTCAPC = "Best Cumulative
% Captured Response" BESTGAIN = "Best Gain" BESTRESP = "Best % Response" BESTRESPC = "Best
Cumulative % Response" BESTLIFT = "Best Lift" BESTLIFTC = "Best Cumulative Lift"
BESTNUMBEROFEVENTS = "Best Number of Events" CAP = "% Captured Response" CAPC = "Cumulative %
Captured Response" DECILE = "Depth" GAIN = "Gain" LIFT = "Lift" LIFTC = "Cumulative Lift"
NUMNEVENT = "Number of Nonevents" N = "Number of Observations" EVENT = "Event" RESPC =
"Cumulative % Response" NUMBEROFEVENTS = "Number of Events" RESP = "% Response" ;
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   QUIT;
MPRINT(EM_ASSESS):   DATA WORK._TEMPRANK;
MPRINT(EM_ASSESS):   SET WORK._TEMPRANK (WHERE = (_MEANP_ > .));
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   proc datasets lib=work nolist;
MPRINT(EM_ASSESS):   delete _ea_tmpdata;
MPRINT(EM_ASSESS):   run;
MPRINT(EM_ASSESS):   quit;
MPRINT(EM_ASSESS):  ;
MPRINT(EM_ASSESS):   OPTION ERRORS = 20;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):    data WORK._TEMPRANK;
MPRINT(EM_DIAGRAM):   length target $32 TARGETLABEL $200 dataRole $20;
MPRINT(EM_DIAGRAM):   label TARGETLABEL = "Target Label";
MPRINT(EM_DIAGRAM):   set WORK._TEMPRANK;
MPRINT(EM_DIAGRAM):   retain target "Risk";
MPRINT(EM_DIAGRAM):   retain dataRole "TRAIN";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data EMWS1.Neural_EMRANK;
MPRINT(EM_DIAGRAM):   set WORK._TEMPRANK;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data WORK._TEMPSCOREDIST;
MPRINT(EM_DIAGRAM):   length target $32 TARGETLABEL $200 dataRole $20;
MPRINT(EM_DIAGRAM):   label TARGETLABEL = "Target Label";
MPRINT(EM_DIAGRAM):   set WORK._TEMPSCOREDIST;
MPRINT(EM_DIAGRAM):   retain target "Risk";
MPRINT(EM_DIAGRAM):   retain dataRole "TRAIN";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data EMWS1.Neural_EMSCOREDIST;
MPRINT(EM_DIAGRAM):   set WORK._TEMPSCOREDIST;
MPRINT(EM_DIAGRAM):   run;
67002      data EM_temp_assessMeta;
MPRINT(EM_DIAGRAM):    data EM_temp_assessMeta;
67003      set EMWS1.Neural_CMeta_TRAIN;
MPRINT(EM_DIAGRAM):   set EMWS1.Neural_CMeta_TRAIN;
67004      where role in('DECISION', 'PREDICT', 'RESIDUAL', 'CLASSIFICATION', 'ASSESS', 'COST')
67004    ! ;
MPRINT(EM_DIAGRAM):   where role in('DECISION', 'PREDICT', 'RESIDUAL', 'CLASSIFICATION',
'ASSESS', 'COST');
67005      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 8 observations read from the data set EMWS1.NEURAL_CMETA_TRAIN.
      WHERE role in ('ASSESS', 'CLASSIFICATION', 'COST', 'DECISION', 'PREDICT', 'RESIDUAL');
NOTE: The data set WORK.EM_TEMP_ASSESSMETA has 8 observations and 29 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
67006      data EM_temp_assessdata;
MPRINT(EM_DIAGRAM):    data EM_temp_assessdata;
67007      set EMWS1.Neural_VALIDATE(keep=
67008      F_Risk
67009      I_Risk
67010      P_Risk0
67011      P_Risk1
67012      R_Risk0
67013      R_Risk1
67014      U_Risk
67015      _WARN_
67016      Risk
67017      );
MPRINT(EM_DIAGRAM):   set EMWS1.Neural_VALIDATE(keep= F_Risk I_Risk P_Risk0 P_Risk1 R_Risk0
R_Risk1 U_Risk _WARN_ Risk );
67018      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 100 observations read from the data set EMWS1.PART_VALIDATE.
NOTE: View EMWS1.NEURAL_VALIDATE.VIEW used (Total process time):
      real time           0.07 seconds
      cpu time            0.06 seconds
 
NOTE: There were 100 observations read from the data set EMWS1.IMPT_VALIDATE.
NOTE: There were 100 observations read from the data set EMWS1.NEURAL_VALIDATE.
NOTE: The data set WORK.EM_TEMP_ASSESSDATA has 100 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.09 seconds
      cpu time            0.07 seconds
 
 
MPRINT(EM_DIAGRAM):    proc freq data=EM_temp_assessdata noprint;
MPRINT(EM_DIAGRAM):   table I_Risk*F_Risk / out = WORK.Neural_3L45DBI nocol norow outpct;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data WORK.Neural_3L45DBI;
MPRINT(EM_DIAGRAM):   length _TYPE_ $10 DATAROLE TARGET $32 TARGETLABEL $200 FROM INTO $32
CORRECTTEXT $40 ;
MPRINT(EM_DIAGRAM):   label _TYPE_ = "Outcome Type";
MPRINT(EM_DIAGRAM):   label DATAROLE = "Data Role";
MPRINT(EM_DIAGRAM):   label TARGET = "Target Variable";
MPRINT(EM_DIAGRAM):   label TARGETLABEL = "Target Label";
MPRINT(EM_DIAGRAM):   label FROM = "Target";
MPRINT(EM_DIAGRAM):   label INTO = "Outcome";
MPRINT(EM_DIAGRAM):   label PCT_ROW = "Target Percentage";
MPRINT(EM_DIAGRAM):   label PCT_COL = "Outcome Percentage";
MPRINT(EM_DIAGRAM):   label COUNT = "Frequency Count";
MPRINT(EM_DIAGRAM):   label PERCENT = "Total Percentage";
MPRINT(EM_DIAGRAM):   label CORRECTTEXT = "Correct Text";
MPRINT(EM_DIAGRAM):   label CORRECT = "Correct";
MPRINT(EM_DIAGRAM):   set WORK.Neural_3L45DBI(rename=(F_Risk=FROM I_Risk=INTO));
MPRINT(EM_DIAGRAM):   retain _TYPE_ 'PREDICTION' DATAROLE "VALIDATE" TARGET "Risk";
MPRINT(EM_DIAGRAM):   if FROM eq INTO then do;
MPRINT(EM_DIAGRAM):   CORRECT = 0;
MPRINT(EM_DIAGRAM):   CORRECTTEXT="Correct";
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   CORRECT = 1;
MPRINT(EM_DIAGRAM):   CORRECTTEXT="Incorrect";
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data EMWS1.Neural_EMCLASSIFICATION;
MPRINT(EM_DIAGRAM):   set EMWS1.Neural_EMCLASSIFICATION WORK.Neural_3L45DBI;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data WORK.MISCREPORT;
MPRINT(EM_DIAGRAM):   set WORK.Neural_3L45DBI;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data WORK.MISCREPORT(drop=INTO FROM _TYPE_);
MPRINT(EM_DIAGRAM):   set WORK.MISCREPORT;
MPRINT(EM_DIAGRAM):   length MISC $12;
MPRINT(EM_DIAGRAM):   if FROM='1' and INTO='1' then MISC='TRUEEVENT';
MPRINT(EM_DIAGRAM):   else if FROM='1' and INTO ne '1' then MISC='FALSENEVENT';
MPRINT(EM_DIAGRAM):   else if FROM ne '1' and INTO='1' then MISC='FALSEEVENT';
MPRINT(EM_DIAGRAM):   else if FROM ne'1' and INTO ne '1' then MISC='TRUENEVENT';
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=WORK.MISCREPORT nothreads;
MPRINT(EM_DIAGRAM):   by DATAROLE TARGET;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc summary data=WORK.MISCREPORT NWAY;
MPRINT(EM_DIAGRAM):   output out=WORK.MISCCOUNT(drop=_FREQ_ _TYPE_) SUM=COUNT;
MPRINT(EM_DIAGRAM):   CLASS MISC;
MPRINT(EM_DIAGRAM):   VAR COUNT;
MPRINT(EM_DIAGRAM):   by DATAROLE TARGET;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc transpose data=WORK.MISCCOUNT out=WORK.MISCREPORT(drop=_NAME_
_LABEL_);
MPRINT(EM_DIAGRAM):   by DATAROLE TARGET;
MPRINT(EM_DIAGRAM):   ID MISC;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data EMWS1.Neural_EMEVENTREPORT;
MPRINT(EM_DIAGRAM):   length TARGETLABEL $200;
MPRINT(EM_DIAGRAM):   label TARGETLABEL = "Target Label";
MPRINT(EM_DIAGRAM):   set EMWS1.Neural_EMEVENTREPORT WORK.MISCREPORT;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data ASSESS_REPORTMETA;
MPRINT(EM_DIAGRAM):   set EMWS1.Neural_VariableSet;
MPRINT(EM_DIAGRAM):   where REPORT='Y';
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   filename temp catalog 'sashelp.emassmt.em_assess.source';
MPRINT(EM_DIAGRAM):   filename temp;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   set EMWS1.Neural_Risk_DM;
MPRINT(EM_DIAGRAM):   where _TYPE_="TARGET";
MPRINT(EM_DIAGRAM):   call symput('ASSMT_EVENT', strip(event));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):
MPRINT(EM_ASSESS):   data _ea_tmpdata;
MPRINT(EM_ASSESS):   set EM_temp_assessdata;
MPRINT(EM_ASSESS):   _tmpfreqvar_=1;
MPRINT(EM_ASSESS):   run;
MPRINT(EM_CHECKEMSETINIT):   DATA _NULL_;
MPRINT(EM_CHECKEMSETINIT):   EM_SETINIT = 'N';
MPRINT(EM_CHECKEMSETINIT):   IF SYSPROD('PRODNUM50') THEN EM_SETINIT = 'Y';
MPRINT(EM_CHECKEMSETINIT):   ELSE IF SYSPROD('PRODNUM448') THEN EM_SETINIT = 'Y';
MPRINT(EM_CHECKEMSETINIT):   ELSE IF SYSPROD('PRODNUM102') THEN EM_SETINIT = 'Y';
MPRINT(EM_CHECKEMSETINIT):   ELSE IF SYSPROD('PRODNUM103') THEN EM_SETINIT = 'Y';
MPRINT(EM_CHECKEMSETINIT):   CALL SYMPUT('EM_SETINIT', EM_SETINIT);
MPRINT(EM_CHECKEMSETINIT):   RUN;
MPRINT(EM_ASSESS):  ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ............ Reading in reporting data set;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   DATA _NULL_;
MPRINT(EM_ASSESS):   SET ASSESS_REPORTMETA END = EOF;
MPRINT(EM_ASSESS):   IF TYPE = "C" OR UPCASE (LEVEL) IN ("NOMINAL", "BINARY" , "ORDINAL") THEN
DO;
MPRINT(EM_ASSESS):   IF UPCASE (NAME) NE UPCASE ("F_Risk") THEN DO;
MPRINT(EM_ASSESS):   NUMCTOREPORT + 1;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("REPORTC" || LEFT (PUT (NUMCTOREPORT, 5.)), NAME);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE CALL SYMPUTX ("RPRT_TRGT", "C");
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE IF TYPE = "N" THEN DO;
MPRINT(EM_ASSESS):   IF UPCASE(NAME) NE UPCASE ("F_Risk") THEN DO;
MPRINT(EM_ASSESS):   NUMNTOREPORT + 1;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("REPORTN" || LEFT (PUT (NUMNTOREPORT, 5.)), NAME);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE CALL SYMPUTX ("RPRT_TRGT", "N");
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   IF EOF THEN DO;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("NUMNTOREPORT", NUMNTOREPORT);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("NUMCTOREPORT", NUMCTOREPORT);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("NUMTOREPORT", SUM (NUMNTOREPORT, NUMCTOREPORT));
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   PROC DMDB DATA = _ea_tmpdata VAROUT = VAROUT DMDBCAT = _D CLASSOUT =
_ASSMT_CLASSOUT;
MPRINT(EM_ASSESS):   CLASS F_Risk ;
 
MPRINT(EM_ASSESS):   VAR P_Risk1 _tmpfreqvar_ ;
MPRINT(EM_ASSESS):   FREQ _tmpfreqvar_;
MPRINT(EM_ASSESS):   RUN ;
MPRINT(EM_ASSESS):   QUIT;
MPRINT(EM_ASSESS):   PROC SORT DATA = _ASSMT_CLASSOUT;
MPRINT(EM_ASSESS):   BY NAME;
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   DATA _auxeventname (keep = __event__) ;
MPRINT(EM_ASSESS):   * ;
MPRINT(EM_ASSESS):   * ...FLAG0_1 = ..... TARGET IS 0, 1 & EVENT = 1;
 
MPRINT(EM_ASSESS):   ;
MPRINT(EM_ASSESS):   length __event__ $ 32;
MPRINT(EM_ASSESS):   RETAIN FLAG0_1 1 NUM1 . NUM0 . __event__ "_missing_" ;
 
MPRINT(EM_ASSESS):   SET _ASSMT_CLASSOUT END = EOF;
MPRINT(EM_ASSESS):   BY NAME;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ....... LEVEL = BINARY OR NOMINAL OR ORDINAL;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
 
MPRINT(EM_ASSESS):   IF UPCASE(NAME) = UPCASE ("F_Risk") THEN DO;
MPRINT(EM_ASSESS):   CUMFREQ + FREQUENCY;
MPRINT(EM_ASSESS):   IF LEVEL NE "." THEN DO;
MPRINT(EM_ASSESS):   N1 + 1;
MPRINT(EM_ASSESS):   IF (NRAW NE 0 AND NRAW NE 1) OR TYPE NE "N" OR "" > " " THEN FLAG0_1 = 0;
MPRINT(EM_ASSESS):   * ;
MPRINT(EM_ASSESS):   * ......................... IF EVENT NE BLANK;
MPRINT(EM_ASSESS):   * ....................LEVEL IS CHAR VAR ;
MPRINT(EM_ASSESS):   * ;
MPRINT(EM_ASSESS):   IF UPCASE("1") = UPCASE(LEVEL) THEN DO;
MPRINT(EM_ASSESS):   NUM1 = FREQUENCY;
MPRINT(EM_ASSESS):   IF TYPE = "C" THEN do;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("EVENTVALUERAW", CRAW );
MPRINT(EM_ASSESS):   __event__ = craw;
MPRINT(EM_ASSESS):   end;
MPRINT(EM_ASSESS):   ELSE do;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("EVENTVALUERAW", NRAW );
MPRINT(EM_ASSESS):   __event__ = nraw;
MPRINT(EM_ASSESS):   end;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   IF LAST.NAME THEN DO;
 
MPRINT(EM_ASSESS):   * ;
MPRINT(EM_ASSESS):   * .............. IN NOMINAL CASE, NEED TO GROUP ALL '0' ;
MPRINT(EM_ASSESS):   *;
 
MPRINT(EM_ASSESS):   NUM0 = SUM (CUMFREQ, - NUM1);
MPRINT(EM_ASSESS):   IF NUM0 < 0 THEN NUM0 = 0;
MPRINT(EM_ASSESS):   IF NUM1 = . THEN NUM1 = 0;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("NUM0", NUM0 );
MPRINT(EM_ASSESS):   CALL SYMPUTX ("NUM1", NUM1);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("PNUM1", NUM1 / CUMFREQ);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("PNUM0", (CUMFREQ - NUM1) / CUMFREQ);
MPRINT(EM_ASSESS):   IF TYPE = "C" THEN DO;
MPRINT(EM_ASSESS):   FLAG0_1 = 0;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("TARGETTYPE", "C" );
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE IF TYPE = "N" THEN DO;
MPRINT(EM_ASSESS):   IF "" = " " THEN DO;
MPRINT(EM_ASSESS):   IF "1" NE "1" THEN FLAG0_1 = 0;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("TARGETTYPE", "N" );
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   * ................... IF TYPE = N;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("FLAG0_1", FLAG0_1 );
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   * ..................IF LAST.NAME ;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   * ...............IF LEVEL NE '.' ;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   * .............. IF NAME = TARGET;
MPRINT(EM_ASSESS):   ELSE IF "" > " " AND UPCASE(NAME) = UPCASE("") THEN DO;
MPRINT(EM_ASSESS):   NUMDECISIONS + 1;
MPRINT(EM_ASSESS):   LEVEL = TRANSLATE (LEVEL, "_", "'", "_", '"');
MPRINT(EM_ASSESS):   CALL SYMPUTX ("D_LABEL" || LEFT (PUT (NUMDECISIONS, 3.)), LEVEL );
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   * ..................... ELSE IF UPCASE;
MPRINT(EM_ASSESS):   IF EOF THEN DO;
MPRINT(EM_ASSESS):   output _auxeventname;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("NUMOBS", CUMFREQ);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("NUMDECISIONS", NUMDECISIONS);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   DATA _NULL_;
MPRINT(EM_ASSESS):   SET VAROUT END = EOF;
MPRINT(EM_ASSESS):   IF UPCASE (NAME) = UPCASE ("P_Risk1") THEN DO;
MPRINT(EM_ASSESS):   IF N = 0 THEN DO;
MPRINT(EM_ASSESS):   PUT //// "          Warning: All posterior probabilities are missing
values ";
MPRINT(EM_ASSESS):   PUT ///;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("ALLMISS", 1);
MPRINT(EM_ASSESS):   STOP;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE CALL SYMPUTX ("ALLMISS", 0);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("MINPROB", MIN);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("MAXPROB", MAX);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("DIFF", MAX - MIN);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("NMISSPROB", NMISS);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE IF UPCASE (NAME) = UPCASE ("_tmpfreqvar_") THEN DO;
MPRINT(EM_ASSESS):   AUXMIN = MIN - INT (MIN);
MPRINT(EM_ASSESS):   AUXMAX = MAX - INT (MAX);
MPRINT(EM_ASSESS):   IF AUXMIN > 0 OR AUXMAX > 0 THEN CALL SYMPUTX ("USEWEIGHT", "Y");
MPRINT(EM_ASSESS):   ELSE CALL SYMPUTX ("USEWEIGHT", "N");
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   DATA _ANY0;
MPRINT(EM_ASSESS):   SET _ea_tmpdata (KEEP = F_Risk P_Risk1 _tmpfreqvar_ );
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ................... No Formats;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   IF LEFT ( F_Risk ) = "1" THEN NTARGET = 1;
MPRINT(EM_ASSESS):   ELSE NTARGET = 0;
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * .............. Before proc summary of binary case;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   PROC SUMMARY DATA = _ANY0 (KEEP = P_Risk1 NTARGET _tmpfreqvar_ WHERE =
(NTARGET > . )) NWAY MISSING;
MPRINT(EM_ASSESS):   ;
MPRINT(EM_ASSESS):   CLASS P_Risk1 ;
MPRINT(EM_ASSESS):   VAR NTARGET ;
MPRINT(EM_ASSESS):   FREQ _tmpfreqvar_ ;
MPRINT(EM_ASSESS):   OUTPUT OUT = ANYSUM (DROP = _TYPE_) MEAN = _MEANTARGET _MEANFREQVAR ;
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   QUIT;
MPRINT(EM_ASSESS):   ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * .................... Main Data Set Processing, Binary case;
MPRINT(EM_ASSESS):   *;
 
MPRINT(EM_ASSESS):   DATA WORK._TEMPRANK (KEEP = BASECAPC BASECAP __EVENT__ BASEEVENTS
BASEGAIN BASELIFT BASERESP BASERESPC BESTCAP BESTCAPC BESTGAIN BESTLIFT BESTLIFTC
BESTNUMEVENTS BESTRESP BESTRESPC BIN CBASELIFT C_LIFT C_P_CAPT_RESP C_P_RESP GAIN LIFT MAXPROB
MINPROB MNPROB NUMNONRESP NUMOBS NUMRESP PERCENTILE P_CAPT_RESP P_RESP ) WORK._TEMPSCOREDIST
(KEEP = BIN LOWERPROB UPPERPROB EVENTVALUE SCR_NUMEVENTS MODELSCORE SCR_NUMNONEVENTS RANGE
NUMOBSINGROUP PERCOBSINGROUP C_PERCOBSINGROUP SCR_P_EVENTS SCR_CP_EVENTS SCR_P_NONEVENTS
SCR_CP_NONEVENTS SCR_MNPROB SCR_MINPROB SCR_MAXPROB ) ;
 
MPRINT(EM_ASSESS):   SET ANYSUM END = EOF;
 
MPRINT(EM_ASSESS):   IF _N_ = 1 THEN SET _AUXEVENTNAME;
 
MPRINT(EM_ASSESS):   RETAIN MINPROB1 - MINPROB20 1 MAXPROB1 - MAXPROB20 0 MNPROB1 - MNPROB20 0
NUMOBS1 - NUMOBS20 0 NUMRESP1 - NUMRESP20 0 TRUEPOS1 - TRUEPOS100 0 TRUENEG1 - TRUENEG100 0
FALSEPOS1 - FALSEPOS100 0 FALSENEG1 - FALSENEG100 0 EVENTS1 - EVENTS100 NONEVENTS1 -
NONEVENTS100 0 FIRSTIN1 - FIRSTIN100 . LASTIN1 - LASTIN100 . RESPRATE 0.55 _NEVENTS 55
_NNONEVENTS 45 TARGET "NTARGET" ;
MPRINT(EM_ASSESS):   ARRAY MINPROBS (20) MINPROB1 - MINPROB20;
MPRINT(EM_ASSESS):   ARRAY MAXPROBS (20) MAXPROB1 - MAXPROB20;
MPRINT(EM_ASSESS):   ARRAY MNPROBS (20) MNPROB1 - MNPROB20;
MPRINT(EM_ASSESS):   ARRAY NUMOBSS (20) NUMOBS1 - NUMOBS20;
MPRINT(EM_ASSESS):   ARRAY NUMRESPS (20) NUMRESP1 - NUMRESP20;
MPRINT(EM_ASSESS):   ARRAY TRUEPOSX (100) TRUEPOS1 - TRUEPOS100;
MPRINT(EM_ASSESS):   ARRAY FALSEPOSX (100) FALSEPOS1 - FALSEPOS100;
MPRINT(EM_ASSESS):   ARRAY FALSENEGX (100) FALSENEG1 - FALSENEG100;
MPRINT(EM_ASSESS):   ARRAY TRUENEGX (100) TRUENEG1 - TRUENEG100;
MPRINT(EM_ASSESS):   ARRAY _EVENTS (100) EVENTS1 - EVENTS100;
MPRINT(EM_ASSESS):   ARRAY NONEVENTS (100) NONEVENTS1 - NONEVENTS100;
MPRINT(EM_ASSESS):   ARRAY FIRSTIN (100) FIRSTIN1 - FIRSTIN100;
MPRINT(EM_ASSESS):   ARRAY LASTIN (100) LASTIN1 - LASTIN100;
MPRINT(EM_ASSESS):   RETAIN SCR_MNPROB1 - SCR_MNPROB100 0 SCR_MINPROB1 - SCR_MINPROB100 1
SCR_MAXPROB1 - SCR_MAXPROB100 0;
MPRINT(EM_ASSESS):   ARRAY SCR_MNPROBS (100) SCR_MNPROB1 - SCR_MNPROB100;
MPRINT(EM_ASSESS):   ARRAY SCR_MINPROBS (100) SCR_MINPROB1 - SCR_MINPROB100;
MPRINT(EM_ASSESS):   ARRAY SCR_MAXPROBS (100) SCR_MAXPROB1 - SCR_MAXPROB100;
MPRINT(EM_ASSESS):   DROP SCR_MINPROB1 - SCR_MINPROB100 SCR_MAXPROB1 - SCR_MAXPROB100
SCR_MNPROB1 - SCR_MNPROB100 ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ...... Area For 8 Financials ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   IF _MEANTARGET = . THEN _MEANTARGET = RESPRATE;
MPRINT(EM_ASSESS):   DROP N1 _K SUMWEIGHTS ;
MPRINT(EM_ASSESS):   SUMWEIGHTS = 1;
 
MPRINT(EM_ASSESS):   DO _K = 1 TO CEIL (_FREQ_);
MPRINT(EM_ASSESS):   IF _K = CEIL (_FREQ_) THEN DO;
MPRINT(EM_ASSESS):   IF _FREQ_ < CEIL (_FREQ_) THEN _WEIGHT = _FREQ_ - FLOOR (_FREQ_);
MPRINT(EM_ASSESS):   ELSE _WEIGHT = 1;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE _WEIGHT = 1;
MPRINT(EM_ASSESS):   N1 + _WEIGHT;
MPRINT(EM_ASSESS):   NTARGET = _MEANTARGET ;
MPRINT(EM_ASSESS):   DECILE = MIN (20, CEIL (N1 * 20 / 100));
MPRINT(EM_ASSESS):   MINPROBS ( DECILE) = MIN (MINPROBS ( DECILE), P_Risk1 );
MPRINT(EM_ASSESS):   MAXPROBS ( DECILE) = MAX (MAXPROBS ( DECILE), P_Risk1 );
MPRINT(EM_ASSESS):   MNPROBS ( DECILE) = SUM (MNPROBS ( DECILE), P_Risk1 * _WEIGHT);
MPRINT(EM_ASSESS):   NUMOBSS ( DECILE) = NUMOBSS ( DECILE) + _WEIGHT;
MPRINT(EM_ASSESS):   NUMRESPS ( DECILE) = NUMRESPS ( DECILE) + _MEANTARGET * _WEIGHT;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ........ outside of do loop, Area for final ROC;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   RANKDELTA = (ROUND ( _FREQ_ ) + 1) / 2;
MPRINT(EM_ASSESS):   RANK = UNTIEDRANK + RANKDELTA;
MPRINT(EM_ASSESS):   DROP RANK ;
MPRINT(EM_ASSESS):   SUMRANK1 + RANK * ROUND (_MEANTARGET * _FREQ_, .0000001);
MPRINT(EM_ASSESS):   UNTIEDRANK + ROUND (_FREQ_, .00000001);
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ............ Area For ROC Curve;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   DO _K = 1 TO 100;
MPRINT(EM_ASSESS):   IF P_Risk1 * 100 >= _K THEN DO;
MPRINT(EM_ASSESS):   TRUEPOSX ( _K ) + _FREQ_ * _MEANTARGET ;
MPRINT(EM_ASSESS):   FALSEPOSX ( _K ) + _FREQ_ * (1 - _MEANTARGET) ;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   TRUENEGX ( _K ) + _FREQ_ * ( 1 - _MEANTARGET) ;
MPRINT(EM_ASSESS):   FALSENEGX ( _K ) + _FREQ_ * _MEANTARGET ;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   SLOT = MIN (MAX (CEIL (P_Risk1 * 100), 1), 100) ;
MPRINT(EM_ASSESS):   DROP SLOT;
MPRINT(EM_ASSESS):   FIRSTIN ( SLOT ) = MIN ( FIRSTIN ( SLOT ), P_Risk1);
MPRINT(EM_ASSESS):   LASTIN ( SLOT ) = MAX ( LASTIN ( SLOT ), P_Risk1);
MPRINT(EM_ASSESS):   _EVENTS ( SLOT) = _EVENTS ( SLOT) + _FREQ_ * _MEANTARGET;
MPRINT(EM_ASSESS):   NONEVENTS ( SLOT) = NONEVENTS ( SLOT) + _FREQ_ * (1 - _MEANTARGET);
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ........ START OF OUTDIST IN BINARY CASE MAIN DATA STEP ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   SCR_MNPROBS ( SLOT ) = SUM (SCR_MNPROBS (SLOT), P_Risk1 * _FREQ_ );
MPRINT(EM_ASSESS):   SCR_MINPROBS ( SLOT ) = MIN (SCR_MINPROBS (SLOT), P_Risk1 );
MPRINT(EM_ASSESS):   SCR_MAXPROBS ( SLOT ) = MAX (SCR_MAXPROBS (SLOT), P_Risk1 );
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ........ End of Outdist in Binary case main DATA STEP ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   IF EOF THEN DO;
MPRINT(EM_ASSESS):   PUT //;
MPRINT(EM_ASSESS):   DO K = 1 TO 20;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   LENGTH EVENTVALUE $ 32;
MPRINT(EM_ASSESS):   RETAIN EVENTVALUE "1" ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ......... Start of EOF area of BINARY processing of main data set ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SUMRANK1", SUMRANK1);
MPRINT(EM_ASSESS):   LENGTH DATAROLE $ 10;
MPRINT(EM_ASSESS):   RETAIN DATAROLE "VALIDATE" ;
MPRINT(EM_ASSESS):   RETAIN OVLMIN 0.0003064447 OVLMAX 0.999955188 ;
MPRINT(EM_ASSESS):   DROP OVLMIN OVLMAX ;
MPRINT(EM_ASSESS):   C_NUMOBS = 0;
MPRINT(EM_ASSESS):   C_NUM_RESP = 0;
MPRINT(EM_ASSESS):   C_NUM_NONRESP = 0;
MPRINT(EM_ASSESS):   C_P_RESP = 0;
MPRINT(EM_ASSESS):   P_CAPT_RESP = 0;
MPRINT(EM_ASSESS):   C_P_CAPT_RESP = 0;
MPRINT(EM_ASSESS):   PREVIOUSPROFIT = 0;
MPRINT(EM_ASSESS):   MAXPROFIT = 0;
MPRINT(EM_ASSESS):   _KS_BIN_ = 0;
MPRINT(EM_ASSESS):   DROP _KS_BIN_;
MPRINT(EM_ASSESS):   AVGNUMRESP = _NEVENTS / 20;
MPRINT(EM_ASSESS):   BASERESP = 100 * RESPRATE;
MPRINT(EM_ASSESS):   BASERESPC = BASERESP;
MPRINT(EM_ASSESS):   BASECAP = 100 / 20;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ........................Start OF Gainschart = Outranks Area;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   _KS_BIN_PROB = 0;
MPRINT(EM_ASSESS):   DO GROUP = 20 TO 1 BY -1;
 
MPRINT(EM_ASSESS):   BASECAPC + BASECAP;
MPRINT(EM_ASSESS):   PERCENTILE = GROUP * (100 / 20);
MPRINT(EM_ASSESS):   MINPROB = MINPROBS ( GROUP);
MPRINT(EM_ASSESS):   MAXPROB = MAXPROBS ( GROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("MINPROB" || LEFT ( PUT (GROUP, 3.)), MINPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("MAXPROB" || LEFT ( PUT (GROUP, 3.)), MAXPROB);
MPRINT(EM_ASSESS):   NUMOBS = NUMOBSS ( GROUP);
MPRINT(EM_ASSESS):   IF NUMOBS > 0 THEN MNPROB = MNPROBS ( GROUP) / NUMOBS;
MPRINT(EM_ASSESS):   ELSE MNPROB = .;
MPRINT(EM_ASSESS):   C_NUMOBS = SUM (NUMOBS, C_NUMOBS);
MPRINT(EM_ASSESS):   NUMRESP = NUMRESPS ( GROUP);
MPRINT(EM_ASSESS):   NUMNONRESP = NUMOBS - NUMRESP;
MPRINT(EM_ASSESS):   C_AVGNUM_RESP + AVGNUMRESP;
MPRINT(EM_ASSESS):   IF C_NUMOBS <= _NEVENTS THEN DO;
MPRINT(EM_ASSESS):   BESTNUMEVENTS = NUMOBS;
MPRINT(EM_ASSESS):   BESTCAPC = C_NUMOBS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   BASEEVENTS = _NEVENTS / 20;
MPRINT(EM_ASSESS):   BASENONEVENTS = 0;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   FLAG + 1;
MPRINT(EM_ASSESS):   DROP FLAG;
MPRINT(EM_ASSESS):   BESTNUMEVENTS = _NEVENTS - C_NUMOBS + NUMOBS;
MPRINT(EM_ASSESS):   IF FLAG > 1 THEN BESTNUMEVENTS = 0;
MPRINT(EM_ASSESS):   BESTCAPC = 100;
MPRINT(EM_ASSESS):   IF C_NUMOBS - _NEVENTS <= NUMOBS THEN DO;
MPRINT(EM_ASSESS):   BASEEVENTS = C_NUMOBS - _NEVENTS;
MPRINT(EM_ASSESS):   BASENONEVENTS = NUMOBS - C_NUMOBS + _NEVENTS;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   BASEEVENTS = 0;
MPRINT(EM_ASSESS):   BASENONEVENTS = NUMOBS;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   BESTCAP = BESTNUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   IF C_NUMOBS <= _NEVENTS THEN DO;
MPRINT(EM_ASSESS):   BESTLIFT = ((_NEVENTS+_NNONEVENTS) / 20) /AVGNUMRESP;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   BESTLIFT = BESTNUMEVENTS / AVGNUMRESP;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   C_BESTNUMEVENTS + BESTNUMEVENTS;
MPRINT(EM_ASSESS):   DROP C_BESTNUMEVENTS;
MPRINT(EM_ASSESS):   IF C_NUMOBS > 0 THEN BESTLIFTC = C_BESTNUMEVENTS / (_NEVENTS / 100 *
C_NUMOBS);
MPRINT(EM_ASSESS):   ELSE BESTLIFTC = .;
MPRINT(EM_ASSESS):   IF NUMOBS > 0 THEN DO;
MPRINT(EM_ASSESS):   BESTRESP = BESTNUMEVENTS * 100 / NUMOBS;
MPRINT(EM_ASSESS):   P_RESP = NUMRESP * 100 / NUMOBS;
MPRINT(EM_ASSESS):   P_NONRESP = NUMNONRESP * 100 / NUMOBS;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   BESTRESP = .;
MPRINT(EM_ASSESS):   P_RESP = .;
MPRINT(EM_ASSESS):   P_NONRESP = .;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   IF C_NUMOBS > 0 THEN DO;
MPRINT(EM_ASSESS):   BESTRESPC = C_BESTNUMEVENTS * 100 / C_NUMOBS;
MPRINT(EM_ASSESS):   BESTGAIN = MAX (0, ((C_BESTNUMEVENTS / C_NUMOBS ) / ( AVGNUMRESP /
(100/20)) - 1) * 100);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   BESTRESPC = .;
MPRINT(EM_ASSESS):   BESTGAIN = .;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   IF NUMNONRESP > 0 THEN ODDS = NUMRESP / NUMNONRESP;
MPRINT(EM_ASSESS):   ELSE ODDS = .;
MPRINT(EM_ASSESS):   C_NUM_RESP = SUM (C_NUM_RESP , NUMRESP );
MPRINT(EM_ASSESS):   C_NUM_NONRESP = SUM (C_NUM_NONRESP, NUMNONRESP );
MPRINT(EM_ASSESS):   IF C_NUM_NONRESP > 0 THEN C_ODDS = C_NUM_RESP / C_NUM_NONRESP;
MPRINT(EM_ASSESS):   ELSE C_ODDS = .;
MPRINT(EM_ASSESS):   IF C_NUMOBS > 0 THEN DO;
MPRINT(EM_ASSESS):   C_P_RESP = C_NUM_RESP * 100 / C_NUMOBS;
MPRINT(EM_ASSESS):   GAIN = ABS(100 * (((C_NUM_RESP / C_NUMOBS ) / (_NEVENTS / 100)) - 1));
MPRINT(EM_ASSESS):   BASEGAIN = 100 * (( (C_AVGNUM_RESP /((20-GROUP+1)* 100/20) ) / (
AVGNUMRESP / (100/20))) - 1);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   GAIN = .;
MPRINT(EM_ASSESS):   BASEGAIN = .;
MPRINT(EM_ASSESS):   C_P_RESP = .;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   IF BASEGAIN <= 0 THEN BASEGAIN = 0;
MPRINT(EM_ASSESS):   P_CAPT_RESP = NUMRESP * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   P_CAPT_NONRESP = NUMNONRESP * 100 / ( 100 - _NEVENTS);
MPRINT(EM_ASSESS):   C_P_CAPT_RESP = C_NUM_RESP * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   C_P_CAPT_NONRESP = C_NUM_NONRESP * 100 / ( 100 - _NEVENTS);
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * Area For Binned KS in Outranks area;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   _DIFFERENCE = C_P_CAPT_RESP - C_P_CAPT_NONRESP ;
MPRINT(EM_ASSESS):   IF _KS_BIN_ < _DIFFERENCE THEN DO;
MPRINT(EM_ASSESS):   _KS_BIN_ = _DIFFERENCE;
MPRINT(EM_ASSESS):   _KS_BIN_PROB = MINPROB + (MAXPROB - MINPROB) / 2 ;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   LIFT = P_RESP * .01 / RESPRATE ;
MPRINT(EM_ASSESS):   C_LIFT = C_P_RESP * .01 / RESPRATE;
MPRINT(EM_ASSESS):   IF NUMOBS > 0 THEN DO;
MPRINT(EM_ASSESS):   BASELIFT = AVGNUMRESP / ( RESPRATE * 100/20 );
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE BASELIFT = .;
MPRINT(EM_ASSESS):   IF C_NUMOBS > 0 THEN CBASELIFT = C_AVGNUM_RESP / (RESPRATE *
((20-GROUP+1)* 100/20));
MPRINT(EM_ASSESS):   ELSE CBASELIFT = .;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ........ WITHIN DO LOOP FOR OUTRANKS;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   BIN = 20 + 1 - GROUP;
MPRINT(EM_ASSESS):   PERCENTILE = BIN * (100 / 20);
MPRINT(EM_ASSESS):   B_C_P_RESP = PERCENTILE;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPRANK ;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ........................ END OF GAINSCHART = OUTRANKS AREA;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("MAXPROFITGROUP" , MAXPROFITGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("MAXPROFIT" , MAXPROFIT );
MPRINT(EM_ASSESS):   KS_ABSDIFF = 0 ;
MPRINT(EM_ASSESS):   MINPRECTPR = 9999;
MPRINT(EM_ASSESS):   Y0 = 1 - RESPRATE;
MPRINT(EM_ASSESS):   Y1 = RESPRATE;
MPRINT(EM_ASSESS):   MAXMUTUAL = 0;
MPRINT(EM_ASSESS):   DROP MAXMUTUAL KSPROB Y0 Y1 KS_ABSDIFF MINPRECTPR;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * .....................About to start Processing Outroc ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ........................... Finished Processing Outroc ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * .............. Outdist ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   BIN = 20 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS96 - EVENTS100 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS96 - NONEVENTS100);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB96 -
SCR_MNPROB100) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB96 - SCR_MINPROB100) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB96 - SCR_MAXPROB100) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 100;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 20;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 19 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS91 - EVENTS95 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS91 - NONEVENTS95);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB91 -
SCR_MNPROB95) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB91 - SCR_MINPROB95) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB91 - SCR_MAXPROB95) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 100;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 19;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 18 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS86 - EVENTS90 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS86 - NONEVENTS90);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB86 -
SCR_MNPROB90) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB86 - SCR_MINPROB90) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB86 - SCR_MAXPROB90) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 100;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 18;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 17 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS81 - EVENTS85 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS81 - NONEVENTS85);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB81 -
SCR_MNPROB85) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB81 - SCR_MINPROB85) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB81 - SCR_MAXPROB85) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 100;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 17;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 16 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS76 - EVENTS80 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS76 - NONEVENTS80);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB76 -
SCR_MNPROB80) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB76 - SCR_MINPROB80) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB76 - SCR_MAXPROB80) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 100;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 16;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 15 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS71 - EVENTS75 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS71 - NONEVENTS75);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB71 -
SCR_MNPROB75) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB71 - SCR_MINPROB75) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB71 - SCR_MAXPROB75) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 100;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 15;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 14 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS66 - EVENTS70 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS66 - NONEVENTS70);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB66 -
SCR_MNPROB70) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB66 - SCR_MINPROB70) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB66 - SCR_MAXPROB70) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 100;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 14;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 13 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS61 - EVENTS65 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS61 - NONEVENTS65);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB61 -
SCR_MNPROB65) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB61 - SCR_MINPROB65) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB61 - SCR_MAXPROB65) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 100;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 13;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 12 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS56 - EVENTS60 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS56 - NONEVENTS60);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB56 -
SCR_MNPROB60) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB56 - SCR_MINPROB60) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB56 - SCR_MAXPROB60) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 100;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 12;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 11 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS51 - EVENTS55 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS51 - NONEVENTS55);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB51 -
SCR_MNPROB55) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB51 - SCR_MINPROB55) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB51 - SCR_MAXPROB55) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 100;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 11;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 10 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS46 - EVENTS50 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS46 - NONEVENTS50);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB46 -
SCR_MNPROB50) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB46 - SCR_MINPROB50) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB46 - SCR_MAXPROB50) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 100;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 10;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 9 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS41 - EVENTS45 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS41 - NONEVENTS45);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB41 -
SCR_MNPROB45) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB41 - SCR_MINPROB45) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB41 - SCR_MAXPROB45) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 100;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 9;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 8 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS36 - EVENTS40 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS36 - NONEVENTS40);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB36 -
SCR_MNPROB40) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB36 - SCR_MINPROB40) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB36 - SCR_MAXPROB40) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 100;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 8;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 7 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS31 - EVENTS35 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS31 - NONEVENTS35);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB31 -
SCR_MNPROB35) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB31 - SCR_MINPROB35) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB31 - SCR_MAXPROB35) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 100;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 7;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 6 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS26 - EVENTS30 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS26 - NONEVENTS30);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB26 -
SCR_MNPROB30) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB26 - SCR_MINPROB30) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB26 - SCR_MAXPROB30) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 100;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 6;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 5 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS21 - EVENTS25 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS21 - NONEVENTS25);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB21 -
SCR_MNPROB25) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB21 - SCR_MINPROB25) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB21 - SCR_MAXPROB25) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 100;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 5;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 4 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS16 - EVENTS20 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS16 - NONEVENTS20);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB16 -
SCR_MNPROB20) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB16 - SCR_MINPROB20) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB16 - SCR_MAXPROB20) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 100;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 4;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 3 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS11 - EVENTS15 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS11 - NONEVENTS15);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB11 -
SCR_MNPROB15) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB11 - SCR_MINPROB15) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB11 - SCR_MAXPROB15) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 100;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 3;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 2 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS6 - EVENTS10 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS6 - NONEVENTS10);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB6 -
SCR_MNPROB10) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB6 - SCR_MINPROB10) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB6 - SCR_MAXPROB10) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 100;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 2;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 1 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS1 - EVENTS5 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS1 - NONEVENTS5);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB1 - SCR_MNPROB5)
/ NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB1 - SCR_MINPROB5) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB1 - SCR_MAXPROB5) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 100;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 1;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("KSPROB" , PUT (KSPROB, 5.3 ) );
MPRINT(EM_ASSESS):   CALL SYMPUTX ("_KS_BIN_PROB" , _KS_BIN_PROB );
MPRINT(EM_ASSESS):   CALL SYMPUTX ("_KS_BIN_" , _KS_BIN_ / 100 );
MPRINT(EM_ASSESS):   CALL SYMPUTX ("KSDIFF" , KS_ABSDIFF );
MPRINT(EM_ASSESS):   CALL SYMPUTX ("PRECTPR" , PRECTPR );
MPRINT(EM_ASSESS):   CALL SYMPUTX ("MAXMUTUALPROB" , MAXMUTUALPROB);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   LABEL __EVENT__ = "Event" DECILE = "Depth" BIN = "Bin" NUMOBS = "Number
of Observations" ;
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * RUN for large data set;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   PROC DATASETS NOLIST;
MPRINT(EM_ASSESS):   DELETE _AUXEVENTNAME;
MPRINT(EM_ASSESS):   QUIT;
 
MPRINT(EM_ASSESS):   OPTION NOCENTER LS = 95;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * Report Vars Area.;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ...........Start OF Outdist Modification;
MPRINT(EM_ASSESS):   *;
 
MPRINT(EM_ASSESS):   PROC DATASETS NOLIST LIB = WORK;
MPRINT(EM_ASSESS):   MODIFY _TEMPSCOREDIST;
MPRINT(EM_ASSESS):   RENAME MODELSCORE = SCORE UPPERPROB = UPPOSTERIOR SCR_CP_EVENTS =
CUMULATIVEPERCENTAGEOFEVENTS SCR_CP_NONEVENTS = CUMULATIVEPERCENTAGEOFNONEVENTS EVENTVALUE =
EVENT LOWERPROB = LOWPOSTERIOR NUMOBSINGROUP = N PERCOBSINGROUP = PERCENTAGE SCR_MINPROB =
_MINP_ SCR_MAXPROB = _MAXP_ SCR_MNPROB = _MEANP_ RANGE = P_LABEL C_PERCOBSINGROUP =
CUMULATIVEPERCENTAGE SCR_NUMEVENTS = NUMBEROFEVENTS SCR_NUMNONEVENTS = NUMBEROFNONEVENTS
SCR_P_EVENTS = PERCENTAGEOFEVENTS SCR_P_NONEVENTS = PERCENTAGEOFNONEVENTS ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * .................... OUTDIST MODIFICATION LABEL AREA;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   LABEL BIN = "Bin" N = "Number of Observations" P_LABEL = "Posterior
Probability Range" EVENT = "Event" LOWPOSTERIOR = "Lower Bound Posterior Probability"
PERCENTAGEOFEVENTS = "Percentage of Events" CUMULATIVEPERCENTAGEOFNONEVENTS = "Cumulative
Percentage of Nonevents" CUMULATIVEPERCENTAGE = "Cumulative Percentage" PERCENTAGEOFEVENTS =
"Percentage of Events" PERCENTAGEOFNONEVENTS = "Percentage of Nonevents"
CUMULATIVEPERCENTAGEOFEVENTS = "Cumulative Percentage of Events" UPPOSTERIOR = "Upper Bound
Posterior Probability" NUMBEROFEVENTS = "Number of Events" PERCENTAGE = "Percentage"
NUMBEROFNONEVENTS = "Number of Nonevents" _MEANP_ = "Mean Posterior Probability" _MINP_ = "Min
Posterior Probability" _MAXP_ = "Max Posterior Probability" SCORE = "Model Score" ;
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   QUIT;
MPRINT(EM_ASSESS):   DATA WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   SET WORK._TEMPSCOREDIST (WHERE = (_MEANP_ > .));
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ........... END OF OUTDIST MODIFICATION;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ...........Start of OUTRANKS Modification;
MPRINT(EM_ASSESS):   *;
 
MPRINT(EM_ASSESS):   PROC DATASETS NOLIST LIB = WORK;
MPRINT(EM_ASSESS):   MODIFY _TEMPRANK;
MPRINT(EM_ASSESS):   RENAME __EVENT__ = EVENT P_RESP = RESP C_P_CAPT_RESP = CAPC P_CAPT_RESP =
CAP NUMNONRESP = NUMNEVENT NUMRESP = NUMEVENT BASEEVENTS = BASENUMBEROFEVENTS BESTNUMEVENTS =
BESTNUMBEROFEVENTS MAXPROB = _MAXP_ MINPROB = _MINP_ CBASELIFT = BASELIFTC C_LIFT = LIFTC
MNPROB = _MEANP_ PERCENTILE = DECILE NUMOBS = N NUMEVENT = NUMBEROFEVENTS C_P_RESP = RESPC ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ................. OUTRANKS;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   LABEL _MAXP_ = "Max Posterior Probability" _MINP_ = "Min Posterior
Probability" _MEANP_ = "Mean Posterior Probability" BASECAP = "Baseline % Captured Response"
BASECAPC = "Baseline Cumulative % Captured Response" BASENUMBEROFEVENTS = "Baseline Number of
Events" BASEGAIN = "Baseline Gain" BASELIFT = "Baseline Lift" BASELIFTC = "Baseline Cumulative
Lift" BASERESP = "Baseline % Response" BASERESPC = "Baseline Cumulative % Response" BASELIFTC
= "Baseline Cumulative Lift" BESTCAP = "Best % Captured Response" BESTCAPC = "Best Cumulative
% Captured Response" BESTGAIN = "Best Gain" BESTRESP = "Best % Response" BESTRESPC = "Best
Cumulative % Response" BESTLIFT = "Best Lift" BESTLIFTC = "Best Cumulative Lift"
BESTNUMBEROFEVENTS = "Best Number of Events" CAP = "% Captured Response" CAPC = "Cumulative %
Captured Response" DECILE = "Depth" GAIN = "Gain" LIFT = "Lift" LIFTC = "Cumulative Lift"
NUMNEVENT = "Number of Nonevents" N = "Number of Observations" EVENT = "Event" RESPC =
"Cumulative % Response" NUMBEROFEVENTS = "Number of Events" RESP = "% Response" ;
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   QUIT;
MPRINT(EM_ASSESS):   DATA WORK._TEMPRANK;
MPRINT(EM_ASSESS):   SET WORK._TEMPRANK (WHERE = (_MEANP_ > .));
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   proc datasets lib=work nolist;
MPRINT(EM_ASSESS):   delete _ea_tmpdata;
MPRINT(EM_ASSESS):   run;
MPRINT(EM_ASSESS):   quit;
MPRINT(EM_ASSESS):  ;
MPRINT(EM_ASSESS):   OPTION ERRORS = 20;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):    data WORK._TEMPRANK;
MPRINT(EM_DIAGRAM):   length target $32 TARGETLABEL $200 dataRole $20;
MPRINT(EM_DIAGRAM):   label TARGETLABEL = "Target Label";
MPRINT(EM_DIAGRAM):   set WORK._TEMPRANK;
MPRINT(EM_DIAGRAM):   retain target "Risk";
MPRINT(EM_DIAGRAM):   retain dataRole "VALIDATE";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data EMWS1.Neural_EMRANK;
MPRINT(EM_DIAGRAM):   length target $32;
MPRINT(EM_DIAGRAM):   length TARGETLABEL $200;
MPRINT(EM_DIAGRAM):   length dataRole $20;
MPRINT(EM_DIAGRAM):   length EVENT $32;
MPRINT(EM_DIAGRAM):   set EMWS1.Neural_EMRANK WORK._TEMPRANK;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data WORK._TEMPSCOREDIST;
MPRINT(EM_DIAGRAM):   length target $32 TARGETLABEL $200 dataRole $20;
MPRINT(EM_DIAGRAM):   label TARGETLABEL = "Target Label";
MPRINT(EM_DIAGRAM):   set WORK._TEMPSCOREDIST;
MPRINT(EM_DIAGRAM):   retain target "Risk";
MPRINT(EM_DIAGRAM):   retain dataRole "VALIDATE";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data EMWS1.Neural_EMSCOREDIST;
MPRINT(EM_DIAGRAM):   length target $32;
MPRINT(EM_DIAGRAM):   length TARGETLABEL $200;
MPRINT(EM_DIAGRAM):   length dataRole $20;
MPRINT(EM_DIAGRAM):   length EVENT $32;
MPRINT(EM_DIAGRAM):   length P_LABEL $9;
MPRINT(EM_DIAGRAM):   set EMWS1.Neural_EMSCOREDIST WORK._TEMPSCOREDIST;
MPRINT(EM_DIAGRAM):   run;
71308      %let _cn = %sysfunc(getoption(CENTER));
71309      options nocenter;
MPRINT(EM_DIAGRAM):    options nocenter;
71310      proc print data=EMWS1.Neural_EMREPORTFIT noobs label;
MPRINT(EM_DIAGRAM):   proc print data=EMWS1.Neural_EMREPORTFIT noobs label;
71311      var STAT LABEL TRAIN
71312      VALIDATE
71313      ;
MPRINT(EM_DIAGRAM):   var STAT LABEL TRAIN VALIDATE ;
71314      by TARGET TARGETLABEL;
MPRINT(EM_DIAGRAM):   by TARGET TARGETLABEL;
71315      title9 ' ';
MPRINT(EM_DIAGRAM):   title9 ' ';
71316      title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_fitstat_title  , NOQUOTE))";
MPRINT(EM_DIAGRAM):   title10 "Fit Statistics";
MPRINT(EM_DIAGRAM):   run;
71317      run;
 
NOTE: There were 21 observations read from the data set EMWS1.NEURAL_EMREPORTFIT.
NOTE: The PROCEDURE PRINT printed page 27.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
71318      title10;
MPRINT(EM_DIAGRAM):   title10;
71319      options &_cn;
MPRINT(EM_DIAGRAM):   options NOCENTER;
71320      proc sort data=EMWS1.Neural_EMCLASSIFICATION nothreads;
MPRINT(EM_DIAGRAM):    proc sort data=EMWS1.Neural_EMCLASSIFICATION nothreads;
71321      by DATAROLE TARGET TARGETLABEL;
MPRINT(EM_DIAGRAM):   by DATAROLE TARGET TARGETLABEL;
71322      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 8 observations read from the data set EMWS1.NEURAL_EMCLASSIFICATION.
NOTE: The data set EMWS1.NEURAL_EMCLASSIFICATION has 8 observations and 12 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.07 seconds
      cpu time            0.01 seconds
 
 
71323      %let _cn = %sysfunc(getoption(CENTER));
71324      options nocenter;
MPRINT(EM_DIAGRAM):   options nocenter;
71325      proc print data=EMWS1.Neural_EMCLASSIFICATION noobs label;
MPRINT(EM_DIAGRAM):   proc print data=EMWS1.Neural_EMCLASSIFICATION noobs label;
71326      var from into pct_row pct_col count percent
71327      ;
MPRINT(EM_DIAGRAM):   var from into pct_row pct_col count percent ;
71328      by DATAROLE TARGET TARGETLABEL;
MPRINT(EM_DIAGRAM):   by DATAROLE TARGET TARGETLABEL;
71329      label FROM = "%sysfunc(sasmsg(sashelp.dmine, rpt_target_vlabel ,     NOQUOTE))";
MPRINT(EM_DIAGRAM):   label FROM = "Target";
71330      label INTO = "%sysfunc(sasmsg(sashelp.dmine, rpt_outcome_vlabel ,    NOQUOTE))";
MPRINT(EM_DIAGRAM):   label INTO = "Outcome";
71331      label PCT_ROW = "%sysfunc(sasmsg(sashelp.dmine, rpt_targetpct_vlabel ,  NOQUOTE))";
MPRINT(EM_DIAGRAM):   label PCT_ROW = "Target Percentage";
71332      label PCT_COL = "%sysfunc(sasmsg(sashelp.dmine, rpt_outcomepct_vlabel , NOQUOTE))";
MPRINT(EM_DIAGRAM):   label PCT_COL = "Outcome Percentage";
71333      label COUNT = "%sysfunc(sasmsg(sashelp.dmine, rpt_count_vlabel ,      NOQUOTE))";
MPRINT(EM_DIAGRAM):   label COUNT = "Frequency Count";
71334      label PERCENT = "%sysfunc(sasmsg(sashelp.dmine, rpt_totalpct_vlabel ,   NOQUOTE))";
MPRINT(EM_DIAGRAM):   label PERCENT = "Total Percentage";
71335      where _TYPE_='PREDICTION';
MPRINT(EM_DIAGRAM):   where _TYPE_='PREDICTION';
71336      title9 ' ';
MPRINT(EM_DIAGRAM):   title9 ' ';
71337      title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_classification_title    , NOQUOTE))";
MPRINT(EM_DIAGRAM):   title10 "Classification Table";
MPRINT(EM_DIAGRAM):   run;
71338      run;
 
NOTE: There were 8 observations read from the data set EMWS1.NEURAL_EMCLASSIFICATION.
      WHERE _TYPE_='PREDICTION';
NOTE: The PROCEDURE PRINT printed page 28.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
71339      title9;
MPRINT(EM_DIAGRAM):   title9;
71340      title10;
MPRINT(EM_DIAGRAM):   title10;
71341      options &_cn;
MPRINT(EM_DIAGRAM):   options NOCENTER;
71342      %let _cn = %sysfunc(getoption(CENTER));
71343      options nocenter;
MPRINT(EM_DIAGRAM):    options nocenter;
71344      data EMWS1.Neural_EMEVENTREPORT;
MPRINT(EM_DIAGRAM):   data EMWS1.Neural_EMEVENTREPORT;
71345      length DATAROLE TARGET $32 TARGETLABEL $200 FALSENEVENT TRUENEVENT FALSEEVENT
71345    ! TRUEEVENT 8;
MPRINT(EM_DIAGRAM):   length DATAROLE TARGET $32 TARGETLABEL $200 FALSENEVENT TRUENEVENT
FALSEEVENT TRUEEVENT 8;
71346      label DATAROLE = "%sysfunc(sasmsg(sashelp.dmine, rpt_datarole_vlabel ,    NOQUOTE))"
71346    !  TARGET = "%sysfunc(sasmsg(sashelp.dmine, rpt_target_vlabel ,      NOQUOTE))"
71346    ! TARGETLABEL = "%sysfunc(sasmsg(sashelp.dmine, meta_targetlabel_vlabel, NOQUOTE))"
71346    ! FALSEEVENT
71347      = "%sysfunc(sasmsg(sashelp.dmine, rpt_falseevent_vlabel ,  NOQUOTE))" FALSENEVENT =
71347    ! "%sysfunc(sasmsg(sashelp.dmine, rpt_falsenevent_vlabel , NOQUOTE))" TRUEEVENT =
71347    ! "%sysfunc(sasmsg(sashelp.dmine, rpt_trueevent_vlabel ,   NOQUOTE))" TRUENEVENT =
71348         "%sysfunc(sasmsg(sashelp.dmine, rpt_truenevent_vlabel ,  NOQUOTE))";
MPRINT(EM_DIAGRAM):   label DATAROLE = "Data Role" TARGET = "Target" TARGETLABEL = "Target
Label" FALSEEVENT = "False Positive" FALSENEVENT = "False Negative" TRUEEVENT = "True
Positive" TRUENEVENT = "True Negative";
71349      FALSEEVENT=0;
MPRINT(EM_DIAGRAM):   FALSEEVENT=0;
71350      FALSENEVENT=0;
MPRINT(EM_DIAGRAM):   FALSENEVENT=0;
71351      TRUEEVENT=0;
MPRINT(EM_DIAGRAM):   TRUEEVENT=0;
71352      TRUENEVENT=0;
MPRINT(EM_DIAGRAM):   TRUENEVENT=0;
71353      set EMWS1.Neural_EMEVENTREPORT;
MPRINT(EM_DIAGRAM):   set EMWS1.Neural_EMEVENTREPORT;
71354      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 2 observations read from the data set EMWS1.NEURAL_EMEVENTREPORT.
NOTE: The data set EMWS1.NEURAL_EMEVENTREPORT has 2 observations and 7 variables.
NOTE: DATA statement used (Total process time):
      real time           0.08 seconds
      cpu time            0.03 seconds
 
 
71355      proc print data=EMWS1.Neural_EMEVENTREPORT noobs label;
MPRINT(EM_DIAGRAM):   proc print data=EMWS1.Neural_EMEVENTREPORT noobs label;
71356      title9 ' ';
MPRINT(EM_DIAGRAM):   title9 ' ';
71357      title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_eventtable_title    , NOQUOTE))";
MPRINT(EM_DIAGRAM):   title10 "Event Classification Table";
MPRINT(EM_DIAGRAM):   by notsorted DATAROLE notsorted TARGET notsorted TARGETLABEL;
MPRINT(EM_DIAGRAM):   run;
71358      by notsorted DATAROLE notsorted TARGET notsorted TARGETLABEL;
71359      run;
 
NOTE: There were 2 observations read from the data set EMWS1.NEURAL_EMEVENTREPORT.
NOTE: The PROCEDURE PRINT printed page 29.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
71360      title10;
MPRINT(EM_DIAGRAM):   title10;
71361      options &_cn;
MPRINT(EM_DIAGRAM):   options NOCENTER;
71362      proc datasets library=EMWS1 nolist;
MPRINT(EM_DIAGRAM):    proc datasets library=EMWS1 nolist;
71363      modify Neural_EMRANK;
MPRINT(EM_DIAGRAM):   modify Neural_EMRANK;
MPRINT(EM_DIAGRAM):   label target = "Target Variable";
71364      label target = "%sysfunc(sasmsg(sashelp.dmine, rpt_targetvar_vlabel ,   NOQUOTE))";
MPRINT(EM_DIAGRAM):   label datarole = "Data Role";
71365      label datarole = "%sysfunc(sasmsg(sashelp.dmine, rpt_datarole_vlabel ,    NOQUOTE))"
71365    ! ;
MPRINT(EM_DIAGRAM):   run;
71366      run;
 
NOTE: MODIFY was successful for EMWS1.NEURAL_EMRANK.DATA.
71367      quit;
MPRINT(EM_DIAGRAM):   quit;
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           3.02 seconds
      cpu time            0.54 seconds
 
 
71368      %let _cn = %sysfunc(getoption(CENTER));
71369      options nocenter;
MPRINT(EM_DIAGRAM):    options nocenter;
71370      proc print data=EMWS1.Neural_EMRANK label noobs;
MPRINT(EM_DIAGRAM):   proc print data=EMWS1.Neural_EMRANK label noobs;
71371      var
71372      decile gain lift liftc resp respc N _meanP_;
MPRINT(EM_DIAGRAM):   var decile gain lift liftc resp respc N _meanP_;
71373      by
71374      notsorted DATAROLE
71375      notsorted TARGET
71376      notsorted TARGETLABEL
71377      ;
MPRINT(EM_DIAGRAM):   by notsorted DATAROLE notsorted TARGET notsorted TARGETLABEL ;
71378      title9 ' ';
MPRINT(EM_DIAGRAM):   title9 ' ';
71379      title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_scoreranking_title , NOQUOTE))";
MPRINT(EM_DIAGRAM):   title10 "Assessment Score Rankings";
MPRINT(EM_DIAGRAM):   run;
71380      run;
 
NOTE: There were 40 observations read from the data set EMWS1.NEURAL_EMRANK.
NOTE: The PROCEDURE PRINT printed page 30.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
71381      title10;
MPRINT(EM_DIAGRAM):   title10;
71382      options &_cn;
MPRINT(EM_DIAGRAM):   options NOCENTER;
71383      proc datasets library=EMWS1 nolist;
MPRINT(EM_DIAGRAM):    proc datasets library=EMWS1 nolist;
71384      modify Neural_EMSCOREDIST;
MPRINT(EM_DIAGRAM):   modify Neural_EMSCOREDIST;
MPRINT(EM_DIAGRAM):   label target = "Target Variable";
71385      label target = "%sysfunc(sasmsg(sashelp.dmine, rpt_targetvar_vlabel ,
71385    ! NOQUOTE))";
MPRINT(EM_DIAGRAM):   label datarole = "Data Role";
71386      label datarole = "%sysfunc(sasmsg(sashelp.dmine, rpt_datarole_vlabel ,    NOQUOTE))"
71386    ! ;
MPRINT(EM_DIAGRAM):   run;
71387      run;
 
NOTE: MODIFY was successful for EMWS1.NEURAL_EMSCOREDIST.DATA.
71388      quit;
MPRINT(EM_DIAGRAM):   quit;
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           3.27 seconds
      cpu time            0.42 seconds
 
 
MPRINT(EM_DIAGRAM):    options nocenter;
MPRINT(EM_DIAGRAM):   proc print data=EMWS1.Neural_EMSCOREDIST label noobs;
MPRINT(EM_DIAGRAM):   var p_label numberOfEvents numberOfNonEvents _meanp_ percentage;
MPRINT(EM_DIAGRAM):   by notsorted DATAROLE notsorted TARGET notsorted TARGETLABEL ;
MPRINT(EM_DIAGRAM):   where TARGET in( "Risk" );
MPRINT(EM_DIAGRAM):   title9 ' ';
MPRINT(EM_DIAGRAM):   title10 "Assessment Score Distribution";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   title10;
MPRINT(EM_DIAGRAM):   options NOCENTER;
MPRINT(EM_DIAGRAM):   proc printto;
MPRINT(EM_DIAGRAM):   run;
