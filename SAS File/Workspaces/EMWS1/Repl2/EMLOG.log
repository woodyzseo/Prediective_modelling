*------------------------------------------------------------*
User:                301152869
Date:                April 16, 2021
Time:                11:26:29 o'clock
Site:                70104631
Platform:            W32_8PRO
Maintenance Release: 9.04.01M2P072314
EM Version:          13.2
* 
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   call symput('NLDATE', strip(put(date(), NLDATE.)));
MPRINT(EM_DIAGRAM):   call symput('NLTIME', strip(put(datetime(), NLTIME.)));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   nldate= sasmsg("sashelp.dmine", "log_date_note", 'N', "April 05, 2021" );
MPRINT(EM_DIAGRAM):   nltime= sasmsg("sashelp.dmine", "log_time_note", 'N', "13:10:58 o'clock" );
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "* Training Log";
MPRINT(EM_DIAGRAM):   put nldate;
MPRINT(EM_DIAGRAM):   put nltime;
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   run;
*------------------------------------------------------------*
* Training Log
Date:                April 05, 2021
Time:                13:10:58 o'clock
*------------------------------------------------------------*
MPRINT(EM_DIAGRAM):    filename O38_1HC9 "H:\746\Decision Tree test\Workspaces\EMWS1\Repl2\EMTRAIN.out" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):   proc printto print=O38_1HC9 new;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _LOG "H:\746\Decision Tree test\Workspaces\EMWS1\Repl2\EMLOG.log" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   call symput('NLDATE', strip(put(date(), NLDATE.)));
MPRINT(EM_DIAGRAM):   call symput('NLTIME', strip(put(datetime(), NLTIME.)));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   nldate= sasmsg("sashelp.dmine", "log_date_note", 'N', "April 05, 2021" );
MPRINT(EM_DIAGRAM):   nltime= sasmsg("sashelp.dmine", "log_time_note", 'N', "13:10:58 o'clock" );
MPRINT(EM_DIAGRAM):   file _LOG;
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "User:                301152869";
MPRINT(EM_DIAGRAM):   put nldate;
MPRINT(EM_DIAGRAM):   put nltime;
MPRINT(EM_DIAGRAM):   put "Site:                70104631";
MPRINT(EM_DIAGRAM):   put "Platform:            W32_8PRO";
MPRINT(EM_DIAGRAM):   put "Maintenance Release: 9.04.01M2P072314";
MPRINT(EM_DIAGRAM):   put "EM Version:          13.2";
MPRINT(EM_DIAGRAM):   put "* ";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _LOGIN "H:\746\Decision Tree test\Workspaces\EMWS1\Repl2\EMTRAIN.log" encoding="UTF-8" NOBOM;
MPRINT(EM_COPYFILE):   data _null_;
MPRINT(EM_COPYFILE):   length line $20000;
MPRINT(EM_COPYFILE):   file _LOG MOD lrecl=20000;
MPRINT(EM_COPYFILE):   fid=fopen("_LOGIN",'i',20000,'v');
MPRINT(EM_COPYFILE):   if fid > 0 then do;
MPRINT(EM_COPYFILE):   do while(^fread(fid));
MPRINT(EM_COPYFILE):   rlen = frlen(fid);
MPRINT(EM_COPYFILE):   rc= fget(fid,line,20000);
MPRINT(EM_COPYFILE):   start = length(line)-length(left(line))+1;
MPRINT(EM_COPYFILE):   line=strip(line);
MPRINT(EM_COPYFILE):   put @start line;
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   if fid > 0 then rc=fclose(fid);
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   run;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   filename _LOGIN;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   file _LOG mod;
MPRINT(EM_DIAGRAM):   put _page_;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   filename _LOGIN "H:\746\Decision Tree test\Workspaces\EMWS1\Repl2\EMSCORE.log" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   file _LOG mod;
MPRINT(EM_DIAGRAM):   put _page_;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _LOGIN "H:\746\Decision Tree test\Workspaces\EMWS1\Repl2\EMREPORT.log" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   filename _LOGIN;
MPRINT(EM_DIAGRAM):    filename _LOG;
MPRINT(EM_DIAGRAM):    filename _OUT "H:\746\Decision Tree test\Workspaces\EMWS1\Repl2\EMOUTPUT.out" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   call symput('NLDATE', strip(put(date(), NLDATE.)));
MPRINT(EM_DIAGRAM):   call symput('NLTIME', strip(put(datetime(), NLTIME.)));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   nldate= sasmsg("sashelp.dmine", "log_date_note", 'N', "April 05, 2021" );
MPRINT(EM_DIAGRAM):   nltime= sasmsg("sashelp.dmine", "log_time_note", 'N', "13:10:58 o'clock" );
MPRINT(EM_DIAGRAM):   file _OUT;
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "User:                301152869";
MPRINT(EM_DIAGRAM):   put nldate;
MPRINT(EM_DIAGRAM):   put nltime;
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "* Training Output";
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _OUTIN "H:\746\Decision Tree test\Workspaces\EMWS1\Repl2\EMTRAIN.out" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):   ;
MPRINT(EM_COPYFILE):   data _null_;
MPRINT(EM_COPYFILE):   length line $20000;
MPRINT(EM_COPYFILE):   file _OUT MOD lrecl=20000;
MPRINT(EM_COPYFILE):   fid=fopen("_OUTIN",'i',20000,'v');
MPRINT(EM_COPYFILE):   if fid > 0 then do;
MPRINT(EM_COPYFILE):   do while(^fread(fid));
MPRINT(EM_COPYFILE):   rlen = frlen(fid);
MPRINT(EM_COPYFILE):   rc= fget(fid,line,20000);
MPRINT(EM_COPYFILE):   start = length(line)-length(left(line))+1;
MPRINT(EM_COPYFILE):   line=strip(line);
MPRINT(EM_COPYFILE):   put @start line;
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   if fid > 0 then rc=fclose(fid);
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   run;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   filename _OUTIN;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   file _OUT mod;
MPRINT(EM_DIAGRAM):   put _page_;
MPRINT(EM_DIAGRAM):   put // "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "* Score Output";
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _OUTIN "H:\746\Decision Tree test\Workspaces\EMWS1\Repl2\EMSCORE.out" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   filename _OUTIN;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   file _OUT mod;
MPRINT(EM_DIAGRAM):   put _page_;
MPRINT(EM_DIAGRAM):   put // "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "* Report Output";
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _OUTIN "H:\746\Decision Tree test\Workspaces\EMWS1\Repl2\EMREPORT.out" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   filename _OUTIN;
MPRINT(EM_DIAGRAM):    filename _OUT;
MPRINT(EM_DIAGRAM):    filename _emtool_ 'H:\746\Decision Tree test\Workspaces\EMWS1\Repl2\EMRUNSTATUS.xml' encoding="UTF-8" NOBOM;
22152      proc freq data=EMWS1.Repl2_VariableSet noprint;
MPRINT(EM_DIAGRAM):    proc freq data=EMWS1.Repl2_VariableSet noprint;
22153      table ROLE*LEVEL/out=WORK.Repl2META;
MPRINT(EM_DIAGRAM):   table ROLE*LEVEL/out=WORK.Repl2META;
22154      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 45 observations read from the data set EMWS1.REPL2_VARIABLESET.
NOTE: The data set WORK.REPL2META has 6 observations and 4 variables.
NOTE: PROCEDURE FREQ used (Total process time):
      real time           0.05 seconds
      cpu time            0.03 seconds
 
 
22155      proc print data=WORK.Repl2META label noobs;
MPRINT(EM_DIAGRAM):   proc print data=WORK.Repl2META label noobs;
22156      var ROLE LEVEL COUNT;
MPRINT(EM_DIAGRAM):   var ROLE LEVEL COUNT;
22157      label ROLE = "%sysfunc(sasmsg(sashelp.dmine, meta_role_vlabel, NOQUOTE))" LEVEL = "%sysfunc(sasmsg(sashelp.dmine, meta_level_vlabel, NOQUOTE))" COUNT = "%sysfunc(sasmsg(sashelp.dmine, rpt_count_vlabel, NOQUOTE))";
MPRINT(EM_DIAGRAM):   label ROLE = "Role" LEVEL = "Measurement Level" COUNT = "Frequency Count";
22158      title9 ' ';
MPRINT(EM_DIAGRAM):   title9 ' ';
22159      title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_varSummary_title  , NOQUOTE))";
MPRINT(EM_DIAGRAM):   title10 "Variable Summary";
MPRINT(EM_DIAGRAM):   run;
22160      run;
 
NOTE: There were 6 observations read from the data set WORK.REPL2META.
NOTE: The PROCEDURE PRINT printed page 1.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
22161      title10;
MPRINT(EM_DIAGRAM):   title10;
22162      %let EMEXCEPTIONSTRING=;
MPRINT(EM_DIAGRAM):     *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Repl2: Generation of macros and macro variables;
MPRINT(EM_DIAGRAM):   * To see the code generated, set the EM_DEBUG macro variable to SOURCE or _ALL_;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Repl2: EM Macro Variables and Macros;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   * System Macro Variables;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   length string $2000;
MPRINT(EM_DIAGRAM):   string = 'Decision Tree test';
MPRINT(EM_DIAGRAM):   call symput('EM_PROJECTNAME', trim(string));
MPRINT(EM_DIAGRAM):   string = 'Decision Tree';
MPRINT(EM_DIAGRAM):   call symput('EM_WSNAME', trim(string));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   * Properties Macro Variables ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Files Macro Variables;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Import Macro Variables;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Export Macro Variables;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Decision Macro Variables;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Statement Macro Variables;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   set EMWS1.FIMPORT_EMINFO;
MPRINT(EM_DIAGRAM):   where key in('HPDMSAMPLE', 'IDSTABLE');
MPRINT(EM_DIAGRAM):   if key = 'HPDMSAMPLE' then call symput('_ForceGrid', '1');
MPRINT(EM_DIAGRAM):   else call symput('_IDS_TABLE', DATA);
MPRINT(EM_DIAGRAM):   run;
MPRINT(HPDM_PERFORMANCE):  ;
PERFORMANCE  DETAILS
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Variable Macros;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * General Variable Macros;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Target Variable Macros;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Input Variable Macros;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Rejected Variable Macros;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Misc Variable Macros;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * End Create EM Macro Variables and Macros;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
22517      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
22518      * Repl2: Generation of macros and macro variables;
MPRINT(EM_DIAGRAM):   * Repl2: Generation of macros and macro variables;
22519      * To see the code generated, set the EM_DEBUG macro variable to SOURCE or _ALL_;
MPRINT(EM_DIAGRAM):   * To see the code generated, set the EM_DEBUG macro variable to SOURCE or _ALL_;
22520      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
 
22521      %let EMEXCEPTIONSTRING=;
22522      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
22523      * TRAIN: Repl2;
MPRINT(EM_DIAGRAM):   * TRAIN: Repl2;
22524      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
22525      %let EM_ACTION = TRAIN;
22526      %let syscc = 0;
22527      filename x CATALOG 'SASHELP.EMUTIL.EM_VARMACRO.SOURCE';
MPRINT(EM_DIAGRAM):     filename x CATALOG 'SASHELP.EMUTIL.EM_VARMACRO.SOURCE';
22528      %inc x;
NOTE: %INCLUDE (level 1) file X is file SASHELP.EMUTIL.EM_VARMACRO.SOURCE.
22529     +
22530     +%macro em_varMacro(name=emMacro, metadata=, where=, key=NAME, nummacro=);
22531     +
22532     +   filename macFile catalog 'work.emutil.macro.source';
22533     +   %let _METAOBS = 0;
22534     +
22535     +   %if (%sysfunc(exist(&metadata))<1 and %sysfunc(exist(&metadata, VIEW))<1)
22536     +                   or (&metadata eq ) %then %do;
22537     +       %put * No metadata data set defined;
22538     +       %goto doend;
22539     +   %end;
22540     +
22541     +   data _null_;
22542     +      length _STRING_ $80;
22543     +      retain _STRING_;
22544     +      set &metadata end=eof;
22545     +      file macFile;
22546     +      %if %nrbquote(&where) ne %then %do;
22547     +          %let whereClause = where (%nrbquote(&where));
22548     +          %unquote(&whereClause);
22549     +      %end;
22550     +      if _N_=1 then do;
22551     +         string = "%"!!"macro &name;";
22552     +         put string;
22553     +      end;
22554     +      if (length(_STRING_) + length(trim(&key))+ 1 < 80) then do;
22555     +         _STRING_ = trim(_STRING_)!!' '!!trim(&key);
22556     +         if eof then do;
22557     +            put _STRING_;
22558     +            string = "%"!!"mend &name;";
22559     +            put string;
22560     +            %if (&nummacro ne ) %then %do;
22561     +                string = strip(put(_N_, best.));
22562     +                put "%" "global &nummacro;";
22563     +                put "%" "let &nummacro = " string ";";
22564     +                call symput('_METAOBS', string);
22565     +            %end;
22566     +         end;
22567     +      end;
22568     +      else do;
22569     +         put _STRING_;
22570     +         _string_ = TRIM(&key);
22571     +         if eof then do;
22572     +            put _STRING_;
22573     +            string = "%"!!"mend &name;";
22574     +            put string;
22575     +        end;
22576     +      end;
22577     +      if eof then do;
22578     +         string = strip(put(_N_, best.));
22579     +         call symput('_METAOBS', string);
22580     +         %if (&nummacro ne ) %then %do;
22581     +             put "%" "global &nummacro;";
22582     +             put "%" "let &nummacro = " string ";";
22583     +         %end;
22584     +      end;
22585     +   run;
22586     +
22587     +   %doend:
22588     +   %if ^&_METAOBS %then %do;
22589     +       data _null_;
22590     +          file macFile;
22591     +          put "%" "macro &name;";
22592     +          put "%" "mend &name;";
22593     +          %if (&nummacro ne ) %then %do;
22594     +              put "%" "global &nummacro;";
22595     +              put "%" "let &nummacro = 0;";
22596     +          %end;
22597     +      run;
22598     +   %end;
22599     +   %inc macFile;
22600     +   filename macFile;
22601     +%mend em_varMacro;
NOTE: %INCLUDE (level 1) ending.
22602      filename X;
MPRINT(EM_DIAGRAM):   filename X;
NOTE: Fileref X has been deassigned.
22603       %macro main;
22604
22605         filename temp catalog 'sashelp.emmdfy.Replace_macros.source';
22606         %include temp;
22607         filename temp;
22608
22609         %if %upcase(&EM_ACTION) = CREATE %then %do;
22610
22611             filename temp catalog 'sashelp.emmdfy.Replace_create.source';
22612             %include temp;
22613             filename temp;
22614             %create;
22615         %end;
22616         %else
22617         %if %upcase(&EM_ACTION) = TRAIN %then %do;
22618
22619             filename temp catalog 'sashelp.emmdfy.Replace_train.source';
22620             %include temp;
22621             filename temp;
22622             %train;
22623         %end;
22624         %else
22625         %if %upcase(&EM_ACTION) = SCORE %then %do;
22626
22627             filename temp catalog 'sashelp.emmdfy.Replace_score.source';
22628             %include temp;
22629             filename temp;
22630             %score;
22631         %end;
22632         %if %upcase(&EM_ACTION) = REPORT %then %do;
22633
22634             filename temp catalog 'sashelp.emmdfy.Replace_report.source';
22635             %include temp;
22636             filename temp;
22637             %report;
22638         %end;
22639         %if %upcase(&EM_ACTION) = OPENOUTCLASSTABLE %then %do;
22640             filename temp catalog 'sashelp.emmdfy.replace_makeoutclass.source';
22641             %include temp;
22642             filename temp;
22643             %em_replace_openoutclass;
22644         %end;
22645         %if %upcase(&EM_ACTION) = CLOSEOUTCLASSTABLE %then %do;
22646             filename temp catalog 'sashelp.emmdfy.replace_makeoutclass.source';
22647             %include temp;
22648             filename temp;
22649             %em_replace_closeoutclass;
22650         %end;
22651      %mend main;
22652
22653      %main;
MPRINT(MAIN):   filename temp catalog 'sashelp.emmdfy.Replace_macros.source';
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMMDFY.REPLACE_MACROS.SOURCE.
22654     +%macro SetProperties;
22655     +   %em_checkmacro(name=EM_PROPERTY_UNKNOWNLEVEL,    global=Y, value=MODE);
22656     +   %em_checkmacro(name=EM_PROPERTY_CALCMETHOD,      global=Y, value=NONE);
22657     +   %em_checkmacro(name=EM_PROPERTY_PERCENTSCUTOFF,  global=Y, value=0.5);
22658     +   %em_checkmacro(name=EM_PROPERTY_SPACINGSCUTOFF,  global=Y, value=9);
22659     +   %em_checkMacro(name=EM_PROPERTY_MADSCUTOFF,      global=Y, value=9);
22660     +   %em_checkMacro(name=EM_PROPERTY_STDDEVCUTOFF,    global=Y, value=3);
22661     +   %em_checkmacro(name=EM_PROPERTY_REPLACEMETHOD,   global=Y, value=COMPUTED);
22662     +   %em_checkmacro(name=EM_PROPERTY_HIDEVARIABLE,    global=Y, value=N);
22663     +   %em_checkmacro(name=EM_PROPERTY_INTERVALMETHOD,  global=Y, value=NONE);
22664     +   %em_checkmacro(name=EM_PROPERTY_REPORTCOUNT,     global=Y, value=Y);
22665     +
22666     +%mend SetProperties;
22667     +
NOTE: %INCLUDE (level 1) ending.
MPRINT(MAIN):   filename temp;
NOTE: Fileref TEMP has been deassigned.
MPRINT(MAIN):   filename temp catalog 'sashelp.emmdfy.Replace_train.source';
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMMDFY.REPLACE_TRAIN.SOURCE.
22668     +%macro getLevels(outData=);
22669     +   %if (%EM_BINARY_TARGET %EM_ORDINAL_TARGET %EM_NOMINAL_TARGET
22670     +       %EM_BINARY_INPUT %EM_ORDINAL_INPUT %EM_NOMINAL_INPUT
22671     +       %EM_BINARY_REJECTED %EM_ORDINAL_REJECTED %EM_NOMINAL_REJECTED) eq %then %do;
22672     +       data &outData;
22673     +          length NAME $32 LEVEL $8 FREQUENCY 8 TYPE $1 CRAW $8 NRAW 8 REPLACE_VALUE $200;
22674     +          label NAME =     "%sysfunc(sasmsg(sashelp.dmine, rpt_variable_vlabel, NOQUOTE))"
22675     +                LEVEL=     "%sysfunc(sasmsg(sashelp.dmine, rpt_fmtValue_vlabel, NOQUOTE))"
22676     +                FREQUENCY= "%sysfunc(sasmsg(sashelp.dmine, rpt_count_vlabel, NOQUOTE))"
22677     +                TYPE=      "%sysfunc(sasmsg(sashelp.dmine, meta_type_vlabel, NOQUOTE))"
22678     +                CRAW=      "%sysfunc(sasmsg(sashelp.dmine, rpt_craw_vlabel, NOQUOTE))"
22679     +                NRAW=      "%sysfunc(sasmsg(sashelp.dmine, rpt_nraw_vlabel, NOQUOTE))"
22680     +                REPLACE_VALUE= "%sysfunc(sasmsg(sashelp.dmine, rpt_replace_vlabel, NOQUOTE))";
22681     +          stop;
22682     +       run;
22683     +   %end;
22684     +   %else %do;
22685     +       %em_checkmacro(name=EM_TRAIN_MAXLEVELS, global=Y, value=512);
22686     +        %if "&EM_TRAIN_MAXLEVELS" = "" or "&EM_TRAIN_MAXLEVELS" = "." %then
22687     +            %let EM_TRAIN_MAXLEVELS= 512;
22688     +
22689     +        proc dmdb data=&EM_IMPORT_DATA dmdbcat=emdmdb maxlevel=&EM_TRAIN_MAXLEVELS nonorm CLASSOUT=&outData(drop=CODE FREQPERCENT NMISSPERCENT);
22690     +          class
22691     +            %EM_BINARY_TARGET
22692     +            %EM_ORDINAL_TARGET
22693     +            %EM_NOMINAL_TARGET
22694     +            %EM_BINARY_INPUT
22695     +            %EM_ORDINAL_INPUT
22696     +            %EM_NOMINAL_INPUT
22697     +            %EM_BINARY_REJECTED
22698     +            %EM_ORDINAL_REJECTED
22699     +            %EM_NOMINAL_REJECTED;
22700     +          %if (%EM_FREQ ne ) %then %do;
22701     +             freq %EM_FREQ;
22702     +         %end;
22703     +       run;
22704     +   %end;
22705     +%mend getLevels;
22706     +
22707     +%macro makeOutCLass;
22708     +   %em_getname(key=OUTCLASS,  type=DATA);
22709     +   %em_getname(key=NEWVALUES, type=DATA);
22710     +
22711     +   %let data= REPLACE_DATA;
22712     +   %if %sysfunc(exist(&EM_USER_OUTCLASS)) %then %do;
22713     +       data &data(rename=(REPLACE_VALUE=NEW_REPLACE_VALUE));
22714     +          set &EM_USER_OUTCLASS;
22715     +          keep NAME TYPE LEVEL REPLACE_VALUE;
22716     +          where REPLACE_VALUE ne '';
22717     +       run;
22718     +       proc sort data=&Data;
22719     +          by NAME TYPE LEVEL;
22720     +       run;
22721     +   %end;
22722     +
22723     +   %getLevels(outdata=&EM_USER_OUTCLASS);
22724     +
22725     +   /* Determine Mode */
22726     +   proc sort data=&EM_USER_OUTCLASS;
22727     +      by NAME DESCENDING FREQUENCY;
22728     +   run;
22729     +   data _null_;
22730     +      dsid = open("&EM_USER_OUTCLASS");
22731     +      levelLen = varlen(dsid, varnum(dsid, "LEVEL"));
22732     +      dsid = close(dsid);
22733     +      call symput("levelLen", put(max(levelLen, 9), BEST.));
22734     +   run;
22735     +
22736     +   data &EM_USER_OUTCLASS;
22737     +      length Name $32 LEVEL $&levelLen;
22738     +      set &EM_USER_OUTCLASS;
22739     +      length REPLACE_VALUE $200;
22740     +      label REPLACE_VALUE="%sysfunc(sasmsg(sashelp.dmine, rpt_replace_vlabel, NOQUOTE))";
22741     +      by NAME;
22742     +      output;
22743     +      if last.name then do;
22744     +         LEVEL="_UNKNOWN_";
22745     +         Frequency=.;
22746     +         CRAW='';
22747     +         NRAW=.;
22748     +         REPLACE_VALUE="_DEFAULT_";
22749     +         output;
22750     +      end;
22751     +   run;
22752     +
22753     +   /* If the file is a copy of an existing one.  Merge previously specified values */
22754     +   %if %sysfunc(exist(&EM_USER_NEWVALUES)) and (&EM_USER_NEWVALUES ne ) %then %do;
22755     +       proc sort data=&EM_USER_NEWVALUES(rename=(REPLACE_VALUE=NEW_REPLACE_VALUE));
22756     +          by NAME TYPE LEVEL;
22757     +       run;
22758     +       proc sort data=&EM_USER_OUTCLASS;
22759     +          by NAME TYPE LEVEL;
22760     +       run;
22761     +       data &EM_USER_OUTCLASS(drop=NEW_REPLACE_VALUE);
22762     +          merge &EM_USER_OUTCLASS(in=_a) &EM_USER_NEWVALUES(in=_b);
22763     +          by NAME TYPE LEVEL;
22764     +          if _a then do;
22765     +             if _b then REPLACE_VALUE=NEW_REPLACE_VALUE;
22766     +             output;
22767     +          end;
22768     +       run;
22769     +       %let lib    = %scan(&EM_USER_NEWVALUES, 1, .);
22770     +       %let member = %scan(&EM_USER_NEWVALUES, 2, .);
22771     +       proc datasets lib=&lib nolist;
22772     +          delete &member;
22773     +       run;
22774     +
22775     +   %end;
22776     +
22777     +   /*  Update the OUTCLASS data using REPLACEMENT values previously specified */
22778     +   %if %sysfunc(exist(&Data)) %then %do;
22779     +       proc sort data=&EM_USER_OUTCLASS;
22780     +          by NAME TYPE LEVEL;
22781     +       run;
22782     +       proc sort data=&data;
22783     +          by NAME TYPE LEVEL;
22784     +       run;
22785     +       data &EM_USER_OUTCLASS(drop=NEW_REPLACE_VALUE);
22786     +          merge &EM_USER_OUTCLASS(in=_a) &Data(in=_b);
22787     +          by NAME TYPE LEVEL;
22788     +          if _a then do;
22789     +             if _b then REPLACE_VALUE=NEW_REPLACE_VALUE;
22790     +             output;
22791     +          end;
22792     +       run;
22793     +   %end;
22794     +   proc sort data=&EM_USER_OUTCLASS;
22795     +      by NAME DESCENDING FREQUENCY;
22796     +   run;
22797     +
22798     +   %let lib = WORK;
22799     +   %if %index(&EM_USER_OUTCLASS, .) %then %do;
22800     +       %let lib    = %scan(&EM_USER_OUTCLASS, 1, .);
22801     +       %let member = %scan(&EM_USER_OUTCLASS, 2, .);
22802     +   %end;
22803     +   %else
22804     +       %let member = &EM_USER_OUTCLASS;
22805     +
22806     +   proc datasets lib=&lib nolist;
22807     +      modify &member;
22808     +      label NAME =     "%sysfunc(sasmsg(sashelp.dmine, rpt_variable_vlabel, NOQUOTE))"
22809     +            LEVEL=     "%sysfunc(sasmsg(sashelp.dmine, rpt_fmtValue_vlabel, NOQUOTE))"
22810     +            FREQUENCY= "%sysfunc(sasmsg(sashelp.dmine, rpt_count_vlabel, NOQUOTE))"
22811     +            TYPE=      "%sysfunc(sasmsg(sashelp.dmine, meta_type_vlabel, NOQUOTE))"
22812     +            CRAW=      "%sysfunc(sasmsg(sashelp.dmine, rpt_craw_vlabel, NOQUOTE))"
22813     +            NRAW=      "%sysfunc(sasmsg(sashelp.dmine, rpt_nraw_vlabel, NOQUOTE))"
22814     +            REPLACE_VALUE= "%sysfunc(sasmsg(sashelp.dmine, rpt_replace_vlabel, NOQUOTE))";
22815     +     %if %sysfunc(exist(&data)) %then %do;
22816     +          delete &data;
22817     +     %end;
22818     +   run;
22819     +
22820     +   /* Create property file.  Only the records with non-missing REPLACE_VALUE */
22821     +   data &EM_USER_NEWVALUES / view=&EM_USER_NEWVALUES;
22822     +      set &EM_USER_OUTCLASS(in=_a);
22823     +      where REPLACE_VALUE ne '';
22824     +      keep NAME TYPE LEVEL REPLACE_VALUE;
22825     +   run;
22826     +%mend makeOutClass;
22827     +
22828     +%macro makeVarLimits;
22829     +     %let madsString =;
22830     +     %stdize(data=&em_import_data, metadata=VARIABLESET, method=MADS,     outStat=work.MADS);
22831     +     %if %sysfunc(exist(work.MADS)) %then %do;
22832     +         %makeLimits(StatsDs=work.MADS, cutoff=&EM_PROPERTY_MADSCUTOFF, method=MADS);
22833     +         %let madsString = MADS;
22834     +         proc append base=work.LIMITS data=work.MADS force;
22835     +         run;
22836     +     %end;
22837     +
22838     +     %let spacingString = ;
22839     +     %stdize(data=&em_import_data, metadata=VARIABLESET, method=SPACINGS, outStat=work.SPACINGS);
22840     +     %if %sysfunc(exist(work.SPACINGS)) %then %do;
22841     +         %makeLimits(StatsDs=work.SPACINGS, cutoff=&EM_PROPERTY_SPACINGSCUTOFF, method=SPACINGS);
22842     +         %let spacingString = SPACING;
22843     +         proc append base=work.LIMITS data=work.SPACINGS force;
22844     +         run;
22845     +     %end;
22846     +
22847     +     %let percentString = ;
22848     +     %stdize(data=&em_import_data, metadata=VARIABLESET, method=PERCENTS, outStat=work.PERCENTS);
22849     +     %if %sysfunc(exist(work.PERCENTS)) %then %do;
22850     +         %makePctLimits(StatsDs=work.PERCENTS);
22851     +         %let percentString = PERCENTS;
22852     +         proc append base=work.LIMITS data=work.PERCENTS(keep=NAME CALCMETHOD UPPERLIMIT LOWERLIMIT LABEL) force ;
22853     +         run;
22854     +     %end;
22855     +
22856     +     %makeFixedLimits(StatsDs=work.FIXED);
22857     +     %if %sysfunc(exist(work.FIXED)) %then %do;
22858     +         proc append base=work.LIMITS data=work.FIXED(keep=NAME CALCMETHOD UPPERLIMIT LOWERLIMIT LABEL) force ;
22859     +         run;
22860     +     %end;
22861     +
22862     +     %if %sysfunc(exist(work.LIMITS)) %then %do;
22863     +         proc sort data=work.LIMITS;
22864     +            by NAME;
22865     +         run;
22866     +         %em_getName(key=LIMITS, type=DATA);
22867     +         data &EM_USER_LIMITS;
22868     +              merge work.limits(in=_a) variableSet(keep=NAME ROLE LEVEL LABEL REPLACEMETHOD REPLACEMIN REPLACEMAX LABEL);
22869     +              by NAME;
22870     +              if _a then output;
22871     +         run;
22872     +     %end;
22873     +
22874     +
22875     +
22876     +     %if %upcase(&EM_DEBUG)=_ALL_ %then %do;
22877     +          proc print data=&EM_USER_OUTCLASS;run;
22878     +          proc print data=MADS;run;
22879     +          proc print data=spacings;run;
22880     +          proc print data=percents;run;
22881     +          proc print data=limits;run;
22882     +     %end;
22883     +     proc datasets lib=work nolist;
22884     +        delete &madsString &spacingString &percentString limits;
22885     +     run;
22886     +%mend makeVarLimits;
22887     +
22888     +%macro stdize(data=, metadata=, method=, outStat=work.StdizeStat);
22889     +
22890     +    %if &method ne PERCENTS %then %do;
22891     +        %em_varmacro(Name=&method, metadata=&metadata,
22892     +                  where=%nrbquote(CALCMETHOD="&method"));
22893     +    %end;
22894     +    %else %do;
22895     +        %em_varmacro(Name=&method, metadata=&metadata,
22896     +        where=%nrbquote(CALCMETHOD in("STDDEV", "PERCENTS")));
22897     +    %end;
22898     +    %if %&method eq %then %goto doend;
22899     +
22900     +    %let optionString=&method;
22901     +
22902     +    %if &method=MADS %then %let optionString = %nrbquote(method=MAD NORM);
22903     +    %else
22904     +        %if &method=SPACINGS %then %let optionString = %nrbquote(method=spacing(50) NORM);
22905     +        %else
22906     +           %if &method=PERCENTS %then %do;
22907     +               %let uCutoff = %sysevalf(100-&em_property_percentsCutoff);
22908     +               %let optionString = pctlpts=&em_property_PercentsCutoff &uCutoff;
22909     +           %end;
22910     +
22911     +    &em_codebar;
22912     +    * &EM_NODEID: Method &em_property_method;
22913     +    &EM_codebar;
22914     +    proc stdize data=&data outstat=&outstat out=_null_
22915     +       &optionString
22916     +       ;
22917     +       var  %&method;
22918     +       %if %em_freq ne %then %do;
22919     +           freq %em_freq;
22920     +       %end;
22921     +    run;
22922     +
22923     +    %if &method=MADS or &method=SPACINGS %then %do;
22924     +        proc transpose data=&outStat out=&outStat(drop=_LABEL_ rename=(_NAME_=NAME col1=LOCATION col2=SCALE));
22925     +           where _TYPE_ in('LOCATION', 'SCALE');
22926     +        run;
22927     +    %end;
22928     +    %else
22929     +        %if &method=PERCENTS %then %do;
22930     +            proc transpose data=&outStat out=&outStat(drop=_LABEL_ rename=(_NAME_=NAME col1=LOCATION col2=SCALE col3=PMin col4=PMax));
22931     +               where _TYPE_ ^in ('ADD', 'MULT', 'N', 'SumFreqsRead', 'SumFreqsUsed', 'NObsRead', 'NObsUsed', 'NObsMiss');
22932     +           run;
22933     +       %end;
22934     +   %doend:
22935     +%mend stdize;
22936     +
22937     +%macro makeLimits(StatsDs=, cutoff=, method=);
22938     +    %if ^%sysfunc(exist(&StatSDs)) %then %goto doendm;
22939     +    data &StatsDs;
22940     +       set &StatsDs;
22941     +       length CALCMETHOD $10;
22942     +       retain CALCMETHOD "&METHOD";
22943     +       LowerLimit = location - &cutoff*scale;
22944     +       UpperLimit = location + &cutoff*scale;
22945     +       drop location scale;
22946     +       Label LowerLimit =  "%sysfunc(sasmsg(sashelp.dmine, meta_lowerLimit_vlabel, NOQUOTE))"
22947     +             UpperLimit =  "%sysfunc(sasmsg(sashelp.dmine, meta_upperLimit_vlabel, NOQUOTE))";
22948     +    run;
22949     +
22950     +    %doendm:
22951     +%mend makeLimits;
22952     +
22953     +%macro makeFixedLimits(statsDs=);
22954     +    data &statsDs;
22955     +       set VARIABLESET(where=(CALCMETHOD in('MANUAL', 'METALIMIT')) keep=NAME CALCMETHOD UPPERLIMIT LOWERLIMIT INTERVALMIN INTERVALMAX LABEL);
22956     +       by NAME;
22957     +       select(CALCMETHOD);
22958     +          when('METALIMIT') do;
22959     +             if UPPERLIMIT eq . and LOWERLIMIT eq . then delete;
22960     +          end;
22961     +          when('MANUAL') do;
22962     +             if INTERVALMIN eq . and INTERVALMAX eq . then delete;
22963     +             else do;
22964     +                LOWERLIMIT = INTERVALMIN;
22965     +                UPPERLIMIT = INTERVALMAX;
22966     +             end;
22967     +          end;
22968     +          otherwise;
22969     +       end;
22970     +    run;
22971     +    %let nobs=0;
22972     +    %let dsid = %sysfunc(open(&statsDs));
22973     +    %if &dsid>0 %then %do;
22974     +        %let nobs = %sysfunc(attrn(&dsid, NOBS));
22975     +        %let dsid = %sysfunc(close(&dsid));
22976     +    %end;
22977     +    %if ^&nobs %then %do;
22978     +        %let nameDs = %scan(&statsDs, 2, .);
22979     +        proc datasets lib=WORK nolist;
22980     +           delete &nameDs;
22981     +         run;
22982     +    %end;
22983     +
22984     +%mend makeFixedLimits;
22985     +
22986     +%macro makePctLimits(StatsDs=);
22987     +    %if ^%sysfunc(exist(&StatSDs)) %then %goto doendp;
22988     +    data &statsDs;
22989     +       merge &statsDs VARIABLESET(where=(CALCMETHOD in('PERCENTS', 'STDDEV')) keep=NAME CALCMETHOD UPPERLIMIT LOWERLIMIT INTERVALMIN INTERVALMAX LABEL);
22990     +       by NAME;
22991     +       select(CALCMETHOD);
22992     +          when('PERCENTS') do;
22993     +             if PMIN eq . and PMAX eq . then delete;
22994     +             else do;
22995     +                LOWERLIMIT = PMIN;
22996     +                UPPERLIMIT = PMAX;
22997     +             end;
22998     +          end;
22999     +          when('STDDEV') do;
23000     +              LOWERLIMIT = LOCATION - (&EM_PROPERTY_STDDEVCUTOFF*SCALE);
23001     +              UPPERLIMIT = LOCATION + (&EM_PROPERTY_STDDEVCUTOFF*SCALE);
23002     +          end;
23003     +          otherwise;
23004     +       end;
23005     +    run;
23006     +   %doendp:
23007     +%mend makePctLimits;
23008     +
23009     +%macro train;
23010     +
23011     +   %if "&em_import_data" eq "" %then %do;
23012     +       %let emexceptionString = exception.server.IMPORT.NOTRAIN,1;
23013     +       %goto doendm;
23014     +   %end;
23015     +
23016     +    /* Process Class variables */
23017     +    %makeOutClass;
23018     +
23019     +    /* Interval Variables */
23020     +     data VARIABLESET;
23021     +        set &EM_DATA_VARIABLESET(where=(LEVEL="INTERVAL" and ((ROLE in("REJECTED", "TARGET") and USE="Y")
23022     +             or (ROLE="INPUT" and USE in("Y", "D")) )));
23023     +        if CALCMETHOD eq "DEFAULT" then CALCMETHOD="&EM_PROPERTY_CALCMETHOD";
23024     +        if CALCMETHOD ^in("NONE", "METALIMIT") or (CALCMETHOD eq "METALIMIT" and ^(LOWERLIMIT eq . and UPPERLIMIT eq .)) then output;
23025     +     run;
23026     +     proc sort data=VARIABLESET out=VARIABLESET;
23027     +        by NAME;
23028     +     run;
23029     +
23030     +     %let varnum=0;
23031     +     %let dsid = %sysfunc(open(VARIABLESET));
23032     +     %if &dsid>0 %then %do;
23033     +         %let varnum = %sysfunc(attrn(&dsid, NOBS));
23034     +         %let dsid = %sysfunc(close(&dsid));
23035     +     %end;
23036     +     %if ^&varnum %then %do;
23037     +          %em_getName(key=LIMITS, type=DATA);
23038     +          %let limitDs = %scan(&em_user_limits, 2, .);
23039     +          proc datasets lib=&em_lib nolist;
23040     +             delete &limitDs;
23041     +          run;
23042     +     %end;
23043     +     %else %do;
23044     +         %makeVarLimits;
23045     +     %end;
23046     +
23047     +   %doendm:
23048     +
23049     +%mend train;
NOTE: %INCLUDE (level 1) ending.
MPRINT(MAIN):   filename temp;
NOTE: Fileref TEMP has been deassigned.
MPRINT(MAKEOUTCLASS):  ;
MPRINT(MAKEOUTCLASS):  ;
MPRINT(MAKEOUTCLASS):   data REPLACE_DATA(rename=(REPLACE_VALUE=NEW_REPLACE_VALUE));
MPRINT(MAKEOUTCLASS):   set EMWS1.Repl2_OUTCLASS;
MPRINT(MAKEOUTCLASS):   keep NAME TYPE LEVEL REPLACE_VALUE;
MPRINT(MAKEOUTCLASS):   where REPLACE_VALUE ne '';
MPRINT(MAKEOUTCLASS):   run;
 
NOTE: There were 36 observations read from the data set EMWS1.REPL2_OUTCLASS.
      WHERE REPLACE_VALUE not = ' ';
NOTE: The data set WORK.REPLACE_DATA has 36 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.02 seconds
      cpu time            0.01 seconds
 
 
MPRINT(MAKEOUTCLASS):   proc sort data=REPLACE_DATA;
MPRINT(MAKEOUTCLASS):   by NAME TYPE LEVEL;
MPRINT(MAKEOUTCLASS):   run;
 
NOTE: There were 36 observations read from the data set WORK.REPLACE_DATA.
NOTE: The data set WORK.REPLACE_DATA has 36 observations and 4 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(GETLEVELS):  ;
MPRINT(GETLEVELS):   proc dmdb data=EMWS1.Trans_TRAIN dmdbcat=emdmdb maxlevel=512 nonorm CLASSOUT=EMWS1.Repl2_OUTCLASS(drop=CODE FREQPERCENT NMISSPERCENT);
MPRINT(GETLEVELS):   class
MPRINT(EM_BINARY_TARGET):   Risk
MPRINT(EM_BINARY_INPUT):   M_bore M_num_of_doors M_price M_stroke
MPRINT(EM_NOMINAL_INPUT):   IMP_num_of_doors aspiration body_style drive_wheels engine_location engine_type fuel_system fuel_type num_of_cylinders
MPRINT(GETLEVELS):  ;
MPRINT(GETLEVELS):   run;
 
NOTE: Records processed = 100   Memory used = 511K.
NOTE: There were 100 observations read from the data set EMWS1.PART_TRAIN.
NOTE: There were 100 observations read from the data set EMWS1.IMPT_TRAIN.
NOTE: View EMWS1.TRANS_TRAIN.VIEW used (Total process time):
      real time           0.19 seconds
      cpu time            0.14 seconds
 
NOTE: There were 100 observations read from the data set EMWS1.REPL_TRAIN.
NOTE: There were 100 observations read from the data set EMWS1.TRANS_TRAIN.
NOTE: The data set EMWS1.REPL2_OUTCLASS has 42 observations and 6 variables.
NOTE: PROCEDURE DMDB used (Total process time):
      real time           0.26 seconds
      cpu time            0.18 seconds
 
 
MPRINT(MAKEOUTCLASS):  ;
MPRINT(MAKEOUTCLASS):   proc sort data=EMWS1.Repl2_OUTCLASS;
MPRINT(MAKEOUTCLASS):   by NAME DESCENDING FREQUENCY;
MPRINT(MAKEOUTCLASS):   run;
 
NOTE: There were 42 observations read from the data set EMWS1.REPL2_OUTCLASS.
NOTE: The data set EMWS1.REPL2_OUTCLASS has 42 observations and 6 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.08 seconds
      cpu time            0.01 seconds
 
 
MPRINT(MAKEOUTCLASS):   data _null_;
MPRINT(MAKEOUTCLASS):   dsid = open("EMWS1.Repl2_OUTCLASS");
MPRINT(MAKEOUTCLASS):   levelLen = varlen(dsid, varnum(dsid, "LEVEL"));
MPRINT(MAKEOUTCLASS):   dsid = close(dsid);
MPRINT(MAKEOUTCLASS):   call symput("levelLen", put(max(levelLen, 9), BEST.));
MPRINT(MAKEOUTCLASS):   run;
 
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(MAKEOUTCLASS):   data EMWS1.Repl2_OUTCLASS;
MPRINT(MAKEOUTCLASS):   length Name $32 LEVEL $ 12;
MPRINT(MAKEOUTCLASS):   set EMWS1.Repl2_OUTCLASS;
MPRINT(MAKEOUTCLASS):   length REPLACE_VALUE $200;
MPRINT(MAKEOUTCLASS):   label REPLACE_VALUE= "Replacement Value";
MPRINT(MAKEOUTCLASS):   by NAME;
MPRINT(MAKEOUTCLASS):   output;
MPRINT(MAKEOUTCLASS):   if last.name then do;
MPRINT(MAKEOUTCLASS):   LEVEL="_UNKNOWN_";
MPRINT(MAKEOUTCLASS):   Frequency=.;
MPRINT(MAKEOUTCLASS):   CRAW='';
MPRINT(MAKEOUTCLASS):   NRAW=.;
MPRINT(MAKEOUTCLASS):   REPLACE_VALUE="_DEFAULT_";
MPRINT(MAKEOUTCLASS):   output;
MPRINT(MAKEOUTCLASS):   end;
MPRINT(MAKEOUTCLASS):   run;
 
NOTE: There were 42 observations read from the data set EMWS1.REPL2_OUTCLASS.
NOTE: The data set EMWS1.REPL2_OUTCLASS has 56 observations and 7 variables.
NOTE: DATA statement used (Total process time):
      real time           0.07 seconds
      cpu time            0.01 seconds
 
 
MPRINT(MAKEOUTCLASS):   proc sort data=EMWS1.Repl2_OUTCLASS;
MPRINT(MAKEOUTCLASS):   by NAME TYPE LEVEL;
MPRINT(MAKEOUTCLASS):   run;
 
NOTE: There were 56 observations read from the data set EMWS1.REPL2_OUTCLASS.
NOTE: The data set EMWS1.REPL2_OUTCLASS has 56 observations and 7 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.08 seconds
      cpu time            0.00 seconds
 
 
MPRINT(MAKEOUTCLASS):   proc sort data=REPLACE_DATA;
MPRINT(MAKEOUTCLASS):   by NAME TYPE LEVEL;
MPRINT(MAKEOUTCLASS):   run;
 
NOTE: Input data set is already sorted, no sorting done.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(MAKEOUTCLASS):   data EMWS1.Repl2_OUTCLASS(drop=NEW_REPLACE_VALUE);
MPRINT(MAKEOUTCLASS):   merge EMWS1.Repl2_OUTCLASS(in=_a) REPLACE_DATA(in=_b);
MPRINT(MAKEOUTCLASS):   by NAME TYPE LEVEL;
MPRINT(MAKEOUTCLASS):   if _a then do;
MPRINT(MAKEOUTCLASS):   if _b then REPLACE_VALUE=NEW_REPLACE_VALUE;
MPRINT(MAKEOUTCLASS):   output;
MPRINT(MAKEOUTCLASS):   end;
MPRINT(MAKEOUTCLASS):   run;
 
NOTE: There were 56 observations read from the data set EMWS1.REPL2_OUTCLASS.
NOTE: There were 36 observations read from the data set WORK.REPLACE_DATA.
NOTE: The data set EMWS1.REPL2_OUTCLASS has 56 observations and 7 variables.
NOTE: DATA statement used (Total process time):
      real time           0.07 seconds
      cpu time            0.01 seconds
 
 
MPRINT(MAKEOUTCLASS):   proc sort data=EMWS1.Repl2_OUTCLASS;
MPRINT(MAKEOUTCLASS):   by NAME DESCENDING FREQUENCY;
MPRINT(MAKEOUTCLASS):   run;
 
NOTE: There were 56 observations read from the data set EMWS1.REPL2_OUTCLASS.
NOTE: The data set EMWS1.REPL2_OUTCLASS has 56 observations and 7 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.08 seconds
      cpu time            0.01 seconds
 
 
MPRINT(MAKEOUTCLASS):   proc datasets lib=EMWS1 nolist;
MPRINT(MAKEOUTCLASS):   modify Repl2_OUTCLASS;
MPRINT(MAKEOUTCLASS):   label NAME = "Variable" LEVEL= "Formatted Value" FREQUENCY= "Frequency Count" TYPE= "Type" CRAW= "Character Unformatted Value" NRAW= "Numeric Value" REPLACE_VALUE= "Replacement Value";
NOTE: MODIFY was successful for EMWS1.REPL2_OUTCLASS.DATA.
MPRINT(MAKEOUTCLASS):   delete REPLACE_DATA;
MPRINT(MAKEOUTCLASS):   run;
 
NOTE: The file EMWS1.REPLACE_DATA (memtype=DATA) was not found, but appears on a DELETE statement.
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           3.40 seconds
      cpu time            0.45 seconds
 
 
MPRINT(MAKEOUTCLASS):   data EMWS1.Repl2_NEWVALUES / view=EMWS1.Repl2_NEWVALUES;
MPRINT(MAKEOUTCLASS):   set EMWS1.Repl2_OUTCLASS(in=_a);
MPRINT(MAKEOUTCLASS):   where REPLACE_VALUE ne '';
MPRINT(MAKEOUTCLASS):   keep NAME TYPE LEVEL REPLACE_VALUE;
MPRINT(MAKEOUTCLASS):   run;
 
NOTE: DATA STEP view saved on file EMWS1.REPL2_NEWVALUES.
NOTE: A stored DATA STEP view cannot run under a different operating system.
NOTE: DATA statement used (Total process time):
      real time           0.07 seconds
      cpu time            0.00 seconds
 
 
MPRINT(TRAIN):  ;
MPRINT(TRAIN):   data VARIABLESET;
MPRINT(TRAIN):   set EMWS1.Repl2_VariableSet(where=(LEVEL="INTERVAL" and ((ROLE in("REJECTED", "TARGET") and USE="Y") or (ROLE="INPUT" and USE in("Y", "D")) )));
MPRINT(TRAIN):   if CALCMETHOD eq "DEFAULT" then CALCMETHOD="NONE";
MPRINT(TRAIN):   if CALCMETHOD ^in("NONE", "METALIMIT") or (CALCMETHOD eq "METALIMIT" and ^(LOWERLIMIT eq . and UPPERLIMIT eq .)) then output;
MPRINT(TRAIN):   run;
 
NOTE: There were 14 observations read from the data set EMWS1.REPL2_VARIABLESET.
      WHERE (LEVEL='INTERVAL') and ((ROLE in ('REJECTED', 'TARGET') and (USE='Y')) or ((ROLE='INPUT') and USE in ('D', 'Y')));
NOTE: The data set WORK.VARIABLESET has 0 observations and 35 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(TRAIN):   proc sort data=VARIABLESET out=VARIABLESET;
MPRINT(TRAIN):   by NAME;
MPRINT(TRAIN):   run;
 
NOTE: Input data set is empty.
NOTE: The data set WORK.VARIABLESET has 0 observations and 35 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
MPRINT(TRAIN):  ;
MPRINT(TRAIN):   proc datasets lib=EMWS1 nolist;
MPRINT(TRAIN):   delete Repl2_LIMITS;
MPRINT(TRAIN):   run;
 
NOTE: The file EMWS1.REPL2_LIMITS (memtype=DATA) was not found, but appears on a DELETE statement.
MPRINT(MAIN):  ;
MPRINT(EM_DIAGRAM):  ;
23050      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
23051      * End TRAIN: Repl2;
MPRINT(EM_DIAGRAM):   * End TRAIN: Repl2;
23052      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
23053
23054      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
23055      * Close any missing semi colons;
MPRINT(EM_DIAGRAM):   * Close any missing semi colons;
23056      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
23057      ;
MPRINT(EM_DIAGRAM):   ;
23058      ;
MPRINT(EM_DIAGRAM):   ;
23059      ;
MPRINT(EM_DIAGRAM):   ;
23060      ;
MPRINT(EM_DIAGRAM):   ;
23061      quit;
MPRINT(EM_DIAGRAM):   quit;
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           3.00 seconds
      cpu time            0.54 seconds
 
 
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Close any unbalanced quotes;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   ;
23062      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   run;
23063      * Close any unbalanced quotes;
MPRINT(EM_DIAGRAM):   quit;
23064      *------------------------------------------------------------*;
23065      /*; *"; *'; */
23066      ;
23067      run;
23068      quit;
23069      /* Reset EM Options */
23070      options formchar="|----|+|---+=|-/\<>*";
MPRINT(EM_DIAGRAM):   options formchar="|----|+|---+=|-/\<>*";
23071      options nocenter ls=256 ps=10000;
MPRINT(EM_DIAGRAM):   options nocenter ls=256 ps=10000;
23072      goptions reset=all device=GIF NODISPLAY;
MPRINT(EM_DIAGRAM):   goptions reset=all device=GIF NODISPLAY;
MPRINT(EM_DIAGRAM):    proc printto;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   call symput('NLDATE', strip(put(date(), NLDATE.)));
MPRINT(EM_DIAGRAM):   call symput('NLTIME', strip(put(datetime(), NLTIME.)));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   nldate= sasmsg("sashelp.dmine", "log_date_note", 'N', "April 16, 2021" );
MPRINT(EM_DIAGRAM):   nltime= sasmsg("sashelp.dmine", "log_time_note", 'N', "11:25:55 o'clock" );
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "* Score Log";
MPRINT(EM_DIAGRAM):   put nldate;
MPRINT(EM_DIAGRAM):   put nltime;
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   run;
*------------------------------------------------------------*
* Score Log
Date:                April 16, 2021
Time:                11:25:55 o'clock
*------------------------------------------------------------*
MPRINT(EM_DIAGRAM):    filename O2FWOOWT "H:\746\Decision Tree test\Workspaces\EMWS1\Repl2\EMSCORE.out" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):   proc printto print=O2FWOOWT new;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Repl2: Generation of macros and macro variables;
MPRINT(EM_DIAGRAM):   * To see the code generated, set the EM_DEBUG macro variable to SOURCE or _ALL_;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Repl2: EM Macro Variables and Macros;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   * System Macro Variables;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   length string $2000;
MPRINT(EM_DIAGRAM):   string = 'Decision Tree test';
MPRINT(EM_DIAGRAM):   call symput('EM_PROJECTNAME', trim(string));
MPRINT(EM_DIAGRAM):   string = 'Decision Tree';
MPRINT(EM_DIAGRAM):   call symput('EM_WSNAME', trim(string));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   * Properties Macro Variables ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Files Macro Variables;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Import Macro Variables;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Export Macro Variables;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Decision Macro Variables;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Statement Macro Variables;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   set EMWS1.FIMPORT_EMINFO;
MPRINT(EM_DIAGRAM):   where key in('HPDMSAMPLE', 'IDSTABLE');
MPRINT(EM_DIAGRAM):   if key = 'HPDMSAMPLE' then call symput('_ForceGrid', '1');
MPRINT(EM_DIAGRAM):   else call symput('_IDS_TABLE', DATA);
MPRINT(EM_DIAGRAM):   run;
MPRINT(HPDM_PERFORMANCE):  ;
PERFORMANCE  DETAILS
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Variable Macros;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * General Variable Macros;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Target Variable Macros;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Input Variable Macros;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Rejected Variable Macros;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Misc Variable Macros;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * End Create EM Macro Variables and Macros;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
24018      %let EMEXCEPTIONSTRING=;
24019      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
24020      * SCORE: Repl2;
MPRINT(EM_DIAGRAM):   * SCORE: Repl2;
24021      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
24022      %let EM_ACTION = SCORE;
24023      %let syscc = 0;
24024      filename x CATALOG 'SASHELP.EMUTIL.EM_VARMACRO.SOURCE';
MPRINT(EM_DIAGRAM):     filename x CATALOG 'SASHELP.EMUTIL.EM_VARMACRO.SOURCE';
24025      %inc x;
NOTE: %INCLUDE (level 1) file X is file SASHELP.EMUTIL.EM_VARMACRO.SOURCE.
24026     +
24027     +%macro em_varMacro(name=emMacro, metadata=, where=, key=NAME, nummacro=);
24028     +
24029     +   filename macFile catalog 'work.emutil.macro.source';
24030     +   %let _METAOBS = 0;
24031     +
24032     +   %if (%sysfunc(exist(&metadata))<1 and %sysfunc(exist(&metadata, VIEW))<1)
24033     +                   or (&metadata eq ) %then %do;
24034     +       %put * No metadata data set defined;
24035     +       %goto doend;
24036     +   %end;
24037     +
24038     +   data _null_;
24039     +      length _STRING_ $80;
24040     +      retain _STRING_;
24041     +      set &metadata end=eof;
24042     +      file macFile;
24043     +      %if %nrbquote(&where) ne %then %do;
24044     +          %let whereClause = where (%nrbquote(&where));
24045     +          %unquote(&whereClause);
24046     +      %end;
24047     +      if _N_=1 then do;
24048     +         string = "%"!!"macro &name;";
24049     +         put string;
24050     +      end;
24051     +      if (length(_STRING_) + length(trim(&key))+ 1 < 80) then do;
24052     +         _STRING_ = trim(_STRING_)!!' '!!trim(&key);
24053     +         if eof then do;
24054     +            put _STRING_;
24055     +            string = "%"!!"mend &name;";
24056     +            put string;
24057     +            %if (&nummacro ne ) %then %do;
24058     +                string = strip(put(_N_, best.));
24059     +                put "%" "global &nummacro;";
24060     +                put "%" "let &nummacro = " string ";";
24061     +                call symput('_METAOBS', string);
24062     +            %end;
24063     +         end;
24064     +      end;
24065     +      else do;
24066     +         put _STRING_;
24067     +         _string_ = TRIM(&key);
24068     +         if eof then do;
24069     +            put _STRING_;
24070     +            string = "%"!!"mend &name;";
24071     +            put string;
24072     +        end;
24073     +      end;
24074     +      if eof then do;
24075     +         string = strip(put(_N_, best.));
24076     +         call symput('_METAOBS', string);
24077     +         %if (&nummacro ne ) %then %do;
24078     +             put "%" "global &nummacro;";
24079     +             put "%" "let &nummacro = " string ";";
24080     +         %end;
24081     +      end;
24082     +   run;
24083     +
24084     +   %doend:
24085     +   %if ^&_METAOBS %then %do;
24086     +       data _null_;
24087     +          file macFile;
24088     +          put "%" "macro &name;";
24089     +          put "%" "mend &name;";
24090     +          %if (&nummacro ne ) %then %do;
24091     +              put "%" "global &nummacro;";
24092     +              put "%" "let &nummacro = 0;";
24093     +          %end;
24094     +      run;
24095     +   %end;
24096     +   %inc macFile;
24097     +   filename macFile;
24098     +%mend em_varMacro;
NOTE: %INCLUDE (level 1) ending.
24099      filename X;
MPRINT(EM_DIAGRAM):   filename X;
NOTE: Fileref X has been deassigned.
24100       %macro main;
24101
24102         filename temp catalog 'sashelp.emmdfy.Replace_macros.source';
24103         %include temp;
24104         filename temp;
24105
24106         %if %upcase(&EM_ACTION) = CREATE %then %do;
24107
24108             filename temp catalog 'sashelp.emmdfy.Replace_create.source';
24109             %include temp;
24110             filename temp;
24111             %create;
24112         %end;
24113         %else
24114         %if %upcase(&EM_ACTION) = TRAIN %then %do;
24115
24116             filename temp catalog 'sashelp.emmdfy.Replace_train.source';
24117             %include temp;
24118             filename temp;
24119             %train;
24120         %end;
24121         %else
24122         %if %upcase(&EM_ACTION) = SCORE %then %do;
24123
24124             filename temp catalog 'sashelp.emmdfy.Replace_score.source';
24125             %include temp;
24126             filename temp;
24127             %score;
24128         %end;
24129         %if %upcase(&EM_ACTION) = REPORT %then %do;
24130
24131             filename temp catalog 'sashelp.emmdfy.Replace_report.source';
24132             %include temp;
24133             filename temp;
24134             %report;
24135         %end;
24136         %if %upcase(&EM_ACTION) = OPENOUTCLASSTABLE %then %do;
24137             filename temp catalog 'sashelp.emmdfy.replace_makeoutclass.source';
24138             %include temp;
24139             filename temp;
24140             %em_replace_openoutclass;
24141         %end;
24142         %if %upcase(&EM_ACTION) = CLOSEOUTCLASSTABLE %then %do;
24143             filename temp catalog 'sashelp.emmdfy.replace_makeoutclass.source';
24144             %include temp;
24145             filename temp;
24146             %em_replace_closeoutclass;
24147         %end;
24148      %mend main;
24149
24150      %main;
MPRINT(MAIN):   filename temp catalog 'sashelp.emmdfy.Replace_macros.source';
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMMDFY.REPLACE_MACROS.SOURCE.
24151     +%macro SetProperties;
24152     +   %em_checkmacro(name=EM_PROPERTY_UNKNOWNLEVEL,    global=Y, value=MODE);
24153     +   %em_checkmacro(name=EM_PROPERTY_CALCMETHOD,      global=Y, value=NONE);
24154     +   %em_checkmacro(name=EM_PROPERTY_PERCENTSCUTOFF,  global=Y, value=0.5);
24155     +   %em_checkmacro(name=EM_PROPERTY_SPACINGSCUTOFF,  global=Y, value=9);
24156     +   %em_checkMacro(name=EM_PROPERTY_MADSCUTOFF,      global=Y, value=9);
24157     +   %em_checkMacro(name=EM_PROPERTY_STDDEVCUTOFF,    global=Y, value=3);
24158     +   %em_checkmacro(name=EM_PROPERTY_REPLACEMETHOD,   global=Y, value=COMPUTED);
24159     +   %em_checkmacro(name=EM_PROPERTY_HIDEVARIABLE,    global=Y, value=N);
24160     +   %em_checkmacro(name=EM_PROPERTY_INTERVALMETHOD,  global=Y, value=NONE);
24161     +   %em_checkmacro(name=EM_PROPERTY_REPORTCOUNT,     global=Y, value=Y);
24162     +
24163     +%mend SetProperties;
24164     +
NOTE: %INCLUDE (level 1) ending.
MPRINT(MAIN):   filename temp;
NOTE: Fileref TEMP has been deassigned.
MPRINT(MAIN):   filename temp catalog 'sashelp.emmdfy.Replace_score.source';
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMMDFY.REPLACE_SCORE.SOURCE.
24165     +%macro makeLevelData(data=, outclass=);
24166     +   data REPLACE_MODE;
24167     +      set &OUTCLASS;
24168     +      by NAME;
24169     +      if first.name then do;
24170     +         MODEC    = CRAW;
24171     +         MODEN    = NRAW;
24172     +         NORMMODE = LEVEL;
24173     +         output;
24174     +      end;
24175     +      keep NAME MODEC MODEN NORMMODE UNKWOWNDEFAULT;
24176     +   run;
24177     +
24178     +   proc sort data=&EM_DATA_VARIABLESET;
24179     +      by NAME;
24180     +   run;
24181     +   data &data;
24182     +      length UNKWOWNDEFAULT $8;
24183     +      merge &OUTCLASS(in=_a) REPLACE_MODE &EM_DATA_VARIABLESET(keep=LABEL LENGTH NAME ROLE LEVEL LABEL FORMAT RENAME=(LEVEL=MLEVEL) where=(MLEVEL ne 'INTERVAL'));
24184     +      by NAME;
24185     +      if LEVEL = '_UNKNOWN_' then UNKWOWNDEFAULT = "&EM_PROPERTY_UNKNOWNLEVEL";
24186     +      if _a then output;
24187     +   run;
24188     +   proc datasets lib=work nolist;
24189     +      delete REPLACE_MODE;
24190     +   run;
24191     +   quit;
24192     +%mend makeLevelData;
24193     +
24194     +%macro makeNewNames(limitDs=, classValue=, className=);
24195     +     %let varname = invarname;
24196     +     %let newname = outname;
24197     +     proc sort data=&classValue out=&varname nodupkey;
24198     +        by NAME;
24199     +        where REPLACE_VALUE ^in('', '_DEFAULT_') or (REPLACE_VALUE eq '_DEFAULT_' and UNKWOWNDEFAULT ne 'NONE');
24200     +     run;
24201     +     %let classnum=0;
24202     +     %let dsid = %sysfunc(open(&varname));
24203     +     %if &dsid>0 %then %do;
24204     +         %let classnum = %sysfunc(attrn(&dsid, NOBS));
24205     +         %let dsid = %sysfunc(close(&dsid));
24206     +     %end;
24207     +
24208     +     %let varnum=0;
24209     +     %let dsid = %sysfunc(open(&LimitDs));
24210     +     %if &dsid>0 %then %do;
24211     +         %let varnum = %sysfunc(attrn(&dsid, NOBS));
24212     +         %let dsid = %sysfunc(close(&dsid));
24213     +     %end;
24214     +
24215     +     %if ^&classnum and ^&varnum and ^%sysfunc(exist(&classname)) %then %do;
24216     +         %let lib    = %scan(&classname, 1, .);
24217     +         %let member = %scan(&classname, 2, .);
24218     +          proc datasets lib=&lib nolist;
24219     +             delete &member;
24220     +          run;
24221     +          quit;
24222     +         %goto doendmn;
24223     +     %end;
24224     +
24225     +     data &varname;
24226     +        set
24227     +        %if &classnum %then %do;
24228     +            &varname(keep=NAME)
24229     +        %end;
24230     +        %if &varnum %then %do;
24231     +            &limitDs(keep=NAME)
24232     +        %end;
24233     +        ;
24234     +     run;
24235     +     proc dmdb data=&varname outtable=&newname(rename=(REP=NEWNAME)) nameserver;
24236     +        names NAME;
24237     +        prefix REP_;
24238     +     run;
24239     +     proc sort data=&newname;
24240     +        by NAME;
24241     +     run;
24242     +
24243     +     /* Merge the new names with the limits data set */
24244     +     %if %sysfunc(exist(&limitDs)) %then %do;
24245     +         data &limitDs;
24246     +            merge &newname &limitDs(in=a);
24247     +            by NAME;
24248     +            if a then output;
24249     +         run;
24250     +
24251     +         %let lib    = %scan(&limitDs, 1, .);
24252     +         %let member = %scan(&limitDs, 2, .);
24253     +          proc datasets lib=&lib nolist;
24254     +             modify &member;
24255     +             label NAME    =     "%sysfunc(sasmsg(sashelp.dmine, rpt_variable_vlabel, NOQUOTE))"
24256     +              NEWNAME =     "%sysfunc(sasmsg(sashelp.dmine, rpt_replacevar_vlabel, NOQUOTE))"
24257     +              CALCMETHOD =  "%sysfunc(sasmsg(sashelp.dmine, rpt_calcmethod_vlabel , NOQUOTE))"
24258     +              REPLACEMETHODUSED =  "%sysfunc(sasmsg(sashelp.dmine, rpt_replacemethodused_vlabel, NOQUOTE))"
24259     +              LOWERLIMIT        =  "%sysfunc(sasmsg(sashelp.dmine, meta_lowerLimit_vlabel, NOQUOTE))"
24260     +              REPLACEMINUSED    =  "%sysfunc(sasmsg(sashelp.dmine, rpt_replacemin_vlabel, NOQUOTE))"
24261     +              UPPERLIMIT        =  "%sysfunc(sasmsg(sashelp.dmine, meta_upperLimit_vlabel, NOQUOTE))"
24262     +              REPLACEDMAXUSED   =  "%sysfunc(sasmsg(sashelp.dmine, rpt_replacemax_vlabel, NOQUOTE))"
24263     +              REPLACEMETHOD     =  "%sysfunc(sasmsg(sashelp.dmine, rpt_replacemethod_vlabel, NOQUOTE))"
24264     +              REPLACEMIN =  "%sysfunc(sasmsg(sashelp.dmine, rpt_userreplacemin_vlabel, NOQUOTE))"
24265     +              REPLACEMAX =  "%sysfunc(sasmsg(sashelp.dmine, rpt_userreplacemax_vlabel, NOQUOTE))"
24266     +              ROLE       =  "%sysfunc(sasmsg(sashelp.dmine, meta_role_vlabel, NOQUOTE))"
24267     +              LEVEL      =  "%sysfunc(sasmsg(sashelp.dmine, meta_level_vlabel, NOQUOTE))"
24268     +              LABEL      =  "%sysfunc(sasmsg(sashelp.dmine, meta_label_vlabel, NOQUOTE))";
24269     +         run;
24270     +         quit;
24271     +     %end;
24272     +
24273     +     /* Merge the new names with the Class Value data set */
24274     +     %if %sysfunc(exist(&classValue)) %then %do;
24275     +         data length;
24276     +            retain newlen 0;
24277     +            set &classValue;
24278     +            by NAME;
24279     +            if type eq 'C' then do;
24280     +               if first.name then do;
24281     +                  if REPLACE_VALUE ^in('_DEFAULT_', '_MODE_', '_MISSING_') then
24282     +                     newlen = max(length, length(strip(replace_value)));
24283     +                  else
24284     +                     newlen = length;
24285     +               end;
24286     +               else do;
24287     +                  if REPLACE_VALUE ^in('_DEFAULT_', '_MODE_', '_MISSING_') then
24288     +                     newlen = max(newlen, length(strip(replace_value)));
24289     +               end;
24290     +            end;
24291     +            else newlen = length;
24292     +            len=length;
24293     +            if last.name then output;
24294     +            keep name len newlen role format type label mlevel;
24295     +         run;
24296     +         data &className;
24297     +            length rformat formatroot $32;
24298     +            merge &newname(in=a) length(in=b);
24299     +            by NAME;
24300     +            length=len;
24301     +            if newlen > len then do;
24302     +               if type eq 'C' and format ne '' then do;
24303     +                  rformat = strip(reverse(format));
24304     +                  do while(indexc(rformat, '.0123456789')=1);
24305     +                     rformat = substr(rformat, 2);
24306     +                  end;
24307     +                  formatroot= upcase(reverse(rformat));
24308     +                  if strip(formatRoot) in('$','$F','$UPCASE','$CHAR') then do;
24309     +                     format = strip(formatroot)!!strip(put(newlen, best.))!!'.';
24310     +                  end;
24311     +               end;
24312     +               length = newlen;
24313     +            end;
24314     +            if a and b then output;
24315     +            KEEP name newname role format mlevel type label length;
24316     +         run;
24317     +     %end;
24318     +
24319     +     proc datasets lib=work nolist;
24320     +        delete length &varname &newname;
24321     +     run;
24322     +     quit;
24323     +
24324     +     %doendmn:
24325     +
24326     +%mend makeNewNames;
24327     +
24328     +%macro makeVarDeltaCode(LimitDs=);
24329     +    %if ^%sysfunc(exist(&LimitDs)) %then %goto doendd;
24330     +
24331     +    filename _F1 "&EM_FILE_CDELTA_TRAIN";
24332     +     data _null_;
24333     +        set &LimitDs end=eof;
24334     +        length string $400;
24335     +        file _F1;
24336     +        %if &EM_PROPERTY_HIDEVARIABLE eq Y %then %do;
24337     +            string = 'if NAME="'!!strip(NAME)!!'" then delete;';  put string;
24338     +        %end;
24339     +        %else %do;
24340     +            string = 'if NAME="'!!strip(NAME)!!'" then do;';        put string;
24341     +            string = '   ROLE="REJECTED";';                         put string;
24342     +            string = '   COMMENT= "Replaced by '!!"&EM_NODEID"!!'";'; put string;
24343     +            string = 'end;';                                        put string;
24344     +        %end;
24345     +        put 'else';
24346     +        string = '   if NAME="'!!strip(NEWNAME)!!'" then do;'; put string;
24347     +        string = '      ROLE="'!!strip(ROLE)!!'";';            put string;
24348     +        string = '      LEVEL="'!!strip(LEVEL)!!'";';          put string;
24349     +        put      'end;';
24350     +        if ^eof then
24351     +           put 'else';
24352     +   run;
24353     +   filename _F1;
24354     +
24355     +    %doendd:
24356     +%mend makeVarDeltaCode;
24357     +
24358     +%macro makeVarScoreCode(LimitDs=, File=);
24359     +    %if ^%sysfunc(exist(&LimitDs)) or "&File" eq "" %then %goto doendm;
24360     +
24361     +     filename sFile "&file";
24362     +     data &LimitDs;
24363     +        set &LimitDs end=eof;
24364     +        length REPLACEMETHODUSED $8 string $400;
24365     +        file sFile;
24366     +        put'* ;';
24367     +        put'* Variable: ' name ';';
24368     +        put '* ;';
24369     +        if strip(label) = '' then label = name;
24370     +        string= 'Label '!!strip(newname)!!"='Replacement: "!!strip(tranwrd(label, "'","''"))!!"';";
24371     +        put string;
24372     +        put newname '=' name ';';
24373     +        REPLACEMETHODUSED = REPLACEMETHOD;
24374     +        if REPLACEMETHOD = 'DEFAULT' then
24375     +            %if "&EM_PROPERTY_REPLACEMETHOD" = "COMPUTED" %then %do;
24376     +                REPLACEMETHODUSED = 'COMPUTED';
24377     +            %end;
24378     +            %else
24379     +            %if "&EM_PROPERTY_REPLACEMETHOD" = "MISSING" %then %do;
24380     +                REPLACEMETHODUSED = 'MISSING';
24381     +            %end;
24382     +            %else %do;
24383     +                REPLACEMETHODUSED = 'MANUAL';
24384     +            %end;
24385     +
24386     +        put 'if ' name ' eq . then ' newname  '= . ;';
24387     +        if LowerLimit ne . then do;
24388     +           select(REPLACEMETHODUSED);
24389     +              when('COMPUTED') REPLACEMINUSED = lowerLimit;
24390     +              when('MISSING')  REPLACEMINUSED = .;
24391     +              when('MANUAL')   REPLACEMINUSED = replaceMin;
24392     +              otherwise;
24393     +           end;
24394     +           put 'else';
24395     +           put 'if ' name '<' lowerLimit ' then ' newname ' = ' REPLACEMINUSED ';';
24396     +        end;
24397     +        if upperLimit ne . then do;
24398     +           select(REPLACEMETHODUSED);
24399     +              when('COMPUTED') REPLACEMAXUSED = upperLimit;
24400     +              when('MISSING')  REPLACEMAXUSED = .;
24401     +              when('MANUAL')   REPLACEMAXUSED = replaceMax;
24402     +              otherwise;
24403     +           end;
24404     +           put 'else';
24405     +           put 'if ' name '>' upperLimit  ' then ' newname ' = ' REPLACEMAXUSED ';';
24406     +        end;
24407     +        drop string;
24408     +    run;
24409     +    filename sfile;
24410     +    %doendm:
24411     +%mend makeVarScoreCode;
24412     +
24413     +
24414     +%macro makeUnknownOptCode(Folder=, Data=);
24415     +    %if ^%sysfunc(exist(&Data)) %then %goto doendu;
24416     +
24417     +    %let dsid = %sysfunc(open(&data));
24418     +    %let nameNum    = %sysfunc(varnum(&dsid, Name));
24419     +    %let newnameNum = %sysfunc(varnum(&dsid, NewName));
24420     +
24421     +    %let oldname=;
24422     +    %do %while(^%sysfunc(fetch(&dsid)));
24423     +        %let name    = %sysfunc(getvarc(&dsid, &nameNum));
24424     +        %let newName = %sysfunc(getvarc(&dsid, &newnameNum));
24425     +
24426     +        %if &name ne &oldname %then %do;
24427     +            filename _F1 "&Folder&em_dsep.&newname..sas" MOD;
24428     +            data _null_;
24429     +               set &Data end=eof;
24430     +               where NAME ="&name";
24431     +               length string $400;
24432     +               length newlevel replaceLevel $400;
24433     +               retain string missingFlag;
24434     +               file _F1;
24435     +               if _N_=1 then do;
24436     +                  put '*;';
24437     +                  if format ne '' then do;
24438     +                     string = '_UFORMAT200 = '!!'strip(put('!!strip(NAME)!!','!!strip(format)!!'));';
24439     +                     put string;
24440     +                     put 'if ^(_UFORMAT200 in(';
24441     +                  end;
24442     +                  else do;
24443     +                     if type eq 'C' then do;
24444     +                        string = '_UFORMAT200 = '!!'strip('!!strip(NAME)!!');';
24445     +                        put string;
24446     +                        put 'if ^(_UFORMAT200 in(';
24447     +                     end;
24448     +                     else
24449     +                        put 'if (';
24450     +                  end;
24451     +                  string='';
24452     +                  missingFlag = 0;
24453     +               end;
24454     +
24455     +               if ^eof and LEVEL ne '_UNKNOWN_' then do;
24456     +                  if format ne '' or type eq 'C' then do;
24457     +                     newlevel = tranwrd(strip(LEVEL),'"','""');
24458     +                     if strip(newLevel) = '' then missingFlag = 1;
24459     +                     if length(strip(newlevel))+length(strip(string))+4<80 then do;
24460     +                        if string='' then
24461     +                           string = strip(string)!!' "'!!strip(newlevel)!!'" ';
24462     +                        else
24463     +                           string = strip(string)!!', "'!!strip(newlevel)!!'" ';
24464     +                     end;
24465     +                     else do;
24466     +                        put string;
24467     +                        string =', "'!!tranwrd(strip(LEVEL),'"','""')!!'"';
24468     +                     end;
24469     +                  end;
24470     +                  else do;
24471     +                     string = strip(name)!!' ne '!!strip(level)!!' and ';
24472     +                     put string;
24473     +                  end;
24474     +                  newlevel = ' ';
24475     +               end;
24476     +               else do;
24477     +                  if format ne '' or type eq 'C' then do;
24478     +                     put string;
24479     +                     if ^missingFlag then
24480     +                        string = ', "" )) then ';
24481     +                     else
24482     +                        string = ')) then ';
24483     +                  end;
24484     +                  else
24485     +                     string = strip(name)!!' ne . ) then ';
24486     +                  put string;
24487     +
24488     +                 select(REPLACE_VALUE);
24489     +                 when('_MODE_') do;
24490     +                    if type eq 'C' then
24491     +                       replaceLevel = NORMMODE;
24492     +                    else
24493     +                       replaceLevel =strip(put(MODEN,BEST.));
24494     +                 end;
24495     +                 when('_MISSING_') do;
24496     +                    if type eq 'C' then replaceLevel = '';
24497     +                    else replaceLevel = '.';
24498     +                 end;
24499     +                 when('_DEFAULT_') do;
24500     +                    %if &EM_PROPERTY_UNKNOWNLEVEL = MODE %then %do;
24501     +                        if type eq 'C' then
24502     +                           replaceLevel = NORMMODE;
24503     +                        else
24504     +                           replaceLevel = strip(put(MODEN,BEST.));
24505     +                    %end;
24506     +                    %else %do;
24507     +                        if type eq 'C' then replaceLevel = '';
24508     +                         else replaceLevel = '.';
24509     +                    %end;
24510     +                  end;
24511     +                  when('') do;
24512     +                  end;
24513     +                  otherwise do;
24514     +                     if type eq 'C' then replaceLevel= replace_Value;
24515     +                     else replaceLevel = replace_Value;
24516     +                  end;
24517     +               end;
24518     +               if type eq 'C' then do;
24519     +                  string = strip(newname)!!'= "'!!tranwrd(strip(replaceLevel),'"','""')!!'";';
24520     +               end;
24521     +               else do;
24522     +                  string = strip(newname)!!'= '!!strip(replaceLevel)!!';';
24523     +               end;
24524     +               put string;
24525     +            end;
24526     +
24527     +           run;
24528     +           filename _F1;
24529     +           proc datasets lib=work nolist;
24530     +              delete _temp;
24531     +           run;
24532     +           quit;
24533     +
24534     +           %let oldname = &name;
24535     +        %end;
24536     +    %end;
24537     +    %let dsid = %sysfunc(close(&dsid));
24538     +
24539     +    %doendu:
24540     +%mend makeUnknownOptCode;
24541     +
24542     +%macro makeUnknownCode(ScoreFile=, Data=);
24543     +   %if ^%sysfunc(exist(&Data)) %then %goto doendm;
24544     +
24545     +   filename _F1 "&ScoreFile" MOD;
24546     +   data _null_;
24547     +      set &Data;
24548     +      length string $400;
24549     +      length newlevel replaceLevel $200;
24550     +      retain string missingFlag;
24551     +      file _F1;
24552     +      by NAME;
24553     +
24554     +      if _N_=1 then do;
24555     +         put '* ;';
24556     +         put '* Replace Unknown Class Levels ;';
24557     +         put '* ;';
24558     +         put 'length _UFORMAT200 $200;';
24559     +         put 'drop   _UFORMAT200;';
24560     +         put '_UFORMAT200 = " ";';
24561     +      end;
24562     +
24563     +      if first.name then do;
24564     +         missingFlag = 0;
24565     +         put '*;';
24566     +
24567     +         if format ne '' then do;
24568     +            call symput('UFormatFlag', '1');
24569     +            string = '_UFORMAT200 = '!!'strip(put('!!strip(NAME)!!','!!strip(format)!!'));';
24570     +            put string;
24571     +            put 'if ^(_UFORMAT200 in(';
24572     +         end;
24573     +         else do;
24574     +            if type eq 'C' then do;
24575     +               call symput('UFormatFlag', '1');
24576     +               string = '_UFORMAT200 = '!!'strip('!!strip(NAME)!!');';
24577     +               put string;
24578     +               put 'if ^(_UFORMAT200 in(';
24579     +            end;
24580     +            else
24581     +               put 'if (';
24582     +         end;
24583     +         string='';
24584     +      end;
24585     +
24586     +      if ^last.name and LEVEL ne '_UNKNOWN_' then do;
24587     +        if format ne '' or type eq 'C' then do;
24588     +           newlevel = tranwrd(strip(LEVEL),'"','""');
24589     +           if strip(newLevel) = '' then missingFlag = 1;
24590     +           if length(strip(newlevel))+length(strip(string))+4<80 then do;
24591     +              if string='' then
24592     +                 string = strip(string)!!' "'!!strip(newlevel)!!'" ';
24593     +              else
24594     +                 string = strip(string)!!', "'!!strip(newlevel)!!'" ';
24595     +           end;
24596     +           else do;
24597     +              put string;
24598     +              string =', "'!!tranwrd(strip(LEVEL),'"','""')!!'"';
24599     +           end;
24600     +        end;
24601     +        else do;
24602     +           string = strip(name)!!' ne '!!strip(level)!!' and ';
24603     +           put string;
24604     +        end;
24605     +        newlevel = ' ';
24606     +     end;
24607     +     else do;
24608     +        if format ne '' or type eq 'C' then do;
24609     +           put string;
24610     +           if ^missingFlag then
24611     +              string = ', "" )) then ';
24612     +           else
24613     +              string = ')) then ';
24614     +        end;
24615     +        else
24616     +           string = strip(name)!!' ne . ) then ';
24617     +        put string;
24618     +
24619     +        select(REPLACE_VALUE);
24620     +           when('_MODE_') do;
24621     +              if type eq 'C' then
24622     +                 replaceLevel = NORMMODE;
24623     +              else
24624     +                 replaceLevel =strip(put(MODEN,BEST.));
24625     +           end;
24626     +           when('_MISSING_') do;
24627     +              if type eq 'C' then replaceLevel = '';
24628     +              else replaceLevel = '.';
24629     +           end;
24630     +           when('_DEFAULT_') do;
24631     +              %if &EM_PROPERTY_UNKNOWNLEVEL = MODE %then %do;
24632     +                  if type eq 'C' then
24633     +                     replaceLevel = NORMMODE;
24634     +                  else
24635     +                     replaceLevel = strip(put(MODEN,BEST.));
24636     +              %end;
24637     +              %else %do;
24638     +                  if type eq 'C' then replaceLevel = '';
24639     +                  else replaceLevel = '.';
24640     +              %end;
24641     +           end;
24642     +           when('') do;
24643     +           end;
24644     +           otherwise do;
24645     +               if type eq 'C' then replaceLevel= replace_Value;
24646     +               else replaceLevel = replace_Value;
24647     +           end;
24648     +        end;
24649     +        if type eq 'C' then do;
24650     +           string = strip(newname)!!'= "'!!tranwrd(strip(replaceLevel),'"','""')!!'";';
24651     +        end;
24652     +        else do;
24653     +           string = strip(newname)!!'= '!!strip(replaceLevel)!!';';
24654     +        end;
24655     +        put string;
24656     +     end;
24657     +
24658     +     run;
24659     +     filename _F1;
24660     +    %doendm:
24661     +%mend makeUnknownCode;
24662     +
24663     +%macro makeReplaceCode(ScoreFile=, Data=);
24664     +   filename _F1 "&ScoreFile"  MOD;
24665     +   data _null_;
24666     +      length string $400;
24667     +      set &data end=eof;
24668     +      file _F1;
24669     +      by NAME;
24670     +      if _N_=1 then do;
24671     +         put '   ';
24672     +         put '* ;';
24673     +         put '* Replace Specific Class Levels ;';
24674     +         put '* ;';
24675     +         put 'length _UFormat200 $200;';
24676     +         put 'drop   _UFORMAT200;';
24677     +         put '_UFORMAT200 = " ";';
24678     +      end;
24679     +      if first.name then do;
24680     +         put '* ;';
24681     +         string = '* Variable: '!!strip(NAME)!!';';
24682     +         put string;
24683     +         put '* ;';
24684     +         if format ne '' then do;
24685     +            call symput('UFormatFlag', '1');
24686     +            string = "_UFORMAT200 = strip("; put string;
24687     +            string ='put('!!strip(NAME)!!','!!strip(format)!!'));';
24688     +            put string;
24689     +         end;
24690     +         else
24691     +           if type eq 'C' then do;
24692     +              call symput('UFormatFlag', '1');
24693     +              string = "_UFORMAT200 = strip("!!strip(NAME)!!');';
24694     +              put string;
24695     +           end;
24696     +      end;
24697     +      if ^first.name then
24698     +         put 'else';
24699     +      if format ne '' then do;
24700     +         string = tranwrd(strip(LEVEL),'"','""');
24701     +         string =' if _UFORMAT200 =  "'!!strip(string)!!'" then ';
24702     +         put string;
24703     +      end;
24704     +      else do;
24705     +         if type eq 'N' then do;
24706     +            string = 'if '!!strip(name)!!' = '!!strip(put(nraw, BEST.))!!' then ';
24707     +            put string;
24708     +         end;
24709     +         else do;
24710     +            string = tranwrd(strip(craw),'"','""');
24711     +            string = ' if _UFORMAT200 =  "'!!strip(string)!!'" then ';
24712     +            put string;
24713     +         end;
24714     +      end;
24715     +      string = strip(newname)!!'=';
24716     +      if type eq 'C' then do;
24717     +         if upcase(replace_value) eq '_MISSING_' or
24718     +            (upcase(replace_value) eq '_DEFAULT_' and (upcase(UNKWOWNDEFAULT)= 'MISSING')) then replace_Value ='';
24719     +         else
24720     +           if upcase(replace_value) eq '_MODE_' or
24721     +            (upcase(replace_value) eq '_DEFAULT_' and (upcase(UNKWOWNDEFAULT)= 'MODE'))
24722     +            then replace_Value =modec;
24723     +           string = strip(string)!!'"'!!tranwrd(strip(replace_Value),'"','""')!!'";';
24724     +      end;
24725     +      else do;
24726     +         if upcase(replace_value) eq '_MISSING_' or
24727     +            (upcase(replace_value) eq '_DEFAULT_' and (upcase(UNKWOWNDEFAULT) = 'MISSING')) then replace_Value ='.';
24728     +         else
24729     +           if upcase(replace_value) eq '_MODE_' or
24730     +            (upcase(replace_value) eq '_DEFAULT_' and (upcase(UNKWOWNDEFAULT) = 'MODE')) then
24731     +                  replace_Value =strip(put(moden, BEST.));
24732     +
24733     +         string = strip(string)!!''!!strip(replace_value)!!';';
24734     +      end;
24735     +      put string;
24736     +    run;
24737     +    filename _F1;
24738     +
24739     +%mend makeReplaceCode;
24740     +
24741     +%macro makeReplaceOptCode(Folder=, Data=);
24742     +    %if ^%sysfunc(exist(&Data)) %then %goto doendr;
24743     +
24744     +    %let dsid = %sysfunc(open(&data));
24745     +    %let nameNum    = %sysfunc(varnum(&dsid, Name));
24746     +    %let newnameNum = %sysfunc(varnum(&dsid, NewName));
24747     +
24748     +    %let oldname=;
24749     +    %do %while(^%sysfunc(fetch(&dsid)));
24750     +        %let name    = %sysfunc(getvarc(&dsid, &nameNum));
24751     +        %let newName = %sysfunc(getvarc(&dsid, &newnameNum));
24752     +
24753     +        %if &name ne &oldname %then %do;
24754     +            filename _F1 "&Folder&em_dsep.&newname..sas" MOD;
24755     +            data _null_;
24756     +               length string $400;
24757     +               set &Data end=eof;
24758     +               by NAME;
24759     +               where NAME ="&name";
24760     +               file _F1;
24761     +               if _N_=1 then do;
24762     +                  put '* ;';
24763     +                  string = '* Variable: '!!strip(NAME)!!';';
24764     +                  put string;
24765     +                  put '* ;';
24766     +                  if format ne '' then do;
24767     +                     string = "_UFORMAT200 = strip("; put string;
24768     +                     string ='put('!!strip(NAME)!!','!!strip(format)!!'));';
24769     +                     put string;
24770     +                  end;
24771     +                  else
24772     +                     if type eq 'C' then do;
24773     +                        call symput('UFormatFlag', '1');
24774     +                        string = "_UFORMAT200 = strip("!!strip(NAME)!!');';
24775     +                        put string;
24776     +                    end;
24777     +               end;
24778     +               if ^first.name then
24779     +                  put 'else';
24780     +               if format ne '' then do;
24781     +                  string = tranwrd(strip(LEVEL),'"','""');
24782     +                  string =' if _UFORMAT200 =  "'!!strip(string)!!'" then ';
24783     +                  put string;
24784     +               end;
24785     +               else do;
24786     +                  if type eq 'N' then do;
24787     +                     string = 'if '!!strip(name)!!' = '!!strip(put(nraw, BEST.))!!' then ';
24788     +                     put string;
24789     +                  end;
24790     +                  else do;
24791     +                     string = tranwrd(strip(craw),'"','""');
24792     +                     string = ' if _UFORMAT200 =  "'!!strip(string)!!'" then ';
24793     +                     put string;
24794     +                  end;
24795     +               end;
24796     +               string = strip(newname)!!'=';
24797     +               if type eq 'C' then do;
24798     +                  if upcase(replace_value) eq '_MISSING_' or
24799     +                     (upcase(replace_value) eq '_DEFAULT_' and (upcase(UNKWOWNDEFAULT)= 'MISSING')) then replace_Value ='';
24800     +                  else
24801     +                     if upcase(replace_value) eq '_MODE_' or
24802     +                       (upcase(replace_value) eq '_DEFAULT_' and (upcase(UNKWOWNDEFAULT)= 'MODE'))
24803     +                       then replace_Value =modec;
24804     +                          string = strip(string)!!'"'!!tranwrd(strip(replace_Value),'"','""')!!'";';
24805     +               end;
24806     +              else do;
24807     +                 if upcase(replace_value) eq '_MISSING_' or
24808     +                    (upcase(replace_value) eq '_DEFAULT_' and (upcase(UNKWOWNDEFAULT) = 'MISSING')) then replace_Value ='.';
24809     +                 else
24810     +                    if upcase(replace_value) eq '_MODE_' or
24811     +                       (upcase(replace_value) eq '_DEFAULT_' and (upcase(UNKWOWNDEFAULT) = 'MODE')) then
24812     +                        replace_Value =strip(put(moden, BEST.));
24813     +
24814     +                 string = strip(string)!!''!!strip(replace_value)!!';';
24815     +              end;
24816     +             put string;
24817     +          run;
24818     +          filename _F1;
24819     +
24820     +           %let oldname = &name;
24821     +        %end;
24822     +    %end;
24823     +    %let dsid = %sysfunc(close(&dsid));
24824     +
24825     +    %doendr:
24826     +
24827     +%mend makeReplaceOptCode;
24828     +
24829     +
24830     +%macro makeNewVarCode(ScoreFile=, Data=);
24831     +   filename _F1 "&ScoreFile"  MOD;
24832     +   data _null_;
24833     +     length string $400;
24834     +      set &data end=eof;
24835     +      file _F1;
24836     +      if _N_=1 then do;
24837     +         put '   ';
24838     +         put '* ;';
24839     +         put '* Defining New Variables;';
24840     +         put '* ;';
24841     +      end;
24842     +      if type eq 'C' then do;
24843     +         string = 'Length '!!strip(newname)!!' $'!!strip(put(length,BEST12.))!!';';
24844     +         put string;
24845     +      end;
24846     +      if strip(label) = '' then label = name;
24847     +      string= 'Label '!!strip(newname)!!"='Replacement: "!!strip(tranwrd(label, "'","''"))!!"';";
24848     +      put string;
24849     +
24850     +      if format ne '' then do;
24851     +         string ='format '!!strip(newname)!!' '!!strip(format)!!';';
24852     +         put string;
24853     +      end;
24854     +      string = strip(newname)!!'= '!!strip(NAME)!!';';
24855     +      put string;
24856     +   run;
24857     +%mend makeNewVarCode;
24858     +
24859     +%macro makeNewVarOptCode(Folder=, Data=);
24860     +    %if ^%sysfunc(exist(&data)) or "&Folder" eq "" %then %goto doendo;
24861     +    data _temp_;set &data;run;
24862     +    %let dsid = %sysfunc(open(_temp_));
24863     +    %let nobs  = %sysfunc(attrn(&dsid, NLOBS));
24864     +    %do %while(^%sysfunc(fetch(&dsid)));
24865     +        %let newNum     = %sysfunc(varnum(&dsid, NewName));
24866     +        %let newname = %sysfunc(getvarc(&dsid, &newNum));
24867     +
24868     +        filename _F1 "&Folder.&em_dsep.&newname..sas";
24869     +        data _null_;
24870     +           length string $400;
24871     +           set &data;
24872     +           where NEWNAME="&newname";
24873     +           file _F1;
24874     +           put '   ';
24875     +           put '* ;';
24876     +           put "* Defining: &newname;";
24877     +           put '* ;';
24878     +           if type eq 'C' then  do;
24879     +              string = 'Length '!!strip(newname)!!'$'!!strip(put(length, best.))!!';';
24880     +              put string;
24881     +           end;
24882     +           if strip(label) = '' then label = name;
24883     +           string= 'Label '!!strip(newname)!!"='Replacement: "!!strip(tranwrd(label, "'","''"))!!"';";
24884     +           put string;
24885     +           if format ne '' then do;
24886     +              string= 'format '!!strip(newname)!!' '!!strip(format)!!';';
24887     +              put string;
24888     +           end;
24889     +           string = strip(newname)!!'='!!strip(name)!!';';
24890     +           put string;
24891     +        run;
24892     +    %end;
24893     +    %let dsid = %sysfunc(close(&dsid));
24894     +   %doendo:
24895     +%mend makeNewVarOptCode;
24896     +
24897     +%macro makeClassScoreCode(LevelData=, nameData=_newNames);
24898     +   %let UFormatFlag = 0;
24899     +
24900     +   %em_register(key=REPLACECODE, type=FOLDER);
24901     +
24902     +   /* Generating New Variable Score Code */
24903     +   %makeNewVarCode(ScoreFile=&EM_FILE_EMFLOWSCORECODE,  Data=&nameData);
24904     +
24905     +   data _tempNewVars;
24906     +      set &nameData;
24907     +      where ROLE ne 'TARGET';
24908     +   run;
24909     +   %makeNewVarCode(ScoreFile=&EM_FILE_EMPUBLISHSCORECODE, Data=_tempNewVars);
24910     +   %makeNewVarOptCode(Folder=&em_user_replacecode, Data=_tempNewVars);
24911     +
24912     +   proc datasets lib=WORK nolist;
24913     +      delete _tempNewVars;
24914     +   run;
24915     +   quit;
24916     +
24917     +   /* Generating Publish Score Code */
24918     +   data _temp;
24919     +      set &LevelData;
24920     +      where ROLE ne 'TARGET' and LEVEL='_UNKNOWN_' and (REPLACE_VALUE ^in('', '_DEFAULT_') or
24921     +                             (REPLACE_VALUE='_DEFAULT_' and UNKWOWNDEFAULT ne 'NONE'));
24922     +      keep NAME;
24923     +   run;
24924     +
24925     +   data _temp;
24926     +      merge _temp(in=_a) &Leveldata &nameData;
24927     +      by NAME;
24928     +      if _a then output;
24929     +   run;
24930     +
24931     +   %makeUnknownCode(ScoreFile=&EM_FILE_EMPUBLISHSCORECODE, Data=_temp);
24932     +   %makeUnknownOptCode(Folder=&em_user_replacecode,        Data=_temp);
24933     +   proc datasets lib=work nolist;
24934     +      delete _temp;
24935     +   run;
24936     +   quit;
24937     +
24938     +   data _temp;
24939     +      merge &LevelData(in=_a where=( ROLE ne 'TARGET' and LEVEL ne '_UNKNOWN_' and
24940     +        (REPLACE_VALUE ^in('', '_DEFAULT_') or (REPLACE_VALUE='_DEFAULT_' and UNKWOWNDEFAULT ne 'NONE')) ))  &nameData;
24941     +      by NAME;
24942     +      if _a then output;
24943     +   run;
24944     +
24945     +   %makeReplaceCode(ScoreFile=&EM_FILE_EMPUBLISHSCORECODE, Data=_temp);
24946     +   %makeReplaceOptCode(Folder=&em_user_replacecode,        Data=_temp);
24947     +
24948     +   /* Generating Flow Score Code */
24949     +   data _temp;
24950     +      set &LevelData;
24951     +      where LEVEL='_UNKNOWN_' and (REPLACE_VALUE ^in('', '_DEFAULT_') or
24952     +                             (REPLACE_VALUE='_DEFAULT_' and UNKWOWNDEFAULT ne 'NONE'));
24953     +      keep NAME;
24954     +   run;
24955     +
24956     +   data _temp;
24957     +      merge _temp(in=_a) &Leveldata &nameData;
24958     +      by NAME;
24959     +      if _a then output;
24960     +   run;
24961     +   %makeUnknownCode(ScoreFile=&EM_FILE_EMFLOWSCORECODE, Data=_temp);
24962     +
24963     +   data _temp;
24964     +      merge &LevelData(in=_a where=(LEVEL ne '_UNKNOWN_' and (REPLACE_VALUE ^in('', '_DEFAULT_') or
24965     +                             (REPLACE_VALUE='_DEFAULT_' and UNKWOWNDEFAULT ne 'NONE')) )) &nameData;
24966     +      by NAME;
24967     +      if _a then output;
24968     +   run;
24969     +
24970     +   %makeReplaceCode(ScoreFile=&EM_FILE_EMFLOWSCORECODE, Data=_temp);
24971     +
24972     +   %if "&UFormatFlag" = "1" %then %do;
24973     +       filename _F1 "&em_user_replacecode&em_dsep._ALL_.sas" MOD;
24974     +       data _null_;
24975     +          file _F1;
24976     +          put 'length _UFormat200 $200;';
24977     +          put 'drop   _UFORMAT200;';
24978     +          put '_UFORMAT200 = " ";';
24979     +       run;
24980     +       filename _F1;
24981     +   %end;
24982     +
24983     +%mend makeClassScoreCode;
24984     +
24985     +%macro makeClassDeltaCode(nameData=_newNames);
24986     +   %if ^%sysfunc(exist(&nameData)) %then %goto doendm;
24987     +
24988     +   filename _F1 "&EM_FILE_CDELTA_TRAIN" MOD;
24989     +   data _null_;
24990     +        set &nameData end=eof;
24991     +        length string $400;
24992     +        file _F1;
24993     +        %if &EM_PROPERTY_HIDEVARIABLE eq Y %then %do;
24994     +            string = 'if NAME="'!!strip(NAME)!!'" then delete;';  put string;
24995     +        %end;
24996     +        %else %do;
24997     +            string = 'if NAME="'!!strip(NAME)!!'" then ROLE="REJECTED";'; put string;
24998     +        %end;
24999     +        put 'else';
25000     +        string = '   if NAME="'!!strip(NEWNAME)!!'" then do;'; put string;
25001     +        string = '      ROLE="'!!strip(ROLE)!!'";';            put string;
25002     +        string = '      LEVEL="'!!strip(MLEVEL)!!'";';         put string;
25003     +        put      'end;';
25004     +        if ^eof then
25005     +           put 'else';
25006     +   run;
25007     +   %doendm:
25008     +   filename _F1;
25009     +%mend makeClassDeltaCode;
25010     +
25011     +%macro makeValueReport(Data=, outData=);
25012     +   data &outData;
25013     +      set &data;
25014     +      where REPLACE_VALUE ^in('', '_DEFAULT_') or (REPLACE_VALUE eq '_DEFAULT_' and UNKWOWNDEFAULT ne 'NONE');
25015     +      if LEVEL = '_UNKNOWN_' then do;
25016     +         LEVEL='Unknown';
25017     +         %if &EM_PROPERTY_UNKNOWNLEVEL = MODE %then %do;
25018     +         if REPLACE_VALUE in('_MODE_', '_DEFAULT_') then REPLACE_VALUE = strip(NORMMODE);
25019     +         else
25020     +            if REPLACE_VALUE ='_MISSING_' then do;
25021     +               if type eq 'N' then REPLACE_VALUE='.';
25022     +               else REPLACE_VALUE='_blank_';
25023     +            end;
25024     +         %end;
25025     +         %else  %do;
25026     +         if REPLACE_VALUE = '_MODE_' then REPLACE_VALUE = strip(NORMMODE);
25027     +         else
25028     +            if REPLACE_VALUE in('_MISSING_', '_DEFAULT_') then do;
25029     +               if type eq 'N' then REPLACE_VALUE='.';
25030     +               else REPLACE_VALUE='_blank_';
25031     +            end;
25032     +         %end;
25033     +      end;
25034     +      else do;
25035     +         if REPLACE_VALUE ='_MISSING_' then do;
25036     +            if type eq 'N' then REPLACE_VALUE='.';
25037     +            else REPLACE_VALUE='_blank_';
25038     +         end;
25039     +         else
25040     +            if REPLACE_VALUE = '_MODE_' then REPLACE_VALUE = strip(NORMMODE);
25041     +      end;
25042     +      keep NAME LEVEL CRAW NRAW REPLACE_VALUE TYPE LABEL ;
25043     +   run;
25044     +%mend makeValueReport;
25045     +
25046     +%macro makeVarOptCode(LimitDs=, Folder=);
25047     +    %if ^%sysfunc(exist(&LimitDs)) or "&Folder" eq "" %then %goto doendo;
25048     +
25049     +    %let dsid = %sysfunc(open(&limitDs));
25050     +    %do %while(^%sysfunc(fetch(&dsid)));
25051     +        %let newNum     = %sysfunc(varnum(&dsid, NewName));
25052     +        %let newname = %sysfunc(getvarc(&dsid, &newNum));
25053     +
25054     +    filename sfile "&Folder.&em_dsep.&newname..sas";
25055     +    data _null_;
25056     +       length string $400;
25057     +       set &LimitDs;
25058     +       where NEWNAME="&newname";
25059     +       file sfile;
25060     +       put '* ;';
25061     +       string = '*Variable: '!!strip(name)!!';';
25062     +       put string;
25063     +       put '* ;';
25064     +       if label eq '' then
25065     +          string = 'Label '!!strip(newname)!!"= 'Replacement: "!!strip(name)!!"';";
25066     +       else
25067     +          string = 'Label '!!strip(newname)!!"= 'Replacement: "!!strip(tranwrd(label, "'", "''"))!!"';";
25068     +       put string;
25069     +       string = strip(newname)!!'= '!!strip(NAME)!!';';
25070     +       put string;
25071     +       replacemin = .;
25072     +       string = 'if '!!strip(name)!!' eq . then '!!strip(newname)!!' = .;';
25073     +       put string;
25074     +       if LowerLimit ne . then do;
25075     +          if ReplaceMethodUsed="COMPUTED" then replaceMin=LowerLimit;
25076     +          if ReplaceMethodUsed="MANUAL"   then replaceMin = ReplaceMinUsed;
25077     +          put 'else';
25078     +          string = 'if '!!strip(name)!!'<'!!strip(put(lowerlimit,best.))
25079     +                    !!' then '!!strip(newname)!!'='!!strip(put(replaceMin,best.))!!';';
25080     +          put string;
25081     +       end;
25082     +       if UpperLimit ne . then do;
25083     +          if ReplaceMethodUsed="COMPUTED" then replaceMax=UpperLimit;
25084     +          if ReplaceMethodUsed="MANUAL"   then replaceMax = ReplaceMaxUsed;
25085     +          put 'else';
25086     +          string = 'if '!!strip(name)!!'>'!!strip(put(upperlimit,best.))
25087     +                    !!' then '!!strip(newname)!!'='!!strip(put(replaceMax,best.))!!';';
25088     +          put string;
25089     +       end;
25090     +        run;
25091     +        filename sfile;
25092     +    %end;
25093     +    %let dsid = %sysfunc(close(&dsid));
25094     +
25095     +    %doendo:
25096     +%mend makeVarOptCode;
25097     +
25098     +%macro score;
25099     +   %em_register(key=REPLACECODE, type=FOLDER);
25100     +
25101     +   filename x catalog 'sashelp.emutil.em_deldir.source';
25102     +   %inc x;
25103     +   filename x;
25104     +   %delDir(folder=%nrbquote(&em_user_replacecode));
25105     +
25106     +   data _null_; length rc $200;
25107     +      rc = dcreate('REPLACECODE', "&EM_NODEDIR");
25108     +   run;
25109     +
25110     +   filename _F1 "&EM_FILE_EMFLOWSCORECODE";
25111     +   filename _F2 "&EM_FILE_EMPUBLISHSCORECODE";
25112     +   filename _F3 "&EM_FILE_CDELTA_TRAIN";
25113     +   data _null_;
25114     +      rc=fdelete('_F1');
25115     +      rc=fdelete('_F2');
25116     +      rc=fdelete('_F3');
25117     +   run;
25118     +   filename _F1;
25119     +   filename _F2;
25120     +   filename _F3;
25121     +
25122     +   %em_getname(key=OUTCLASS,  type=DATA);
25123     +   %em_getname(key=LIMITS, type=DATA);
25124     +   %em_getname(key=CLASSINFO, type=DATA);
25125     +
25126     +   /* Retrieve Replacement Values for Class Variables */
25127     +   %makeLevelData(outclass=&em_user_outclass, data=CLASSTEMP);
25128     +
25129     +   /* Generate Names for Replaced Variables */
25130     +   %makeNewNames(limitDs =&em_user_limits, classValue=CLASSTEMP, classname=&em_user_classinfo);
25131     +
25132     +   /* Generate score and delta code for Var Variables */
25133     +   %if %sysfunc(exist(&EM_USER_LIMITS)) %then %do;
25134     +       %makeVarScoreCode(LimitDs = &EM_USER_LIMITS, File=&EM_FILE_EMFLOWSCORECODE);
25135     +       %makeVarScoreCode(LimitDs = &EM_USER_LIMITS, File=&EM_FILE_EMPUBLISHSCORECODE);
25136     +       %makeVarOptCode(LimitDs= &EM_USER_LIMITS,    Folder=&em_user_replacecode);
25137     +       %makeVarDeltaCode(LimitDs = &EM_USER_LIMITS);
25138     +
25139     +       proc print data=&EM_USER_LIMITS label noobs;
25140     +          var Name newname lowerLimit REPLACEMINUSED UpperLimit REPLACEMAXUSED;
25141     +          label REPLACEMINUSED  =  "%sysfunc(sasmsg(sashelp.dmine, rpt_replacemin_vlabel, NOQUOTE))"
25142     +                REPLACEMAXUSED  =  "%sysfunc(sasmsg(sashelp.dmine, rpt_replacemax_vlabel, NOQUOTE))";
25143     +          title9  ' ';
25144     +          title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_varlimits_title, NOQUOTE))";
25145     +       run;
25146     +       title10;
25147     +  %end;
25148     +
25149     +   %if %sysfunc(exist(&EM_USER_CLASSINFO)) %then %do;
25150     +       %makeClassScoreCode(LevelData=CLASSTEMP, nameData=&em_user_classinfo);
25151     +       %makeClassDeltaCode(nameData=&em_user_classinfo);
25152     +   %end;
25153     +
25154     +   %em_getname(key=VALUES, type=DATA);
25155     +   %makeValueReport(data=CLASSTEMP, outData=&EM_USER_VALUES);
25156     +   %if %sysfunc(exist(&EM_USER_VALUES)) %then %do;
25157     +       %let nobs = 0;
25158     +       %let dsid = %sysfunc(open(&EM_USER_VALUES));
25159     +       %if &dsid %then %do;
25160     +           %let nobs =  %sysfunc(attrn(&dsid, NOBS));
25161     +           %let dsid = %sysfunc(close(&dsid));
25162     +       %end;
25163     +       %if &nobs %then
25164     +           %EM_REPORT(key=VALUES, viewtype=DATA, block=MODEL, description=ReplaceLevels,autoDisplay=N);
25165     +   %end;
25166     +
25167     +   %if %sysfunc(exist(&EM_USER_VALUES)) %then %do;
25168     +       proc print data=&EM_USER_VALUES label noobs;
25169     +          title9  ' ';
25170     +          title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_classreplacement_title, NOQUOTE))";
25171     +      run;
25172     +      title10;
25173     +  %end;
25174     +
25175     +   proc datasets lib=work nolist;
25176     +      delete CLASSTEMP;
25177     +   run;
25178     +   quit;
25179     +
25180     +   %em_register(key=EMSCOREVAR, type=DATA);
25181     +   %let scorevarDs = %scan(&em_user_emscorevar, 2, .);
25182     +   proc datasets lib=&em_lib nolist;
25183     +      delete &scorevarDs;
25184     +   run;
25185     +   quit;
25186     +
25187     +   %let filrf=mydir;
25188     +   %let rc=%sysfunc(filename(filrf,&em_user_replacecode));
25189     +   %let did=%sysfunc(dopen(&filrf));
25190     +
25191     +   %if &did %then %do;
25192     +       %let memcount=%sysfunc(dnum(&did));
25193     +       %if &memcount > 0 %then %do;
25194     +           data &em_user_emscorevar;
25195     +              length Name $32 formula $70 file $200;
25196     +              keep NAME Formula file;
25197     +
25198     +           %if %sysfunc(fileexist(&em_user_replacecode&em_dsep._ALL_.sas)) %then %do;
25199     +               name=''; file="REPLACECODE&em_dsep._ALL_.sas";
25200     +               output;
25201     +           %end;
25202     +           %do i=1 %to &memcount;
25203     +               %let name =%nrbquote(%sysfunc(dread(&did,&i)));
25204     +               %let newvar = %scan(&name, 1, .);
25205     +               %if "&newvar" ne "_ALL_" %then %do;
25206     +                   name = "&newvar"; file="REPLACECODE&em_dsep&name";
25207     +                   output;
25208     +               %end;
25209     +           %end;
25210     +           run;
25211     +       %end;
25212     +  %end;
25213     +  %if &did %then %let did = %sysfunc(dclose(&did));
25214     +
25215     +
25216     +%mend score;
NOTE: %INCLUDE (level 1) ending.
MPRINT(MAIN):   filename temp;
NOTE: Fileref TEMP has been deassigned.
MPRINT(EM_REGISTER):   data WORK.EM_USER_KEY;
MPRINT(EM_REGISTER):   length KEY $32 TYPE $10 FILE $200 FOLDER $32 EXTENSION $8 AUTODELETE $1 property $1 action $8;
MPRINT(EM_REGISTER):   key = upcase("REPLACECODE");
MPRINT(EM_REGISTER):   type = upcase("FOLDER");
MPRINT(EM_REGISTER):   file = "REPLACECODE";
MPRINT(EM_REGISTER):   folder = "";
MPRINT(EM_REGISTER):   extension = "";
MPRINT(EM_REGISTER):   AUTODELETE = "Y";
MPRINT(EM_REGISTER):   property = "N";
MPRINT(EM_REGISTER):   action = "";
MPRINT(EM_REGISTER):   run;
 
NOTE: The data set WORK.EM_USER_KEY has 1 observations and 8 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(SCORE):  ;
MPRINT(SCORE):   filename x catalog 'sashelp.emutil.em_deldir.source';
NOTE: %INCLUDE (level 1) file X is file SASHELP.EMUTIL.EM_DELDIR.SOURCE.
25217     +%macro delDir(folder=);
25218     +   %let filrf=mydir;
25219     +   %let rc=%sysfunc(filename(filrf,&folder));
25220     +   %let did=%sysfunc(dopen(&filrf));
25221     +
25222     +   %if &did %then %do;
25223     +       %let memcount=%sysfunc(dnum(&did));
25224     +       %if &memcount > 0 %then %do;
25225     +           %do i=1 %to &memcount;
25226     +               %let name =%nrbquote(%sysfunc(dread(&did,&i)));
25227     +               data _null_;
25228     +                  fname="_temp&i";
25229     +                  rc=filename(fname,"&folder&em_dsep.&name");
25230     +                  if rc = 0 and fexist(fname) then
25231     +                     rc=fdelete(fname);
25232     +                  rc=filename(fname);
25233     +               run;
25234     +           %end;
25235     +       %end;
25236     +       %let rc=%sysfunc(dclose(&did));
25237     +   %end;
25238     +   %let rc = %sysfunc(fdelete(&filrf));
25239     +   %let rc=%sysfunc(filename(filrf));
25240     +%mend delDir;
NOTE: %INCLUDE (level 1) ending.
MPRINT(SCORE):   filename x;
NOTE: Fileref X has been deassigned.
MPRINT(DELDIR):   data _null_;
MPRINT(DELDIR):   fname="_temp1";
MPRINT(DELDIR):   rc=filename(fname,"H:\746\Decision Tree test\Workspaces\EMWS1\Repl2\REPLACECODE\REP_aspiration.sas");
MPRINT(DELDIR):   if rc = 0 and fexist(fname) then rc=fdelete(fname);
MPRINT(DELDIR):   rc=filename(fname);
MPRINT(DELDIR):   run;
 
NOTE: DATA statement used (Total process time):
      real time           0.02 seconds
      cpu time            0.00 seconds
 
 
MPRINT(DELDIR):   data _null_;
MPRINT(DELDIR):   fname="_temp2";
MPRINT(DELDIR):   rc=filename(fname,"H:\746\Decision Tree test\Workspaces\EMWS1\Repl2\REPLACECODE\REP_body_style.sas");
MPRINT(DELDIR):   if rc = 0 and fexist(fname) then rc=fdelete(fname);
MPRINT(DELDIR):   rc=filename(fname);
MPRINT(DELDIR):   run;
 
NOTE: DATA statement used (Total process time):
      real time           0.02 seconds
      cpu time            0.00 seconds
 
 
MPRINT(DELDIR):   data _null_;
MPRINT(DELDIR):   fname="_temp3";
MPRINT(DELDIR):   rc=filename(fname,"H:\746\Decision Tree test\Workspaces\EMWS1\Repl2\REPLACECODE\REP_drive_wheels.sas");
MPRINT(DELDIR):   if rc = 0 and fexist(fname) then rc=fdelete(fname);
MPRINT(DELDIR):   rc=filename(fname);
MPRINT(DELDIR):   run;
 
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
MPRINT(DELDIR):   data _null_;
MPRINT(DELDIR):   fname="_temp4";
MPRINT(DELDIR):   rc=filename(fname,"H:\746\Decision Tree test\Workspaces\EMWS1\Repl2\REPLACECODE\REP_engine_location.sas");
MPRINT(DELDIR):   if rc = 0 and fexist(fname) then rc=fdelete(fname);
MPRINT(DELDIR):   rc=filename(fname);
MPRINT(DELDIR):   run;
 
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
MPRINT(DELDIR):   data _null_;
MPRINT(DELDIR):   fname="_temp5";
MPRINT(DELDIR):   rc=filename(fname,"H:\746\Decision Tree test\Workspaces\EMWS1\Repl2\REPLACECODE\REP_fuel_type.sas");
MPRINT(DELDIR):   if rc = 0 and fexist(fname) then rc=fdelete(fname);
MPRINT(DELDIR):   rc=filename(fname);
MPRINT(DELDIR):   run;
 
NOTE: DATA statement used (Total process time):
      real time           0.02 seconds
      cpu time            0.01 seconds
 
 
MPRINT(DELDIR):   data _null_;
MPRINT(DELDIR):   fname="_temp6";
MPRINT(DELDIR):   rc=filename(fname,"H:\746\Decision Tree test\Workspaces\EMWS1\Repl2\REPLACECODE\REP_num_of_cylinders.sas");
MPRINT(DELDIR):   if rc = 0 and fexist(fname) then rc=fdelete(fname);
MPRINT(DELDIR):   rc=filename(fname);
MPRINT(DELDIR):   run;
 
NOTE: DATA statement used (Total process time):
      real time           0.02 seconds
      cpu time            0.00 seconds
 
 
MPRINT(DELDIR):   data _null_;
MPRINT(DELDIR):   fname="_temp7";
MPRINT(DELDIR):   rc=filename(fname,"H:\746\Decision Tree test\Workspaces\EMWS1\Repl2\REPLACECODE\_ALL_.sas");
MPRINT(DELDIR):   if rc = 0 and fexist(fname) then rc=fdelete(fname);
MPRINT(DELDIR):   rc=filename(fname);
MPRINT(DELDIR):   run;
 
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
MPRINT(SCORE):  ;
MPRINT(SCORE):   data _null_;
MPRINT(SCORE):   length rc $200;
MPRINT(SCORE):   rc = dcreate('REPLACECODE', "H:\746\Decision Tree test\Workspaces\EMWS1\Repl2");
MPRINT(SCORE):   run;
 
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
MPRINT(SCORE):   filename _F1 "H:\746\Decision Tree test\Workspaces\EMWS1\Repl2\EMFLOWSCORE.sas";
MPRINT(SCORE):   filename _F2 "H:\746\Decision Tree test\Workspaces\EMWS1\Repl2\EMPUBLISHSCORE.sas";
MPRINT(SCORE):   filename _F3 "H:\746\Decision Tree test\Workspaces\EMWS1\Repl2\CDELTA_TRAIN.sas";
MPRINT(SCORE):   data _null_;
MPRINT(SCORE):   rc=fdelete('_F1');
MPRINT(SCORE):   rc=fdelete('_F2');
MPRINT(SCORE):   rc=fdelete('_F3');
MPRINT(SCORE):   run;
 
NOTE: DATA statement used (Total process time):
      real time           0.04 seconds
      cpu time            0.01 seconds
 
 
MPRINT(SCORE):   filename _F1;
NOTE: Fileref _F1 has been deassigned.
MPRINT(SCORE):   filename _F2;
NOTE: Fileref _F2 has been deassigned.
MPRINT(SCORE):   filename _F3;
NOTE: Fileref _F3 has been deassigned.
MPRINT(SCORE):  ;
MPRINT(SCORE):  ;
MPRINT(SCORE):  ;
MPRINT(MAKELEVELDATA):   data REPLACE_MODE;
MPRINT(MAKELEVELDATA):   set EMWS1.Repl2_OUTCLASS;
MPRINT(MAKELEVELDATA):   by NAME;
MPRINT(MAKELEVELDATA):   if first.name then do;
MPRINT(MAKELEVELDATA):   MODEC = CRAW;
MPRINT(MAKELEVELDATA):   MODEN = NRAW;
MPRINT(MAKELEVELDATA):   NORMMODE = LEVEL;
MPRINT(MAKELEVELDATA):   output;
MPRINT(MAKELEVELDATA):   end;
MPRINT(MAKELEVELDATA):   keep NAME MODEC MODEN NORMMODE UNKWOWNDEFAULT;
MPRINT(MAKELEVELDATA):   run;
 
WARNING: The variable UNKWOWNDEFAULT in the DROP, KEEP, or RENAME list has never been referenced.
NOTE: There were 56 observations read from the data set EMWS1.REPL2_OUTCLASS.
NOTE: The data set WORK.REPLACE_MODE has 14 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(MAKELEVELDATA):   proc sort data=EMWS1.Repl2_VariableSet;
MPRINT(MAKELEVELDATA):   by NAME;
MPRINT(MAKELEVELDATA):   run;
 
NOTE: Input data set is already sorted, no sorting done.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(MAKELEVELDATA):   data CLASSTEMP;
MPRINT(MAKELEVELDATA):   length UNKWOWNDEFAULT $8;
MPRINT(MAKELEVELDATA):   merge EMWS1.Repl2_OUTCLASS(in=_a) REPLACE_MODE EMWS1.Repl2_VariableSet(keep=LABEL LENGTH NAME ROLE LEVEL LABEL FORMAT RENAME=(LEVEL=MLEVEL) where=(MLEVEL ne 'INTERVAL'));
MPRINT(MAKELEVELDATA):   by NAME;
MPRINT(MAKELEVELDATA):   if LEVEL = '_UNKNOWN_' then UNKWOWNDEFAULT = "NONE";
MPRINT(MAKELEVELDATA):   if _a then output;
MPRINT(MAKELEVELDATA):   run;
 
WARNING: Multiple lengths were specified for the BY variable Name by input data sets. This might cause unexpected results.
NOTE: There were 56 observations read from the data set EMWS1.REPL2_OUTCLASS.
NOTE: There were 14 observations read from the data set WORK.REPLACE_MODE.
NOTE: There were 16 observations read from the data set EMWS1.REPL2_VARIABLESET.
      WHERE MLEVEL not = 'INTERVAL';
NOTE: The data set WORK.CLASSTEMP has 56 observations and 16 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(MAKELEVELDATA):   proc datasets lib=work nolist;
MPRINT(MAKELEVELDATA):   delete REPLACE_MODE;
MPRINT(MAKELEVELDATA):   run;
NOTE: Deleting WORK.REPLACE_MODE (memtype=DATA).
MPRINT(MAKELEVELDATA):   quit;
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(SCORE):  ;
MPRINT(MAKENEWNAMES):   proc sort data=CLASSTEMP out=invarname nodupkey;
MPRINT(MAKENEWNAMES):   by NAME;
MPRINT(MAKENEWNAMES):   where REPLACE_VALUE ^in('', '_DEFAULT_') or (REPLACE_VALUE eq '_DEFAULT_' and UNKWOWNDEFAULT ne 'NONE');
MPRINT(MAKENEWNAMES):   run;
 
NOTE: There were 24 observations read from the data set WORK.CLASSTEMP.
      WHERE REPLACE_VALUE not in (' ', '_DEFAULT_') or ((REPLACE_VALUE='_DEFAULT_') and (UNKWOWNDEFAULT not = 'NONE'));
NOTE: 17 observations with duplicate key values were deleted.
NOTE: The data set WORK.INVARNAME has 7 observations and 16 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(MAKENEWNAMES):   data invarname;
MPRINT(MAKENEWNAMES):   set invarname(keep=NAME) ;
MPRINT(MAKENEWNAMES):   run;
 
NOTE: There were 7 observations read from the data set WORK.INVARNAME.
NOTE: The data set WORK.INVARNAME has 7 observations and 1 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
MPRINT(MAKENEWNAMES):   proc dmdb data=invarname outtable=outname(rename=(REP=NEWNAME)) nameserver;
MPRINT(MAKENEWNAMES):   names NAME;
MPRINT(MAKENEWNAMES):   prefix REP_;
MPRINT(MAKENEWNAMES):   run;
 
NOTE: There were 7 observations read from the data set WORK.INVARNAME.
NOTE: The data set WORK.OUTNAME has 7 observations and 2 variables.
NOTE: PROCEDURE DMDB used (Total process time):
      real time           0.05 seconds
      cpu time            0.00 seconds
 
 
MPRINT(MAKENEWNAMES):   proc sort data=outname;
MPRINT(MAKENEWNAMES):   by NAME;
MPRINT(MAKENEWNAMES):   run;
 
NOTE: There were 7 observations read from the data set WORK.OUTNAME.
NOTE: The data set WORK.OUTNAME has 7 observations and 2 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
MPRINT(MAKENEWNAMES):   data length;
MPRINT(MAKENEWNAMES):   retain newlen 0;
MPRINT(MAKENEWNAMES):   set CLASSTEMP;
MPRINT(MAKENEWNAMES):   by NAME;
MPRINT(MAKENEWNAMES):   if type eq 'C' then do;
MPRINT(MAKENEWNAMES):   if first.name then do;
MPRINT(MAKENEWNAMES):   if REPLACE_VALUE ^in('_DEFAULT_', '_MODE_', '_MISSING_') then newlen = max(length, length(strip(replace_value)));
MPRINT(MAKENEWNAMES):   else newlen = length;
MPRINT(MAKENEWNAMES):   end;
MPRINT(MAKENEWNAMES):   else do;
MPRINT(MAKENEWNAMES):   if REPLACE_VALUE ^in('_DEFAULT_', '_MODE_', '_MISSING_') then newlen = max(newlen, length(strip(replace_value)));
MPRINT(MAKENEWNAMES):   end;
MPRINT(MAKENEWNAMES):   end;
MPRINT(MAKENEWNAMES):   else newlen = length;
MPRINT(MAKENEWNAMES):   len=length;
MPRINT(MAKENEWNAMES):   if last.name then output;
MPRINT(MAKENEWNAMES):   keep name len newlen role format type label mlevel;
MPRINT(MAKENEWNAMES):   run;
 
NOTE: There were 56 observations read from the data set WORK.CLASSTEMP.
NOTE: The data set WORK.LENGTH has 14 observations and 8 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
MPRINT(MAKENEWNAMES):   data EMWS1.Repl2_CLASSINFO;
MPRINT(MAKENEWNAMES):   length rformat formatroot $32;
MPRINT(MAKENEWNAMES):   merge outname(in=a) length(in=b);
MPRINT(MAKENEWNAMES):   by NAME;
MPRINT(MAKENEWNAMES):   length=len;
MPRINT(MAKENEWNAMES):   if newlen > len then do;
MPRINT(MAKENEWNAMES):   if type eq 'C' and format ne '' then do;
MPRINT(MAKENEWNAMES):   rformat = strip(reverse(format));
MPRINT(MAKENEWNAMES):   do while(indexc(rformat, '.0123456789')=1);
MPRINT(MAKENEWNAMES):   rformat = substr(rformat, 2);
MPRINT(MAKENEWNAMES):   end;
MPRINT(MAKENEWNAMES):   formatroot= upcase(reverse(rformat));
MPRINT(MAKENEWNAMES):   if strip(formatRoot) in('$','$F','$UPCASE','$CHAR') then do;
MPRINT(MAKENEWNAMES):   format = strip(formatroot)!!strip(put(newlen, best.))!!'.';
MPRINT(MAKENEWNAMES):   end;
MPRINT(MAKENEWNAMES):   end;
MPRINT(MAKENEWNAMES):   length = newlen;
MPRINT(MAKENEWNAMES):   end;
MPRINT(MAKENEWNAMES):   if a and b then output;
MPRINT(MAKENEWNAMES):   KEEP name newname role format mlevel type label length;
MPRINT(MAKENEWNAMES):   run;
 
NOTE: There were 7 observations read from the data set WORK.OUTNAME.
NOTE: There were 14 observations read from the data set WORK.LENGTH.
NOTE: The data set EMWS1.REPL2_CLASSINFO has 7 observations and 8 variables.
NOTE: DATA statement used (Total process time):
      real time           0.08 seconds
      cpu time            0.03 seconds
 
 
MPRINT(MAKENEWNAMES):   proc datasets lib=work nolist;
MPRINT(MAKENEWNAMES):   delete length invarname outname;
MPRINT(MAKENEWNAMES):   run;
 
NOTE: Deleting WORK.LENGTH (memtype=DATA).
NOTE: Deleting WORK.INVARNAME (memtype=DATA).
NOTE: Deleting WORK.OUTNAME (memtype=DATA).
MPRINT(MAKENEWNAMES):   quit;
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
MPRINT(SCORE):  ;
MPRINT(EM_REGISTER):   data WORK.EM_USER_KEY;
MPRINT(EM_REGISTER):   set WORK.EM_USER_KEY end=eof;
MPRINT(EM_REGISTER):   output;
MPRINT(EM_REGISTER):   if eof then do;
MPRINT(EM_REGISTER):   key = upcase("REPLACECODE");
MPRINT(EM_REGISTER):   type = upcase("FOLDER");
MPRINT(EM_REGISTER):   file = "REPLACECODE";
MPRINT(EM_REGISTER):   folder = "";
MPRINT(EM_REGISTER):   extension = "";
MPRINT(EM_REGISTER):   AUTODELETE = "Y";
MPRINT(EM_REGISTER):   property = "N";
MPRINT(EM_REGISTER):   action = "";
MPRINT(EM_REGISTER):   output;
MPRINT(EM_REGISTER):   end;
MPRINT(EM_REGISTER):   run;
 
NOTE: There were 1 observations read from the data set WORK.EM_USER_KEY.
NOTE: The data set WORK.EM_USER_KEY has 2 observations and 8 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(MAKECLASSSCORECODE):  ;
MPRINT(MAKENEWVARCODE):   filename _F1 "H:\746\Decision Tree test\Workspaces\EMWS1\Repl2\EMFLOWSCORE.sas" MOD;
MPRINT(MAKENEWVARCODE):   data _null_;
MPRINT(MAKENEWVARCODE):   length string $400;
MPRINT(MAKENEWVARCODE):   set EMWS1.Repl2_CLASSINFO end=eof;
MPRINT(MAKENEWVARCODE):   file _F1;
MPRINT(MAKENEWVARCODE):   if _N_=1 then do;
MPRINT(MAKENEWVARCODE):   put '   ';
MPRINT(MAKENEWVARCODE):   put '* ;';
MPRINT(MAKENEWVARCODE):   put '* Defining New Variables;';
MPRINT(MAKENEWVARCODE):   put '* ;';
MPRINT(MAKENEWVARCODE):   end;
MPRINT(MAKENEWVARCODE):   if type eq 'C' then do;
MPRINT(MAKENEWVARCODE):   string = 'Length '!!strip(newname)!!' $'!!strip(put(length,BEST12.))!!';';
MPRINT(MAKENEWVARCODE):   put string;
MPRINT(MAKENEWVARCODE):   end;
MPRINT(MAKENEWVARCODE):   if strip(label) = '' then label = name;
MPRINT(MAKENEWVARCODE):   string= 'Label '!!strip(newname)!!"='Replacement: "!!strip(tranwrd(label, "'","''"))!!"';";
MPRINT(MAKENEWVARCODE):   put string;
MPRINT(MAKENEWVARCODE):   if format ne '' then do;
MPRINT(MAKENEWVARCODE):   string ='format '!!strip(newname)!!' '!!strip(format)!!';';
MPRINT(MAKENEWVARCODE):   put string;
MPRINT(MAKENEWVARCODE):   end;
MPRINT(MAKENEWVARCODE):   string = strip(newname)!!'= '!!strip(NAME)!!';';
MPRINT(MAKENEWVARCODE):   put string;
MPRINT(MAKENEWVARCODE):   run;
 
NOTE: The file _F1 is:
      Filename=H:\746\Decision Tree test\Workspaces\EMWS1\Repl2\EMFLOWSCORE.sas,
      RECFM=V,LRECL=32767,File Size (bytes)=0,
      Last Modified=April 16, 2021 11:26:01 o'cloc,
      Create Time=April 16, 2021 11:26:01 o'cloc
 
NOTE: 26 records were written to the file _F1.
      The minimum record length was 3.
      The maximum record length was 59.
NOTE: There were 7 observations read from the data set EMWS1.REPL2_CLASSINFO.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.00 seconds
 
 
MPRINT(MAKECLASSSCORECODE):  ;
MPRINT(MAKECLASSSCORECODE):   data _tempNewVars;
MPRINT(MAKECLASSSCORECODE):   set EMWS1.Repl2_CLASSINFO;
MPRINT(MAKECLASSSCORECODE):   where ROLE ne 'TARGET';
MPRINT(MAKECLASSSCORECODE):   run;
 
NOTE: There were 7 observations read from the data set EMWS1.REPL2_CLASSINFO.
      WHERE ROLE not = 'TARGET';
NOTE: The data set WORK._TEMPNEWVARS has 7 observations and 8 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(MAKENEWVARCODE):   filename _F1 "H:\746\Decision Tree test\Workspaces\EMWS1\Repl2\EMPUBLISHSCORE.sas" MOD;
MPRINT(MAKENEWVARCODE):   data _null_;
MPRINT(MAKENEWVARCODE):   length string $400;
MPRINT(MAKENEWVARCODE):   set _tempNewVars end=eof;
MPRINT(MAKENEWVARCODE):   file _F1;
MPRINT(MAKENEWVARCODE):   if _N_=1 then do;
MPRINT(MAKENEWVARCODE):   put '   ';
MPRINT(MAKENEWVARCODE):   put '* ;';
MPRINT(MAKENEWVARCODE):   put '* Defining New Variables;';
MPRINT(MAKENEWVARCODE):   put '* ;';
MPRINT(MAKENEWVARCODE):   end;
MPRINT(MAKENEWVARCODE):   if type eq 'C' then do;
MPRINT(MAKENEWVARCODE):   string = 'Length '!!strip(newname)!!' $'!!strip(put(length,BEST12.))!!';';
MPRINT(MAKENEWVARCODE):   put string;
MPRINT(MAKENEWVARCODE):   end;
MPRINT(MAKENEWVARCODE):   if strip(label) = '' then label = name;
MPRINT(MAKENEWVARCODE):   string= 'Label '!!strip(newname)!!"='Replacement: "!!strip(tranwrd(label, "'","''"))!!"';";
MPRINT(MAKENEWVARCODE):   put string;
MPRINT(MAKENEWVARCODE):   if format ne '' then do;
MPRINT(MAKENEWVARCODE):   string ='format '!!strip(newname)!!' '!!strip(format)!!';';
MPRINT(MAKENEWVARCODE):   put string;
MPRINT(MAKENEWVARCODE):   end;
MPRINT(MAKENEWVARCODE):   string = strip(newname)!!'= '!!strip(NAME)!!';';
MPRINT(MAKENEWVARCODE):   put string;
MPRINT(MAKENEWVARCODE):   run;
 
NOTE: The file _F1 is:
      Filename=H:\746\Decision Tree test\Workspaces\EMWS1\Repl2\EMPUBLISHSCORE.sas,
      RECFM=V,LRECL=32767,File Size (bytes)=0,
      Last Modified=April 16, 2021 11:26:01 o'cloc,
      Create Time=April 16, 2021 11:26:01 o'cloc
 
NOTE: 26 records were written to the file _F1.
      The minimum record length was 3.
      The maximum record length was 59.
NOTE: There were 7 observations read from the data set WORK._TEMPNEWVARS.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
MPRINT(MAKECLASSSCORECODE):  ;
MPRINT(MAKENEWVAROPTCODE):   data _temp_;
MPRINT(MAKENEWVAROPTCODE):  set _tempNewVars;
MPRINT(MAKENEWVAROPTCODE):  run;
 
NOTE: There were 7 observations read from the data set WORK._TEMPNEWVARS.
NOTE: The data set WORK._TEMP_ has 7 observations and 8 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(MAKENEWVAROPTCODE):   filename _F1 "H:\746\Decision Tree test\Workspaces\EMWS1\Repl2\REPLACECODE\REP_aspiration.sas";
MPRINT(MAKENEWVAROPTCODE):   data _null_;
MPRINT(MAKENEWVAROPTCODE):   length string $400;
MPRINT(MAKENEWVAROPTCODE):   set _tempNewVars;
MPRINT(MAKENEWVAROPTCODE):   where NEWNAME="REP_aspiration";
MPRINT(MAKENEWVAROPTCODE):   file _F1;
MPRINT(MAKENEWVAROPTCODE):   put '   ';
MPRINT(MAKENEWVAROPTCODE):   put '* ;';
MPRINT(MAKENEWVAROPTCODE):   put "* Defining: REP_aspiration;";
MPRINT(MAKENEWVAROPTCODE):   put '* ;';
MPRINT(MAKENEWVAROPTCODE):   if type eq 'C' then do;
MPRINT(MAKENEWVAROPTCODE):   string = 'Length '!!strip(newname)!!'$'!!strip(put(length, best.))!!';';
MPRINT(MAKENEWVAROPTCODE):   put string;
MPRINT(MAKENEWVAROPTCODE):   end;
MPRINT(MAKENEWVAROPTCODE):   if strip(label) = '' then label = name;
MPRINT(MAKENEWVAROPTCODE):   string= 'Label '!!strip(newname)!!"='Replacement: "!!strip(tranwrd(label, "'","''"))!!"';";
MPRINT(MAKENEWVAROPTCODE):   put string;
MPRINT(MAKENEWVAROPTCODE):   if format ne '' then do;
MPRINT(MAKENEWVAROPTCODE):   string= 'format '!!strip(newname)!!' '!!strip(format)!!';';
MPRINT(MAKENEWVAROPTCODE):   put string;
MPRINT(MAKENEWVAROPTCODE):   end;
MPRINT(MAKENEWVAROPTCODE):   string = strip(newname)!!'='!!strip(name)!!';';
MPRINT(MAKENEWVAROPTCODE):   put string;
MPRINT(MAKENEWVAROPTCODE):   run;
 
NOTE: The file _F1 is:
      Filename=H:\746\Decision Tree test\Workspaces\EMWS1\Repl2\REPLACECODE\REP_aspiration.sas,
      RECFM=V,LRECL=32767,File Size (bytes)=0,
      Last Modified=April 16, 2021 11:26:01 o'cloc,
      Create Time=April 16, 2021 11:26:01 o'cloc
 
NOTE: 8 records were written to the file _F1.
      The minimum record length was 3.
      The maximum record length was 47.
NOTE: There were 1 observations read from the data set WORK._TEMPNEWVARS.
      WHERE NEWNAME='REP_aspiration';
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(MAKENEWVAROPTCODE):   filename _F1 "H:\746\Decision Tree test\Workspaces\EMWS1\Repl2\REPLACECODE\REP_body_style.sas";
MPRINT(MAKENEWVAROPTCODE):   data _null_;
MPRINT(MAKENEWVAROPTCODE):   length string $400;
MPRINT(MAKENEWVAROPTCODE):   set _tempNewVars;
MPRINT(MAKENEWVAROPTCODE):   where NEWNAME="REP_body_style";
MPRINT(MAKENEWVAROPTCODE):   file _F1;
MPRINT(MAKENEWVAROPTCODE):   put '   ';
MPRINT(MAKENEWVAROPTCODE):   put '* ;';
MPRINT(MAKENEWVAROPTCODE):   put "* Defining: REP_body_style;";
MPRINT(MAKENEWVAROPTCODE):   put '* ;';
MPRINT(MAKENEWVAROPTCODE):   if type eq 'C' then do;
MPRINT(MAKENEWVAROPTCODE):   string = 'Length '!!strip(newname)!!'$'!!strip(put(length, best.))!!';';
MPRINT(MAKENEWVAROPTCODE):   put string;
MPRINT(MAKENEWVAROPTCODE):   end;
MPRINT(MAKENEWVAROPTCODE):   if strip(label) = '' then label = name;
MPRINT(MAKENEWVAROPTCODE):   string= 'Label '!!strip(newname)!!"='Replacement: "!!strip(tranwrd(label, "'","''"))!!"';";
MPRINT(MAKENEWVAROPTCODE):   put string;
MPRINT(MAKENEWVAROPTCODE):   if format ne '' then do;
MPRINT(MAKENEWVAROPTCODE):   string= 'format '!!strip(newname)!!' '!!strip(format)!!';';
MPRINT(MAKENEWVAROPTCODE):   put string;
MPRINT(MAKENEWVAROPTCODE):   end;
MPRINT(MAKENEWVAROPTCODE):   string = strip(newname)!!'='!!strip(name)!!';';
MPRINT(MAKENEWVAROPTCODE):   put string;
MPRINT(MAKENEWVAROPTCODE):   run;
 
NOTE: The file _F1 is:
      Filename=H:\746\Decision Tree test\Workspaces\EMWS1\Repl2\REPLACECODE\REP_body_style.sas,
      RECFM=V,LRECL=32767,File Size (bytes)=0,
      Last Modified=April 16, 2021 11:26:01 o'cloc,
      Create Time=April 16, 2021 11:26:01 o'cloc
 
NOTE: 7 records were written to the file _F1.
      The minimum record length was 3.
      The maximum record length was 47.
NOTE: There were 1 observations read from the data set WORK._TEMPNEWVARS.
      WHERE NEWNAME='REP_body_style';
NOTE: DATA statement used (Total process time):
      real time           0.02 seconds
      cpu time            0.00 seconds
 
 
MPRINT(MAKENEWVAROPTCODE):   filename _F1 "H:\746\Decision Tree test\Workspaces\EMWS1\Repl2\REPLACECODE\REP_drive_wheels.sas";
MPRINT(MAKENEWVAROPTCODE):   data _null_;
MPRINT(MAKENEWVAROPTCODE):   length string $400;
MPRINT(MAKENEWVAROPTCODE):   set _tempNewVars;
MPRINT(MAKENEWVAROPTCODE):   where NEWNAME="REP_drive_wheels";
MPRINT(MAKENEWVAROPTCODE):   file _F1;
MPRINT(MAKENEWVAROPTCODE):   put '   ';
MPRINT(MAKENEWVAROPTCODE):   put '* ;';
MPRINT(MAKENEWVAROPTCODE):   put "* Defining: REP_drive_wheels;";
MPRINT(MAKENEWVAROPTCODE):   put '* ;';
MPRINT(MAKENEWVAROPTCODE):   if type eq 'C' then do;
MPRINT(MAKENEWVAROPTCODE):   string = 'Length '!!strip(newname)!!'$'!!strip(put(length, best.))!!';';
MPRINT(MAKENEWVAROPTCODE):   put string;
MPRINT(MAKENEWVAROPTCODE):   end;
MPRINT(MAKENEWVAROPTCODE):   if strip(label) = '' then label = name;
MPRINT(MAKENEWVAROPTCODE):   string= 'Label '!!strip(newname)!!"='Replacement: "!!strip(tranwrd(label, "'","''"))!!"';";
MPRINT(MAKENEWVAROPTCODE):   put string;
MPRINT(MAKENEWVAROPTCODE):   if format ne '' then do;
MPRINT(MAKENEWVAROPTCODE):   string= 'format '!!strip(newname)!!' '!!strip(format)!!';';
MPRINT(MAKENEWVAROPTCODE):   put string;
MPRINT(MAKENEWVAROPTCODE):   end;
MPRINT(MAKENEWVAROPTCODE):   string = strip(newname)!!'='!!strip(name)!!';';
MPRINT(MAKENEWVAROPTCODE):   put string;
MPRINT(MAKENEWVAROPTCODE):   run;
 
NOTE: The file _F1 is:
      Filename=H:\746\Decision Tree test\Workspaces\EMWS1\Repl2\REPLACECODE\REP_drive_wheels.sas,
      RECFM=V,LRECL=32767,File Size (bytes)=0,
      Last Modified=April 16, 2021 11:26:01 o'cloc,
      Create Time=April 16, 2021 11:26:01 o'cloc
 
NOTE: 7 records were written to the file _F1.
      The minimum record length was 3.
      The maximum record length was 51.
NOTE: There were 1 observations read from the data set WORK._TEMPNEWVARS.
      WHERE NEWNAME='REP_drive_wheels';
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.00 seconds
 
 
MPRINT(MAKENEWVAROPTCODE):   filename _F1 "H:\746\Decision Tree test\Workspaces\EMWS1\Repl2\REPLACECODE\REP_engine_location.sas";
MPRINT(MAKENEWVAROPTCODE):   data _null_;
MPRINT(MAKENEWVAROPTCODE):   length string $400;
MPRINT(MAKENEWVAROPTCODE):   set _tempNewVars;
MPRINT(MAKENEWVAROPTCODE):   where NEWNAME="REP_engine_location";
MPRINT(MAKENEWVAROPTCODE):   file _F1;
MPRINT(MAKENEWVAROPTCODE):   put '   ';
MPRINT(MAKENEWVAROPTCODE):   put '* ;';
MPRINT(MAKENEWVAROPTCODE):   put "* Defining: REP_engine_location;";
MPRINT(MAKENEWVAROPTCODE):   put '* ;';
MPRINT(MAKENEWVAROPTCODE):   if type eq 'C' then do;
MPRINT(MAKENEWVAROPTCODE):   string = 'Length '!!strip(newname)!!'$'!!strip(put(length, best.))!!';';
MPRINT(MAKENEWVAROPTCODE):   put string;
MPRINT(MAKENEWVAROPTCODE):   end;
MPRINT(MAKENEWVAROPTCODE):   if strip(label) = '' then label = name;
MPRINT(MAKENEWVAROPTCODE):   string= 'Label '!!strip(newname)!!"='Replacement: "!!strip(tranwrd(label, "'","''"))!!"';";
MPRINT(MAKENEWVAROPTCODE):   put string;
MPRINT(MAKENEWVAROPTCODE):   if format ne '' then do;
MPRINT(MAKENEWVAROPTCODE):   string= 'format '!!strip(newname)!!' '!!strip(format)!!';';
MPRINT(MAKENEWVAROPTCODE):   put string;
MPRINT(MAKENEWVAROPTCODE):   end;
MPRINT(MAKENEWVAROPTCODE):   string = strip(newname)!!'='!!strip(name)!!';';
MPRINT(MAKENEWVAROPTCODE):   put string;
MPRINT(MAKENEWVAROPTCODE):   run;
 
NOTE: The file _F1 is:
      Filename=H:\746\Decision Tree test\Workspaces\EMWS1\Repl2\REPLACECODE\REP_engine_location.sas,
      RECFM=V,LRECL=32767,File Size (bytes)=0,
      Last Modified=April 16, 2021 11:26:01 o'cloc,
      Create Time=April 16, 2021 11:26:01 o'cloc
 
NOTE: 7 records were written to the file _F1.
      The minimum record length was 3.
      The maximum record length was 57.
NOTE: There were 1 observations read from the data set WORK._TEMPNEWVARS.
      WHERE NEWNAME='REP_engine_location';
NOTE: DATA statement used (Total process time):
      real time           0.02 seconds
      cpu time            0.01 seconds
 
 
MPRINT(MAKENEWVAROPTCODE):   filename _F1 "H:\746\Decision Tree test\Workspaces\EMWS1\Repl2\REPLACECODE\REP_fuel_system.sas";
MPRINT(MAKENEWVAROPTCODE):   data _null_;
MPRINT(MAKENEWVAROPTCODE):   length string $400;
MPRINT(MAKENEWVAROPTCODE):   set _tempNewVars;
MPRINT(MAKENEWVAROPTCODE):   where NEWNAME="REP_fuel_system";
MPRINT(MAKENEWVAROPTCODE):   file _F1;
MPRINT(MAKENEWVAROPTCODE):   put '   ';
MPRINT(MAKENEWVAROPTCODE):   put '* ;';
MPRINT(MAKENEWVAROPTCODE):   put "* Defining: REP_fuel_system;";
MPRINT(MAKENEWVAROPTCODE):   put '* ;';
MPRINT(MAKENEWVAROPTCODE):   if type eq 'C' then do;
MPRINT(MAKENEWVAROPTCODE):   string = 'Length '!!strip(newname)!!'$'!!strip(put(length, best.))!!';';
MPRINT(MAKENEWVAROPTCODE):   put string;
MPRINT(MAKENEWVAROPTCODE):   end;
MPRINT(MAKENEWVAROPTCODE):   if strip(label) = '' then label = name;
MPRINT(MAKENEWVAROPTCODE):   string= 'Label '!!strip(newname)!!"='Replacement: "!!strip(tranwrd(label, "'","''"))!!"';";
MPRINT(MAKENEWVAROPTCODE):   put string;
MPRINT(MAKENEWVAROPTCODE):   if format ne '' then do;
MPRINT(MAKENEWVAROPTCODE):   string= 'format '!!strip(newname)!!' '!!strip(format)!!';';
MPRINT(MAKENEWVAROPTCODE):   put string;
MPRINT(MAKENEWVAROPTCODE):   end;
MPRINT(MAKENEWVAROPTCODE):   string = strip(newname)!!'='!!strip(name)!!';';
MPRINT(MAKENEWVAROPTCODE):   put string;
MPRINT(MAKENEWVAROPTCODE):   run;
 
NOTE: The file _F1 is:
      Filename=H:\746\Decision Tree test\Workspaces\EMWS1\Repl2\REPLACECODE\REP_fuel_system.sas,
      RECFM=V,LRECL=32767,File Size (bytes)=0,
      Last Modified=April 16, 2021 11:26:01 o'cloc,
      Create Time=April 16, 2021 11:26:01 o'cloc
 
NOTE: 7 records were written to the file _F1.
      The minimum record length was 3.
      The maximum record length was 49.
NOTE: There were 1 observations read from the data set WORK._TEMPNEWVARS.
      WHERE NEWNAME='REP_fuel_system';
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
MPRINT(MAKENEWVAROPTCODE):   filename _F1 "H:\746\Decision Tree test\Workspaces\EMWS1\Repl2\REPLACECODE\REP_fuel_type.sas";
MPRINT(MAKENEWVAROPTCODE):   data _null_;
MPRINT(MAKENEWVAROPTCODE):   length string $400;
MPRINT(MAKENEWVAROPTCODE):   set _tempNewVars;
MPRINT(MAKENEWVAROPTCODE):   where NEWNAME="REP_fuel_type";
MPRINT(MAKENEWVAROPTCODE):   file _F1;
MPRINT(MAKENEWVAROPTCODE):   put '   ';
MPRINT(MAKENEWVAROPTCODE):   put '* ;';
MPRINT(MAKENEWVAROPTCODE):   put "* Defining: REP_fuel_type;";
MPRINT(MAKENEWVAROPTCODE):   put '* ;';
MPRINT(MAKENEWVAROPTCODE):   if type eq 'C' then do;
MPRINT(MAKENEWVAROPTCODE):   string = 'Length '!!strip(newname)!!'$'!!strip(put(length, best.))!!';';
MPRINT(MAKENEWVAROPTCODE):   put string;
MPRINT(MAKENEWVAROPTCODE):   end;
MPRINT(MAKENEWVAROPTCODE):   if strip(label) = '' then label = name;
MPRINT(MAKENEWVAROPTCODE):   string= 'Label '!!strip(newname)!!"='Replacement: "!!strip(tranwrd(label, "'","''"))!!"';";
MPRINT(MAKENEWVAROPTCODE):   put string;
MPRINT(MAKENEWVAROPTCODE):   if format ne '' then do;
MPRINT(MAKENEWVAROPTCODE):   string= 'format '!!strip(newname)!!' '!!strip(format)!!';';
MPRINT(MAKENEWVAROPTCODE):   put string;
MPRINT(MAKENEWVAROPTCODE):   end;
MPRINT(MAKENEWVAROPTCODE):   string = strip(newname)!!'='!!strip(name)!!';';
MPRINT(MAKENEWVAROPTCODE):   put string;
MPRINT(MAKENEWVAROPTCODE):   run;
 
NOTE: The file _F1 is:
      Filename=H:\746\Decision Tree test\Workspaces\EMWS1\Repl2\REPLACECODE\REP_fuel_type.sas,
      RECFM=V,LRECL=32767,File Size (bytes)=0,
      Last Modified=April 16, 2021 11:26:01 o'cloc,
      Create Time=April 16, 2021 11:26:01 o'cloc
 
NOTE: 7 records were written to the file _F1.
      The minimum record length was 3.
      The maximum record length was 45.
NOTE: There were 1 observations read from the data set WORK._TEMPNEWVARS.
      WHERE NEWNAME='REP_fuel_type';
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
MPRINT(MAKENEWVAROPTCODE):   filename _F1 "H:\746\Decision Tree test\Workspaces\EMWS1\Repl2\REPLACECODE\REP_num_of_cylinders.sas";
MPRINT(MAKENEWVAROPTCODE):   data _null_;
MPRINT(MAKENEWVAROPTCODE):   length string $400;
MPRINT(MAKENEWVAROPTCODE):   set _tempNewVars;
MPRINT(MAKENEWVAROPTCODE):   where NEWNAME="REP_num_of_cylinders";
MPRINT(MAKENEWVAROPTCODE):   file _F1;
MPRINT(MAKENEWVAROPTCODE):   put '   ';
MPRINT(MAKENEWVAROPTCODE):   put '* ;';
MPRINT(MAKENEWVAROPTCODE):   put "* Defining: REP_num_of_cylinders;";
MPRINT(MAKENEWVAROPTCODE):   put '* ;';
MPRINT(MAKENEWVAROPTCODE):   if type eq 'C' then do;
MPRINT(MAKENEWVAROPTCODE):   string = 'Length '!!strip(newname)!!'$'!!strip(put(length, best.))!!';';
MPRINT(MAKENEWVAROPTCODE):   put string;
MPRINT(MAKENEWVAROPTCODE):   end;
MPRINT(MAKENEWVAROPTCODE):   if strip(label) = '' then label = name;
MPRINT(MAKENEWVAROPTCODE):   string= 'Label '!!strip(newname)!!"='Replacement: "!!strip(tranwrd(label, "'","''"))!!"';";
MPRINT(MAKENEWVAROPTCODE):   put string;
MPRINT(MAKENEWVAROPTCODE):   if format ne '' then do;
MPRINT(MAKENEWVAROPTCODE):   string= 'format '!!strip(newname)!!' '!!strip(format)!!';';
MPRINT(MAKENEWVAROPTCODE):   put string;
MPRINT(MAKENEWVAROPTCODE):   end;
MPRINT(MAKENEWVAROPTCODE):   string = strip(newname)!!'='!!strip(name)!!';';
MPRINT(MAKENEWVAROPTCODE):   put string;
MPRINT(MAKENEWVAROPTCODE):   run;
 
NOTE: The file _F1 is:
      Filename=H:\746\Decision Tree test\Workspaces\EMWS1\Repl2\REPLACECODE\REP_num_of_cylinders.sas,
      RECFM=V,LRECL=32767,File Size (bytes)=0,
      Last Modified=April 16, 2021 11:26:01 o'cloc,
      Create Time=April 16, 2021 11:26:01 o'cloc
 
NOTE: 7 records were written to the file _F1.
      The minimum record length was 3.
      The maximum record length was 59.
NOTE: There were 1 observations read from the data set WORK._TEMPNEWVARS.
      WHERE NEWNAME='REP_num_of_cylinders';
NOTE: DATA statement used (Total process time):
      real time           0.02 seconds
      cpu time            0.00 seconds
 
 
MPRINT(MAKECLASSSCORECODE):  ;
MPRINT(MAKECLASSSCORECODE):   proc datasets lib=WORK nolist;
MPRINT(MAKECLASSSCORECODE):   delete _tempNewVars;
MPRINT(MAKECLASSSCORECODE):   run;
NOTE: Deleting WORK._TEMPNEWVARS (memtype=DATA).
MPRINT(MAKECLASSSCORECODE):   quit;
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
MPRINT(MAKECLASSSCORECODE):   data _temp;
MPRINT(MAKECLASSSCORECODE):   set CLASSTEMP;
MPRINT(MAKECLASSSCORECODE):   where ROLE ne 'TARGET' and LEVEL='_UNKNOWN_' and (REPLACE_VALUE ^in('', '_DEFAULT_') or (REPLACE_VALUE='_DEFAULT_' and UNKWOWNDEFAULT ne 'NONE'));
MPRINT(MAKECLASSSCORECODE):   keep NAME;
MPRINT(MAKECLASSSCORECODE):   run;
 
NOTE: There were 0 observations read from the data set WORK.CLASSTEMP.
      WHERE (ROLE not = 'TARGET') and (LEVEL='_UNKNOWN_') and (REPLACE_VALUE not in (' ', '_DEFAULT_') or ((REPLACE_VALUE='_DEFAULT_') and (UNKWOWNDEFAULT not = 'NONE')));
NOTE: The data set WORK._TEMP has 0 observations and 1 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
MPRINT(MAKECLASSSCORECODE):   data _temp;
MPRINT(MAKECLASSSCORECODE):   merge _temp(in=_a) CLASSTEMP EMWS1.Repl2_CLASSINFO;
MPRINT(MAKECLASSSCORECODE):   by NAME;
MPRINT(MAKECLASSSCORECODE):   if _a then output;
MPRINT(MAKECLASSSCORECODE):   run;
 
NOTE: There were 0 observations read from the data set WORK._TEMP.
NOTE: There were 56 observations read from the data set WORK.CLASSTEMP.
NOTE: There were 7 observations read from the data set EMWS1.REPL2_CLASSINFO.
NOTE: The data set WORK._TEMP has 0 observations and 17 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
MPRINT(MAKEUNKNOWNCODE):   filename _F1 "H:\746\Decision Tree test\Workspaces\EMWS1\Repl2\EMPUBLISHSCORE.sas" MOD;
MPRINT(MAKEUNKNOWNCODE):   data _null_;
MPRINT(MAKEUNKNOWNCODE):   set _temp;
MPRINT(MAKEUNKNOWNCODE):   length string $400;
MPRINT(MAKEUNKNOWNCODE):   length newlevel replaceLevel $200;
MPRINT(MAKEUNKNOWNCODE):   retain string missingFlag;
MPRINT(MAKEUNKNOWNCODE):   file _F1;
MPRINT(MAKEUNKNOWNCODE):   by NAME;
MPRINT(MAKEUNKNOWNCODE):   if _N_=1 then do;
MPRINT(MAKEUNKNOWNCODE):   put '* ;';
MPRINT(MAKEUNKNOWNCODE):   put '* Replace Unknown Class Levels ;';
MPRINT(MAKEUNKNOWNCODE):   put '* ;';
MPRINT(MAKEUNKNOWNCODE):   put 'length _UFORMAT200 $200;';
MPRINT(MAKEUNKNOWNCODE):   put 'drop   _UFORMAT200;';
MPRINT(MAKEUNKNOWNCODE):   put '_UFORMAT200 = " ";';
MPRINT(MAKEUNKNOWNCODE):   end;
MPRINT(MAKEUNKNOWNCODE):   if first.name then do;
MPRINT(MAKEUNKNOWNCODE):   missingFlag = 0;
MPRINT(MAKEUNKNOWNCODE):   put '*;';
MPRINT(MAKEUNKNOWNCODE):   if format ne '' then do;
MPRINT(MAKEUNKNOWNCODE):   call symput('UFormatFlag', '1');
MPRINT(MAKEUNKNOWNCODE):   string = '_UFORMAT200 = '!!'strip(put('!!strip(NAME)!!','!!strip(format)!!'));';
MPRINT(MAKEUNKNOWNCODE):   put string;
MPRINT(MAKEUNKNOWNCODE):   put 'if ^(_UFORMAT200 in(';
MPRINT(MAKEUNKNOWNCODE):   end;
MPRINT(MAKEUNKNOWNCODE):   else do;
MPRINT(MAKEUNKNOWNCODE):   if type eq 'C' then do;
MPRINT(MAKEUNKNOWNCODE):   call symput('UFormatFlag', '1');
MPRINT(MAKEUNKNOWNCODE):   string = '_UFORMAT200 = '!!'strip('!!strip(NAME)!!');';
MPRINT(MAKEUNKNOWNCODE):   put string;
MPRINT(MAKEUNKNOWNCODE):   put 'if ^(_UFORMAT200 in(';
MPRINT(MAKEUNKNOWNCODE):   end;
MPRINT(MAKEUNKNOWNCODE):   else put 'if (';
MPRINT(MAKEUNKNOWNCODE):   end;
MPRINT(MAKEUNKNOWNCODE):   string='';
MPRINT(MAKEUNKNOWNCODE):   end;
MPRINT(MAKEUNKNOWNCODE):   if ^last.name and LEVEL ne '_UNKNOWN_' then do;
MPRINT(MAKEUNKNOWNCODE):   if format ne '' or type eq 'C' then do;
MPRINT(MAKEUNKNOWNCODE):   newlevel = tranwrd(strip(LEVEL),'"','""');
MPRINT(MAKEUNKNOWNCODE):   if strip(newLevel) = '' then missingFlag = 1;
MPRINT(MAKEUNKNOWNCODE):   if length(strip(newlevel))+length(strip(string))+4<80 then do;
MPRINT(MAKEUNKNOWNCODE):   if string='' then string = strip(string)!!' "'!!strip(newlevel)!!'" ';
MPRINT(MAKEUNKNOWNCODE):   else string = strip(string)!!', "'!!strip(newlevel)!!'" ';
MPRINT(MAKEUNKNOWNCODE):   end;
MPRINT(MAKEUNKNOWNCODE):   else do;
MPRINT(MAKEUNKNOWNCODE):   put string;
MPRINT(MAKEUNKNOWNCODE):   string =', "'!!tranwrd(strip(LEVEL),'"','""')!!'"';
MPRINT(MAKEUNKNOWNCODE):   end;
MPRINT(MAKEUNKNOWNCODE):   end;
MPRINT(MAKEUNKNOWNCODE):   else do;
MPRINT(MAKEUNKNOWNCODE):   string = strip(name)!!' ne '!!strip(level)!!' and ';
MPRINT(MAKEUNKNOWNCODE):   put string;
MPRINT(MAKEUNKNOWNCODE):   end;
MPRINT(MAKEUNKNOWNCODE):   newlevel = ' ';
MPRINT(MAKEUNKNOWNCODE):   end;
MPRINT(MAKEUNKNOWNCODE):   else do;
MPRINT(MAKEUNKNOWNCODE):   if format ne '' or type eq 'C' then do;
MPRINT(MAKEUNKNOWNCODE):   put string;
MPRINT(MAKEUNKNOWNCODE):   if ^missingFlag then string = ', "" )) then ';
MPRINT(MAKEUNKNOWNCODE):   else string = ')) then ';
MPRINT(MAKEUNKNOWNCODE):   end;
MPRINT(MAKEUNKNOWNCODE):   else string = strip(name)!!' ne . ) then ';
MPRINT(MAKEUNKNOWNCODE):   put string;
MPRINT(MAKEUNKNOWNCODE):   select(REPLACE_VALUE);
MPRINT(MAKEUNKNOWNCODE):   when('_MODE_') do;
MPRINT(MAKEUNKNOWNCODE):   if type eq 'C' then replaceLevel = NORMMODE;
MPRINT(MAKEUNKNOWNCODE):   else replaceLevel =strip(put(MODEN,BEST.));
MPRINT(MAKEUNKNOWNCODE):   end;
MPRINT(MAKEUNKNOWNCODE):   when('_MISSING_') do;
MPRINT(MAKEUNKNOWNCODE):   if type eq 'C' then replaceLevel = '';
MPRINT(MAKEUNKNOWNCODE):   else replaceLevel = '.';
MPRINT(MAKEUNKNOWNCODE):   end;
MPRINT(MAKEUNKNOWNCODE):   when('_DEFAULT_') do;
MPRINT(MAKEUNKNOWNCODE):   if type eq 'C' then replaceLevel = '';
MPRINT(MAKEUNKNOWNCODE):   else replaceLevel = '.';
MPRINT(MAKEUNKNOWNCODE):   end;
MPRINT(MAKEUNKNOWNCODE):   when('') do;
MPRINT(MAKEUNKNOWNCODE):   end;
MPRINT(MAKEUNKNOWNCODE):   otherwise do;
MPRINT(MAKEUNKNOWNCODE):   if type eq 'C' then replaceLevel= replace_Value;
MPRINT(MAKEUNKNOWNCODE):   else replaceLevel = replace_Value;
MPRINT(MAKEUNKNOWNCODE):   end;
MPRINT(MAKEUNKNOWNCODE):   end;
MPRINT(MAKEUNKNOWNCODE):   if type eq 'C' then do;
MPRINT(MAKEUNKNOWNCODE):   string = strip(newname)!!'= "'!!tranwrd(strip(replaceLevel),'"','""')!!'";';
MPRINT(MAKEUNKNOWNCODE):   end;
MPRINT(MAKEUNKNOWNCODE):   else do;
MPRINT(MAKEUNKNOWNCODE):   string = strip(newname)!!'= '!!strip(replaceLevel)!!';';
MPRINT(MAKEUNKNOWNCODE):   end;
MPRINT(MAKEUNKNOWNCODE):   put string;
MPRINT(MAKEUNKNOWNCODE):   end;
MPRINT(MAKEUNKNOWNCODE):   run;
 
NOTE: The file _F1 is:
      Filename=H:\746\Decision Tree test\Workspaces\EMWS1\Repl2\EMPUBLISHSCORE.sas,
      RECFM=V,LRECL=32767,File Size (bytes)=872,
      Last Modified=April 16, 2021 11:26:01 o'cloc,
      Create Time=April 16, 2021 11:26:01 o'cloc
 
NOTE: 0 records were written to the file _F1.
NOTE: There were 0 observations read from the data set WORK._TEMP.
NOTE: DATA statement used (Total process time):
      real time           0.02 seconds
      cpu time            0.01 seconds
 
 
MPRINT(MAKEUNKNOWNCODE):   filename _F1;
NOTE: Fileref _F1 has been deassigned.
MPRINT(MAKECLASSSCORECODE):  ;
MPRINT(MAKECLASSSCORECODE):  ;
MPRINT(MAKECLASSSCORECODE):   proc datasets lib=work nolist;
MPRINT(MAKECLASSSCORECODE):   delete _temp;
MPRINT(MAKECLASSSCORECODE):   run;
 
NOTE: Deleting WORK._TEMP (memtype=DATA).
MPRINT(MAKECLASSSCORECODE):   quit;
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(MAKECLASSSCORECODE):   data _temp;
MPRINT(MAKECLASSSCORECODE):   merge CLASSTEMP(in=_a where=( ROLE ne 'TARGET' and LEVEL ne '_UNKNOWN_' and (REPLACE_VALUE ^in('', '_DEFAULT_') or (REPLACE_VALUE='_DEFAULT_' and UNKWOWNDEFAULT ne 'NONE')) )) EMWS1.Repl2_CLASSINFO;
MPRINT(MAKECLASSSCORECODE):   by NAME;
MPRINT(MAKECLASSSCORECODE):   if _a then output;
MPRINT(MAKECLASSSCORECODE):   run;
 
NOTE: There were 24 observations read from the data set WORK.CLASSTEMP.
      WHERE (ROLE not = 'TARGET') and (LEVEL not = '_UNKNOWN_') and (REPLACE_VALUE not in (' ', '_DEFAULT_') or ((REPLACE_VALUE='_DEFAULT_') and (UNKWOWNDEFAULT not = 'NONE')));
NOTE: There were 7 observations read from the data set EMWS1.REPL2_CLASSINFO.
NOTE: The data set WORK._TEMP has 24 observations and 17 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(MAKEREPLACECODE):   filename _F1 "H:\746\Decision Tree test\Workspaces\EMWS1\Repl2\EMPUBLISHSCORE.sas" MOD;
MPRINT(MAKEREPLACECODE):   data _null_;
MPRINT(MAKEREPLACECODE):   length string $400;
MPRINT(MAKEREPLACECODE):   set _temp end=eof;
MPRINT(MAKEREPLACECODE):   file _F1;
MPRINT(MAKEREPLACECODE):   by NAME;
MPRINT(MAKEREPLACECODE):   if _N_=1 then do;
MPRINT(MAKEREPLACECODE):   put '   ';
MPRINT(MAKEREPLACECODE):   put '* ;';
MPRINT(MAKEREPLACECODE):   put '* Replace Specific Class Levels ;';
MPRINT(MAKEREPLACECODE):   put '* ;';
MPRINT(MAKEREPLACECODE):   put 'length _UFormat200 $200;';
MPRINT(MAKEREPLACECODE):   put 'drop   _UFORMAT200;';
MPRINT(MAKEREPLACECODE):   put '_UFORMAT200 = " ";';
MPRINT(MAKEREPLACECODE):   end;
MPRINT(MAKEREPLACECODE):   if first.name then do;
MPRINT(MAKEREPLACECODE):   put '* ;';
MPRINT(MAKEREPLACECODE):   string = '* Variable: '!!strip(NAME)!!';';
MPRINT(MAKEREPLACECODE):   put string;
MPRINT(MAKEREPLACECODE):   put '* ;';
MPRINT(MAKEREPLACECODE):   if format ne '' then do;
MPRINT(MAKEREPLACECODE):   call symput('UFormatFlag', '1');
MPRINT(MAKEREPLACECODE):   string = "_UFORMAT200 = strip(";
MPRINT(MAKEREPLACECODE):   put string;
MPRINT(MAKEREPLACECODE):   string ='put('!!strip(NAME)!!','!!strip(format)!!'));';
MPRINT(MAKEREPLACECODE):   put string;
MPRINT(MAKEREPLACECODE):   end;
MPRINT(MAKEREPLACECODE):   else if type eq 'C' then do;
MPRINT(MAKEREPLACECODE):   call symput('UFormatFlag', '1');
MPRINT(MAKEREPLACECODE):   string = "_UFORMAT200 = strip("!!strip(NAME)!!');';
MPRINT(MAKEREPLACECODE):   put string;
MPRINT(MAKEREPLACECODE):   end;
MPRINT(MAKEREPLACECODE):   end;
MPRINT(MAKEREPLACECODE):   if ^first.name then put 'else';
MPRINT(MAKEREPLACECODE):   if format ne '' then do;
MPRINT(MAKEREPLACECODE):   string = tranwrd(strip(LEVEL),'"','""');
MPRINT(MAKEREPLACECODE):   string =' if _UFORMAT200 =  "'!!strip(string)!!'" then ';
MPRINT(MAKEREPLACECODE):   put string;
MPRINT(MAKEREPLACECODE):   end;
MPRINT(MAKEREPLACECODE):   else do;
MPRINT(MAKEREPLACECODE):   if type eq 'N' then do;
MPRINT(MAKEREPLACECODE):   string = 'if '!!strip(name)!!' = '!!strip(put(nraw, BEST.))!!' then ';
MPRINT(MAKEREPLACECODE):   put string;
MPRINT(MAKEREPLACECODE):   end;
MPRINT(MAKEREPLACECODE):   else do;
MPRINT(MAKEREPLACECODE):   string = tranwrd(strip(craw),'"','""');
MPRINT(MAKEREPLACECODE):   string = ' if _UFORMAT200 =  "'!!strip(string)!!'" then ';
MPRINT(MAKEREPLACECODE):   put string;
MPRINT(MAKEREPLACECODE):   end;
MPRINT(MAKEREPLACECODE):   end;
MPRINT(MAKEREPLACECODE):   string = strip(newname)!!'=';
MPRINT(MAKEREPLACECODE):   if type eq 'C' then do;
MPRINT(MAKEREPLACECODE):   if upcase(replace_value) eq '_MISSING_' or (upcase(replace_value) eq '_DEFAULT_' and (upcase(UNKWOWNDEFAULT)= 'MISSING')) then replace_Value ='';
MPRINT(MAKEREPLACECODE):   else if upcase(replace_value) eq '_MODE_' or (upcase(replace_value) eq '_DEFAULT_' and (upcase(UNKWOWNDEFAULT)= 'MODE')) then replace_Value =modec;
MPRINT(MAKEREPLACECODE):   string = strip(string)!!'"'!!tranwrd(strip(replace_Value),'"','""')!!'";';
MPRINT(MAKEREPLACECODE):   end;
MPRINT(MAKEREPLACECODE):   else do;
MPRINT(MAKEREPLACECODE):   if upcase(replace_value) eq '_MISSING_' or (upcase(replace_value) eq '_DEFAULT_' and (upcase(UNKWOWNDEFAULT) = 'MISSING')) then replace_Value ='.';
MPRINT(MAKEREPLACECODE):   else if upcase(replace_value) eq '_MODE_' or (upcase(replace_value) eq '_DEFAULT_' and (upcase(UNKWOWNDEFAULT) = 'MODE')) then replace_Value =strip(put(moden, BEST.));
MPRINT(MAKEREPLACECODE):   string = strip(string)!!''!!strip(replace_value)!!';';
MPRINT(MAKEREPLACECODE):   end;
MPRINT(MAKEREPLACECODE):   put string;
MPRINT(MAKEREPLACECODE):   run;
 
NOTE: The file _F1 is:
      Filename=H:\746\Decision Tree test\Workspaces\EMWS1\Repl2\EMPUBLISHSCORE.sas,
      RECFM=V,LRECL=32767,File Size (bytes)=872,
      Last Modified=April 16, 2021 11:26:01 o'cloc,
      Create Time=April 16, 2021 11:26:01 o'cloc
 
NOTE: 101 records were written to the file _F1.
      The minimum record length was 3.
      The maximum record length was 38.
NOTE: There were 24 observations read from the data set WORK._TEMP.
NOTE: DATA statement used (Total process time):
      real time           0.02 seconds
      cpu time            0.01 seconds
 
 
MPRINT(MAKEREPLACECODE):   filename _F1;
NOTE: Fileref _F1 has been deassigned.
MPRINT(MAKECLASSSCORECODE):  ;
MPRINT(MAKEREPLACEOPTCODE):   filename _F1 "H:\746\Decision Tree test\Workspaces\EMWS1\Repl2\REPLACECODE\REP_aspiration.sas" MOD;
MPRINT(MAKEREPLACEOPTCODE):   data _null_;
MPRINT(MAKEREPLACEOPTCODE):   length string $400;
MPRINT(MAKEREPLACEOPTCODE):   set _temp end=eof;
MPRINT(MAKEREPLACEOPTCODE):   by NAME;
MPRINT(MAKEREPLACEOPTCODE):   where NAME ="aspiration";
MPRINT(MAKEREPLACEOPTCODE):   file _F1;
MPRINT(MAKEREPLACEOPTCODE):   if _N_=1 then do;
MPRINT(MAKEREPLACEOPTCODE):   put '* ;';
MPRINT(MAKEREPLACEOPTCODE):   string = '* Variable: '!!strip(NAME)!!';';
MPRINT(MAKEREPLACEOPTCODE):   put string;
MPRINT(MAKEREPLACEOPTCODE):   put '* ;';
MPRINT(MAKEREPLACEOPTCODE):   if format ne '' then do;
MPRINT(MAKEREPLACEOPTCODE):   string = "_UFORMAT200 = strip(";
MPRINT(MAKEREPLACEOPTCODE):   put string;
MPRINT(MAKEREPLACEOPTCODE):   string ='put('!!strip(NAME)!!','!!strip(format)!!'));';
MPRINT(MAKEREPLACEOPTCODE):   put string;
MPRINT(MAKEREPLACEOPTCODE):   end;
MPRINT(MAKEREPLACEOPTCODE):   else if type eq 'C' then do;
MPRINT(MAKEREPLACEOPTCODE):   call symput('UFormatFlag', '1');
MPRINT(MAKEREPLACEOPTCODE):   string = "_UFORMAT200 = strip("!!strip(NAME)!!');';
MPRINT(MAKEREPLACEOPTCODE):   put string;
MPRINT(MAKEREPLACEOPTCODE):   end;
MPRINT(MAKEREPLACEOPTCODE):   end;
MPRINT(MAKEREPLACEOPTCODE):   if ^first.name then put 'else';
MPRINT(MAKEREPLACEOPTCODE):   if format ne '' then do;
MPRINT(MAKEREPLACEOPTCODE):   string = tranwrd(strip(LEVEL),'"','""');
MPRINT(MAKEREPLACEOPTCODE):   string =' if _UFORMAT200 =  "'!!strip(string)!!'" then ';
MPRINT(MAKEREPLACEOPTCODE):   put string;
MPRINT(MAKEREPLACEOPTCODE):   end;
MPRINT(MAKEREPLACEOPTCODE):   else do;
MPRINT(MAKEREPLACEOPTCODE):   if type eq 'N' then do;
MPRINT(MAKEREPLACEOPTCODE):   string = 'if '!!strip(name)!!' = '!!strip(put(nraw, BEST.))!!' then ';
MPRINT(MAKEREPLACEOPTCODE):   put string;
MPRINT(MAKEREPLACEOPTCODE):   end;
MPRINT(MAKEREPLACEOPTCODE):   else do;
MPRINT(MAKEREPLACEOPTCODE):   string = tranwrd(strip(craw),'"','""');
MPRINT(MAKEREPLACEOPTCODE):   string = ' if _UFORMAT200 =  "'!!strip(string)!!'" then ';
MPRINT(MAKEREPLACEOPTCODE):   put string;
MPRINT(MAKEREPLACEOPTCODE):   end;
MPRINT(MAKEREPLACEOPTCODE):   end;
MPRINT(MAKEREPLACEOPTCODE):   string = strip(newname)!!'=';
MPRINT(MAKEREPLACEOPTCODE):   if type eq 'C' then do;
MPRINT(MAKEREPLACEOPTCODE):   if upcase(replace_value) eq '_MISSING_' or (upcase(replace_value) eq '_DEFAULT_' and (upcase(UNKWOWNDEFAULT)= 'MISSING')) then replace_Value ='';
MPRINT(MAKEREPLACEOPTCODE):   else if upcase(replace_value) eq '_MODE_' or (upcase(replace_value) eq '_DEFAULT_' and (upcase(UNKWOWNDEFAULT)= 'MODE')) then replace_Value =modec;
MPRINT(MAKEREPLACEOPTCODE):   string = strip(string)!!'"'!!tranwrd(strip(replace_Value),'"','""')!!'";';
MPRINT(MAKEREPLACEOPTCODE):   end;
MPRINT(MAKEREPLACEOPTCODE):   else do;
MPRINT(MAKEREPLACEOPTCODE):   if upcase(replace_value) eq '_MISSING_' or (upcase(replace_value) eq '_DEFAULT_' and (upcase(UNKWOWNDEFAULT) = 'MISSING')) then replace_Value ='.';
MPRINT(MAKEREPLACEOPTCODE):   else if upcase(replace_value) eq '_MODE_' or (upcase(replace_value) eq '_DEFAULT_' and (upcase(UNKWOWNDEFAULT) = 'MODE')) then replace_Value =strip(put(moden, BEST.));
MPRINT(MAKEREPLACEOPTCODE):   string = strip(string)!!''!!strip(replace_value)!!';';
MPRINT(MAKEREPLACEOPTCODE):   end;
MPRINT(MAKEREPLACEOPTCODE):   put string;
MPRINT(MAKEREPLACEOPTCODE):   run;
 
NOTE: The file _F1 is:
      Filename=H:\746\Decision Tree test\Workspaces\EMWS1\Repl2\REPLACECODE\REP_aspiration.sas,
      RECFM=V,LRECL=32767,File Size (bytes)=176,
      Last Modified=April 16, 2021 11:26:01 o'cloc,
      Create Time=April 16, 2021 11:26:01 o'cloc
 
NOTE: 10 records were written to the file _F1.
      The minimum record length was 3.
      The maximum record length was 30.
NOTE: There were 2 observations read from the data set WORK._TEMP.
      WHERE NAME='aspiration';
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
MPRINT(MAKEREPLACEOPTCODE):   filename _F1;
NOTE: Fileref _F1 has been deassigned.
MPRINT(MAKEREPLACEOPTCODE):   filename _F1 "H:\746\Decision Tree test\Workspaces\EMWS1\Repl2\REPLACECODE\REP_body_style.sas" MOD;
MPRINT(MAKEREPLACEOPTCODE):   data _null_;
MPRINT(MAKEREPLACEOPTCODE):   length string $400;
MPRINT(MAKEREPLACEOPTCODE):   set _temp end=eof;
MPRINT(MAKEREPLACEOPTCODE):   by NAME;
MPRINT(MAKEREPLACEOPTCODE):   where NAME ="body_style";
MPRINT(MAKEREPLACEOPTCODE):   file _F1;
MPRINT(MAKEREPLACEOPTCODE):   if _N_=1 then do;
MPRINT(MAKEREPLACEOPTCODE):   put '* ;';
MPRINT(MAKEREPLACEOPTCODE):   string = '* Variable: '!!strip(NAME)!!';';
MPRINT(MAKEREPLACEOPTCODE):   put string;
MPRINT(MAKEREPLACEOPTCODE):   put '* ;';
MPRINT(MAKEREPLACEOPTCODE):   if format ne '' then do;
MPRINT(MAKEREPLACEOPTCODE):   string = "_UFORMAT200 = strip(";
MPRINT(MAKEREPLACEOPTCODE):   put string;
MPRINT(MAKEREPLACEOPTCODE):   string ='put('!!strip(NAME)!!','!!strip(format)!!'));';
MPRINT(MAKEREPLACEOPTCODE):   put string;
MPRINT(MAKEREPLACEOPTCODE):   end;
MPRINT(MAKEREPLACEOPTCODE):   else if type eq 'C' then do;
MPRINT(MAKEREPLACEOPTCODE):   call symput('UFormatFlag', '1');
MPRINT(MAKEREPLACEOPTCODE):   string = "_UFORMAT200 = strip("!!strip(NAME)!!');';
MPRINT(MAKEREPLACEOPTCODE):   put string;
MPRINT(MAKEREPLACEOPTCODE):   end;
MPRINT(MAKEREPLACEOPTCODE):   end;
MPRINT(MAKEREPLACEOPTCODE):   if ^first.name then put 'else';
MPRINT(MAKEREPLACEOPTCODE):   if format ne '' then do;
MPRINT(MAKEREPLACEOPTCODE):   string = tranwrd(strip(LEVEL),'"','""');
MPRINT(MAKEREPLACEOPTCODE):   string =' if _UFORMAT200 =  "'!!strip(string)!!'" then ';
MPRINT(MAKEREPLACEOPTCODE):   put string;
MPRINT(MAKEREPLACEOPTCODE):   end;
MPRINT(MAKEREPLACEOPTCODE):   else do;
MPRINT(MAKEREPLACEOPTCODE):   if type eq 'N' then do;
MPRINT(MAKEREPLACEOPTCODE):   string = 'if '!!strip(name)!!' = '!!strip(put(nraw, BEST.))!!' then ';
MPRINT(MAKEREPLACEOPTCODE):   put string;
MPRINT(MAKEREPLACEOPTCODE):   end;
MPRINT(MAKEREPLACEOPTCODE):   else do;
MPRINT(MAKEREPLACEOPTCODE):   string = tranwrd(strip(craw),'"','""');
MPRINT(MAKEREPLACEOPTCODE):   string = ' if _UFORMAT200 =  "'!!strip(string)!!'" then ';
MPRINT(MAKEREPLACEOPTCODE):   put string;
MPRINT(MAKEREPLACEOPTCODE):   end;
MPRINT(MAKEREPLACEOPTCODE):   end;
MPRINT(MAKEREPLACEOPTCODE):   string = strip(newname)!!'=';
MPRINT(MAKEREPLACEOPTCODE):   if type eq 'C' then do;
MPRINT(MAKEREPLACEOPTCODE):   if upcase(replace_value) eq '_MISSING_' or (upcase(replace_value) eq '_DEFAULT_' and (upcase(UNKWOWNDEFAULT)= 'MISSING')) then replace_Value ='';
MPRINT(MAKEREPLACEOPTCODE):   else if upcase(replace_value) eq '_MODE_' or (upcase(replace_value) eq '_DEFAULT_' and (upcase(UNKWOWNDEFAULT)= 'MODE')) then replace_Value =modec;
MPRINT(MAKEREPLACEOPTCODE):   string = strip(string)!!'"'!!tranwrd(strip(replace_Value),'"','""')!!'";';
MPRINT(MAKEREPLACEOPTCODE):   end;
MPRINT(MAKEREPLACEOPTCODE):   else do;
MPRINT(MAKEREPLACEOPTCODE):   if upcase(replace_value) eq '_MISSING_' or (upcase(replace_value) eq '_DEFAULT_' and (upcase(UNKWOWNDEFAULT) = 'MISSING')) then replace_Value ='.';
MPRINT(MAKEREPLACEOPTCODE):   else if upcase(replace_value) eq '_MODE_' or (upcase(replace_value) eq '_DEFAULT_' and (upcase(UNKWOWNDEFAULT) = 'MODE')) then replace_Value =strip(put(moden, BEST.));
MPRINT(MAKEREPLACEOPTCODE):   string = strip(string)!!''!!strip(replace_value)!!';';
MPRINT(MAKEREPLACEOPTCODE):   end;
MPRINT(MAKEREPLACEOPTCODE):   put string;
MPRINT(MAKEREPLACEOPTCODE):   run;
 
NOTE: The file _F1 is:
      Filename=H:\746\Decision Tree test\Workspaces\EMWS1\Repl2\REPLACECODE\REP_body_style.sas,
      RECFM=V,LRECL=32767,File Size (bytes)=148,
      Last Modified=April 16, 2021 11:26:01 o'cloc,
      Create Time=April 16, 2021 11:26:01 o'cloc
 
NOTE: 18 records were written to the file _F1.
      The minimum record length was 3.
      The maximum record length was 36.
NOTE: There were 5 observations read from the data set WORK._TEMP.
      WHERE NAME='body_style';
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(MAKEREPLACEOPTCODE):   filename _F1;
NOTE: Fileref _F1 has been deassigned.
MPRINT(MAKEREPLACEOPTCODE):   filename _F1 "H:\746\Decision Tree test\Workspaces\EMWS1\Repl2\REPLACECODE\REP_drive_wheels.sas" MOD;
MPRINT(MAKEREPLACEOPTCODE):   data _null_;
MPRINT(MAKEREPLACEOPTCODE):   length string $400;
MPRINT(MAKEREPLACEOPTCODE):   set _temp end=eof;
MPRINT(MAKEREPLACEOPTCODE):   by NAME;
MPRINT(MAKEREPLACEOPTCODE):   where NAME ="drive_wheels";
MPRINT(MAKEREPLACEOPTCODE):   file _F1;
MPRINT(MAKEREPLACEOPTCODE):   if _N_=1 then do;
MPRINT(MAKEREPLACEOPTCODE):   put '* ;';
MPRINT(MAKEREPLACEOPTCODE):   string = '* Variable: '!!strip(NAME)!!';';
MPRINT(MAKEREPLACEOPTCODE):   put string;
MPRINT(MAKEREPLACEOPTCODE):   put '* ;';
MPRINT(MAKEREPLACEOPTCODE):   if format ne '' then do;
MPRINT(MAKEREPLACEOPTCODE):   string = "_UFORMAT200 = strip(";
MPRINT(MAKEREPLACEOPTCODE):   put string;
MPRINT(MAKEREPLACEOPTCODE):   string ='put('!!strip(NAME)!!','!!strip(format)!!'));';
MPRINT(MAKEREPLACEOPTCODE):   put string;
MPRINT(MAKEREPLACEOPTCODE):   end;
MPRINT(MAKEREPLACEOPTCODE):   else if type eq 'C' then do;
MPRINT(MAKEREPLACEOPTCODE):   call symput('UFormatFlag', '1');
MPRINT(MAKEREPLACEOPTCODE):   string = "_UFORMAT200 = strip("!!strip(NAME)!!');';
MPRINT(MAKEREPLACEOPTCODE):   put string;
MPRINT(MAKEREPLACEOPTCODE):   end;
MPRINT(MAKEREPLACEOPTCODE):   end;
MPRINT(MAKEREPLACEOPTCODE):   if ^first.name then put 'else';
MPRINT(MAKEREPLACEOPTCODE):   if format ne '' then do;
MPRINT(MAKEREPLACEOPTCODE):   string = tranwrd(strip(LEVEL),'"','""');
MPRINT(MAKEREPLACEOPTCODE):   string =' if _UFORMAT200 =  "'!!strip(string)!!'" then ';
MPRINT(MAKEREPLACEOPTCODE):   put string;
MPRINT(MAKEREPLACEOPTCODE):   end;
MPRINT(MAKEREPLACEOPTCODE):   else do;
MPRINT(MAKEREPLACEOPTCODE):   if type eq 'N' then do;
MPRINT(MAKEREPLACEOPTCODE):   string = 'if '!!strip(name)!!' = '!!strip(put(nraw, BEST.))!!' then ';
MPRINT(MAKEREPLACEOPTCODE):   put string;
MPRINT(MAKEREPLACEOPTCODE):   end;
MPRINT(MAKEREPLACEOPTCODE):   else do;
MPRINT(MAKEREPLACEOPTCODE):   string = tranwrd(strip(craw),'"','""');
MPRINT(MAKEREPLACEOPTCODE):   string = ' if _UFORMAT200 =  "'!!strip(string)!!'" then ';
MPRINT(MAKEREPLACEOPTCODE):   put string;
MPRINT(MAKEREPLACEOPTCODE):   end;
MPRINT(MAKEREPLACEOPTCODE):   end;
MPRINT(MAKEREPLACEOPTCODE):   string = strip(newname)!!'=';
MPRINT(MAKEREPLACEOPTCODE):   if type eq 'C' then do;
MPRINT(MAKEREPLACEOPTCODE):   if upcase(replace_value) eq '_MISSING_' or (upcase(replace_value) eq '_DEFAULT_' and (upcase(UNKWOWNDEFAULT)= 'MISSING')) then replace_Value ='';
MPRINT(MAKEREPLACEOPTCODE):   else if upcase(replace_value) eq '_MODE_' or (upcase(replace_value) eq '_DEFAULT_' and (upcase(UNKWOWNDEFAULT)= 'MODE')) then replace_Value =modec;
MPRINT(MAKEREPLACEOPTCODE):   string = strip(string)!!'"'!!tranwrd(strip(replace_Value),'"','""')!!'";';
MPRINT(MAKEREPLACEOPTCODE):   end;
MPRINT(MAKEREPLACEOPTCODE):   else do;
MPRINT(MAKEREPLACEOPTCODE):   if upcase(replace_value) eq '_MISSING_' or (upcase(replace_value) eq '_DEFAULT_' and (upcase(UNKWOWNDEFAULT) = 'MISSING')) then replace_Value ='.';
MPRINT(MAKEREPLACEOPTCODE):   else if upcase(replace_value) eq '_MODE_' or (upcase(replace_value) eq '_DEFAULT_' and (upcase(UNKWOWNDEFAULT) = 'MODE')) then replace_Value =strip(put(moden, BEST.));
MPRINT(MAKEREPLACEOPTCODE):   string = strip(string)!!''!!strip(replace_value)!!';';
MPRINT(MAKEREPLACEOPTCODE):   end;
MPRINT(MAKEREPLACEOPTCODE):   put string;
MPRINT(MAKEREPLACEOPTCODE):   run;
 
NOTE: The file _F1 is:
      Filename=H:\746\Decision Tree test\Workspaces\EMWS1\Repl2\REPLACECODE\REP_drive_wheels.sas,
      RECFM=V,LRECL=32767,File Size (bytes)=159,
      Last Modified=April 16, 2021 11:26:01 o'cloc,
      Create Time=April 16, 2021 11:26:01 o'cloc
 
NOTE: 12 records were written to the file _F1.
      The minimum record length was 3.
      The maximum record length was 34.
NOTE: There were 3 observations read from the data set WORK._TEMP.
      WHERE NAME='drive_wheels';
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(MAKEREPLACEOPTCODE):   filename _F1;
NOTE: Fileref _F1 has been deassigned.
MPRINT(MAKEREPLACEOPTCODE):   filename _F1 "H:\746\Decision Tree test\Workspaces\EMWS1\Repl2\REPLACECODE\REP_engine_location.sas" MOD;
MPRINT(MAKEREPLACEOPTCODE):   data _null_;
MPRINT(MAKEREPLACEOPTCODE):   length string $400;
MPRINT(MAKEREPLACEOPTCODE):   set _temp end=eof;
MPRINT(MAKEREPLACEOPTCODE):   by NAME;
MPRINT(MAKEREPLACEOPTCODE):   where NAME ="engine_location";
MPRINT(MAKEREPLACEOPTCODE):   file _F1;
MPRINT(MAKEREPLACEOPTCODE):   if _N_=1 then do;
MPRINT(MAKEREPLACEOPTCODE):   put '* ;';
MPRINT(MAKEREPLACEOPTCODE):   string = '* Variable: '!!strip(NAME)!!';';
MPRINT(MAKEREPLACEOPTCODE):   put string;
MPRINT(MAKEREPLACEOPTCODE):   put '* ;';
MPRINT(MAKEREPLACEOPTCODE):   if format ne '' then do;
MPRINT(MAKEREPLACEOPTCODE):   string = "_UFORMAT200 = strip(";
MPRINT(MAKEREPLACEOPTCODE):   put string;
MPRINT(MAKEREPLACEOPTCODE):   string ='put('!!strip(NAME)!!','!!strip(format)!!'));';
MPRINT(MAKEREPLACEOPTCODE):   put string;
MPRINT(MAKEREPLACEOPTCODE):   end;
MPRINT(MAKEREPLACEOPTCODE):   else if type eq 'C' then do;
MPRINT(MAKEREPLACEOPTCODE):   call symput('UFormatFlag', '1');
MPRINT(MAKEREPLACEOPTCODE):   string = "_UFORMAT200 = strip("!!strip(NAME)!!');';
MPRINT(MAKEREPLACEOPTCODE):   put string;
MPRINT(MAKEREPLACEOPTCODE):   end;
MPRINT(MAKEREPLACEOPTCODE):   end;
MPRINT(MAKEREPLACEOPTCODE):   if ^first.name then put 'else';
MPRINT(MAKEREPLACEOPTCODE):   if format ne '' then do;
MPRINT(MAKEREPLACEOPTCODE):   string = tranwrd(strip(LEVEL),'"','""');
MPRINT(MAKEREPLACEOPTCODE):   string =' if _UFORMAT200 =  "'!!strip(string)!!'" then ';
MPRINT(MAKEREPLACEOPTCODE):   put string;
MPRINT(MAKEREPLACEOPTCODE):   end;
MPRINT(MAKEREPLACEOPTCODE):   else do;
MPRINT(MAKEREPLACEOPTCODE):   if type eq 'N' then do;
MPRINT(MAKEREPLACEOPTCODE):   string = 'if '!!strip(name)!!' = '!!strip(put(nraw, BEST.))!!' then ';
MPRINT(MAKEREPLACEOPTCODE):   put string;
MPRINT(MAKEREPLACEOPTCODE):   end;
MPRINT(MAKEREPLACEOPTCODE):   else do;
MPRINT(MAKEREPLACEOPTCODE):   string = tranwrd(strip(craw),'"','""');
MPRINT(MAKEREPLACEOPTCODE):   string = ' if _UFORMAT200 =  "'!!strip(string)!!'" then ';
MPRINT(MAKEREPLACEOPTCODE):   put string;
MPRINT(MAKEREPLACEOPTCODE):   end;
MPRINT(MAKEREPLACEOPTCODE):   end;
MPRINT(MAKEREPLACEOPTCODE):   string = strip(newname)!!'=';
MPRINT(MAKEREPLACEOPTCODE):   if type eq 'C' then do;
MPRINT(MAKEREPLACEOPTCODE):   if upcase(replace_value) eq '_MISSING_' or (upcase(replace_value) eq '_DEFAULT_' and (upcase(UNKWOWNDEFAULT)= 'MISSING')) then replace_Value ='';
MPRINT(MAKEREPLACEOPTCODE):   else if upcase(replace_value) eq '_MODE_' or (upcase(replace_value) eq '_DEFAULT_' and (upcase(UNKWOWNDEFAULT)= 'MODE')) then replace_Value =modec;
MPRINT(MAKEREPLACEOPTCODE):   string = strip(string)!!'"'!!tranwrd(strip(replace_Value),'"','""')!!'";';
MPRINT(MAKEREPLACEOPTCODE):   end;
MPRINT(MAKEREPLACEOPTCODE):   else do;
MPRINT(MAKEREPLACEOPTCODE):   if upcase(replace_value) eq '_MISSING_' or (upcase(replace_value) eq '_DEFAULT_' and (upcase(UNKWOWNDEFAULT) = 'MISSING')) then replace_Value ='.';
MPRINT(MAKEREPLACEOPTCODE):   else if upcase(replace_value) eq '_MODE_' or (upcase(replace_value) eq '_DEFAULT_' and (upcase(UNKWOWNDEFAULT) = 'MODE')) then replace_Value =strip(put(moden, BEST.));
MPRINT(MAKEREPLACEOPTCODE):   string = strip(string)!!''!!strip(replace_value)!!';';
MPRINT(MAKEREPLACEOPTCODE):   end;
MPRINT(MAKEREPLACEOPTCODE):   put string;
MPRINT(MAKEREPLACEOPTCODE):   run;
 
NOTE: The file _F1 is:
      Filename=H:\746\Decision Tree test\Workspaces\EMWS1\Repl2\REPLACECODE\REP_engine_location.sas,
      RECFM=V,LRECL=32767,File Size (bytes)=177,
      Last Modified=April 16, 2021 11:26:01 o'cloc,
      Create Time=April 16, 2021 11:26:01 o'cloc
 
NOTE: 9 records were written to the file _F1.
      The minimum record length was 3.
      The maximum record length was 37.
NOTE: There were 2 observations read from the data set WORK._TEMP.
      WHERE NAME='engine_location';
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(MAKEREPLACEOPTCODE):   filename _F1;
NOTE: Fileref _F1 has been deassigned.
MPRINT(MAKEREPLACEOPTCODE):   filename _F1 "H:\746\Decision Tree test\Workspaces\EMWS1\Repl2\REPLACECODE\REP_fuel_system.sas" MOD;
MPRINT(MAKEREPLACEOPTCODE):   data _null_;
MPRINT(MAKEREPLACEOPTCODE):   length string $400;
MPRINT(MAKEREPLACEOPTCODE):   set _temp end=eof;
MPRINT(MAKEREPLACEOPTCODE):   by NAME;
MPRINT(MAKEREPLACEOPTCODE):   where NAME ="fuel_system";
MPRINT(MAKEREPLACEOPTCODE):   file _F1;
MPRINT(MAKEREPLACEOPTCODE):   if _N_=1 then do;
MPRINT(MAKEREPLACEOPTCODE):   put '* ;';
MPRINT(MAKEREPLACEOPTCODE):   string = '* Variable: '!!strip(NAME)!!';';
MPRINT(MAKEREPLACEOPTCODE):   put string;
MPRINT(MAKEREPLACEOPTCODE):   put '* ;';
MPRINT(MAKEREPLACEOPTCODE):   if format ne '' then do;
MPRINT(MAKEREPLACEOPTCODE):   string = "_UFORMAT200 = strip(";
MPRINT(MAKEREPLACEOPTCODE):   put string;
MPRINT(MAKEREPLACEOPTCODE):   string ='put('!!strip(NAME)!!','!!strip(format)!!'));';
MPRINT(MAKEREPLACEOPTCODE):   put string;
MPRINT(MAKEREPLACEOPTCODE):   end;
MPRINT(MAKEREPLACEOPTCODE):   else if type eq 'C' then do;
MPRINT(MAKEREPLACEOPTCODE):   call symput('UFormatFlag', '1');
MPRINT(MAKEREPLACEOPTCODE):   string = "_UFORMAT200 = strip("!!strip(NAME)!!');';
MPRINT(MAKEREPLACEOPTCODE):   put string;
MPRINT(MAKEREPLACEOPTCODE):   end;
MPRINT(MAKEREPLACEOPTCODE):   end;
MPRINT(MAKEREPLACEOPTCODE):   if ^first.name then put 'else';
MPRINT(MAKEREPLACEOPTCODE):   if format ne '' then do;
MPRINT(MAKEREPLACEOPTCODE):   string = tranwrd(strip(LEVEL),'"','""');
MPRINT(MAKEREPLACEOPTCODE):   string =' if _UFORMAT200 =  "'!!strip(string)!!'" then ';
MPRINT(MAKEREPLACEOPTCODE):   put string;
MPRINT(MAKEREPLACEOPTCODE):   end;
MPRINT(MAKEREPLACEOPTCODE):   else do;
MPRINT(MAKEREPLACEOPTCODE):   if type eq 'N' then do;
MPRINT(MAKEREPLACEOPTCODE):   string = 'if '!!strip(name)!!' = '!!strip(put(nraw, BEST.))!!' then ';
MPRINT(MAKEREPLACEOPTCODE):   put string;
MPRINT(MAKEREPLACEOPTCODE):   end;
MPRINT(MAKEREPLACEOPTCODE):   else do;
MPRINT(MAKEREPLACEOPTCODE):   string = tranwrd(strip(craw),'"','""');
MPRINT(MAKEREPLACEOPTCODE):   string = ' if _UFORMAT200 =  "'!!strip(string)!!'" then ';
MPRINT(MAKEREPLACEOPTCODE):   put string;
MPRINT(MAKEREPLACEOPTCODE):   end;
MPRINT(MAKEREPLACEOPTCODE):   end;
MPRINT(MAKEREPLACEOPTCODE):   string = strip(newname)!!'=';
MPRINT(MAKEREPLACEOPTCODE):   if type eq 'C' then do;
MPRINT(MAKEREPLACEOPTCODE):   if upcase(replace_value) eq '_MISSING_' or (upcase(replace_value) eq '_DEFAULT_' and (upcase(UNKWOWNDEFAULT)= 'MISSING')) then replace_Value ='';
MPRINT(MAKEREPLACEOPTCODE):   else if upcase(replace_value) eq '_MODE_' or (upcase(replace_value) eq '_DEFAULT_' and (upcase(UNKWOWNDEFAULT)= 'MODE')) then replace_Value =modec;
MPRINT(MAKEREPLACEOPTCODE):   string = strip(string)!!'"'!!tranwrd(strip(replace_Value),'"','""')!!'";';
MPRINT(MAKEREPLACEOPTCODE):   end;
MPRINT(MAKEREPLACEOPTCODE):   else do;
MPRINT(MAKEREPLACEOPTCODE):   if upcase(replace_value) eq '_MISSING_' or (upcase(replace_value) eq '_DEFAULT_' and (upcase(UNKWOWNDEFAULT) = 'MISSING')) then replace_Value ='.';
MPRINT(MAKEREPLACEOPTCODE):   else if upcase(replace_value) eq '_MODE_' or (upcase(replace_value) eq '_DEFAULT_' and (upcase(UNKWOWNDEFAULT) = 'MODE')) then replace_Value =strip(put(moden, BEST.));
MPRINT(MAKEREPLACEOPTCODE):   string = strip(string)!!''!!strip(replace_value)!!';';
MPRINT(MAKEREPLACEOPTCODE):   end;
MPRINT(MAKEREPLACEOPTCODE):   put string;
MPRINT(MAKEREPLACEOPTCODE):   run;
 
NOTE: The file _F1 is:
      Filename=H:\746\Decision Tree test\Workspaces\EMWS1\Repl2\REPLACECODE\REP_fuel_system.sas,
      RECFM=V,LRECL=32767,File Size (bytes)=153,
      Last Modified=April 16, 2021 11:26:01 o'cloc,
      Create Time=April 16, 2021 11:26:01 o'cloc
 
NOTE: 21 records were written to the file _F1.
      The minimum record length was 3.
      The maximum record length was 33.
NOTE: There were 6 observations read from the data set WORK._TEMP.
      WHERE NAME='fuel_system';
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(MAKEREPLACEOPTCODE):   filename _F1;
NOTE: Fileref _F1 has been deassigned.
MPRINT(MAKEREPLACEOPTCODE):   filename _F1 "H:\746\Decision Tree test\Workspaces\EMWS1\Repl2\REPLACECODE\REP_fuel_type.sas" MOD;
MPRINT(MAKEREPLACEOPTCODE):   data _null_;
MPRINT(MAKEREPLACEOPTCODE):   length string $400;
MPRINT(MAKEREPLACEOPTCODE):   set _temp end=eof;
MPRINT(MAKEREPLACEOPTCODE):   by NAME;
MPRINT(MAKEREPLACEOPTCODE):   where NAME ="fuel_type";
MPRINT(MAKEREPLACEOPTCODE):   file _F1;
MPRINT(MAKEREPLACEOPTCODE):   if _N_=1 then do;
MPRINT(MAKEREPLACEOPTCODE):   put '* ;';
MPRINT(MAKEREPLACEOPTCODE):   string = '* Variable: '!!strip(NAME)!!';';
MPRINT(MAKEREPLACEOPTCODE):   put string;
MPRINT(MAKEREPLACEOPTCODE):   put '* ;';
MPRINT(MAKEREPLACEOPTCODE):   if format ne '' then do;
MPRINT(MAKEREPLACEOPTCODE):   string = "_UFORMAT200 = strip(";
MPRINT(MAKEREPLACEOPTCODE):   put string;
MPRINT(MAKEREPLACEOPTCODE):   string ='put('!!strip(NAME)!!','!!strip(format)!!'));';
MPRINT(MAKEREPLACEOPTCODE):   put string;
MPRINT(MAKEREPLACEOPTCODE):   end;
MPRINT(MAKEREPLACEOPTCODE):   else if type eq 'C' then do;
MPRINT(MAKEREPLACEOPTCODE):   call symput('UFormatFlag', '1');
MPRINT(MAKEREPLACEOPTCODE):   string = "_UFORMAT200 = strip("!!strip(NAME)!!');';
MPRINT(MAKEREPLACEOPTCODE):   put string;
MPRINT(MAKEREPLACEOPTCODE):   end;
MPRINT(MAKEREPLACEOPTCODE):   end;
MPRINT(MAKEREPLACEOPTCODE):   if ^first.name then put 'else';
MPRINT(MAKEREPLACEOPTCODE):   if format ne '' then do;
MPRINT(MAKEREPLACEOPTCODE):   string = tranwrd(strip(LEVEL),'"','""');
MPRINT(MAKEREPLACEOPTCODE):   string =' if _UFORMAT200 =  "'!!strip(string)!!'" then ';
MPRINT(MAKEREPLACEOPTCODE):   put string;
MPRINT(MAKEREPLACEOPTCODE):   end;
MPRINT(MAKEREPLACEOPTCODE):   else do;
MPRINT(MAKEREPLACEOPTCODE):   if type eq 'N' then do;
MPRINT(MAKEREPLACEOPTCODE):   string = 'if '!!strip(name)!!' = '!!strip(put(nraw, BEST.))!!' then ';
MPRINT(MAKEREPLACEOPTCODE):   put string;
MPRINT(MAKEREPLACEOPTCODE):   end;
MPRINT(MAKEREPLACEOPTCODE):   else do;
MPRINT(MAKEREPLACEOPTCODE):   string = tranwrd(strip(craw),'"','""');
MPRINT(MAKEREPLACEOPTCODE):   string = ' if _UFORMAT200 =  "'!!strip(string)!!'" then ';
MPRINT(MAKEREPLACEOPTCODE):   put string;
MPRINT(MAKEREPLACEOPTCODE):   end;
MPRINT(MAKEREPLACEOPTCODE):   end;
MPRINT(MAKEREPLACEOPTCODE):   string = strip(newname)!!'=';
MPRINT(MAKEREPLACEOPTCODE):   if type eq 'C' then do;
MPRINT(MAKEREPLACEOPTCODE):   if upcase(replace_value) eq '_MISSING_' or (upcase(replace_value) eq '_DEFAULT_' and (upcase(UNKWOWNDEFAULT)= 'MISSING')) then replace_Value ='';
MPRINT(MAKEREPLACEOPTCODE):   else if upcase(replace_value) eq '_MODE_' or (upcase(replace_value) eq '_DEFAULT_' and (upcase(UNKWOWNDEFAULT)= 'MODE')) then replace_Value =modec;
MPRINT(MAKEREPLACEOPTCODE):   string = strip(string)!!'"'!!tranwrd(strip(replace_Value),'"','""')!!'";';
MPRINT(MAKEREPLACEOPTCODE):   end;
MPRINT(MAKEREPLACEOPTCODE):   else do;
MPRINT(MAKEREPLACEOPTCODE):   if upcase(replace_value) eq '_MISSING_' or (upcase(replace_value) eq '_DEFAULT_' and (upcase(UNKWOWNDEFAULT) = 'MISSING')) then replace_Value ='.';
MPRINT(MAKEREPLACEOPTCODE):   else if upcase(replace_value) eq '_MODE_' or (upcase(replace_value) eq '_DEFAULT_' and (upcase(UNKWOWNDEFAULT) = 'MODE')) then replace_Value =strip(put(moden, BEST.));
MPRINT(MAKEREPLACEOPTCODE):   string = strip(string)!!''!!strip(replace_value)!!';';
MPRINT(MAKEREPLACEOPTCODE):   end;
MPRINT(MAKEREPLACEOPTCODE):   put string;
MPRINT(MAKEREPLACEOPTCODE):   run;
 
NOTE: The file _F1 is:
      Filename=H:\746\Decision Tree test\Workspaces\EMWS1\Repl2\REPLACECODE\REP_fuel_type.sas,
      RECFM=V,LRECL=32767,File Size (bytes)=141,
      Last Modified=April 16, 2021 11:26:01 o'cloc,
      Create Time=April 16, 2021 11:26:01 o'cloc
 
NOTE: 9 records were written to the file _F1.
      The minimum record length was 3.
      The maximum record length was 31.
NOTE: There were 2 observations read from the data set WORK._TEMP.
      WHERE NAME='fuel_type';
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(MAKEREPLACEOPTCODE):   filename _F1;
NOTE: Fileref _F1 has been deassigned.
MPRINT(MAKEREPLACEOPTCODE):   filename _F1 "H:\746\Decision Tree test\Workspaces\EMWS1\Repl2\REPLACECODE\REP_num_of_cylinders.sas" MOD;
MPRINT(MAKEREPLACEOPTCODE):   data _null_;
MPRINT(MAKEREPLACEOPTCODE):   length string $400;
MPRINT(MAKEREPLACEOPTCODE):   set _temp end=eof;
MPRINT(MAKEREPLACEOPTCODE):   by NAME;
MPRINT(MAKEREPLACEOPTCODE):   where NAME ="num_of_cylinders";
MPRINT(MAKEREPLACEOPTCODE):   file _F1;
MPRINT(MAKEREPLACEOPTCODE):   if _N_=1 then do;
MPRINT(MAKEREPLACEOPTCODE):   put '* ;';
MPRINT(MAKEREPLACEOPTCODE):   string = '* Variable: '!!strip(NAME)!!';';
MPRINT(MAKEREPLACEOPTCODE):   put string;
MPRINT(MAKEREPLACEOPTCODE):   put '* ;';
MPRINT(MAKEREPLACEOPTCODE):   if format ne '' then do;
MPRINT(MAKEREPLACEOPTCODE):   string = "_UFORMAT200 = strip(";
MPRINT(MAKEREPLACEOPTCODE):   put string;
MPRINT(MAKEREPLACEOPTCODE):   string ='put('!!strip(NAME)!!','!!strip(format)!!'));';
MPRINT(MAKEREPLACEOPTCODE):   put string;
MPRINT(MAKEREPLACEOPTCODE):   end;
MPRINT(MAKEREPLACEOPTCODE):   else if type eq 'C' then do;
MPRINT(MAKEREPLACEOPTCODE):   call symput('UFormatFlag', '1');
MPRINT(MAKEREPLACEOPTCODE):   string = "_UFORMAT200 = strip("!!strip(NAME)!!');';
MPRINT(MAKEREPLACEOPTCODE):   put string;
MPRINT(MAKEREPLACEOPTCODE):   end;
MPRINT(MAKEREPLACEOPTCODE):   end;
MPRINT(MAKEREPLACEOPTCODE):   if ^first.name then put 'else';
MPRINT(MAKEREPLACEOPTCODE):   if format ne '' then do;
MPRINT(MAKEREPLACEOPTCODE):   string = tranwrd(strip(LEVEL),'"','""');
MPRINT(MAKEREPLACEOPTCODE):   string =' if _UFORMAT200 =  "'!!strip(string)!!'" then ';
MPRINT(MAKEREPLACEOPTCODE):   put string;
MPRINT(MAKEREPLACEOPTCODE):   end;
MPRINT(MAKEREPLACEOPTCODE):   else do;
MPRINT(MAKEREPLACEOPTCODE):   if type eq 'N' then do;
MPRINT(MAKEREPLACEOPTCODE):   string = 'if '!!strip(name)!!' = '!!strip(put(nraw, BEST.))!!' then ';
MPRINT(MAKEREPLACEOPTCODE):   put string;
MPRINT(MAKEREPLACEOPTCODE):   end;
MPRINT(MAKEREPLACEOPTCODE):   else do;
MPRINT(MAKEREPLACEOPTCODE):   string = tranwrd(strip(craw),'"','""');
MPRINT(MAKEREPLACEOPTCODE):   string = ' if _UFORMAT200 =  "'!!strip(string)!!'" then ';
MPRINT(MAKEREPLACEOPTCODE):   put string;
MPRINT(MAKEREPLACEOPTCODE):   end;
MPRINT(MAKEREPLACEOPTCODE):   end;
MPRINT(MAKEREPLACEOPTCODE):   string = strip(newname)!!'=';
MPRINT(MAKEREPLACEOPTCODE):   if type eq 'C' then do;
MPRINT(MAKEREPLACEOPTCODE):   if upcase(replace_value) eq '_MISSING_' or (upcase(replace_value) eq '_DEFAULT_' and (upcase(UNKWOWNDEFAULT)= 'MISSING')) then replace_Value ='';
MPRINT(MAKEREPLACEOPTCODE):   else if upcase(replace_value) eq '_MODE_' or (upcase(replace_value) eq '_DEFAULT_' and (upcase(UNKWOWNDEFAULT)= 'MODE')) then replace_Value =modec;
MPRINT(MAKEREPLACEOPTCODE):   string = strip(string)!!'"'!!tranwrd(strip(replace_Value),'"','""')!!'";';
MPRINT(MAKEREPLACEOPTCODE):   end;
MPRINT(MAKEREPLACEOPTCODE):   else do;
MPRINT(MAKEREPLACEOPTCODE):   if upcase(replace_value) eq '_MISSING_' or (upcase(replace_value) eq '_DEFAULT_' and (upcase(UNKWOWNDEFAULT) = 'MISSING')) then replace_Value ='.';
MPRINT(MAKEREPLACEOPTCODE):   else if upcase(replace_value) eq '_MODE_' or (upcase(replace_value) eq '_DEFAULT_' and (upcase(UNKWOWNDEFAULT) = 'MODE')) then replace_Value =strip(put(moden, BEST.));
MPRINT(MAKEREPLACEOPTCODE):   string = strip(string)!!''!!strip(replace_value)!!';';
MPRINT(MAKEREPLACEOPTCODE):   end;
MPRINT(MAKEREPLACEOPTCODE):   put string;
MPRINT(MAKEREPLACEOPTCODE):   run;
 
NOTE: The file _F1 is:
      Filename=H:\746\Decision Tree test\Workspaces\EMWS1\Repl2\REPLACECODE\REP_num_of_cylinders.sas,
      RECFM=V,LRECL=32767,File Size (bytes)=183,
      Last Modified=April 16, 2021 11:26:01 o'cloc,
      Create Time=April 16, 2021 11:26:01 o'cloc
 
NOTE: 15 records were written to the file _F1.
      The minimum record length was 3.
      The maximum record length was 38.
NOTE: There were 4 observations read from the data set WORK._TEMP.
      WHERE NAME='num_of_cylinders';
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(MAKEREPLACEOPTCODE):   filename _F1;
NOTE: Fileref _F1 has been deassigned.
MPRINT(MAKECLASSSCORECODE):  ;
MPRINT(MAKECLASSSCORECODE):   data _temp;
MPRINT(MAKECLASSSCORECODE):   set CLASSTEMP;
MPRINT(MAKECLASSSCORECODE):   where LEVEL='_UNKNOWN_' and (REPLACE_VALUE ^in('', '_DEFAULT_') or (REPLACE_VALUE='_DEFAULT_' and UNKWOWNDEFAULT ne 'NONE'));
MPRINT(MAKECLASSSCORECODE):   keep NAME;
MPRINT(MAKECLASSSCORECODE):   run;
 
NOTE: There were 0 observations read from the data set WORK.CLASSTEMP.
      WHERE (LEVEL='_UNKNOWN_') and (REPLACE_VALUE not in (' ', '_DEFAULT_') or ((REPLACE_VALUE='_DEFAULT_') and (UNKWOWNDEFAULT not = 'NONE')));
NOTE: The data set WORK._TEMP has 0 observations and 1 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
MPRINT(MAKECLASSSCORECODE):   data _temp;
MPRINT(MAKECLASSSCORECODE):   merge _temp(in=_a) CLASSTEMP EMWS1.Repl2_CLASSINFO;
MPRINT(MAKECLASSSCORECODE):   by NAME;
MPRINT(MAKECLASSSCORECODE):   if _a then output;
MPRINT(MAKECLASSSCORECODE):   run;
 
NOTE: There were 0 observations read from the data set WORK._TEMP.
NOTE: There were 56 observations read from the data set WORK.CLASSTEMP.
NOTE: There were 7 observations read from the data set EMWS1.REPL2_CLASSINFO.
NOTE: The data set WORK._TEMP has 0 observations and 17 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(MAKEUNKNOWNCODE):   filename _F1 "H:\746\Decision Tree test\Workspaces\EMWS1\Repl2\EMFLOWSCORE.sas" MOD;
MPRINT(MAKEUNKNOWNCODE):   data _null_;
MPRINT(MAKEUNKNOWNCODE):   set _temp;
MPRINT(MAKEUNKNOWNCODE):   length string $400;
MPRINT(MAKEUNKNOWNCODE):   length newlevel replaceLevel $200;
MPRINT(MAKEUNKNOWNCODE):   retain string missingFlag;
MPRINT(MAKEUNKNOWNCODE):   file _F1;
MPRINT(MAKEUNKNOWNCODE):   by NAME;
MPRINT(MAKEUNKNOWNCODE):   if _N_=1 then do;
MPRINT(MAKEUNKNOWNCODE):   put '* ;';
MPRINT(MAKEUNKNOWNCODE):   put '* Replace Unknown Class Levels ;';
MPRINT(MAKEUNKNOWNCODE):   put '* ;';
MPRINT(MAKEUNKNOWNCODE):   put 'length _UFORMAT200 $200;';
MPRINT(MAKEUNKNOWNCODE):   put 'drop   _UFORMAT200;';
MPRINT(MAKEUNKNOWNCODE):   put '_UFORMAT200 = " ";';
MPRINT(MAKEUNKNOWNCODE):   end;
MPRINT(MAKEUNKNOWNCODE):   if first.name then do;
MPRINT(MAKEUNKNOWNCODE):   missingFlag = 0;
MPRINT(MAKEUNKNOWNCODE):   put '*;';
MPRINT(MAKEUNKNOWNCODE):   if format ne '' then do;
MPRINT(MAKEUNKNOWNCODE):   call symput('UFormatFlag', '1');
MPRINT(MAKEUNKNOWNCODE):   string = '_UFORMAT200 = '!!'strip(put('!!strip(NAME)!!','!!strip(format)!!'));';
MPRINT(MAKEUNKNOWNCODE):   put string;
MPRINT(MAKEUNKNOWNCODE):   put 'if ^(_UFORMAT200 in(';
MPRINT(MAKEUNKNOWNCODE):   end;
MPRINT(MAKEUNKNOWNCODE):   else do;
MPRINT(MAKEUNKNOWNCODE):   if type eq 'C' then do;
MPRINT(MAKEUNKNOWNCODE):   call symput('UFormatFlag', '1');
MPRINT(MAKEUNKNOWNCODE):   string = '_UFORMAT200 = '!!'strip('!!strip(NAME)!!');';
MPRINT(MAKEUNKNOWNCODE):   put string;
MPRINT(MAKEUNKNOWNCODE):   put 'if ^(_UFORMAT200 in(';
MPRINT(MAKEUNKNOWNCODE):   end;
MPRINT(MAKEUNKNOWNCODE):   else put 'if (';
MPRINT(MAKEUNKNOWNCODE):   end;
MPRINT(MAKEUNKNOWNCODE):   string='';
MPRINT(MAKEUNKNOWNCODE):   end;
MPRINT(MAKEUNKNOWNCODE):   if ^last.name and LEVEL ne '_UNKNOWN_' then do;
MPRINT(MAKEUNKNOWNCODE):   if format ne '' or type eq 'C' then do;
MPRINT(MAKEUNKNOWNCODE):   newlevel = tranwrd(strip(LEVEL),'"','""');
MPRINT(MAKEUNKNOWNCODE):   if strip(newLevel) = '' then missingFlag = 1;
MPRINT(MAKEUNKNOWNCODE):   if length(strip(newlevel))+length(strip(string))+4<80 then do;
MPRINT(MAKEUNKNOWNCODE):   if string='' then string = strip(string)!!' "'!!strip(newlevel)!!'" ';
MPRINT(MAKEUNKNOWNCODE):   else string = strip(string)!!', "'!!strip(newlevel)!!'" ';
MPRINT(MAKEUNKNOWNCODE):   end;
MPRINT(MAKEUNKNOWNCODE):   else do;
MPRINT(MAKEUNKNOWNCODE):   put string;
MPRINT(MAKEUNKNOWNCODE):   string =', "'!!tranwrd(strip(LEVEL),'"','""')!!'"';
MPRINT(MAKEUNKNOWNCODE):   end;
MPRINT(MAKEUNKNOWNCODE):   end;
MPRINT(MAKEUNKNOWNCODE):   else do;
MPRINT(MAKEUNKNOWNCODE):   string = strip(name)!!' ne '!!strip(level)!!' and ';
MPRINT(MAKEUNKNOWNCODE):   put string;
MPRINT(MAKEUNKNOWNCODE):   end;
MPRINT(MAKEUNKNOWNCODE):   newlevel = ' ';
MPRINT(MAKEUNKNOWNCODE):   end;
MPRINT(MAKEUNKNOWNCODE):   else do;
MPRINT(MAKEUNKNOWNCODE):   if format ne '' or type eq 'C' then do;
MPRINT(MAKEUNKNOWNCODE):   put string;
MPRINT(MAKEUNKNOWNCODE):   if ^missingFlag then string = ', "" )) then ';
MPRINT(MAKEUNKNOWNCODE):   else string = ')) then ';
MPRINT(MAKEUNKNOWNCODE):   end;
MPRINT(MAKEUNKNOWNCODE):   else string = strip(name)!!' ne . ) then ';
MPRINT(MAKEUNKNOWNCODE):   put string;
MPRINT(MAKEUNKNOWNCODE):   select(REPLACE_VALUE);
MPRINT(MAKEUNKNOWNCODE):   when('_MODE_') do;
MPRINT(MAKEUNKNOWNCODE):   if type eq 'C' then replaceLevel = NORMMODE;
MPRINT(MAKEUNKNOWNCODE):   else replaceLevel =strip(put(MODEN,BEST.));
MPRINT(MAKEUNKNOWNCODE):   end;
MPRINT(MAKEUNKNOWNCODE):   when('_MISSING_') do;
MPRINT(MAKEUNKNOWNCODE):   if type eq 'C' then replaceLevel = '';
MPRINT(MAKEUNKNOWNCODE):   else replaceLevel = '.';
MPRINT(MAKEUNKNOWNCODE):   end;
MPRINT(MAKEUNKNOWNCODE):   when('_DEFAULT_') do;
MPRINT(MAKEUNKNOWNCODE):   if type eq 'C' then replaceLevel = '';
MPRINT(MAKEUNKNOWNCODE):   else replaceLevel = '.';
MPRINT(MAKEUNKNOWNCODE):   end;
MPRINT(MAKEUNKNOWNCODE):   when('') do;
MPRINT(MAKEUNKNOWNCODE):   end;
MPRINT(MAKEUNKNOWNCODE):   otherwise do;
MPRINT(MAKEUNKNOWNCODE):   if type eq 'C' then replaceLevel= replace_Value;
MPRINT(MAKEUNKNOWNCODE):   else replaceLevel = replace_Value;
MPRINT(MAKEUNKNOWNCODE):   end;
MPRINT(MAKEUNKNOWNCODE):   end;
MPRINT(MAKEUNKNOWNCODE):   if type eq 'C' then do;
MPRINT(MAKEUNKNOWNCODE):   string = strip(newname)!!'= "'!!tranwrd(strip(replaceLevel),'"','""')!!'";';
MPRINT(MAKEUNKNOWNCODE):   end;
MPRINT(MAKEUNKNOWNCODE):   else do;
MPRINT(MAKEUNKNOWNCODE):   string = strip(newname)!!'= '!!strip(replaceLevel)!!';';
MPRINT(MAKEUNKNOWNCODE):   end;
MPRINT(MAKEUNKNOWNCODE):   put string;
MPRINT(MAKEUNKNOWNCODE):   end;
MPRINT(MAKEUNKNOWNCODE):   run;
 
NOTE: The file _F1 is:
      Filename=H:\746\Decision Tree test\Workspaces\EMWS1\Repl2\EMFLOWSCORE.sas,
      RECFM=V,LRECL=32767,File Size (bytes)=872,
      Last Modified=April 16, 2021 11:26:01 o'cloc,
      Create Time=April 16, 2021 11:26:01 o'cloc
 
NOTE: 0 records were written to the file _F1.
NOTE: There were 0 observations read from the data set WORK._TEMP.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
MPRINT(MAKEUNKNOWNCODE):   filename _F1;
NOTE: Fileref _F1 has been deassigned.
MPRINT(MAKECLASSSCORECODE):  ;
MPRINT(MAKECLASSSCORECODE):   data _temp;
MPRINT(MAKECLASSSCORECODE):   merge CLASSTEMP(in=_a where=(LEVEL ne '_UNKNOWN_' and (REPLACE_VALUE ^in('', '_DEFAULT_') or (REPLACE_VALUE='_DEFAULT_' and UNKWOWNDEFAULT ne 'NONE')) )) EMWS1.Repl2_CLASSINFO;
MPRINT(MAKECLASSSCORECODE):   by NAME;
MPRINT(MAKECLASSSCORECODE):   if _a then output;
MPRINT(MAKECLASSSCORECODE):   run;
 
NOTE: There were 24 observations read from the data set WORK.CLASSTEMP.
      WHERE (LEVEL not = '_UNKNOWN_') and (REPLACE_VALUE not in (' ', '_DEFAULT_') or ((REPLACE_VALUE='_DEFAULT_') and (UNKWOWNDEFAULT not = 'NONE')));
NOTE: There were 7 observations read from the data set EMWS1.REPL2_CLASSINFO.
NOTE: The data set WORK._TEMP has 24 observations and 17 variables.
NOTE: DATA statement used (Total process time):
      real time           3.96 seconds
      cpu time            0.01 seconds
 
 
MPRINT(MAKEREPLACECODE):   filename _F1 "H:\746\Decision Tree test\Workspaces\EMWS1\Repl2\EMFLOWSCORE.sas" MOD;
MPRINT(MAKEREPLACECODE):   data _null_;
MPRINT(MAKEREPLACECODE):   length string $400;
MPRINT(MAKEREPLACECODE):   set _temp end=eof;
MPRINT(MAKEREPLACECODE):   file _F1;
MPRINT(MAKEREPLACECODE):   by NAME;
MPRINT(MAKEREPLACECODE):   if _N_=1 then do;
MPRINT(MAKEREPLACECODE):   put '   ';
MPRINT(MAKEREPLACECODE):   put '* ;';
MPRINT(MAKEREPLACECODE):   put '* Replace Specific Class Levels ;';
MPRINT(MAKEREPLACECODE):   put '* ;';
MPRINT(MAKEREPLACECODE):   put 'length _UFormat200 $200;';
MPRINT(MAKEREPLACECODE):   put 'drop   _UFORMAT200;';
MPRINT(MAKEREPLACECODE):   put '_UFORMAT200 = " ";';
MPRINT(MAKEREPLACECODE):   end;
MPRINT(MAKEREPLACECODE):   if first.name then do;
MPRINT(MAKEREPLACECODE):   put '* ;';
MPRINT(MAKEREPLACECODE):   string = '* Variable: '!!strip(NAME)!!';';
MPRINT(MAKEREPLACECODE):   put string;
MPRINT(MAKEREPLACECODE):   put '* ;';
MPRINT(MAKEREPLACECODE):   if format ne '' then do;
MPRINT(MAKEREPLACECODE):   call symput('UFormatFlag', '1');
MPRINT(MAKEREPLACECODE):   string = "_UFORMAT200 = strip(";
MPRINT(MAKEREPLACECODE):   put string;
MPRINT(MAKEREPLACECODE):   string ='put('!!strip(NAME)!!','!!strip(format)!!'));';
MPRINT(MAKEREPLACECODE):   put string;
MPRINT(MAKEREPLACECODE):   end;
MPRINT(MAKEREPLACECODE):   else if type eq 'C' then do;
MPRINT(MAKEREPLACECODE):   call symput('UFormatFlag', '1');
MPRINT(MAKEREPLACECODE):   string = "_UFORMAT200 = strip("!!strip(NAME)!!');';
MPRINT(MAKEREPLACECODE):   put string;
MPRINT(MAKEREPLACECODE):   end;
MPRINT(MAKEREPLACECODE):   end;
MPRINT(MAKEREPLACECODE):   if ^first.name then put 'else';
MPRINT(MAKEREPLACECODE):   if format ne '' then do;
MPRINT(MAKEREPLACECODE):   string = tranwrd(strip(LEVEL),'"','""');
MPRINT(MAKEREPLACECODE):   string =' if _UFORMAT200 =  "'!!strip(string)!!'" then ';
MPRINT(MAKEREPLACECODE):   put string;
MPRINT(MAKEREPLACECODE):   end;
MPRINT(MAKEREPLACECODE):   else do;
MPRINT(MAKEREPLACECODE):   if type eq 'N' then do;
MPRINT(MAKEREPLACECODE):   string = 'if '!!strip(name)!!' = '!!strip(put(nraw, BEST.))!!' then ';
MPRINT(MAKEREPLACECODE):   put string;
MPRINT(MAKEREPLACECODE):   end;
MPRINT(MAKEREPLACECODE):   else do;
MPRINT(MAKEREPLACECODE):   string = tranwrd(strip(craw),'"','""');
MPRINT(MAKEREPLACECODE):   string = ' if _UFORMAT200 =  "'!!strip(string)!!'" then ';
MPRINT(MAKEREPLACECODE):   put string;
MPRINT(MAKEREPLACECODE):   end;
MPRINT(MAKEREPLACECODE):   end;
MPRINT(MAKEREPLACECODE):   string = strip(newname)!!'=';
MPRINT(MAKEREPLACECODE):   if type eq 'C' then do;
MPRINT(MAKEREPLACECODE):   if upcase(replace_value) eq '_MISSING_' or (upcase(replace_value) eq '_DEFAULT_' and (upcase(UNKWOWNDEFAULT)= 'MISSING')) then replace_Value ='';
MPRINT(MAKEREPLACECODE):   else if upcase(replace_value) eq '_MODE_' or (upcase(replace_value) eq '_DEFAULT_' and (upcase(UNKWOWNDEFAULT)= 'MODE')) then replace_Value =modec;
MPRINT(MAKEREPLACECODE):   string = strip(string)!!'"'!!tranwrd(strip(replace_Value),'"','""')!!'";';
MPRINT(MAKEREPLACECODE):   end;
MPRINT(MAKEREPLACECODE):   else do;
MPRINT(MAKEREPLACECODE):   if upcase(replace_value) eq '_MISSING_' or (upcase(replace_value) eq '_DEFAULT_' and (upcase(UNKWOWNDEFAULT) = 'MISSING')) then replace_Value ='.';
MPRINT(MAKEREPLACECODE):   else if upcase(replace_value) eq '_MODE_' or (upcase(replace_value) eq '_DEFAULT_' and (upcase(UNKWOWNDEFAULT) = 'MODE')) then replace_Value =strip(put(moden, BEST.));
MPRINT(MAKEREPLACECODE):   string = strip(string)!!''!!strip(replace_value)!!';';
MPRINT(MAKEREPLACECODE):   end;
MPRINT(MAKEREPLACECODE):   put string;
MPRINT(MAKEREPLACECODE):   run;
 
NOTE: The file _F1 is:
      Filename=H:\746\Decision Tree test\Workspaces\EMWS1\Repl2\EMFLOWSCORE.sas,
      RECFM=V,LRECL=32767,File Size (bytes)=872,
      Last Modified=April 16, 2021 11:26:01 o'cloc,
      Create Time=April 16, 2021 11:26:01 o'cloc
 
NOTE: 101 records were written to the file _F1.
      The minimum record length was 3.
      The maximum record length was 38.
NOTE: There were 24 observations read from the data set WORK._TEMP.
NOTE: DATA statement used (Total process time):
      real time           0.02 seconds
      cpu time            0.00 seconds
 
 
MPRINT(MAKEREPLACECODE):   filename _F1;
NOTE: Fileref _F1 has been deassigned.
MPRINT(MAKECLASSSCORECODE):  ;
MPRINT(MAKECLASSSCORECODE):   filename _F1 "H:\746\Decision Tree test\Workspaces\EMWS1\Repl2\REPLACECODE\_ALL_.sas" MOD;
MPRINT(MAKECLASSSCORECODE):   data _null_;
MPRINT(MAKECLASSSCORECODE):   file _F1;
MPRINT(MAKECLASSSCORECODE):   put 'length _UFormat200 $200;';
MPRINT(MAKECLASSSCORECODE):   put 'drop   _UFORMAT200;';
MPRINT(MAKECLASSSCORECODE):   put '_UFORMAT200 = " ";';
MPRINT(MAKECLASSSCORECODE):   run;
 
NOTE: The file _F1 is:
      Filename=H:\746\Decision Tree test\Workspaces\EMWS1\Repl2\REPLACECODE\_ALL_.sas,
      RECFM=V,LRECL=32767,File Size (bytes)=0,
      Last Modified=April 16, 2021 11:26:06 o'cloc,
      Create Time=April 16, 2021 11:26:06 o'cloc
 
NOTE: 3 records were written to the file _F1.
      The minimum record length was 18.
      The maximum record length was 24.
NOTE: DATA statement used (Total process time):
      real time           0.08 seconds
      cpu time            0.00 seconds
 
 
MPRINT(MAKECLASSSCORECODE):   filename _F1;
NOTE: Fileref _F1 has been deassigned.
MPRINT(SCORE):  ;
MPRINT(MAKECLASSDELTACODE):   filename _F1 "H:\746\Decision Tree test\Workspaces\EMWS1\Repl2\CDELTA_TRAIN.sas" MOD;
MPRINT(MAKECLASSDELTACODE):   data _null_;
MPRINT(MAKECLASSDELTACODE):   set EMWS1.Repl2_CLASSINFO end=eof;
MPRINT(MAKECLASSDELTACODE):   length string $400;
MPRINT(MAKECLASSDELTACODE):   file _F1;
MPRINT(MAKECLASSDELTACODE):   string = 'if NAME="'!!strip(NAME)!!'" then ROLE="REJECTED";';
MPRINT(MAKECLASSDELTACODE):   put string;
MPRINT(MAKECLASSDELTACODE):   put 'else';
MPRINT(MAKECLASSDELTACODE):   string = '   if NAME="'!!strip(NEWNAME)!!'" then do;';
MPRINT(MAKECLASSDELTACODE):   put string;
MPRINT(MAKECLASSDELTACODE):   string = '      ROLE="'!!strip(ROLE)!!'";';
MPRINT(MAKECLASSDELTACODE):   put string;
MPRINT(MAKECLASSDELTACODE):   string = '      LEVEL="'!!strip(MLEVEL)!!'";';
MPRINT(MAKECLASSDELTACODE):   put string;
MPRINT(MAKECLASSDELTACODE):   put 'end;';
MPRINT(MAKECLASSDELTACODE):   if ^eof then put 'else';
MPRINT(MAKECLASSDELTACODE):   run;
 
NOTE: The file _F1 is:
      Filename=H:\746\Decision Tree test\Workspaces\EMWS1\Repl2\CDELTA_TRAIN.sas,
      RECFM=V,LRECL=32767,File Size (bytes)=0,
      Last Modified=April 16, 2021 11:26:06 o'cloc,
      Create Time=April 16, 2021 11:26:06 o'cloc
 
NOTE: 48 records were written to the file _F1.
      The minimum record length was 4.
      The maximum record length was 48.
NOTE: There were 7 observations read from the data set EMWS1.REPL2_CLASSINFO.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.00 seconds
 
 
MPRINT(MAKECLASSDELTACODE):   filename _F1;
NOTE: Fileref _F1 has been deassigned.
MPRINT(SCORE):  ;
MPRINT(SCORE):  ;
MPRINT(MAKEVALUEREPORT):   data EMWS1.Repl2_VALUES;
MPRINT(MAKEVALUEREPORT):   set CLASSTEMP;
MPRINT(MAKEVALUEREPORT):   where REPLACE_VALUE ^in('', '_DEFAULT_') or (REPLACE_VALUE eq '_DEFAULT_' and UNKWOWNDEFAULT ne 'NONE');
MPRINT(MAKEVALUEREPORT):   if LEVEL = '_UNKNOWN_' then do;
MPRINT(MAKEVALUEREPORT):   LEVEL='Unknown';
MPRINT(MAKEVALUEREPORT):   if REPLACE_VALUE = '_MODE_' then REPLACE_VALUE = strip(NORMMODE);
MPRINT(MAKEVALUEREPORT):   else if REPLACE_VALUE in('_MISSING_', '_DEFAULT_') then do;
MPRINT(MAKEVALUEREPORT):   if type eq 'N' then REPLACE_VALUE='.';
MPRINT(MAKEVALUEREPORT):   else REPLACE_VALUE='_blank_';
MPRINT(MAKEVALUEREPORT):   end;
MPRINT(MAKEVALUEREPORT):   end;
MPRINT(MAKEVALUEREPORT):   else do;
MPRINT(MAKEVALUEREPORT):   if REPLACE_VALUE ='_MISSING_' then do;
MPRINT(MAKEVALUEREPORT):   if type eq 'N' then REPLACE_VALUE='.';
MPRINT(MAKEVALUEREPORT):   else REPLACE_VALUE='_blank_';
MPRINT(MAKEVALUEREPORT):   end;
MPRINT(MAKEVALUEREPORT):   else if REPLACE_VALUE = '_MODE_' then REPLACE_VALUE = strip(NORMMODE);
MPRINT(MAKEVALUEREPORT):   end;
MPRINT(MAKEVALUEREPORT):   keep NAME LEVEL CRAW NRAW REPLACE_VALUE TYPE LABEL ;
MPRINT(MAKEVALUEREPORT):   run;
 
NOTE: There were 24 observations read from the data set WORK.CLASSTEMP.
      WHERE REPLACE_VALUE not in (' ', '_DEFAULT_') or ((REPLACE_VALUE='_DEFAULT_') and (UNKWOWNDEFAULT not = 'NONE'));
NOTE: The data set EMWS1.REPL2_VALUES has 24 observations and 7 variables.
NOTE: DATA statement used (Total process time):
      real time           0.09 seconds
      cpu time            0.00 seconds
 
 
MPRINT(SCORE):  ;
MPRINT(EM_REPORT):   data WORK.EM_USER_REPORT;
MPRINT(EM_REPORT):   retain id 0;
MPRINT(EM_REPORT):   id + 1;
MPRINT(EM_REPORT):   length VIEW 8 NAME $32 VALUE $400;
MPRINT(EM_REPORT):   NAME = "KEY";
MPRINT(EM_REPORT):   VALUE = "VALUES";
MPRINT(EM_REPORT):   VIEW = 0.58860716716787;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "VIEWTYPE";
MPRINT(EM_REPORT):   VALUE = "DATA";
MPRINT(EM_REPORT):   VIEW = 0.58860716716787;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "AUTODISPLAY";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.58860716716787;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SPK";
MPRINT(EM_REPORT):   VALUE = "Y";
MPRINT(EM_REPORT):   VIEW = 0.58860716716787;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "COMPARE";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.58860716716787;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LOCALIZE";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.58860716716787;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "EQUALIZEROWX";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.58860716716787;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "EQUALIZEROWY";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.58860716716787;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "EQUALIZECOLX";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.58860716716787;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "EQUALIZECOLY";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.58860716716787;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NROWS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.58860716716787;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NCOLS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.58860716716787;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DISCRETEX";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.58860716716787;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DISCRETEY";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.58860716716787;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LATTICEX";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.58860716716787;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LATTICEY";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.58860716716787;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LATTICETYPE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.58860716716787;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "ABSOLUTEVALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.58860716716787;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SORTORDER";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.58860716716787;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SORTORDERY";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.58860716716787;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "ORIENTATION";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.58860716716787;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "METHOD";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.58860716716787;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DIRECTION";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.58860716716787;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "BYSET";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.58860716716787;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "RENDERMODE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.58860716716787;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DESCRIPTION";
MPRINT(EM_REPORT):   VALUE = "ReplaceLevels";
MPRINT(EM_REPORT):   VIEW = 0.58860716716787;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "X";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.58860716716787;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "EXCLUDEVARS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.58860716716787;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Z";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.58860716716787;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YVARS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.58860716716787;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "FREQVARS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.58860716716787;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "AXIS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.58860716716787;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "FREQ";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.58860716716787;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "GROUP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.58860716716787;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SUBGROUP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.58860716716787;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "BLOCK";
MPRINT(EM_REPORT):   VALUE = "MODEL";
MPRINT(EM_REPORT):   VIEW = 0.58860716716787;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "COLOR";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.58860716716787;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "COLORINDEX";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.58860716716787;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "TIPTEXT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.58860716716787;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "TIP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.58860716716787;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "TOOLTIP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.58860716716787;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "REPORTID";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.58860716716787;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "IDVALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.58860716716787;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "ID";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.58860716716787;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SIZE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.58860716716787;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "FROM";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.58860716716787;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "TO";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.58860716716787;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "VALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.58860716716787;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "VIEWS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.58860716716787;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "PARENT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.58860716716787;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODETEXT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.58860716716787;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "ABOVETEXT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.58860716716787;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "BELOWTEXT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.58860716716787;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODESIZE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.58860716716787;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "STATS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.58860716716787;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "CLASSDIST";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.58860716716787;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "INTDIST";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.58860716716787;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "FOLDER";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.58860716716787;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YPLOTTYPE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.58860716716787;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XREF";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.58860716716787;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XREF2";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.58860716716787;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YREF";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.58860716716787;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y2REF";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.58860716716787;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YREF2";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.58860716716787;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y2REF2";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.58860716716787;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "GROUPINDEX";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.58860716716787;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "JOIN";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.58860716716787;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XEXCLUDE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.58860716716787;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "FREQEXCLUDE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.58860716716787;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YEXCLUDE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.58860716716787;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NAME";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.58860716716787;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "HEIGHT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.58860716716787;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "WIDTH";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.58860716716787;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XAXISLABEL";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.58860716716787;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y2AXISLABEL";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.58860716716787;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YAXISLABEL";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.58860716716787;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DISPLAYXLABEL";
MPRINT(EM_REPORT):   VALUE = "Y";
MPRINT(EM_REPORT):   VIEW = 0.58860716716787;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DISPLAYYLABEL";
MPRINT(EM_REPORT):   VALUE = "Y";
MPRINT(EM_REPORT):   VIEW = 0.58860716716787;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "CHOICETEXT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.58860716716787;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SEGMENTVALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.58860716716787;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LOWERBAND";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.58860716716787;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "UPPERBAND";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.58860716716787;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YLINE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.58860716716787;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKKEY";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.58860716716787;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODEKEY";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.58860716716787;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODEID";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.58860716716787;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODEVALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.58860716716787;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODECOLOR";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.58860716716787;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODESHAPE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.58860716716787;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODESHAPEVAR";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.58860716716787;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODELABEL";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.58860716716787;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODETIP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.58860716716787;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKID";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.58860716716787;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKVALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.58860716716787;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKFROM";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.58860716716787;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKTO";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.58860716716787;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKCOLOR";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.58860716716787;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKWIDTH";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.58860716716787;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKTIP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.58860716716787;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XFROM";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.58860716716787;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XTO";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.58860716716787;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YFROM";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.58860716716787;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YTO";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.58860716716787;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "MATRIXVAR";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.58860716716787;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "RESPONSE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.58860716716787;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SERIES";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.58860716716787;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DESCARG";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.58860716716787;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SLIDER";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.58860716716787;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "MarkerSize";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.58860716716787;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Marker";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.58860716716787;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y1";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.58860716716787;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y2";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.58860716716787;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y3";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.58860716716787;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y4";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.58860716716787;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y5";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.58860716716787;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y6";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.58860716716787;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y7";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.58860716716787;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y8";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.58860716716787;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y9";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.58860716716787;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y10";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.58860716716787;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y11";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.58860716716787;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y12";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.58860716716787;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y13";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.58860716716787;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y14";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.58860716716787;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y15";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.58860716716787;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y16";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.58860716716787;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "TITLE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.58860716716787;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LEGEND";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.58860716716787;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LEGENDTITLE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.58860716716787;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SHAPE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.58860716716787;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "METHOD";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.58860716716787;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NOBINMISS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.58860716716787;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   run;
 
NOTE: The data set WORK.EM_USER_REPORT has 132 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
 
 
MPRINT(SCORE):   proc print data=EMWS1.Repl2_VALUES label noobs;
MPRINT(SCORE):   title9 ' ';
MPRINT(SCORE):   title10 "Replacement Values for Class Variables";
MPRINT(SCORE):   run;
NOTE: There were 24 observations read from the data set EMWS1.REPL2_VALUES.
NOTE: The PROCEDURE PRINT printed page 1.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.09 seconds
      cpu time            0.04 seconds
 
 
MPRINT(SCORE):   title10;
MPRINT(SCORE):   proc datasets lib=work nolist;
MPRINT(SCORE):   delete CLASSTEMP;
MPRINT(SCORE):   run;
 
NOTE: Deleting WORK.CLASSTEMP (memtype=DATA).
MPRINT(SCORE):   quit;
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.02 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_REGISTER):   data WORK.EM_USER_KEY;
MPRINT(EM_REGISTER):   set WORK.EM_USER_KEY end=eof;
MPRINT(EM_REGISTER):   output;
MPRINT(EM_REGISTER):   if eof then do;
MPRINT(EM_REGISTER):   key = upcase("EMSCOREVAR");
MPRINT(EM_REGISTER):   type = upcase("DATA");
MPRINT(EM_REGISTER):   file = "Repl2_EMSCOREVAR";
MPRINT(EM_REGISTER):   folder = "";
MPRINT(EM_REGISTER):   extension = "";
MPRINT(EM_REGISTER):   AUTODELETE = "Y";
MPRINT(EM_REGISTER):   property = "N";
MPRINT(EM_REGISTER):   action = "";
MPRINT(EM_REGISTER):   output;
MPRINT(EM_REGISTER):   end;
MPRINT(EM_REGISTER):   run;
 
NOTE: There were 2 observations read from the data set WORK.EM_USER_KEY.
NOTE: The data set WORK.EM_USER_KEY has 3 observations and 8 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(SCORE):  ;
MPRINT(SCORE):   proc datasets lib=EMWS1 nolist;
MPRINT(SCORE):   delete Repl2_EMSCOREVAR;
MPRINT(SCORE):   run;
 
NOTE: Deleting EMWS1.REPL2_EMSCOREVAR (memtype=DATA).
MPRINT(SCORE):   quit;
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           3.19 seconds
      cpu time            0.59 seconds
 
 
MPRINT(SCORE):   data EMWS1.Repl2_EMSCOREVAR;
MPRINT(SCORE):   length Name $32 formula $70 file $200;
MPRINT(SCORE):   keep NAME Formula file;
MPRINT(SCORE):   name='';
MPRINT(SCORE):   file="REPLACECODE\_ALL_.sas";
MPRINT(SCORE):   output;
MPRINT(SCORE):   name = "REP_aspiration";
MPRINT(SCORE):   file="REPLACECODE\REP_aspiration.sas";
MPRINT(SCORE):   output;
MPRINT(SCORE):   name = "REP_body_style";
MPRINT(SCORE):   file="REPLACECODE\REP_body_style.sas";
MPRINT(SCORE):   output;
MPRINT(SCORE):   name = "REP_drive_wheels";
MPRINT(SCORE):   file="REPLACECODE\REP_drive_wheels.sas";
MPRINT(SCORE):   output;
MPRINT(SCORE):   name = "REP_engine_location";
MPRINT(SCORE):   file="REPLACECODE\REP_engine_location.sas";
MPRINT(SCORE):   output;
MPRINT(SCORE):   name = "REP_fuel_system";
MPRINT(SCORE):   file="REPLACECODE\REP_fuel_system.sas";
MPRINT(SCORE):   output;
MPRINT(SCORE):   name = "REP_fuel_type";
MPRINT(SCORE):   file="REPLACECODE\REP_fuel_type.sas";
MPRINT(SCORE):   output;
MPRINT(SCORE):   name = "REP_num_of_cylinders";
MPRINT(SCORE):   file="REPLACECODE\REP_num_of_cylinders.sas";
MPRINT(SCORE):   output;
MPRINT(SCORE):   run;
 
NOTE: Variable formula is uninitialized.
NOTE: The data set EMWS1.REPL2_EMSCOREVAR has 8 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           4.08 seconds
      cpu time            0.03 seconds
 
 
MPRINT(MAIN):  ;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * End SCORE: Repl2;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
25241      *------------------------------------------------------------*;
25242      * End SCORE: Repl2;
25243      *------------------------------------------------------------*;
25244
 
25245      filename emflow "H:\746\Decision Tree test\Workspaces\EMWS1\Repl2\EMFLOWSCORE.sas";
MPRINT(EM_DIAGRAM):    filename emflow "H:\746\Decision Tree test\Workspaces\EMWS1\Repl2\EMFLOWSCORE.sas";
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Repl2: Scoring DATA data;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
25246      *------------------------------------------------------------*;
25247      * Repl2: Scoring DATA data;
25248      *------------------------------------------------------------*;
25249      data EMWS1.Repl2_TRAIN
25250      / view=EMWS1.Repl2_TRAIN
25251      ;
MPRINT(EM_DIAGRAM):   data EMWS1.Repl2_TRAIN / view=EMWS1.Repl2_TRAIN ;
25252      set EMWS1.Trans_TRAIN
25253      ;
MPRINT(EM_DIAGRAM):   set EMWS1.Trans_TRAIN ;
25254      %inc emflow;
NOTE: %INCLUDE (level 1) file EMFLOW is file H:\746\Decision Tree test\Workspaces\EMWS1\Repl2\EMFLOWSCORE.sas.
25255     +
25256     +* ;
MPRINT(EM_DIAGRAM):   * ;
25257     +* Defining New Variables;
MPRINT(EM_DIAGRAM):   * Defining New Variables;
25258     +* ;
MPRINT(EM_DIAGRAM):   * ;
25259     +Length REP_aspiration $5;
MPRINT(EM_DIAGRAM):   Length REP_aspiration $5;
25260     +Label REP_aspiration='Replacement: aspiration';
MPRINT(EM_DIAGRAM):   Label REP_aspiration= 'Replacement: aspiration';
25261     +format REP_aspiration $5.0;
MPRINT(EM_DIAGRAM):   format REP_aspiration $5.0;
25262     +REP_aspiration= aspiration;
MPRINT(EM_DIAGRAM):   REP_aspiration= aspiration;
25263     +Length REP_body_style $11;
MPRINT(EM_DIAGRAM):   Length REP_body_style $11;
25264     +Label REP_body_style='Replacement: body-style';
MPRINT(EM_DIAGRAM):   Label REP_body_style= 'Replacement: body-style';
25265     +REP_body_style= body_style;
MPRINT(EM_DIAGRAM):   REP_body_style= body_style;
25266     +Length REP_drive_wheels $3;
MPRINT(EM_DIAGRAM):   Length REP_drive_wheels $3;
25267     +Label REP_drive_wheels='Replacement: drive-wheels';
MPRINT(EM_DIAGRAM):   Label REP_drive_wheels= 'Replacement: drive-wheels';
25268     +REP_drive_wheels= drive_wheels;
MPRINT(EM_DIAGRAM):   REP_drive_wheels= drive_wheels;
25269     +Length REP_engine_location $5;
MPRINT(EM_DIAGRAM):   Length REP_engine_location $5;
25270     +Label REP_engine_location='Replacement: engine-location';
MPRINT(EM_DIAGRAM):   Label REP_engine_location= 'Replacement: engine-location';
25271     +REP_engine_location= engine_location;
MPRINT(EM_DIAGRAM):   REP_engine_location= engine_location;
25272     +Length REP_fuel_system $8;
MPRINT(EM_DIAGRAM):   Length REP_fuel_system $8;
25273     +Label REP_fuel_system='Replacement: fuel-system';
MPRINT(EM_DIAGRAM):   Label REP_fuel_system= 'Replacement: fuel-system';
25274     +REP_fuel_system= fuel_system;
MPRINT(EM_DIAGRAM):   REP_fuel_system= fuel_system;
25275     +Length REP_fuel_type $6;
MPRINT(EM_DIAGRAM):   Length REP_fuel_type $6;
25276     +Label REP_fuel_type='Replacement: fuel-type';
MPRINT(EM_DIAGRAM):   Label REP_fuel_type= 'Replacement: fuel-type';
25277     +REP_fuel_type= fuel_type;
MPRINT(EM_DIAGRAM):   REP_fuel_type= fuel_type;
25278     +Length REP_num_of_cylinders $6;
MPRINT(EM_DIAGRAM):   Length REP_num_of_cylinders $6;
25279     +Label REP_num_of_cylinders='Replacement: num-of-cylinders';
MPRINT(EM_DIAGRAM):   Label REP_num_of_cylinders= 'Replacement: num-of-cylinders';
25280     +REP_num_of_cylinders= num_of_cylinders;
MPRINT(EM_DIAGRAM):   REP_num_of_cylinders= num_of_cylinders;
25281     +
25282     +* ;
MPRINT(EM_DIAGRAM):   * ;
25283     +* Replace Specific Class Levels ;
MPRINT(EM_DIAGRAM):   * Replace Specific Class Levels ;
25284     +* ;
MPRINT(EM_DIAGRAM):   * ;
25285     +length _UFormat200 $200;
MPRINT(EM_DIAGRAM):   length _UFormat200 $200;
25286     +drop   _UFORMAT200;
MPRINT(EM_DIAGRAM):   drop _UFORMAT200;
25287     +_UFORMAT200 = " ";
MPRINT(EM_DIAGRAM):   _UFORMAT200 = " ";
25288     +* ;
MPRINT(EM_DIAGRAM):   * ;
25289     +* Variable: aspiration;
MPRINT(EM_DIAGRAM):   * Variable: aspiration;
25290     +* ;
MPRINT(EM_DIAGRAM):   * ;
25291     +_UFORMAT200 = strip(
25292     +put(aspiration,$5.0));
MPRINT(EM_DIAGRAM):   _UFORMAT200 = strip( put(aspiration,$5.0));
25293     +if _UFORMAT200 =  "std" then
25294     +REP_aspiration="S";
MPRINT(EM_DIAGRAM):   if _UFORMAT200 = "std" then REP_aspiration="S";
25295     +else
25296     +if _UFORMAT200 =  "turbo" then
25297     +REP_aspiration="T";
MPRINT(EM_DIAGRAM):   else if _UFORMAT200 = "turbo" then REP_aspiration="T";
25298     +* ;
MPRINT(EM_DIAGRAM):   * ;
25299     +* Variable: body_style;
MPRINT(EM_DIAGRAM):   * Variable: body_style;
25300     +* ;
MPRINT(EM_DIAGRAM):   * ;
25301     +_UFORMAT200 = strip(body_style);
MPRINT(EM_DIAGRAM):   _UFORMAT200 = strip(body_style);
25302     +if _UFORMAT200 =  "sedan" then
25303     +REP_body_style="S";
MPRINT(EM_DIAGRAM):   if _UFORMAT200 = "sedan" then REP_body_style="S";
25304     +else
25305     +if _UFORMAT200 =  "hatchback" then
25306     +REP_body_style="H";
MPRINT(EM_DIAGRAM):   else if _UFORMAT200 = "hatchback" then REP_body_style="H";
25307     +else
25308     +if _UFORMAT200 =  "wagon" then
25309     +REP_body_style="W";
MPRINT(EM_DIAGRAM):   else if _UFORMAT200 = "wagon" then REP_body_style="W";
25310     +else
25311     +if _UFORMAT200 =  "hardtop" then
25312     +REP_body_style="C";
MPRINT(EM_DIAGRAM):   else if _UFORMAT200 = "hardtop" then REP_body_style="C";
25313     +else
25314     +if _UFORMAT200 =  "convertible" then
25315     +REP_body_style="C";
MPRINT(EM_DIAGRAM):   else if _UFORMAT200 = "convertible" then REP_body_style="C";
25316     +* ;
MPRINT(EM_DIAGRAM):   * ;
25317     +* Variable: drive_wheels;
MPRINT(EM_DIAGRAM):   * Variable: drive_wheels;
25318     +* ;
MPRINT(EM_DIAGRAM):   * ;
25319     +_UFORMAT200 = strip(drive_wheels);
MPRINT(EM_DIAGRAM):   _UFORMAT200 = strip(drive_wheels);
25320     +if _UFORMAT200 =  "fwd" then
25321     +REP_drive_wheels="F";
MPRINT(EM_DIAGRAM):   if _UFORMAT200 = "fwd" then REP_drive_wheels="F";
25322     +else
25323     +if _UFORMAT200 =  "rwd" then
25324     +REP_drive_wheels="R";
MPRINT(EM_DIAGRAM):   else if _UFORMAT200 = "rwd" then REP_drive_wheels="R";
25325     +else
25326     +if _UFORMAT200 =  "4wd" then
25327     +REP_drive_wheels="4";
MPRINT(EM_DIAGRAM):   else if _UFORMAT200 = "4wd" then REP_drive_wheels="4";
25328     +* ;
MPRINT(EM_DIAGRAM):   * ;
25329     +* Variable: engine_location;
MPRINT(EM_DIAGRAM):   * Variable: engine_location;
25330     +* ;
MPRINT(EM_DIAGRAM):   * ;
25331     +_UFORMAT200 = strip(engine_location);
MPRINT(EM_DIAGRAM):   _UFORMAT200 = strip(engine_location);
25332     +if _UFORMAT200 =  "front" then
25333     +REP_engine_location="F";
MPRINT(EM_DIAGRAM):   if _UFORMAT200 = "front" then REP_engine_location="F";
25334     +else
25335     +if _UFORMAT200 =  "rear" then
25336     +REP_engine_location="R";
MPRINT(EM_DIAGRAM):   else if _UFORMAT200 = "rear" then REP_engine_location="R";
25337     +* ;
MPRINT(EM_DIAGRAM):   * ;
25338     +* Variable: fuel_system;
MPRINT(EM_DIAGRAM):   * Variable: fuel_system;
25339     +* ;
MPRINT(EM_DIAGRAM):   * ;
25340     +_UFORMAT200 = strip(fuel_system);
MPRINT(EM_DIAGRAM):   _UFORMAT200 = strip(fuel_system);
25341     +if _UFORMAT200 =  "mpfi" then
25342     +REP_fuel_system="non-spdi";
MPRINT(EM_DIAGRAM):   if _UFORMAT200 = "mpfi" then REP_fuel_system="non-spdi";
25343     +else
25344     +if _UFORMAT200 =  "2bbl" then
25345     +REP_fuel_system="non-spdi";
MPRINT(EM_DIAGRAM):   else if _UFORMAT200 = "2bbl" then REP_fuel_system="non-spdi";
25346     +else
25347     +if _UFORMAT200 =  "idi" then
25348     +REP_fuel_system="non-spdi";
MPRINT(EM_DIAGRAM):   else if _UFORMAT200 = "idi" then REP_fuel_system="non-spdi";
25349     +else
25350     +if _UFORMAT200 =  "1bbl" then
25351     +REP_fuel_system="non-spdi";
MPRINT(EM_DIAGRAM):   else if _UFORMAT200 = "1bbl" then REP_fuel_system="non-spdi";
25352     +else
25353     +if _UFORMAT200 =  "spdi" then
25354     +REP_fuel_system="spdi";
MPRINT(EM_DIAGRAM):   else if _UFORMAT200 = "spdi" then REP_fuel_system="spdi";
25355     +else
25356     +if _UFORMAT200 =  "4bbl" then
25357     +REP_fuel_system="non-spdi";
MPRINT(EM_DIAGRAM):   else if _UFORMAT200 = "4bbl" then REP_fuel_system="non-spdi";
25358     +* ;
MPRINT(EM_DIAGRAM):   * ;
25359     +* Variable: fuel_type;
MPRINT(EM_DIAGRAM):   * Variable: fuel_type;
25360     +* ;
MPRINT(EM_DIAGRAM):   * ;
25361     +_UFORMAT200 = strip(fuel_type);
MPRINT(EM_DIAGRAM):   _UFORMAT200 = strip(fuel_type);
25362     +if _UFORMAT200 =  "gas" then
25363     +REP_fuel_type="G";
MPRINT(EM_DIAGRAM):   if _UFORMAT200 = "gas" then REP_fuel_type="G";
25364     +else
25365     +if _UFORMAT200 =  "diesel" then
25366     +REP_fuel_type="D";
MPRINT(EM_DIAGRAM):   else if _UFORMAT200 = "diesel" then REP_fuel_type="D";
25367     +* ;
MPRINT(EM_DIAGRAM):   * ;
25368     +* Variable: num_of_cylinders;
MPRINT(EM_DIAGRAM):   * Variable: num_of_cylinders;
25369     +* ;
MPRINT(EM_DIAGRAM):   * ;
25370     +_UFORMAT200 = strip(num_of_cylinders);
MPRINT(EM_DIAGRAM):   _UFORMAT200 = strip(num_of_cylinders);
25371     +if _UFORMAT200 =  "four" then
25372     +REP_num_of_cylinders="<=4";
MPRINT(EM_DIAGRAM):   if _UFORMAT200 = "four" then REP_num_of_cylinders="<=4";
25373     +else
25374     +if _UFORMAT200 =  "six" then
25375     +REP_num_of_cylinders=">4";
MPRINT(EM_DIAGRAM):   else if _UFORMAT200 = "six" then REP_num_of_cylinders=">4";
25376     +else
25377     +if _UFORMAT200 =  "five" then
25378     +REP_num_of_cylinders=">4";
MPRINT(EM_DIAGRAM):   else if _UFORMAT200 = "five" then REP_num_of_cylinders=">4";
25379     +else
25380     +if _UFORMAT200 =  "two" then
25381     +REP_num_of_cylinders="<=4";
MPRINT(EM_DIAGRAM):   else if _UFORMAT200 = "two" then REP_num_of_cylinders="<=4";
NOTE: %INCLUDE (level 1) ending.
MPRINT(EM_DIAGRAM):   run;
25382      run;
 
NOTE: DATA STEP view saved on file EMWS1.REPL2_TRAIN.
NOTE: A stored DATA STEP view cannot run under a different operating system.
NOTE: View EMWS1.TRANS_TRAIN.VIEW used (Total process time):
      real time           0.30 seconds
      cpu time            0.20 seconds
 
NOTE: DATA statement used (Total process time):
      real time           0.33 seconds
      cpu time            0.23 seconds
 
 
MPRINT(EM_DIAGRAM):   quit;
25383      quit;
25384      filename emflow;
MPRINT(EM_DIAGRAM):   filename emflow;
NOTE: Fileref EMFLOW has been deassigned.
25385      filename emflow "H:\746\Decision Tree test\Workspaces\EMWS1\Repl2\EMFLOWSCORE.sas";
MPRINT(EM_DIAGRAM):    filename emflow "H:\746\Decision Tree test\Workspaces\EMWS1\Repl2\EMFLOWSCORE.sas";
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Repl2: Scoring VALIDATE data;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
25386      *------------------------------------------------------------*;
25387      * Repl2: Scoring VALIDATE data;
25388      *------------------------------------------------------------*;
25389      data EMWS1.Repl2_VALIDATE
25390      / view=EMWS1.Repl2_VALIDATE
25391      ;
MPRINT(EM_DIAGRAM):   data EMWS1.Repl2_VALIDATE / view=EMWS1.Repl2_VALIDATE ;
25392      set EMWS1.Trans_VALIDATE
25393      ;
MPRINT(EM_DIAGRAM):   set EMWS1.Trans_VALIDATE ;
25394      %inc emflow;
NOTE: %INCLUDE (level 1) file EMFLOW is file H:\746\Decision Tree test\Workspaces\EMWS1\Repl2\EMFLOWSCORE.sas.
25395     +
25396     +* ;
MPRINT(EM_DIAGRAM):   * ;
25397     +* Defining New Variables;
MPRINT(EM_DIAGRAM):   * Defining New Variables;
25398     +* ;
MPRINT(EM_DIAGRAM):   * ;
25399     +Length REP_aspiration $5;
MPRINT(EM_DIAGRAM):   Length REP_aspiration $5;
25400     +Label REP_aspiration='Replacement: aspiration';
MPRINT(EM_DIAGRAM):   Label REP_aspiration= 'Replacement: aspiration';
25401     +format REP_aspiration $5.0;
MPRINT(EM_DIAGRAM):   format REP_aspiration $5.0;
25402     +REP_aspiration= aspiration;
MPRINT(EM_DIAGRAM):   REP_aspiration= aspiration;
25403     +Length REP_body_style $11;
MPRINT(EM_DIAGRAM):   Length REP_body_style $11;
25404     +Label REP_body_style='Replacement: body-style';
MPRINT(EM_DIAGRAM):   Label REP_body_style= 'Replacement: body-style';
25405     +REP_body_style= body_style;
MPRINT(EM_DIAGRAM):   REP_body_style= body_style;
25406     +Length REP_drive_wheels $3;
MPRINT(EM_DIAGRAM):   Length REP_drive_wheels $3;
25407     +Label REP_drive_wheels='Replacement: drive-wheels';
MPRINT(EM_DIAGRAM):   Label REP_drive_wheels= 'Replacement: drive-wheels';
25408     +REP_drive_wheels= drive_wheels;
MPRINT(EM_DIAGRAM):   REP_drive_wheels= drive_wheels;
25409     +Length REP_engine_location $5;
MPRINT(EM_DIAGRAM):   Length REP_engine_location $5;
25410     +Label REP_engine_location='Replacement: engine-location';
MPRINT(EM_DIAGRAM):   Label REP_engine_location= 'Replacement: engine-location';
25411     +REP_engine_location= engine_location;
MPRINT(EM_DIAGRAM):   REP_engine_location= engine_location;
25412     +Length REP_fuel_system $8;
MPRINT(EM_DIAGRAM):   Length REP_fuel_system $8;
25413     +Label REP_fuel_system='Replacement: fuel-system';
MPRINT(EM_DIAGRAM):   Label REP_fuel_system= 'Replacement: fuel-system';
25414     +REP_fuel_system= fuel_system;
MPRINT(EM_DIAGRAM):   REP_fuel_system= fuel_system;
25415     +Length REP_fuel_type $6;
MPRINT(EM_DIAGRAM):   Length REP_fuel_type $6;
25416     +Label REP_fuel_type='Replacement: fuel-type';
MPRINT(EM_DIAGRAM):   Label REP_fuel_type= 'Replacement: fuel-type';
25417     +REP_fuel_type= fuel_type;
MPRINT(EM_DIAGRAM):   REP_fuel_type= fuel_type;
25418     +Length REP_num_of_cylinders $6;
MPRINT(EM_DIAGRAM):   Length REP_num_of_cylinders $6;
25419     +Label REP_num_of_cylinders='Replacement: num-of-cylinders';
MPRINT(EM_DIAGRAM):   Label REP_num_of_cylinders= 'Replacement: num-of-cylinders';
25420     +REP_num_of_cylinders= num_of_cylinders;
MPRINT(EM_DIAGRAM):   REP_num_of_cylinders= num_of_cylinders;
25421     +
25422     +* ;
MPRINT(EM_DIAGRAM):   * ;
25423     +* Replace Specific Class Levels ;
MPRINT(EM_DIAGRAM):   * Replace Specific Class Levels ;
25424     +* ;
MPRINT(EM_DIAGRAM):   * ;
25425     +length _UFormat200 $200;
MPRINT(EM_DIAGRAM):   length _UFormat200 $200;
25426     +drop   _UFORMAT200;
MPRINT(EM_DIAGRAM):   drop _UFORMAT200;
25427     +_UFORMAT200 = " ";
MPRINT(EM_DIAGRAM):   _UFORMAT200 = " ";
25428     +* ;
MPRINT(EM_DIAGRAM):   * ;
25429     +* Variable: aspiration;
MPRINT(EM_DIAGRAM):   * Variable: aspiration;
25430     +* ;
MPRINT(EM_DIAGRAM):   * ;
25431     +_UFORMAT200 = strip(
25432     +put(aspiration,$5.0));
MPRINT(EM_DIAGRAM):   _UFORMAT200 = strip( put(aspiration,$5.0));
25433     +if _UFORMAT200 =  "std" then
25434     +REP_aspiration="S";
MPRINT(EM_DIAGRAM):   if _UFORMAT200 = "std" then REP_aspiration="S";
25435     +else
25436     +if _UFORMAT200 =  "turbo" then
25437     +REP_aspiration="T";
MPRINT(EM_DIAGRAM):   else if _UFORMAT200 = "turbo" then REP_aspiration="T";
25438     +* ;
MPRINT(EM_DIAGRAM):   * ;
25439     +* Variable: body_style;
MPRINT(EM_DIAGRAM):   * Variable: body_style;
25440     +* ;
MPRINT(EM_DIAGRAM):   * ;
25441     +_UFORMAT200 = strip(body_style);
MPRINT(EM_DIAGRAM):   _UFORMAT200 = strip(body_style);
25442     +if _UFORMAT200 =  "sedan" then
25443     +REP_body_style="S";
MPRINT(EM_DIAGRAM):   if _UFORMAT200 = "sedan" then REP_body_style="S";
25444     +else
25445     +if _UFORMAT200 =  "hatchback" then
25446     +REP_body_style="H";
MPRINT(EM_DIAGRAM):   else if _UFORMAT200 = "hatchback" then REP_body_style="H";
25447     +else
25448     +if _UFORMAT200 =  "wagon" then
25449     +REP_body_style="W";
MPRINT(EM_DIAGRAM):   else if _UFORMAT200 = "wagon" then REP_body_style="W";
25450     +else
25451     +if _UFORMAT200 =  "hardtop" then
25452     +REP_body_style="C";
MPRINT(EM_DIAGRAM):   else if _UFORMAT200 = "hardtop" then REP_body_style="C";
25453     +else
25454     +if _UFORMAT200 =  "convertible" then
25455     +REP_body_style="C";
MPRINT(EM_DIAGRAM):   else if _UFORMAT200 = "convertible" then REP_body_style="C";
25456     +* ;
MPRINT(EM_DIAGRAM):   * ;
25457     +* Variable: drive_wheels;
MPRINT(EM_DIAGRAM):   * Variable: drive_wheels;
25458     +* ;
MPRINT(EM_DIAGRAM):   * ;
25459     +_UFORMAT200 = strip(drive_wheels);
MPRINT(EM_DIAGRAM):   _UFORMAT200 = strip(drive_wheels);
25460     +if _UFORMAT200 =  "fwd" then
25461     +REP_drive_wheels="F";
MPRINT(EM_DIAGRAM):   if _UFORMAT200 = "fwd" then REP_drive_wheels="F";
25462     +else
25463     +if _UFORMAT200 =  "rwd" then
25464     +REP_drive_wheels="R";
MPRINT(EM_DIAGRAM):   else if _UFORMAT200 = "rwd" then REP_drive_wheels="R";
25465     +else
25466     +if _UFORMAT200 =  "4wd" then
25467     +REP_drive_wheels="4";
MPRINT(EM_DIAGRAM):   else if _UFORMAT200 = "4wd" then REP_drive_wheels="4";
25468     +* ;
MPRINT(EM_DIAGRAM):   * ;
25469     +* Variable: engine_location;
MPRINT(EM_DIAGRAM):   * Variable: engine_location;
25470     +* ;
MPRINT(EM_DIAGRAM):   * ;
25471     +_UFORMAT200 = strip(engine_location);
MPRINT(EM_DIAGRAM):   _UFORMAT200 = strip(engine_location);
25472     +if _UFORMAT200 =  "front" then
25473     +REP_engine_location="F";
MPRINT(EM_DIAGRAM):   if _UFORMAT200 = "front" then REP_engine_location="F";
25474     +else
25475     +if _UFORMAT200 =  "rear" then
25476     +REP_engine_location="R";
MPRINT(EM_DIAGRAM):   else if _UFORMAT200 = "rear" then REP_engine_location="R";
25477     +* ;
MPRINT(EM_DIAGRAM):   * ;
25478     +* Variable: fuel_system;
MPRINT(EM_DIAGRAM):   * Variable: fuel_system;
25479     +* ;
MPRINT(EM_DIAGRAM):   * ;
25480     +_UFORMAT200 = strip(fuel_system);
MPRINT(EM_DIAGRAM):   _UFORMAT200 = strip(fuel_system);
25481     +if _UFORMAT200 =  "mpfi" then
25482     +REP_fuel_system="non-spdi";
MPRINT(EM_DIAGRAM):   if _UFORMAT200 = "mpfi" then REP_fuel_system="non-spdi";
25483     +else
25484     +if _UFORMAT200 =  "2bbl" then
25485     +REP_fuel_system="non-spdi";
MPRINT(EM_DIAGRAM):   else if _UFORMAT200 = "2bbl" then REP_fuel_system="non-spdi";
25486     +else
25487     +if _UFORMAT200 =  "idi" then
25488     +REP_fuel_system="non-spdi";
MPRINT(EM_DIAGRAM):   else if _UFORMAT200 = "idi" then REP_fuel_system="non-spdi";
25489     +else
25490     +if _UFORMAT200 =  "1bbl" then
25491     +REP_fuel_system="non-spdi";
MPRINT(EM_DIAGRAM):   else if _UFORMAT200 = "1bbl" then REP_fuel_system="non-spdi";
25492     +else
25493     +if _UFORMAT200 =  "spdi" then
25494     +REP_fuel_system="spdi";
MPRINT(EM_DIAGRAM):   else if _UFORMAT200 = "spdi" then REP_fuel_system="spdi";
25495     +else
25496     +if _UFORMAT200 =  "4bbl" then
25497     +REP_fuel_system="non-spdi";
MPRINT(EM_DIAGRAM):   else if _UFORMAT200 = "4bbl" then REP_fuel_system="non-spdi";
25498     +* ;
MPRINT(EM_DIAGRAM):   * ;
25499     +* Variable: fuel_type;
MPRINT(EM_DIAGRAM):   * Variable: fuel_type;
25500     +* ;
MPRINT(EM_DIAGRAM):   * ;
25501     +_UFORMAT200 = strip(fuel_type);
MPRINT(EM_DIAGRAM):   _UFORMAT200 = strip(fuel_type);
25502     +if _UFORMAT200 =  "gas" then
25503     +REP_fuel_type="G";
MPRINT(EM_DIAGRAM):   if _UFORMAT200 = "gas" then REP_fuel_type="G";
25504     +else
25505     +if _UFORMAT200 =  "diesel" then
25506     +REP_fuel_type="D";
MPRINT(EM_DIAGRAM):   else if _UFORMAT200 = "diesel" then REP_fuel_type="D";
25507     +* ;
MPRINT(EM_DIAGRAM):   * ;
25508     +* Variable: num_of_cylinders;
MPRINT(EM_DIAGRAM):   * Variable: num_of_cylinders;
25509     +* ;
MPRINT(EM_DIAGRAM):   * ;
25510     +_UFORMAT200 = strip(num_of_cylinders);
MPRINT(EM_DIAGRAM):   _UFORMAT200 = strip(num_of_cylinders);
25511     +if _UFORMAT200 =  "four" then
25512     +REP_num_of_cylinders="<=4";
MPRINT(EM_DIAGRAM):   if _UFORMAT200 = "four" then REP_num_of_cylinders="<=4";
25513     +else
25514     +if _UFORMAT200 =  "six" then
25515     +REP_num_of_cylinders=">4";
MPRINT(EM_DIAGRAM):   else if _UFORMAT200 = "six" then REP_num_of_cylinders=">4";
25516     +else
25517     +if _UFORMAT200 =  "five" then
25518     +REP_num_of_cylinders=">4";
MPRINT(EM_DIAGRAM):   else if _UFORMAT200 = "five" then REP_num_of_cylinders=">4";
25519     +else
25520     +if _UFORMAT200 =  "two" then
25521     +REP_num_of_cylinders="<=4";
MPRINT(EM_DIAGRAM):   else if _UFORMAT200 = "two" then REP_num_of_cylinders="<=4";
NOTE: %INCLUDE (level 1) ending.
MPRINT(EM_DIAGRAM):   run;
25522      run;
 
NOTE: DATA STEP view saved on file EMWS1.REPL2_VALIDATE.
NOTE: A stored DATA STEP view cannot run under a different operating system.
NOTE: View EMWS1.TRANS_VALIDATE.VIEW used (Total process time):
      real time           0.22 seconds
      cpu time            0.17 seconds
 
NOTE: DATA statement used (Total process time):
      real time           0.27 seconds
      cpu time            0.18 seconds
 
 
MPRINT(EM_DIAGRAM):   quit;
25523      quit;
25524      filename emflow;
MPRINT(EM_DIAGRAM):   filename emflow;
NOTE: Fileref EMFLOW has been deassigned.
25526      proc sort data=WORK.EM_USER_REPORT;
MPRINT(EM_DIAGRAM):     proc sort data=WORK.EM_USER_REPORT;
25527      by ID VIEW;
MPRINT(EM_DIAGRAM):   by ID VIEW;
25528      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 132 observations read from the data set WORK.EM_USER_REPORT.
NOTE: The data set WORK.EM_USER_REPORT has 132 observations and 4 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
25529      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
25530      * Repl2: Computing metadata for TRAIN data;
MPRINT(EM_DIAGRAM):   * Repl2: Computing metadata for TRAIN data;
25531      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
 
NOTE: View EMWS1.REPL2_TRAIN.VIEW used (Total process time):
      real time           0.19 seconds
      cpu time            0.18 seconds
 
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * &nodeid: Computing Metadata for TRAIN data;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   filename _delta "H:\746\Decision Tree test\Workspaces\EMWS1\Repl2\CDELTA_TRAIN.sas";
MPRINT(EMADVISECOLUMNS):   proc display c=sashelp.emmeta.advisecolumns.scl;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    options validvarname=any;
MPRINT(EMADVISECOLUMNS):   proc contents data=EMWS1.Repl2_TRAIN out=_tempAdvisor noprint;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):   options validvarname=V7;
MPRINT(EMADVISECOLUMNS):    data _null_;
MPRINT(EMADVISECOLUMNS):   dsid = open('EMWS1.Repl2_TRAIN');
MPRINT(EMADVISECOLUMNS):   call symput('_dsidTable', strip(put(dsid, best.)));
MPRINT(EMADVISECOLUMNS):   if dsid then do;
MPRINT(EMADVISECOLUMNS):   call symput('_engineTable', attrc(dsid, 'ENGINE'));
MPRINT(EMADVISECOLUMNS):   dsid = close(dsid);
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    proc contents data=EMWS1.Repl2_TRAIN out=WORK.M3PM0GAY noprint;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M3PM0GAY;
MPRINT(EMADVISECOLUMNS):   length NAME $ 64 TYPE $ 1 LABEL $ 200 FORMAT $ 36 INFORMAT $36 INDEX $ 1 INDEXTYPE $ 9;
MPRINT(EMADVISECOLUMNS):   label NAME =;
MPRINT(EMADVISECOLUMNS):   set WORK.M3PM0GAY(keep=name type length label format formatl formatd informat informl informd idxusage rename=(type=itype));
MPRINT(EMADVISECOLUMNS):   if itype = 1 then type = 'N';
MPRINT(EMADVISECOLUMNS):   else type = 'C';
MPRINT(EMADVISECOLUMNS):   if formatl > 0 then do;
MPRINT(EMADVISECOLUMNS):   if format ne ' ' then format = strip(format)!!strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EMADVISECOLUMNS):   else format = strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if format ne '' then format = strip(format)!!'.';
MPRINT(EMADVISECOLUMNS):   if informl > 0 then do;
MPRINT(EMADVISECOLUMNS):   if informat ne ' ' then informat = strip(informat)!!strip(put(informl, best12.))!!'.'!!strip(put(informd, best12.));
MPRINT(EMADVISECOLUMNS):   else informat = strip(put(informl, best12.))!!'.'!!strip(put(informd, best12.));
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if informat ne '' then informat = strip(informat)!!'.';
MPRINT(EMADVISECOLUMNS):   if idxusage = 'NONE' then index ="N";
MPRINT(EMADVISECOLUMNS):   else index = "Y";
MPRINT(EMADVISECOLUMNS):   indextype = idxusage;
MPRINT(EMADVISECOLUMNS):   drop idxusage itype formatl formatd informl informd;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M3PM0GAY;
MPRINT(EMADVISECOLUMNS):   length UNAME $64;
MPRINT(EMADVISECOLUMNS):   set WORK.M3PM0GAY;
MPRINT(EMADVISECOLUMNS):   UNAME = upcase(NAME);
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    proc sort data=WORK.M36XBOKR NOTHREADS;
MPRINT(EMADVISECOLUMNS):   by UNAME;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M36XBOKR;
MPRINT(EMADVISECOLUMNS):   drop UNAME;
MPRINT(EMADVISECOLUMNS):   set WORK.M36XBOKR;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M00IG1XT(keep=NAME ATTR);
MPRINT(EMADVISECOLUMNS):   length ATTR $ 20;
MPRINT(EMADVISECOLUMNS):   set WORK.M36XBOKR;
MPRINT(EMADVISECOLUMNS):   if level ne "INTERVAL" then do;
MPRINT(EMADVISECOLUMNS):   if order = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'ORDER';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if format ne ' ' and formattype = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'FORMATTYPE';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if role = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'ROLE';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if level = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'LEVEL';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if type = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'TYPE';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if index = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'INDEX';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if report = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'REPORT';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):   proc sort NOTHREADS;
MPRINT(EMADVISECOLUMNS):   by attr;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M36XBOKR;
MPRINT(EMADVISECOLUMNS):   length NAME $64 ROLE $ 32 LEVEL $ 10 ORDER $ 8 CREATOR $32 FORMATTYPE $ 10 FAMILY $ 10 LOWERLIMIT 8 UPPERLIMIT 8 REPORT $1 DISTRIBUTION $ 20 COMMENT $64;
MPRINT(EMADVISECOLUMNS):   length levelAssigned 8 roleAssigned 8 PRICE 8;
MPRINT(EMADVISECOLUMNS):   set WORK.M36XBOKR;
MPRINT(EMADVISECOLUMNS):   if formattype = ' ' then do;
MPRINT(EMADVISECOLUMNS):   if format ne ' ' then do;
MPRINT(EMADVISECOLUMNS):   if type = 'N' then do;
MPRINT(EMADVISECOLUMNS):   pos = indexc(format,'.1234567890');
MPRINT(EMADVISECOLUMNS):   if pos > 1 then tempfmt = substr(format,1, pos-1);
MPRINT(EMADVISECOLUMNS):   else tempfmt = ' ';
MPRINT(EMADVISECOLUMNS):   flen = length(tempfmt);
MPRINT(EMADVISECOLUMNS):   select;
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("DATE" "DAY" "DDMMYY" "DOWNAME" "JULDAY" "JULIAN" "MMDDYY" "MMDDYYD" "MMDDYYC" "MMDDYYN" "MMDDYYP" "MMDDYYS" "MONNAME" "MONTH" "MONYY" "NENGO" "QTR" "QTRR" "WEEKDATE" "WEEKDATX" "WEEKDAY" "WORDDATE" "WORDDATX"
"YEAR" "YYMMDD" "YYMON" "YYMMDDC" "YYMMDDD" "YYMMDDN" "YYMMDDP" "YYMMDDS" "EURDFDE" "NJDATE" "NLDATE" "EURDFDD" "EURDFDWN" "EURDFMN" "EURDFMY" "EURDFWK" "EURDFWKX" "EURDFWDX" "EURDFDN" "EURDFDE" )) formattype = 'DATE';
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("DATETIME" "EURDFDT" "TOD" )) formattype = "DATETIME";
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("HHMM" "HOUR" "MMSS" "TIME" "TIMEAMPM" )) formattype = "TIME";
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("COMMA" "COMMAX" "DOLLAR" "DOLLARX" "E" "FRACT" "NEGPAREN" "PERCENT")) formattype="QUANTITY";
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("BINARY" "HEX" "IB" "OCTAL" "PD" "PIB" "PK" "RB" "SSN" "Z" "ZD")) formattype = "CODING";
MPRINT(EMADVISECOLUMNS):   otherwise do;
MPRINT(EMADVISECOLUMNS):   formattype = "USER";
MPRINT(EMADVISECOLUMNS):   if substr(tempfmt, 1, 6)='NLDATE' then formattype = "DATE";
MPRINT(EMADVISECOLUMNS):   else if substr(tempfmt, 1, 6)='NLDATM' then formattype = "DATETIME";
MPRINT(EMADVISECOLUMNS):   else if substr(tempfmt, 1, 4)='NLTIM' then formattype = "TIME";
MPRINT(EMADVISECOLUMNS):   else if flen >= 4 then do;
MPRINT(EMADVISECOLUMNS):   str = substr(tempfmt,1,4);
MPRINT(EMADVISECOLUMNS):   if str in ("MMYY" "YYMM" "YYQR") then formattype ="DATE";
MPRINT(EMADVISECOLUMNS):   else if str = "S370" then formattype = "CODING";
MPRINT(EMADVISECOLUMNS):   else if str = "BEST" then formattype = "NUM";
MPRINT(EMADVISECOLUMNS):   drop str;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if flen >=3 and substr(tempfmt,1,3) = "YYQ" then formatType = "DATE";
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   drop flen tempfmt pos;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else do;
MPRINT(EMADVISECOLUMNS):   formatType = "CATEGORY";
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if formatType = "NUM" then do;
MPRINT(EMADVISECOLUMNS):   if index = "Y" then formatType = "DISCRETE";
MPRINT(EMADVISECOLUMNS):   else formatType = "QUANTITY";
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if level = ' ' then do;
MPRINT(EMADVISECOLUMNS):   if formatType in ("CATEGORY", "CODING", "ID") or type = "C" then level = "NOMINAL";
MPRINT(EMADVISECOLUMNS):   else level = "INTERVAL";
MPRINT(EMADVISECOLUMNS):   levelAssigned = 1;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else level = upcase(level);
MPRINT(EMADVISECOLUMNS):   if role = ' ' then do;
MPRINT(EMADVISECOLUMNS):   length name_prefix $8 _uname $64;
MPRINT(EMADVISECOLUMNS):   drop name_prefix _uname _freqflag;
MPRINT(EMADVISECOLUMNS):   retain _freqflag;
MPRINT(EMADVISECOLUMNS):   if LENGTH> 80 then ROLE = 'TEXT';
MPRINT(EMADVISECOLUMNS):   _uname = upcase(NAME);
MPRINT(EMADVISECOLUMNS):   select(_uname);
MPRINT(EMADVISECOLUMNS):   when('_PARTIND_') do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'ID';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   when('_WARN_') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_SEGMENT') do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'SEGMENT';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   when('_NODE_') do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'SEGMENT';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   when('EM_CLASSTARGET') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_VALUETARGET') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_PREDICTION') ROLE = 'PREDICT';
MPRINT(EMADVISECOLUMNS):   when('EM_PROBABILITY') ROLE = 'PREDICT';
MPRINT(EMADVISECOLUMNS):   when('EM_EVENTPROBABILITY') ROLE = 'PREDICT';
MPRINT(EMADVISECOLUMNS):   when('EM_CLASSIFICATION') ROLE = 'CLASSIFICATION';
MPRINT(EMADVISECOLUMNS):   when('EM_DECISION') ROLE = 'DECISION';
MPRINT(EMADVISECOLUMNS):   when('EM_PROFIT') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_LOSS') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_ROI') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('URI') ROLE = 'URL';
MPRINT(EMADVISECOLUMNS):   when('FILTERED') ROLE = 'TEXTLOC';
MPRINT(EMADVISECOLUMNS):   otherwise do;
MPRINT(EMADVISECOLUMNS):   if upcase(NAME) =: 'ZIP' then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'REJECTED';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   COMMENT = 'Rejected by: Exceed the maximum class level of %s';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if upcase(NAME) in('FREQ', 'FREQUENCY') then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'FREQ';
MPRINT(EMADVISECOLUMNS):   if TYPE = 'C' then ROLE = 'INPUT';
MPRINT(EMADVISECOLUMNS):   else if _freqflag =1 then ROLE='REJECTED';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else do;
MPRINT(EMADVISECOLUMNS):   name_prefix = scan(_uname, 1, '_');
MPRINT(EMADVISECOLUMNS):   if scan(_uname, 2, '_') = '' then name_prefix='';
MPRINT(EMADVISECOLUMNS):   if name_prefix in('F', 'I', 'U') then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'CLASSIFICATION';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if name_prefix in('P', 'V') then ROLE = 'PREDICT';
MPRINT(EMADVISECOLUMNS):   else if name_prefix in('R', 'RS', 'RT', 'RD', 'RDS', 'RDT', 'RA', 'RAS', 'RAT') then ROLE = 'RESIDUAL';
MPRINT(EMADVISECOLUMNS):   else if name_prefix ='D' then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'DECISION';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if name_prefix ='B' then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'SEGMENT';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if name_prefix in('EP', 'BP', 'CP', 'EL', 'CL', 'BL', 'W', 'ROI', 'IC') then ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   else do;
MPRINT(EMADVISECOLUMNS):   array _ROLE_ (19) $32 _TEMPORARY_ ('ASSESS','CLASSIFICATION','CENSOR', 'COST', 'CROSSID', 'DECISION', 'ID','INPUT', 'LABEL', 'MISSING','PREDICT','REFERRER','REJECTED', 'RESIDUAL','SEGMENT', 'SEQUENCE','TARGET', 'TEXT', 'TIMEID');
MPRINT(EMADVISECOLUMNS):   drop _found_ i;
MPRINT(EMADVISECOLUMNS):   _found_=0;
MPRINT(EMADVISECOLUMNS):   do i=1 to 19 until(_found_=1);
MPRINT(EMADVISECOLUMNS):   if index(_uname, trim(_ROLE_{i}))=1 then do;
MPRINT(EMADVISECOLUMNS):   ROLE=_ROLE_{i};
MPRINT(EMADVISECOLUMNS):   if ROLE = 'ID' then LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   else if ROLE = 'SEGMENT' then LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   else if ROLE = 'TIMEID' and TYPE='N' then LEVEL = 'INTERVAL';
MPRINT(EMADVISECOLUMNS):   _found_=1;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if length(_uname)>2 then do;
MPRINT(EMADVISECOLUMNS):   if substr(reverse(trim(_uname)), 1, 3) = 'DI_' then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'ID';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if ROLE='FREQ' then _freqflag=1;
MPRINT(EMADVISECOLUMNS):   else if ROLE = 'CLASSIFICATION' then LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   if symexist('RATEMKG_ROLE') then do;
MPRINT(EMADVISECOLUMNS):   if upcase(symget('RATEMKG_ROLE')) in('Y', 'YES') then do;
MPRINT(EMADVISECOLUMNS):   if _uname =: 'POLICY' then ROLE = 'POLICYID';
MPRINT(EMADVISECOLUMNS):   else if _uname in ('PARTITION', '_PARTIND_') then ROLE = 'PARTITION';
MPRINT(EMADVISECOLUMNS):   else if type = 'N' then do;
MPRINT(EMADVISECOLUMNS):   if _uname = 'EXPOSURE' then ROLE = 'EXPOSURE';
MPRINT(EMADVISECOLUMNS):   else if _uname = 'YEAR' then ROLE = 'YEAR';
MPRINT(EMADVISECOLUMNS):   else if _uname = 'WEIGHT' then ROLE = 'WEIGHT';
MPRINT(EMADVISECOLUMNS):   else if _uname = 'OFFSET' then ROLE = 'OFFSET';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if role = ' ' then do;
MPRINT(EMADVISECOLUMNS):   if formattype in('DATE', 'DATETIME', 'TIME') then role = 'TIMEID';
MPRINT(EMADVISECOLUMNS):   else role = 'INPUT';
MPRINT(EMADVISECOLUMNS):   roleAssigned = 1;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else role = upcase(role);
MPRINT(EMADVISECOLUMNS):   if REPORT = '' then REPORT = 'N';
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M36XBOKR;
MPRINT(EMADVISECOLUMNS):   set WORK.M36XBOKR;
MPRINT(EMADVISECOLUMNS):   label NAME = "Variable Name" TYPE = "Type" ROLE = "Role" LEVEL= "Measurement Level" ORDER= "Order" CREATOR= "Creator" FORMATTYPE= "Format Type" FAMILY= "Family" DISTRIBUTION= "Distribution" PRICE= "Price" LOWERLIMIT= "Lower
limit" UPPERLIMIT= "Upper Limit" REPORT= "Report" COMMENT= "Comment" INDEX= "Index" INDEXTYPE= "IndexType" LABEL= "Label" LENGTH= "Length";
MPRINT(EMADVISECOLUMNS):   drop levelAssigned roleAssigned;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   proc sort data=WORK.COLUMNMETA;
MPRINT(EM_DIAGRAM):   by NAME;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * &nodeid: Merge incoming metadata;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   proc contents data=EMWS1.Trans_TRAIN noprint out=_temp2(keep=NAME);
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=_temp2;
MPRINT(EM_DIAGRAM):   by NAME;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=EMWS1.Trans_CMeta_TRAIN out=_temp;
MPRINT(EM_DIAGRAM):   by NAME;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data EMWS1.Repl2_CMeta_TRAIN;
MPRINT(EM_DIAGRAM):   merge WORK.COLUMNMETA(in=_a) _temp2(in=_b) _temp(drop=FORMAT INFORMAT LENGTH INDEX INDEXTYPE in=_c) end=_eof_;
MPRINT(EM_DIAGRAM):   by NAME;
MPRINT(EM_DIAGRAM):   if (^_a and _b) or (^_c and _a and _b) then delete;
MPRINT(EM_DIAGRAM):   if ^_b then CREATOR = "Repl2";
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Repl2: Apply Delta Code;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   if NAME="aspiration" then ROLE="REJECTED";
MPRINT(EM_DIAGRAM):   else if NAME="REP_aspiration" then do;
MPRINT(EM_DIAGRAM):   ROLE="INPUT";
MPRINT(EM_DIAGRAM):   LEVEL="NOMINAL";
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if NAME="body_style" then ROLE="REJECTED";
MPRINT(EM_DIAGRAM):   else if NAME="REP_body_style" then do;
MPRINT(EM_DIAGRAM):   ROLE="INPUT";
MPRINT(EM_DIAGRAM):   LEVEL="NOMINAL";
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if NAME="drive_wheels" then ROLE="REJECTED";
MPRINT(EM_DIAGRAM):   else if NAME="REP_drive_wheels" then do;
MPRINT(EM_DIAGRAM):   ROLE="INPUT";
MPRINT(EM_DIAGRAM):   LEVEL="NOMINAL";
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if NAME="engine_location" then ROLE="REJECTED";
MPRINT(EM_DIAGRAM):   else if NAME="REP_engine_location" then do;
MPRINT(EM_DIAGRAM):   ROLE="INPUT";
MPRINT(EM_DIAGRAM):   LEVEL="NOMINAL";
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if NAME="fuel_system" then ROLE="REJECTED";
MPRINT(EM_DIAGRAM):   else if NAME="REP_fuel_system" then do;
MPRINT(EM_DIAGRAM):   ROLE="INPUT";
MPRINT(EM_DIAGRAM):   LEVEL="NOMINAL";
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if NAME="fuel_type" then ROLE="REJECTED";
MPRINT(EM_DIAGRAM):   else if NAME="REP_fuel_type" then do;
MPRINT(EM_DIAGRAM):   ROLE="INPUT";
MPRINT(EM_DIAGRAM):   LEVEL="NOMINAL";
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if NAME="num_of_cylinders" then ROLE="REJECTED";
MPRINT(EM_DIAGRAM):   else if NAME="REP_num_of_cylinders" then do;
MPRINT(EM_DIAGRAM):   ROLE="INPUT";
MPRINT(EM_DIAGRAM):   LEVEL="NOMINAL";
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   filename _delta;
NOTE: View EMWS1.REPL2_TRAIN.VIEW used (Total process time):
      real time           0.17 seconds
      cpu time            0.17 seconds
 
NOTE: View EMWS1.REPL2_VALIDATE.VIEW used (Total process time):
      real time           0.18 seconds
      cpu time            0.18 seconds
 
MPRINT(EM_DIAGRAM):    proc printto;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   call symput('NLDATE', strip(put(date(), NLDATE.)));
MPRINT(EM_DIAGRAM):   call symput('NLTIME', strip(put(datetime(), NLTIME.)));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   nldate= sasmsg("sashelp.dmine", "log_date_note", 'N', "April 16, 2021" );
MPRINT(EM_DIAGRAM):   nltime= sasmsg("sashelp.dmine", "log_time_note", 'N', "11:26:17 o'clock" );
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "* Report Log";
MPRINT(EM_DIAGRAM):   put nldate;
MPRINT(EM_DIAGRAM):   put nltime;
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   run;
*------------------------------------------------------------*
* Report Log
Date:                April 16, 2021
Time:                11:26:17 o'clock
*------------------------------------------------------------*
MPRINT(EM_DIAGRAM):    filename O2QW_GHZ "H:\746\Decision Tree test\Workspaces\EMWS1\Repl2\EMREPORT.out" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):   proc printto print=O2QW_GHZ new;
MPRINT(EM_DIAGRAM):   run;
25926      %let EMEXCEPTIONSTRING=;
25927      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
25928      * REPORT: Repl2;
MPRINT(EM_DIAGRAM):   * REPORT: Repl2;
25929      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
25930      %let EM_ACTION = REPORT;
25931      %let syscc = 0;
25932      filename x CATALOG 'SASHELP.EMUTIL.EM_VARMACRO.SOURCE';
MPRINT(EM_DIAGRAM):     filename x CATALOG 'SASHELP.EMUTIL.EM_VARMACRO.SOURCE';
25933      %inc x;
NOTE: %INCLUDE (level 1) file X is file SASHELP.EMUTIL.EM_VARMACRO.SOURCE.
25934     +
25935     +%macro em_varMacro(name=emMacro, metadata=, where=, key=NAME, nummacro=);
25936     +
25937     +   filename macFile catalog 'work.emutil.macro.source';
25938     +   %let _METAOBS = 0;
25939     +
25940     +   %if (%sysfunc(exist(&metadata))<1 and %sysfunc(exist(&metadata, VIEW))<1)
25941     +                   or (&metadata eq ) %then %do;
25942     +       %put * No metadata data set defined;
25943     +       %goto doend;
25944     +   %end;
25945     +
25946     +   data _null_;
25947     +      length _STRING_ $80;
25948     +      retain _STRING_;
25949     +      set &metadata end=eof;
25950     +      file macFile;
25951     +      %if %nrbquote(&where) ne %then %do;
25952     +          %let whereClause = where (%nrbquote(&where));
25953     +          %unquote(&whereClause);
25954     +      %end;
25955     +      if _N_=1 then do;
25956     +         string = "%"!!"macro &name;";
25957     +         put string;
25958     +      end;
25959     +      if (length(_STRING_) + length(trim(&key))+ 1 < 80) then do;
25960     +         _STRING_ = trim(_STRING_)!!' '!!trim(&key);
25961     +         if eof then do;
25962     +            put _STRING_;
25963     +            string = "%"!!"mend &name;";
25964     +            put string;
25965     +            %if (&nummacro ne ) %then %do;
25966     +                string = strip(put(_N_, best.));
25967     +                put "%" "global &nummacro;";
25968     +                put "%" "let &nummacro = " string ";";
25969     +                call symput('_METAOBS', string);
25970     +            %end;
25971     +         end;
25972     +      end;
25973     +      else do;
25974     +         put _STRING_;
25975     +         _string_ = TRIM(&key);
25976     +         if eof then do;
25977     +            put _STRING_;
25978     +            string = "%"!!"mend &name;";
25979     +            put string;
25980     +        end;
25981     +      end;
25982     +      if eof then do;
25983     +         string = strip(put(_N_, best.));
25984     +         call symput('_METAOBS', string);
25985     +         %if (&nummacro ne ) %then %do;
25986     +             put "%" "global &nummacro;";
25987     +             put "%" "let &nummacro = " string ";";
25988     +         %end;
25989     +      end;
25990     +   run;
25991     +
25992     +   %doend:
25993     +   %if ^&_METAOBS %then %do;
25994     +       data _null_;
25995     +          file macFile;
25996     +          put "%" "macro &name;";
25997     +          put "%" "mend &name;";
25998     +          %if (&nummacro ne ) %then %do;
25999     +              put "%" "global &nummacro;";
26000     +              put "%" "let &nummacro = 0;";
26001     +          %end;
26002     +      run;
26003     +   %end;
26004     +   %inc macFile;
26005     +   filename macFile;
26006     +%mend em_varMacro;
NOTE: %INCLUDE (level 1) ending.
26007      filename X;
MPRINT(EM_DIAGRAM):   filename X;
NOTE: Fileref X has been deassigned.
26008       %macro main;
26009
26010         filename temp catalog 'sashelp.emmdfy.Replace_macros.source';
26011         %include temp;
26012         filename temp;
26013
26014         %if %upcase(&EM_ACTION) = CREATE %then %do;
26015
26016             filename temp catalog 'sashelp.emmdfy.Replace_create.source';
26017             %include temp;
26018             filename temp;
26019             %create;
26020         %end;
26021         %else
26022         %if %upcase(&EM_ACTION) = TRAIN %then %do;
26023
26024             filename temp catalog 'sashelp.emmdfy.Replace_train.source';
26025             %include temp;
26026             filename temp;
26027             %train;
26028         %end;
26029         %else
26030         %if %upcase(&EM_ACTION) = SCORE %then %do;
26031
26032             filename temp catalog 'sashelp.emmdfy.Replace_score.source';
26033             %include temp;
26034             filename temp;
26035             %score;
26036         %end;
26037         %if %upcase(&EM_ACTION) = REPORT %then %do;
26038
26039             filename temp catalog 'sashelp.emmdfy.Replace_report.source';
26040             %include temp;
26041             filename temp;
26042             %report;
26043         %end;
26044         %if %upcase(&EM_ACTION) = OPENOUTCLASSTABLE %then %do;
26045             filename temp catalog 'sashelp.emmdfy.replace_makeoutclass.source';
26046             %include temp;
26047             filename temp;
26048             %em_replace_openoutclass;
26049         %end;
26050         %if %upcase(&EM_ACTION) = CLOSEOUTCLASSTABLE %then %do;
26051             filename temp catalog 'sashelp.emmdfy.replace_makeoutclass.source';
26052             %include temp;
26053             filename temp;
26054             %em_replace_closeoutclass;
26055         %end;
26056      %mend main;
26057
26058      %main;
MPRINT(MAIN):   filename temp catalog 'sashelp.emmdfy.Replace_macros.source';
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMMDFY.REPLACE_MACROS.SOURCE.
26059     +%macro SetProperties;
26060     +   %em_checkmacro(name=EM_PROPERTY_UNKNOWNLEVEL,    global=Y, value=MODE);
26061     +   %em_checkmacro(name=EM_PROPERTY_CALCMETHOD,      global=Y, value=NONE);
26062     +   %em_checkmacro(name=EM_PROPERTY_PERCENTSCUTOFF,  global=Y, value=0.5);
26063     +   %em_checkmacro(name=EM_PROPERTY_SPACINGSCUTOFF,  global=Y, value=9);
26064     +   %em_checkMacro(name=EM_PROPERTY_MADSCUTOFF,      global=Y, value=9);
26065     +   %em_checkMacro(name=EM_PROPERTY_STDDEVCUTOFF,    global=Y, value=3);
26066     +   %em_checkmacro(name=EM_PROPERTY_REPLACEMETHOD,   global=Y, value=COMPUTED);
26067     +   %em_checkmacro(name=EM_PROPERTY_HIDEVARIABLE,    global=Y, value=N);
26068     +   %em_checkmacro(name=EM_PROPERTY_INTERVALMETHOD,  global=Y, value=NONE);
26069     +   %em_checkmacro(name=EM_PROPERTY_REPORTCOUNT,     global=Y, value=Y);
26070     +
26071     +%mend SetProperties;
26072     +
NOTE: %INCLUDE (level 1) ending.
MPRINT(MAIN):   filename temp;
NOTE: Fileref TEMP has been deassigned.
MPRINT(MAIN):   filename temp catalog 'sashelp.emmdfy.Replace_report.source';
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMMDFY.REPLACE_REPORT.SOURCE.
26073     +%macro makeNameDs(namedata=, limitDs=, classname=);
26074     +    %let classnum=0;
26075     +    %let dsid = %sysfunc(open(&classname));
26076     +    %if &dsid>0 %then %do;
26077     +        %let classnum = %sysfunc(attrn(&dsid, NOBS));
26078     +        %let dsid = %sysfunc(close(&dsid));
26079     +    %end;
26080     +
26081     +    %let varnum=0;
26082     +    %let dsid = %sysfunc(open(&LimitDs));
26083     +    %if &dsid>0 %then %do;
26084     +        %let varnum = %sysfunc(attrn(&dsid, NOBS));
26085     +        %let dsid = %sysfunc(close(&dsid));
26086     +    %end;
26087     +    %if ^&varnum and  ^&classnum %then %goto doendmnd;
26088     +
26089     +    data &nameData;
26090     +       set
26091     +       %if &varnum %then %do;
26092     +          &limitDs
26093     +      %end;
26094     +      %if &classnum %then %do;
26095     +          &classname
26096     +      %end;
26097     +    ;
26098     +    run;
26099     +    proc sort data=&nameData;
26100     +       by name;
26101     +    run;
26102     +
26103     +    %doendmnd:
26104     +%mend makeNameDs;
26105     +
26106     +%macro countReplace(FileRef1=, dataRole=, data=, CountData=);
26107     +   %if (^%sysfunc(exist(&data)) and ^%sysfunc(exist(&data, VIEW))) or (&data eq ) %then %goto doendm;
26108     +
26109     +   data _temp;
26110     +      length DataRole $8;
26111     +      DataRole ="&DataRole";
26112     +      array _ReplaceCount{&ReplaceNum} (
26113     +      %do i=1 %to &ReplaceNum;
26114     +          0
26115     +      %end;
26116     +      );
26117     +      array _DIFF{&ReplaceNum};
26118     +      retain _ReplaceCount1 -- _ReplaceCount&ReplaceNum;
26119     +      set &data end=eof;
26120     +      %inc &FileRef1;
26121     +      do i=1 to &ReplaceNum;
26122     +         if _DIFF(i) then _ReplaceCount(i) = _ReplaceCount(i)+1;
26123     +      end;
26124     +      keep DataRole _ReplaceCount:;
26125     +      if eof then
26126     +         output;
26127     +   run;
26128     +   proc append base=&CountData data=_temp;
26129     +   run;
26130     +   proc datasets lib=WORK nolist;
26131     +      delete _temp;
26132     +   run;
26133     +
26134     +   %doendm:
26135     +
26136     +%mend;
26137     +
26138     +%macro makeCountReport(nameData=, outData=countData);
26139     +   %if ^%sysfunc(exist(&nameData))%then %goto doendmc;
26140     +
26141     +   %global ReplaceNum;
26142     +   %let ReplaceNum=0;
26143     +   %let dsid = %sysfunc(open(&namedata));
26144     +   %if &dsid>0 %then %do;
26145     +       %let ReplaceNum = %sysfunc(attrn(&dsid, NOBS));
26146     +       %let dsid = %sysfunc(close(&dsid));
26147     +   %end;
26148     +   %if ^&ReplaceNum %then %goto doendmc;
26149     +
26150     +   %EM_REGISTER(key=DiffCode, TYPE=FILE, EXTENSION=sas);
26151     +   filename _F1 "&EM_USER_DiffCode";
26152     +
26153     +   data _null_;
26154     +      length string $200;
26155     +      set &namedata;
26156     +      file _F1;
26157     +      string = 'Label '!!'_ReplaceCount'!!strip(put(_N_,BEST.))!!' = "'!!strip(name)!!'";';
26158     +      put string;
26159     +      string = 'if '!!strip(NAME)!!' ne '!!strip(newname)!!' then ';
26160     +      put string;
26161     +      string = '_DIFF'!!strip(put(_N_,BEST.))!!'= 1;';
26162     +      put string;
26163     +      put ' else ';
26164     +      string = '_DIFF'!!strip(put(_N_,BEST.))!!'= 0;';
26165     +      put string;
26166     +   run;
26167     +   %countReplace(FileRef1=_F1, dataRole=Train, data=&EM_EXPORT_TRAIN,    CountData=_tempCount);
26168     +   %countReplace(FileRef1=_F1, dataRole=Valide,data=&EM_EXPORT_VALIDATE, CountData=_tempCount);
26169     +   %countReplace(FileRef1=_F1, dataRole=Test,  data=&EM_EXPORT_TEST,     CountData=_tempCount);
26170     +
26171     +   filename _F1;
26172     +
26173     +   %let validateFlag = 0;
26174     +   %let testFlag     = 0;
26175     +   %if (%sysfunc(exist(&EM_IMPORT_VALIDATE)) or %sysfunc(exist(&EM_IMPORT_VALIDATE, VIEW)))
26176     +                  and (&EM_IMPORT_VALIDATE ne ) %then %do;
26177     +        %let validateFlag = 1;
26178     +    %end;
26179     +    %if (%sysfunc(exist(&EM_IMPORT_TEST)) or %sysfunc(exist(&EM_IMPORT_TEST, VIEW)))
26180     +                    and (&EM_IMPORT_TEST ne ) %then %do;
26181     +          %let testFlag   = 1;
26182     +    %end;
26183     +
26184     +    proc transpose data=_tempCount out=&outData(drop=_NAME_ rename=(_LABEL_=NAME Col1=TRAIN
26185     +      %if &validateFlag = 1 %then %do;
26186     +          Col2=VALIDATE
26187     +      %end;
26188     +      %if &testFlag = 1 %then %do;
26189     +          Col3=TEST
26190     +      %end;
26191     +
26192     +      ));
26193     +   run;
26194     +
26195     +   %let lib = WORK;
26196     +   %if %index(&outData, .) %then %do;
26197     +       %let lib    = %scan(&outData, 1, .);
26198     +       %let member = %scan(&outData, 2, .);
26199     +   %end;
26200     +   %else
26201     +       %let member = &outData;
26202     +  proc sort data=&outdata;
26203     +     by name;
26204     +  run;
26205     +  data &outData;
26206     +      merge &namedata(keep=NAME ROLE LABEL) &outData;
26207     +      by NAME;
26208     +   run;
26209     +   proc datasets lib=&lib nolist;
26210     +      modify &member;
26211     +      label NAME =  "%sysfunc(sasmsg(sashelp.dmine, rpt_variable_vlabel, NOQUOTE))"
26212     +            ROLE =  "%sysfunc(sasmsg(sashelp.dmine, meta_role_vlabel   , NOQUOTE))"
26213     +            LABEL=  "%sysfunc(sasmsg(sashelp.dmine, meta_label_vlabel  , NOQUOTE))"
26214     +            TRAIN=  "%sysfunc(sasmsg(sashelp.dmine, rpt_train_vlabel   , NOQUOTE))"
26215     +      %if &validateFlag = 1 %then %do;
26216     +            VALIDATE= "%sysfunc(sasmsg(sashelp.dmine, rpt_validate_vlabel   , NOQUOTE))"
26217     +      %end;
26218     +      %if &testFlag = 1 %then %do;
26219     +            TEST= "%sysfunc(sasmsg(sashelp.dmine, rpt_test_vlabel   , NOQUOTE))"
26220     +      %end;
26221     +      ;
26222     +   run;
26223     +   proc print data=&em_user_count label;
26224     +      title9  ' ';
26225     +      title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_replacecount_title, NOQUOTE))";
26226     +   run;
26227     +   title10;
26228     +   proc datasets lib=WORK nolist;
26229     +      delete _tempCount;
26230     +   run;
26231     +
26232     +  %doendmc:
26233     +%mend makeCountReport;
26234     +
26235     +%macro report;
26236     +   %em_getname(key=COUNT,        type=DATA);
26237     +   %em_getname(key=REPORTLIMITS, type=DATA);
26238     +   %em_getname(key=LIMITS,       type=DATA);
26239     +   %em_getname(key=CLASSINFO,    type=DATA);
26240     +
26241     +  /* Generating Reports */
26242     +   %let lib     = %scan(&EM_USER_COUNT, 1, .);
26243     +   %let member =;
26244     +   %if %sysfunc(exist(&em_user_reportlimits)) %then %let member = %scan(&EM_USER_REPORTLIMITS, 2, .);
26245     +   %if %sysfunc(exist(&em_user_count))        %then %let member = &member %scan(&EM_USER_count, 2, .);
26246     +   %if "&member" ne "" %then %do;
26247     +       proc datasets lib=&lib nolist;
26248     +         delete &member;
26249     +       run;
26250     +       quit;
26251     +   %end;
26252     +
26253     +   %let limitFlag = %sysfunc(exist(&em_user_limits));
26254     +    %if ^&limitFlag and  ^%sysfunc(exist(&em_user_classinfo)) %then %goto doendr;
26255     +
26256     +    %if &limitFlag %then %do;
26257     +        data &em_user_reportlimits;
26258     +           set &em_user_limits;
26259     +           label REPLACEMETHODUSED = "%sysfunc(sasmsg(sashelp.dmine, rpt_replacemethod_vlabel, NOQUOTE))"
26260     +                 REPLACEMINUSED    = "%sysfunc(sasmsg(sashelp.dmine, rpt_replacemin_vlabel, NOQUOTE))"
26261     +                 REPLACEMAXUSED    = "%sysfunc(sasmsg(sashelp.dmine, rpt_replacemax_vlabel, NOQUOTE))";
26262     +           drop ROLE LEVEL REPLACEMETHOD REPLACEMIN REPLACEMAX;
26263     +        run;
26264     +        %EM_REPORT(key=REPORTLIMITS,  viewtype=DATA, block=MODEL, description=ReplaceInterval, autoDisplay=Y);
26265     +    %end;
26266     +
26267     +    %if &em_property_CountReport=Y %then %do;
26268     +        %makeNameDs(namedata=newVarInfo, limitDs=&em_user_limits, classname=&em_user_classinfo);
26269     +
26270     +        %let labeloption = %sysfunc(getoption(label));
26271     +        options LABEL;run;
26272     +
26273     +        %makeCountReport(namedata=newVarInfo, outdata=&EM_USER_COUNT);
26274     +
26275     +        options &labeloption;run;
26276     +
26277     +        %EM_REPORT(key=COUNT, viewtype=DATA, block=MODEL, description=ReplaceCount, autoDisplay=Y);
26278     +   %end;
26279     +   proc datasets lib=WORK nolist;
26280     +      delete newVarInfo;
26281     +   run;
26282     +   %doendr:
26283     +%mend report;
NOTE: %INCLUDE (level 1) ending.
MPRINT(MAIN):   filename temp;
NOTE: Fileref TEMP has been deassigned.
MPRINT(REPORT):  ;
MPRINT(REPORT):  ;
MPRINT(REPORT):  ;
MPRINT(REPORT):  ;
MPRINT(REPORT):   proc datasets lib=EMWS1 nolist;
MPRINT(REPORT):   delete Repl2_COUNT;
MPRINT(REPORT):   run;
 
NOTE: Deleting EMWS1.REPL2_COUNT (memtype=DATA).
MPRINT(REPORT):   quit;
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           4.81 seconds
      cpu time            0.53 seconds
 
 
MPRINT(MAKENAMEDS):   data newVarInfo;
MPRINT(MAKENAMEDS):   set EMWS1.Repl2_CLASSINFO ;
MPRINT(MAKENAMEDS):   run;
 
NOTE: There were 7 observations read from the data set EMWS1.REPL2_CLASSINFO.
NOTE: The data set WORK.NEWVARINFO has 7 observations and 8 variables.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.00 seconds
 
 
MPRINT(MAKENAMEDS):   proc sort data=newVarInfo;
MPRINT(MAKENAMEDS):   by name;
MPRINT(MAKENAMEDS):   run;
 
NOTE: There were 7 observations read from the data set WORK.NEWVARINFO.
NOTE: The data set WORK.NEWVARINFO has 7 observations and 8 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.02 seconds
      cpu time            0.01 seconds
 
 
MPRINT(REPORT):  ;
MPRINT(REPORT):   options LABEL;
MPRINT(REPORT):  run;
MPRINT(EM_REGISTER):   data WORK.EM_USER_KEY;
MPRINT(EM_REGISTER):   set WORK.EM_USER_KEY end=eof;
MPRINT(EM_REGISTER):   output;
MPRINT(EM_REGISTER):   if eof then do;
MPRINT(EM_REGISTER):   key = upcase("DiffCode");
MPRINT(EM_REGISTER):   type = upcase("FILE");
MPRINT(EM_REGISTER):   file = "DiffCode";
MPRINT(EM_REGISTER):   folder = "";
MPRINT(EM_REGISTER):   extension = "sas";
MPRINT(EM_REGISTER):   AUTODELETE = "Y";
MPRINT(EM_REGISTER):   property = "N";
MPRINT(EM_REGISTER):   action = "";
MPRINT(EM_REGISTER):   output;
MPRINT(EM_REGISTER):   end;
MPRINT(EM_REGISTER):   run;
 
NOTE: There were 3 observations read from the data set WORK.EM_USER_KEY.
NOTE: The data set WORK.EM_USER_KEY has 4 observations and 8 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
MPRINT(MAKECOUNTREPORT):  ;
MPRINT(MAKECOUNTREPORT):   filename _F1 "H:\746\Decision Tree test\Workspaces\EMWS1\Repl2\DiffCode.sas";
MPRINT(MAKECOUNTREPORT):   data _null_;
MPRINT(MAKECOUNTREPORT):   length string $200;
MPRINT(MAKECOUNTREPORT):   set newVarInfo;
MPRINT(MAKECOUNTREPORT):   file _F1;
MPRINT(MAKECOUNTREPORT):   string = 'Label '!!'_ReplaceCount'!!strip(put(_N_,BEST.))!!' = "'!!strip(name)!!'";';
MPRINT(MAKECOUNTREPORT):   put string;
MPRINT(MAKECOUNTREPORT):   string = 'if '!!strip(NAME)!!' ne '!!strip(newname)!!' then ';
MPRINT(MAKECOUNTREPORT):   put string;
MPRINT(MAKECOUNTREPORT):   string = '_DIFF'!!strip(put(_N_,BEST.))!!'= 1;';
MPRINT(MAKECOUNTREPORT):   put string;
MPRINT(MAKECOUNTREPORT):   put ' else ';
MPRINT(MAKECOUNTREPORT):   string = '_DIFF'!!strip(put(_N_,BEST.))!!'= 0;';
MPRINT(MAKECOUNTREPORT):   put string;
MPRINT(MAKECOUNTREPORT):   run;
 
NOTE: The file _F1 is:
      Filename=H:\746\Decision Tree test\Workspaces\EMWS1\Repl2\DiffCode.sas,
      RECFM=V,LRECL=32767,File Size (bytes)=0,
      Last Modified=April 16, 2021 11:26:21 o'cloc,
      Create Time=April 01, 2021 17:21:55 o'cloc
 
NOTE: 35 records were written to the file _F1.
      The minimum record length was 6.
      The maximum record length was 48.
NOTE: There were 7 observations read from the data set WORK.NEWVARINFO.
NOTE: DATA statement used (Total process time):
      real time           0.12 seconds
      cpu time            0.03 seconds
 
 
MPRINT(COUNTREPLACE):   data _temp;
MPRINT(COUNTREPLACE):   length DataRole $8;
MPRINT(COUNTREPLACE):   DataRole ="Train";
MPRINT(COUNTREPLACE):   array _ReplaceCount{7} ( 0 0 0 0 0 0 0 );
MPRINT(COUNTREPLACE):   array _DIFF{7};
MPRINT(COUNTREPLACE):   retain _ReplaceCount1 -- _ReplaceCount7;
MPRINT(COUNTREPLACE):   set EMWS1.Repl2_TRAIN end=eof;
NOTE: %INCLUDE (level 1) file _F1 is file H:\746\Decision Tree test\Workspaces\EMWS1\Repl2\DiffCode.sas.
26284     +Label _ReplaceCount1 = "aspiration";
MPRINT(COUNTREPLACE):   Label _ReplaceCount1 = "aspiration";
26285     +if aspiration ne REP_aspiration then
26286     +_DIFF1= 1;
MPRINT(COUNTREPLACE):   if aspiration ne REP_aspiration then _DIFF1= 1;
26287     + else
26288     +_DIFF1= 0;
MPRINT(COUNTREPLACE):   else _DIFF1= 0;
26289     +Label _ReplaceCount2 = "body_style";
MPRINT(COUNTREPLACE):   Label _ReplaceCount2 = "body_style";
26290     +if body_style ne REP_body_style then
26291     +_DIFF2= 1;
MPRINT(COUNTREPLACE):   if body_style ne REP_body_style then _DIFF2= 1;
26292     + else
26293     +_DIFF2= 0;
MPRINT(COUNTREPLACE):   else _DIFF2= 0;
26294     +Label _ReplaceCount3 = "drive_wheels";
MPRINT(COUNTREPLACE):   Label _ReplaceCount3 = "drive_wheels";
26295     +if drive_wheels ne REP_drive_wheels then
26296     +_DIFF3= 1;
MPRINT(COUNTREPLACE):   if drive_wheels ne REP_drive_wheels then _DIFF3= 1;
26297     + else
26298     +_DIFF3= 0;
MPRINT(COUNTREPLACE):   else _DIFF3= 0;
26299     +Label _ReplaceCount4 = "engine_location";
MPRINT(COUNTREPLACE):   Label _ReplaceCount4 = "engine_location";
26300     +if engine_location ne REP_engine_location then
26301     +_DIFF4= 1;
MPRINT(COUNTREPLACE):   if engine_location ne REP_engine_location then _DIFF4= 1;
26302     + else
26303     +_DIFF4= 0;
MPRINT(COUNTREPLACE):   else _DIFF4= 0;
26304     +Label _ReplaceCount5 = "fuel_system";
MPRINT(COUNTREPLACE):   Label _ReplaceCount5 = "fuel_system";
26305     +if fuel_system ne REP_fuel_system then
26306     +_DIFF5= 1;
MPRINT(COUNTREPLACE):   if fuel_system ne REP_fuel_system then _DIFF5= 1;
26307     + else
26308     +_DIFF5= 0;
MPRINT(COUNTREPLACE):   else _DIFF5= 0;
26309     +Label _ReplaceCount6 = "fuel_type";
MPRINT(COUNTREPLACE):   Label _ReplaceCount6 = "fuel_type";
26310     +if fuel_type ne REP_fuel_type then
26311     +_DIFF6= 1;
MPRINT(COUNTREPLACE):   if fuel_type ne REP_fuel_type then _DIFF6= 1;
26312     + else
26313     +_DIFF6= 0;
MPRINT(COUNTREPLACE):   else _DIFF6= 0;
26314     +Label _ReplaceCount7 = "num_of_cylinders";
MPRINT(COUNTREPLACE):   Label _ReplaceCount7 = "num_of_cylinders";
26315     +if num_of_cylinders ne REP_num_of_cylinders then
26316     +_DIFF7= 1;
MPRINT(COUNTREPLACE):   if num_of_cylinders ne REP_num_of_cylinders then _DIFF7= 1;
26317     + else
26318     +_DIFF7= 0;
MPRINT(COUNTREPLACE):   else _DIFF7= 0;
NOTE: %INCLUDE (level 1) ending.
MPRINT(COUNTREPLACE):   do i=1 to 7;
MPRINT(COUNTREPLACE):   if _DIFF(i) then _ReplaceCount(i) = _ReplaceCount(i)+1;
MPRINT(COUNTREPLACE):   end;
MPRINT(COUNTREPLACE):   keep DataRole _ReplaceCount:;
MPRINT(COUNTREPLACE):   if eof then output;
MPRINT(COUNTREPLACE):   run;
 
NOTE: There were 100 observations read from the data set EMWS1.PART_TRAIN.
NOTE: There were 100 observations read from the data set EMWS1.IMPT_TRAIN.
NOTE: There were 100 observations read from the data set EMWS1.REPL_TRAIN.
NOTE: View EMWS1.REPL2_TRAIN.VIEW used (Total process time):
      real time           0.21 seconds
      cpu time            0.18 seconds
 
NOTE: There were 100 observations read from the data set EMWS1.TRANS_TRAIN.
NOTE: There were 100 observations read from the data set EMWS1.REPL2_TRAIN.
NOTE: The data set WORK._TEMP has 1 observations and 8 variables.
NOTE: DATA statement used (Total process time):
      real time           0.24 seconds
      cpu time            0.18 seconds
 
 
MPRINT(COUNTREPLACE):   proc append base=_tempCount data=_temp;
MPRINT(COUNTREPLACE):   run;
 
NOTE: Appending WORK._TEMP to WORK._TEMPCOUNT.
NOTE: BASE data set does not exist. DATA file is being copied to BASE file.
NOTE: There were 1 observations read from the data set WORK._TEMP.
NOTE: The data set WORK._TEMPCOUNT has 1 observations and 8 variables.
NOTE: PROCEDURE APPEND used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
MPRINT(COUNTREPLACE):   proc datasets lib=WORK nolist;
MPRINT(COUNTREPLACE):   delete _temp;
MPRINT(COUNTREPLACE):   run;
 
NOTE: Deleting WORK._TEMP (memtype=DATA).
MPRINT(MAKECOUNTREPORT):  ;
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.02 seconds
      cpu time            0.01 seconds
 
 
MPRINT(COUNTREPLACE):   data _temp;
MPRINT(COUNTREPLACE):   length DataRole $8;
MPRINT(COUNTREPLACE):   DataRole ="Valide";
MPRINT(COUNTREPLACE):   array _ReplaceCount{7} ( 0 0 0 0 0 0 0 );
MPRINT(COUNTREPLACE):   array _DIFF{7};
MPRINT(COUNTREPLACE):   retain _ReplaceCount1 -- _ReplaceCount7;
MPRINT(COUNTREPLACE):   set EMWS1.Repl2_VALIDATE end=eof;
NOTE: %INCLUDE (level 1) file _F1 is file H:\746\Decision Tree test\Workspaces\EMWS1\Repl2\DiffCode.sas.
26319     +Label _ReplaceCount1 = "aspiration";
MPRINT(COUNTREPLACE):   Label _ReplaceCount1 = "aspiration";
26320     +if aspiration ne REP_aspiration then
26321     +_DIFF1= 1;
MPRINT(COUNTREPLACE):   if aspiration ne REP_aspiration then _DIFF1= 1;
26322     + else
26323     +_DIFF1= 0;
MPRINT(COUNTREPLACE):   else _DIFF1= 0;
26324     +Label _ReplaceCount2 = "body_style";
MPRINT(COUNTREPLACE):   Label _ReplaceCount2 = "body_style";
26325     +if body_style ne REP_body_style then
26326     +_DIFF2= 1;
MPRINT(COUNTREPLACE):   if body_style ne REP_body_style then _DIFF2= 1;
26327     + else
26328     +_DIFF2= 0;
MPRINT(COUNTREPLACE):   else _DIFF2= 0;
26329     +Label _ReplaceCount3 = "drive_wheels";
MPRINT(COUNTREPLACE):   Label _ReplaceCount3 = "drive_wheels";
26330     +if drive_wheels ne REP_drive_wheels then
26331     +_DIFF3= 1;
MPRINT(COUNTREPLACE):   if drive_wheels ne REP_drive_wheels then _DIFF3= 1;
26332     + else
26333     +_DIFF3= 0;
MPRINT(COUNTREPLACE):   else _DIFF3= 0;
26334     +Label _ReplaceCount4 = "engine_location";
MPRINT(COUNTREPLACE):   Label _ReplaceCount4 = "engine_location";
26335     +if engine_location ne REP_engine_location then
26336     +_DIFF4= 1;
MPRINT(COUNTREPLACE):   if engine_location ne REP_engine_location then _DIFF4= 1;
26337     + else
26338     +_DIFF4= 0;
MPRINT(COUNTREPLACE):   else _DIFF4= 0;
26339     +Label _ReplaceCount5 = "fuel_system";
MPRINT(COUNTREPLACE):   Label _ReplaceCount5 = "fuel_system";
26340     +if fuel_system ne REP_fuel_system then
26341     +_DIFF5= 1;
MPRINT(COUNTREPLACE):   if fuel_system ne REP_fuel_system then _DIFF5= 1;
26342     + else
26343     +_DIFF5= 0;
MPRINT(COUNTREPLACE):   else _DIFF5= 0;
26344     +Label _ReplaceCount6 = "fuel_type";
MPRINT(COUNTREPLACE):   Label _ReplaceCount6 = "fuel_type";
26345     +if fuel_type ne REP_fuel_type then
26346     +_DIFF6= 1;
MPRINT(COUNTREPLACE):   if fuel_type ne REP_fuel_type then _DIFF6= 1;
26347     + else
26348     +_DIFF6= 0;
MPRINT(COUNTREPLACE):   else _DIFF6= 0;
26349     +Label _ReplaceCount7 = "num_of_cylinders";
MPRINT(COUNTREPLACE):   Label _ReplaceCount7 = "num_of_cylinders";
26350     +if num_of_cylinders ne REP_num_of_cylinders then
26351     +_DIFF7= 1;
MPRINT(COUNTREPLACE):   if num_of_cylinders ne REP_num_of_cylinders then _DIFF7= 1;
26352     + else
26353     +_DIFF7= 0;
MPRINT(COUNTREPLACE):   else _DIFF7= 0;
NOTE: %INCLUDE (level 1) ending.
MPRINT(COUNTREPLACE):   do i=1 to 7;
MPRINT(COUNTREPLACE):   if _DIFF(i) then _ReplaceCount(i) = _ReplaceCount(i)+1;
MPRINT(COUNTREPLACE):   end;
MPRINT(COUNTREPLACE):   keep DataRole _ReplaceCount:;
MPRINT(COUNTREPLACE):   if eof then output;
MPRINT(COUNTREPLACE):   run;
 
NOTE: There were 100 observations read from the data set EMWS1.PART_VALIDATE.
NOTE: There were 100 observations read from the data set EMWS1.IMPT_VALIDATE.
NOTE: There were 100 observations read from the data set EMWS1.REPL_VALIDATE.
NOTE: View EMWS1.REPL2_VALIDATE.VIEW used (Total process time):
      real time           0.20 seconds
      cpu time            0.18 seconds
 
NOTE: There were 100 observations read from the data set EMWS1.TRANS_VALIDATE.
NOTE: There were 100 observations read from the data set EMWS1.REPL2_VALIDATE.
NOTE: The data set WORK._TEMP has 1 observations and 8 variables.
NOTE: DATA statement used (Total process time):
      real time           0.22 seconds
      cpu time            0.20 seconds
 
 
MPRINT(COUNTREPLACE):   proc append base=_tempCount data=_temp;
MPRINT(COUNTREPLACE):   run;
 
NOTE: Appending WORK._TEMP to WORK._TEMPCOUNT.
NOTE: There were 1 observations read from the data set WORK._TEMP.
NOTE: 1 observations added.
NOTE: The data set WORK._TEMPCOUNT has 2 observations and 8 variables.
NOTE: PROCEDURE APPEND used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(COUNTREPLACE):   proc datasets lib=WORK nolist;
MPRINT(COUNTREPLACE):   delete _temp;
MPRINT(COUNTREPLACE):   run;
 
NOTE: Deleting WORK._TEMP (memtype=DATA).
MPRINT(MAKECOUNTREPORT):  ;
MPRINT(MAKECOUNTREPORT):  ;
MPRINT(MAKECOUNTREPORT):   filename _F1;
NOTE: Fileref _F1 has been deassigned.
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(MAKECOUNTREPORT):   proc transpose data=_tempCount out=EMWS1.Repl2_COUNT(drop=_NAME_ rename=(_LABEL_=NAME Col1=TRAIN Col2=VALIDATE ));
MPRINT(MAKECOUNTREPORT):   run;
 
NOTE: There were 2 observations read from the data set WORK._TEMPCOUNT.
NOTE: The data set EMWS1.REPL2_COUNT has 7 observations and 3 variables.
NOTE: PROCEDURE TRANSPOSE used (Total process time):
      real time           0.07 seconds
      cpu time            0.01 seconds
 
 
MPRINT(MAKECOUNTREPORT):   proc sort data=EMWS1.Repl2_COUNT;
MPRINT(MAKECOUNTREPORT):   by name;
MPRINT(MAKECOUNTREPORT):   run;
 
NOTE: There were 7 observations read from the data set EMWS1.REPL2_COUNT.
NOTE: The data set EMWS1.REPL2_COUNT has 7 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.07 seconds
      cpu time            0.03 seconds
 
 
MPRINT(MAKECOUNTREPORT):   data EMWS1.Repl2_COUNT;
MPRINT(MAKECOUNTREPORT):   merge newVarInfo(keep=NAME ROLE LABEL) EMWS1.Repl2_COUNT;
MPRINT(MAKECOUNTREPORT):   by NAME;
MPRINT(MAKECOUNTREPORT):   run;
 
WARNING: Multiple lengths were specified for the BY variable Name by input data sets. This might cause unexpected results.
NOTE: There were 7 observations read from the data set WORK.NEWVARINFO.
NOTE: There were 7 observations read from the data set EMWS1.REPL2_COUNT.
NOTE: The data set EMWS1.REPL2_COUNT has 7 observations and 5 variables.
NOTE: DATA statement used (Total process time):
      real time           0.07 seconds
      cpu time            0.00 seconds
 
 
MPRINT(MAKECOUNTREPORT):   proc datasets lib=EMWS1 nolist;
MPRINT(MAKECOUNTREPORT):   modify Repl2_COUNT;
MPRINT(MAKECOUNTREPORT):   label NAME = "Variable" ROLE = "Role" LABEL= "Label" TRAIN= "Train" VALIDATE= "Validation" ;
MPRINT(MAKECOUNTREPORT):   run;
 
NOTE: MODIFY was successful for EMWS1.REPL2_COUNT.DATA.
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           6.07 seconds
      cpu time            0.56 seconds
 
 
MPRINT(MAKECOUNTREPORT):   proc print data=EMWS1.Repl2_COUNT label;
MPRINT(MAKECOUNTREPORT):   title9 ' ';
MPRINT(MAKECOUNTREPORT):   title10 "Replacement Counts";
MPRINT(MAKECOUNTREPORT):   run;
NOTE: There were 7 observations read from the data set EMWS1.REPL2_COUNT.
NOTE: The PROCEDURE PRINT printed page 2.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.02 seconds
      cpu time            0.01 seconds
 
 
MPRINT(MAKECOUNTREPORT):   title10;
MPRINT(MAKECOUNTREPORT):   proc datasets lib=WORK nolist;
MPRINT(MAKECOUNTREPORT):   delete _tempCount;
MPRINT(MAKECOUNTREPORT):   run;
NOTE: Deleting WORK._TEMPCOUNT (memtype=DATA).
MPRINT(REPORT):  ;
MPRINT(REPORT):   options LABEL;
MPRINT(REPORT):  run;
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_REPORT):   data WORK.EM_USER_REPORT;
MPRINT(EM_REPORT):   retain id 0;
MPRINT(EM_REPORT):   id + 1;
MPRINT(EM_REPORT):   length VIEW 8 NAME $32 VALUE $400;
MPRINT(EM_REPORT):   NAME = "KEY";
MPRINT(EM_REPORT):   VALUE = "COUNT";
MPRINT(EM_REPORT):   VIEW = 0.55682106528283;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "VIEWTYPE";
MPRINT(EM_REPORT):   VALUE = "DATA";
MPRINT(EM_REPORT):   VIEW = 0.55682106528283;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "AUTODISPLAY";
MPRINT(EM_REPORT):   VALUE = "Y";
MPRINT(EM_REPORT):   VIEW = 0.55682106528283;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SPK";
MPRINT(EM_REPORT):   VALUE = "Y";
MPRINT(EM_REPORT):   VIEW = 0.55682106528283;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "COMPARE";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.55682106528283;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LOCALIZE";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.55682106528283;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "EQUALIZEROWX";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.55682106528283;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "EQUALIZEROWY";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.55682106528283;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "EQUALIZECOLX";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.55682106528283;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "EQUALIZECOLY";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.55682106528283;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NROWS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.55682106528283;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NCOLS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.55682106528283;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DISCRETEX";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.55682106528283;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DISCRETEY";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.55682106528283;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LATTICEX";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.55682106528283;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LATTICEY";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.55682106528283;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LATTICETYPE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.55682106528283;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "ABSOLUTEVALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.55682106528283;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SORTORDER";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.55682106528283;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SORTORDERY";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.55682106528283;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "ORIENTATION";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.55682106528283;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "METHOD";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.55682106528283;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DIRECTION";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.55682106528283;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "BYSET";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.55682106528283;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "RENDERMODE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.55682106528283;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DESCRIPTION";
MPRINT(EM_REPORT):   VALUE = "ReplaceCount";
MPRINT(EM_REPORT):   VIEW = 0.55682106528283;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "X";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.55682106528283;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "EXCLUDEVARS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.55682106528283;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Z";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.55682106528283;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YVARS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.55682106528283;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "FREQVARS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.55682106528283;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "AXIS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.55682106528283;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "FREQ";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.55682106528283;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "GROUP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.55682106528283;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SUBGROUP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.55682106528283;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "BLOCK";
MPRINT(EM_REPORT):   VALUE = "MODEL";
MPRINT(EM_REPORT):   VIEW = 0.55682106528283;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "COLOR";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.55682106528283;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "COLORINDEX";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.55682106528283;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "TIPTEXT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.55682106528283;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "TIP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.55682106528283;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "TOOLTIP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.55682106528283;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "REPORTID";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.55682106528283;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "IDVALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.55682106528283;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "ID";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.55682106528283;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SIZE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.55682106528283;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "FROM";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.55682106528283;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "TO";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.55682106528283;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "VALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.55682106528283;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "VIEWS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.55682106528283;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "PARENT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.55682106528283;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODETEXT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.55682106528283;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "ABOVETEXT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.55682106528283;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "BELOWTEXT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.55682106528283;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODESIZE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.55682106528283;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "STATS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.55682106528283;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "CLASSDIST";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.55682106528283;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "INTDIST";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.55682106528283;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "FOLDER";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.55682106528283;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YPLOTTYPE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.55682106528283;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XREF";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.55682106528283;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XREF2";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.55682106528283;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YREF";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.55682106528283;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y2REF";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.55682106528283;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YREF2";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.55682106528283;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y2REF2";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.55682106528283;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "GROUPINDEX";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.55682106528283;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "JOIN";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.55682106528283;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XEXCLUDE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.55682106528283;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "FREQEXCLUDE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.55682106528283;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YEXCLUDE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.55682106528283;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NAME";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.55682106528283;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "HEIGHT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.55682106528283;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "WIDTH";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.55682106528283;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XAXISLABEL";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.55682106528283;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y2AXISLABEL";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.55682106528283;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YAXISLABEL";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.55682106528283;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DISPLAYXLABEL";
MPRINT(EM_REPORT):   VALUE = "Y";
MPRINT(EM_REPORT):   VIEW = 0.55682106528283;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DISPLAYYLABEL";
MPRINT(EM_REPORT):   VALUE = "Y";
MPRINT(EM_REPORT):   VIEW = 0.55682106528283;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "CHOICETEXT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.55682106528283;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SEGMENTVALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.55682106528283;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LOWERBAND";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.55682106528283;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "UPPERBAND";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.55682106528283;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YLINE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.55682106528283;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKKEY";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.55682106528283;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODEKEY";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.55682106528283;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODEID";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.55682106528283;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODEVALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.55682106528283;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODECOLOR";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.55682106528283;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODESHAPE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.55682106528283;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODESHAPEVAR";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.55682106528283;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODELABEL";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.55682106528283;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODETIP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.55682106528283;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKID";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.55682106528283;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKVALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.55682106528283;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKFROM";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.55682106528283;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKTO";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.55682106528283;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKCOLOR";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.55682106528283;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKWIDTH";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.55682106528283;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKTIP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.55682106528283;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XFROM";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.55682106528283;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XTO";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.55682106528283;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YFROM";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.55682106528283;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YTO";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.55682106528283;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "MATRIXVAR";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.55682106528283;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "RESPONSE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.55682106528283;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SERIES";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.55682106528283;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DESCARG";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.55682106528283;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SLIDER";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.55682106528283;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "MarkerSize";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.55682106528283;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Marker";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.55682106528283;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y1";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.55682106528283;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y2";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.55682106528283;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y3";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.55682106528283;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y4";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.55682106528283;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y5";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.55682106528283;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y6";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.55682106528283;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y7";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.55682106528283;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y8";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.55682106528283;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y9";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.55682106528283;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y10";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.55682106528283;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y11";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.55682106528283;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y12";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.55682106528283;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y13";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.55682106528283;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y14";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.55682106528283;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y15";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.55682106528283;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y16";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.55682106528283;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "TITLE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.55682106528283;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LEGEND";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.55682106528283;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LEGENDTITLE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.55682106528283;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SHAPE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.55682106528283;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "METHOD";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.55682106528283;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NOBINMISS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.55682106528283;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   run;
 
NOTE: The data set WORK.EM_USER_REPORT has 132 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.04 seconds
      cpu time            0.04 seconds
 
 
MPRINT(REPORT):  ;
MPRINT(REPORT):   proc datasets lib=WORK nolist;
MPRINT(REPORT):   delete newVarInfo;
MPRINT(REPORT):   run;
 
NOTE: Deleting WORK.NEWVARINFO (memtype=DATA).
MPRINT(MAIN):  ;
MPRINT(EM_DIAGRAM):  ;
26354      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
26355      * End REPORT: Repl2;
MPRINT(EM_DIAGRAM):   * End REPORT: Repl2;
26356      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
26357
26358      /* Reset EM Options */
26359      options formchar="|----|+|---+=|-/\<>*";
MPRINT(EM_DIAGRAM):   options formchar="|----|+|---+=|-/\<>*";
26360      options nocenter ls=256 ps=10000;
MPRINT(EM_DIAGRAM):   options nocenter ls=256 ps=10000;
26361      goptions reset=all device=GIF NODISPLAY;
MPRINT(EM_DIAGRAM):   goptions reset=all device=GIF NODISPLAY;
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.21 seconds
      cpu time            0.06 seconds
 
 
26362      proc sort data=WORK.EM_USER_REPORT;
MPRINT(EM_DIAGRAM):   proc sort data=WORK.EM_USER_REPORT;
26363      by ID VIEW;
MPRINT(EM_DIAGRAM):   by ID VIEW;
26364      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 132 observations read from the data set WORK.EM_USER_REPORT.
NOTE: The data set WORK.EM_USER_REPORT has 132 observations and 4 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_DIAGRAM):    proc printto;
MPRINT(EM_DIAGRAM):   run;
