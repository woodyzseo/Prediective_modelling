*------------------------------------------------------------*
User:                301152869
Date:                April 16, 2021
Time:                11:32:29 o'clock
Site:                70104631
Platform:            W32_8PRO
Maintenance Release: 9.04.01M2P072314
EM Version:          13.2
* 
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   call symput('NLDATE', strip(put(date(), NLDATE.)));
MPRINT(EM_DIAGRAM):   call symput('NLTIME', strip(put(datetime(), NLTIME.)));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   nldate= sasmsg("sashelp.dmine", "log_date_note", 'N', "April 16, 2021" );
MPRINT(EM_DIAGRAM):   nltime= sasmsg("sashelp.dmine", "log_time_note", 'N', "11:31:45 o'clock"
);
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "* Training Log";
MPRINT(EM_DIAGRAM):   put nldate;
MPRINT(EM_DIAGRAM):   put nltime;
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   run;
*------------------------------------------------------------*
* Training Log
Date:                April 16, 2021
Time:                11:31:45 o'clock
*------------------------------------------------------------*
MPRINT(EM_DIAGRAM):    filename O3PJ7W68 "H:\746\Decision Tree
test\Workspaces\EMWS1\Neural4\EMTRAIN.out" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):   proc printto print=O3PJ7W68 new;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _LOG "H:\746\Decision Tree
test\Workspaces\EMWS1\Neural4\EMLOG.log" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   call symput('NLDATE', strip(put(date(), NLDATE.)));
MPRINT(EM_DIAGRAM):   call symput('NLTIME', strip(put(datetime(), NLTIME.)));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   nldate= sasmsg("sashelp.dmine", "log_date_note", 'N', "April 16, 2021" );
MPRINT(EM_DIAGRAM):   nltime= sasmsg("sashelp.dmine", "log_time_note", 'N', "11:31:45 o'clock"
);
MPRINT(EM_DIAGRAM):   file _LOG;
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "User:                301152869";
MPRINT(EM_DIAGRAM):   put nldate;
MPRINT(EM_DIAGRAM):   put nltime;
MPRINT(EM_DIAGRAM):   put "Site:                70104631";
MPRINT(EM_DIAGRAM):   put "Platform:            W32_8PRO";
MPRINT(EM_DIAGRAM):   put "Maintenance Release: 9.04.01M2P072314";
MPRINT(EM_DIAGRAM):   put "EM Version:          13.2";
MPRINT(EM_DIAGRAM):   put "* ";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _LOGIN "H:\746\Decision Tree
test\Workspaces\EMWS1\Neural4\EMTRAIN.log" encoding="UTF-8" NOBOM;
MPRINT(EM_COPYFILE):   data _null_;
MPRINT(EM_COPYFILE):   length line $20000;
MPRINT(EM_COPYFILE):   file _LOG MOD lrecl=20000;
MPRINT(EM_COPYFILE):   fid=fopen("_LOGIN",'i',20000,'v');
MPRINT(EM_COPYFILE):   if fid > 0 then do;
MPRINT(EM_COPYFILE):   do while(^fread(fid));
MPRINT(EM_COPYFILE):   rlen = frlen(fid);
MPRINT(EM_COPYFILE):   rc= fget(fid,line,20000);
MPRINT(EM_COPYFILE):   start = length(line)-length(left(line))+1;
MPRINT(EM_COPYFILE):   line=strip(line);
MPRINT(EM_COPYFILE):   put @start line;
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   if fid > 0 then rc=fclose(fid);
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   run;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   filename _LOGIN;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   file _LOG mod;
MPRINT(EM_DIAGRAM):   put _page_;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   filename _LOGIN "H:\746\Decision Tree
test\Workspaces\EMWS1\Neural4\EMSCORE.log" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   file _LOG mod;
MPRINT(EM_DIAGRAM):   put _page_;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _LOGIN "H:\746\Decision Tree
test\Workspaces\EMWS1\Neural4\EMREPORT.log" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   filename _LOGIN;
MPRINT(EM_DIAGRAM):    filename _LOG;
MPRINT(EM_DIAGRAM):    filename _OUT "H:\746\Decision Tree
test\Workspaces\EMWS1\Neural4\EMOUTPUT.out" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   call symput('NLDATE', strip(put(date(), NLDATE.)));
MPRINT(EM_DIAGRAM):   call symput('NLTIME', strip(put(datetime(), NLTIME.)));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   nldate= sasmsg("sashelp.dmine", "log_date_note", 'N', "April 16, 2021" );
MPRINT(EM_DIAGRAM):   nltime= sasmsg("sashelp.dmine", "log_time_note", 'N', "11:31:45 o'clock"
);
MPRINT(EM_DIAGRAM):   file _OUT;
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "User:                301152869";
MPRINT(EM_DIAGRAM):   put nldate;
MPRINT(EM_DIAGRAM):   put nltime;
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "* Training Output";
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _OUTIN "H:\746\Decision Tree
test\Workspaces\EMWS1\Neural4\EMTRAIN.out" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):   ;
MPRINT(EM_COPYFILE):   data _null_;
MPRINT(EM_COPYFILE):   length line $20000;
MPRINT(EM_COPYFILE):   file _OUT MOD lrecl=20000;
MPRINT(EM_COPYFILE):   fid=fopen("_OUTIN",'i',20000,'v');
MPRINT(EM_COPYFILE):   if fid > 0 then do;
MPRINT(EM_COPYFILE):   do while(^fread(fid));
MPRINT(EM_COPYFILE):   rlen = frlen(fid);
MPRINT(EM_COPYFILE):   rc= fget(fid,line,20000);
MPRINT(EM_COPYFILE):   start = length(line)-length(left(line))+1;
MPRINT(EM_COPYFILE):   line=strip(line);
MPRINT(EM_COPYFILE):   put @start line;
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   if fid > 0 then rc=fclose(fid);
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   run;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   filename _OUTIN;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   file _OUT mod;
MPRINT(EM_DIAGRAM):   put _page_;
MPRINT(EM_DIAGRAM):   put // "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "* Score Output";
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _OUTIN "H:\746\Decision Tree
test\Workspaces\EMWS1\Neural4\EMSCORE.out" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   filename _OUTIN;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   file _OUT mod;
MPRINT(EM_DIAGRAM):   put _page_;
MPRINT(EM_DIAGRAM):   put // "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "* Report Output";
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _OUTIN "H:\746\Decision Tree
test\Workspaces\EMWS1\Neural4\EMREPORT.out" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   filename _OUTIN;
MPRINT(EM_DIAGRAM):    filename _OUT;
MPRINT(EM_DIAGRAM):    filename _emtool_ 'H:\746\Decision Tree
test\Workspaces\EMWS1\Neural4\EMRUNSTATUS.xml' encoding="UTF-8" NOBOM;
127844     proc freq data=EMWS1.Neural4_VariableSet noprint;
MPRINT(EM_DIAGRAM):    proc freq data=EMWS1.Neural4_VariableSet noprint;
127845     table ROLE*LEVEL/out=WORK.Neural4META;
MPRINT(EM_DIAGRAM):   table ROLE*LEVEL/out=WORK.Neural4META;
127846     run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 52 observations read from the data set EMWS1.NEURAL4_VARIABLESET.
NOTE: The data set WORK.NEURAL4META has 6 observations and 4 variables.
NOTE: PROCEDURE FREQ used (Total process time):
      real time           0.05 seconds
      cpu time            0.03 seconds
 
 
127847     proc print data=WORK.Neural4META label noobs;
MPRINT(EM_DIAGRAM):   proc print data=WORK.Neural4META label noobs;
127848     var ROLE LEVEL COUNT;
MPRINT(EM_DIAGRAM):   var ROLE LEVEL COUNT;
127849     label ROLE = "%sysfunc(sasmsg(sashelp.dmine, meta_role_vlabel, NOQUOTE))" LEVEL =
127849   ! "%sysfunc(sasmsg(sashelp.dmine, meta_level_vlabel, NOQUOTE))" COUNT =
127849   ! "%sysfunc(sasmsg(sashelp.dmine, rpt_count_vlabel, NOQUOTE))";
MPRINT(EM_DIAGRAM):   label ROLE = "Role" LEVEL = "Measurement Level" COUNT = "Frequency
Count";
127850     title9 ' ';
MPRINT(EM_DIAGRAM):   title9 ' ';
127851     title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_varSummary_title  , NOQUOTE))";
MPRINT(EM_DIAGRAM):   title10 "Variable Summary";
MPRINT(EM_DIAGRAM):   run;
127852     run;
 
NOTE: There were 6 observations read from the data set WORK.NEURAL4META.
NOTE: The PROCEDURE PRINT printed page 92.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
127853     title10;
MPRINT(EM_DIAGRAM):   title10;
127854     %let EMNORLEN = %DMNORLEN;
MPRINT(EM_DIAGRAM):
EMWS1.Repl2_TRAIN EMWS1.Repl2_TRAIN
EMWS1.Repl2_TRAIN EMWS1.Repl2_TRAIN EMWS1 Repl2_TRAIN
EMWS1.Repl2_TRAIN EMWS1.Repl2_TRAIN
EMWS1.Repl2_TRAIN EMWS1.Repl2_TRAIN EMWS1 Repl2_TRAIN
MPRINT(EM_DIAGRAM):    proc dmdb data=EMWS1.Repl2_TRAIN
classout=WORK._DMDBCLASSTARGET(keep=NAME NRAW CRAW LEVEL FREQUENCY NMISSPERCENT);
MPRINT(EM_DIAGRAM):   class Risk(DESC) ;
MPRINT(EM_DIAGRAM):   run;
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL _INIT >>
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL setMetaData >>
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL next >>
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL setMetaData >>
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL next >>
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL _term >>
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   set WORK._DMDBCLASSTARGET;
MPRINT(EM_DIAGRAM):   where ^(NRAW eq . and CRAW eq '') and NAME="Risk";
MPRINT(EM_DIAGRAM):   if _N_=1 then call symput('_newevent', strip(LEVEL));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=WORK._DMDBCLASSTARGET out=_TEMPCLASS(keep=LEVEL FREQUENCY
NMISSPERCENT rename=(LEVEL=Risk));
MPRINT(EM_DIAGRAM):   by LEVEL;
MPRINT(EM_DIAGRAM):   where ^(NRAW eq . and CRAW eq '') and NAME="Risk";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data _TEMPCLASS;
MPRINT(EM_DIAGRAM):   set _TEMPCLASS;
MPRINT(EM_DIAGRAM):   NMISSPERCENT= NMISSPERCENT/100;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data _sortedDecData;
MPRINT(EM_DIAGRAM):   set EMWS1.Neural4_Risk_DD;
MPRINT(EM_DIAGRAM):   _levelorder_=_N_;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=_sortedDecdata;
MPRINT(EM_DIAGRAM):   by Risk;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   merge _TEMPCLASS(in=_a) _sortedDecdata(in=_b);
MPRINT(EM_DIAGRAM):   by Risk;
MPRINT(EM_DIAGRAM):   if (_a and ^_b) or (^_a and _b) then call symput('_emresetDec', '1');
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data EMWS1.Neural4_Risk_DD;
MPRINT(EM_DIAGRAM):   set EMWS1.Neural4_Risk_DD;
MPRINT(EM_DIAGRAM):   _levelorder_=_N_;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=EMWS1.Neural4_Risk_DD;
MPRINT(EM_DIAGRAM):   by Risk;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data EMWS1.Neural4_Risk_DD;
MPRINT(EM_DIAGRAM):   merge EMWS1.Neural4_Risk_DD _TEMPCLASS(rename=(NMISSPERCENT=TRAINPRIOR
FREQUENCY=COUNT));
MPRINT(EM_DIAGRAM):   by Risk;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=EMWS1.Neural4_Risk_DD
out=EMWS1.Neural4_Risk_DD(drop=_levelorder_);
MPRINT(EM_DIAGRAM):   by _levelorder_;
MPRINT(EM_DIAGRAM):   run;
127901     data WORK.Neural4_EVENT(KEEP=VARIABLE LABEL LEVEL EVENT NUMLEVELS ORDER);
MPRINT(EM_DIAGRAM):    data WORK.Neural4_EVENT(KEEP=VARIABLE LABEL LEVEL EVENT NUMLEVELS
ORDER);
127902     length ORDER $20;
MPRINT(EM_DIAGRAM):   length ORDER $20;
127903     label VARIABLE = "%sysfunc(sasmsg(sashelp.dmine, rpt_target_vlabel,  NOQUOTE))"
127903   ! EVENT = "%sysfunc(sasmsg(sashelp.dmine, assmt_event_vlabel, NOQUOTE))" NUMLEVELS =
127903   ! "%sysfunc(sasmsg(sashelp.dmine, rpt_numcat_vlabel, NOQUOTE))" LEVEL =
127904        "%sysfunc(sasmsg(sashelp.dmine, meta_level_vlabel, NOQUOTE))" ORDER =
127904   ! "%sysfunc(sasmsg(sashelp.dmine, meta_order_vlabel, NOQUOTE))" LABEL =
127904   ! "%sysfunc(sasmsg(sashelp.dmine, meta_label_vlabel, NOQUOTE))";
MPRINT(EM_DIAGRAM):   label VARIABLE = "Target" EVENT = "Event" NUMLEVELS = "Number of Levels"
LEVEL = "Measurement Level" ORDER = "Order" LABEL = "Label";
127905     set EMWS1.NEURAL4_RISK_DM( where=(_TYPE_="TARGET"));
MPRINT(EM_DIAGRAM):   set EMWS1.NEURAL4_RISK_DM( where=(_TYPE_="TARGET"));
127906     NumLevels=2;
MPRINT(EM_DIAGRAM):   NumLevels=2;
127907     select(upcase(ORDER));
MPRINT(EM_DIAGRAM):   select(upcase(ORDER));
127908     when('DESC') ORDER = 'Descending';
MPRINT(EM_DIAGRAM):   when('DESC') ORDER = 'Descending';
127909     when('ASC') ORDER = 'Ascending';
MPRINT(EM_DIAGRAM):   when('ASC') ORDER = 'Ascending';
127910     when('FMTDESC') ORDER = 'Formatted Descending';
MPRINT(EM_DIAGRAM):   when('FMTDESC') ORDER = 'Formatted Descending';
127911     when('FMTASC') ORDER = 'Formatted Ascending';
MPRINT(EM_DIAGRAM):   when('FMTASC') ORDER = 'Formatted Ascending';
127912     otherwise ORDER = 'Descending';
MPRINT(EM_DIAGRAM):   otherwise ORDER = 'Descending';
127913     end;
MPRINT(EM_DIAGRAM):   end;
127914     output;
MPRINT(EM_DIAGRAM):   output;
127915     run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 1 observations read from the data set EMWS1.NEURAL4_RISK_DM.
      WHERE _TYPE_='TARGET';
NOTE: The data set WORK.NEURAL4_EVENT has 1 observations and 6 variables.
NOTE: DATA statement used (Total process time):
      real time           0.02 seconds
      cpu time            0.00 seconds
 
 
127916     title9 ' ';
MPRINT(EM_DIAGRAM):   title9 ' ';
127917     proc print data=WORK.Neural4_EVENT noobs label;
MPRINT(EM_DIAGRAM):   proc print data=WORK.Neural4_EVENT noobs label;
127918     var VARIABLE EVENT LEVEL NUMLEVELS ORDER LABEL;
MPRINT(EM_DIAGRAM):   var VARIABLE EVENT LEVEL NUMLEVELS ORDER LABEL;
127919     title9 ' ';
MPRINT(EM_DIAGRAM):   title9 ' ';
127920     title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_modelEvent_title  , NOQUOTE))";
MPRINT(EM_DIAGRAM):   title10 "Model Events";
MPRINT(EM_DIAGRAM):   run;
127921     run;
 
NOTE: There were 1 observations read from the data set WORK.NEURAL4_EVENT.
NOTE: The PROCEDURE PRINT printed page 93.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
127922     title10;
MPRINT(EM_DIAGRAM):   title10;
"No decisions defined for target "Risk"."
127923     proc print data = EMWS1.Neural4_Risk_DM noobs label;
MPRINT(EM_DIAGRAM):    proc print data = EMWS1.Neural4_Risk_DM noobs label;
127924     var _type_ variable label;
MPRINT(EM_DIAGRAM):   var _type_ variable label;
127925     where _type_ ^in('MATRIX', 'DECISION', 'TRAINPRIOR', 'DATAPRIOR', 'DECPRIOR');
MPRINT(EM_DIAGRAM):   where _type_ ^in('MATRIX', 'DECISION', 'TRAINPRIOR', 'DATAPRIOR',
'DECPRIOR');
127926     label _TYPE_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_type_vlabel,     NOQUOTE))"
127926   ! VARIABLE = "%sysfunc(sasmsg(sashelp.dmine, rpt_variable_vlabel, NOQUOTE))" LABEL =
127926   ! "%sysfunc(sasmsg(sashelp.dmine, meta_label_vlabel, NOQUOTE))";
MPRINT(EM_DIAGRAM):   label _TYPE_ = "Type" VARIABLE = "Variable" LABEL = "Label";
127927     title9 ' ';
MPRINT(EM_DIAGRAM):   title9 ' ';
127928     title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_predDecVars_title  , NOQUOTE))";
MPRINT(EM_DIAGRAM):   title10 "Predicted and decision variables";
MPRINT(EM_DIAGRAM):   run;
127929     run;
 
NOTE: There were 7 observations read from the data set EMWS1.NEURAL4_RISK_DM.
      WHERE _type_ not in ('DATAPRIOR', 'DECISION', 'DECPRIOR', 'MATRIX', 'TRAINPRIOR');
NOTE: The PROCEDURE PRINT printed page 94.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
127930     title10;
MPRINT(EM_DIAGRAM):   title10;
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Neural4: Preparing metadata for training;
MPRINT(EM_DIAGRAM):   ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   data WORK.M1XU2VXH;
MPRINT(EM_DIAGRAM):   set WORK.M1XU2VXH;
MPRINT(EM_DIAGRAM):   where(use = 'Y' or (role = 'INPUT' and use = 'D'));
MPRINT(EM_DIAGRAM):   if (role = 'REJECTED') then role = 'INPUT';
MPRINT(EM_DIAGRAM):   run;
127940     data WORK.M1XU2VXH;
MPRINT(EM_DIAGRAM):    data WORK.M1XU2VXH;
127941     set WORK.M1XU2VXH end=eof;
MPRINT(EM_DIAGRAM):   set WORK.M1XU2VXH end=eof;
127942     output;
MPRINT(EM_DIAGRAM):   output;
127943     if eof then do;
MPRINT(EM_DIAGRAM):   if eof then do;
127944     NAME="";
MPRINT(EM_DIAGRAM):   NAME="";
127945     ROLE="COST";
MPRINT(EM_DIAGRAM):   ROLE="COST";
127946     LEVEL="INTERVAL";
MPRINT(EM_DIAGRAM):   LEVEL="INTERVAL";
127947     TYPE="N";
MPRINT(EM_DIAGRAM):   TYPE="N";
127948     output;
MPRINT(EM_DIAGRAM):   output;
127949     end;
MPRINT(EM_DIAGRAM):   end;
127950     run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 28 observations read from the data set WORK.M1XU2VXH.
NOTE: The data set WORK.M1XU2VXH has 29 observations and 29 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
NOTE: There were 2 observations read from the data set EMWS1.NEURAL4_RISK_DD.
NOTE: The data set WORK.RISK has 2 observations and 7 variables.
NOTE: There were 2 observations read from the data set EMWS1.NEURAL4_RISK_DD.
NOTE: The data set WORK.RISK has 2 observations and 7 variables.
127951     *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
127952     * Neural4: Create decision matrix;
MPRINT(EM_DIAGRAM):   * Neural4: Create decision matrix;
127953     *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
127954     data WORK.Risk;
MPRINT(EM_DIAGRAM):   data WORK.Risk;
127955       length   Risk                             $  32
127956                COUNT                                8
127957                DATAPRIOR                            8
127958                TRAINPRIOR                           8
127959                DECPRIOR                             8
127960                DECISION1                            8
127961                DECISION2                            8
127962                ;
MPRINT(EM_DIAGRAM):   length Risk $ 32 COUNT 8 DATAPRIOR 8 TRAINPRIOR 8 DECPRIOR 8 DECISION1 8
DECISION2 8 ;
127963
127964       label    COUNT="Level Counts"
127965                DATAPRIOR="Data Proportions"
127966                TRAINPRIOR="Training Proportions"
127967                DECPRIOR="Decision Priors"
127968                DECISION1="1"
127969                DECISION2="0"
127970                ;
MPRINT(EM_DIAGRAM):   label COUNT= "Level Counts" DATAPRIOR= "Data Proportions" TRAINPRIOR=
"Training Proportions" DECPRIOR= "Decision Priors" DECISION1= "1" DECISION2= "0" ;
127971       format   COUNT 10.
127972                ;
MPRINT(EM_DIAGRAM):   format COUNT 10. ;
127973     Risk="1"; COUNT=54; DATAPRIOR=0.55445544554455; TRAINPRIOR=0.54; DECPRIOR=.;
127973   ! DECISION1=1; DECISION2=0;
MPRINT(EM_DIAGRAM):   Risk="1";
MPRINT(EM_DIAGRAM):   COUNT=54;
MPRINT(EM_DIAGRAM):   DATAPRIOR=0.55445544554455;
MPRINT(EM_DIAGRAM):   TRAINPRIOR=0.54;
MPRINT(EM_DIAGRAM):   DECPRIOR=.;
MPRINT(EM_DIAGRAM):   DECISION1=1;
MPRINT(EM_DIAGRAM):   DECISION2=0;
127974     output;
MPRINT(EM_DIAGRAM):   output;
127975     Risk="0"; COUNT=46; DATAPRIOR=0.44554455445544; TRAINPRIOR=0.46; DECPRIOR=.;
127975   ! DECISION1=0; DECISION2=1;
MPRINT(EM_DIAGRAM):   Risk="0";
MPRINT(EM_DIAGRAM):   COUNT=46;
MPRINT(EM_DIAGRAM):   DATAPRIOR=0.44554455445544;
MPRINT(EM_DIAGRAM):   TRAINPRIOR=0.46;
MPRINT(EM_DIAGRAM):   DECPRIOR=.;
MPRINT(EM_DIAGRAM):   DECISION1=0;
MPRINT(EM_DIAGRAM):   DECISION2=1;
127976     output;
MPRINT(EM_DIAGRAM):   output;
127977     ;
MPRINT(EM_DIAGRAM):   ;
127978     run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: The data set WORK.RISK has 2 observations and 7 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
127979     proc datasets lib=work nolist;
MPRINT(EM_DIAGRAM):   proc datasets lib=work nolist;
127980     modify Risk(type=PROFIT label=Risk);
MPRINT(EM_DIAGRAM):   modify Risk(type=PROFIT label= Risk);
MPRINT(EM_DIAGRAM):   label DECISION1= '1';
MPRINT(EM_DIAGRAM):   label DECISION2= '0';
MPRINT(EM_DIAGRAM):   run;
127981     label DECISION1= '1';
127982     label DECISION2= '0';
127983     run;
 
NOTE: MODIFY was successful for WORK.RISK.DATA.
127984     quit;
MPRINT(EM_DIAGRAM):   quit;
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.02 seconds
      cpu time            0.01 seconds
 
 
127985     data EM_Neural4;
MPRINT(EM_DIAGRAM):   data EM_Neural4;
127986     set EMWS1.Repl2_TRAIN(keep=
127987     IMP_num_of_doors LOG_REP_IMP_price LOG_REP_compression_ratio
127988     LOG_REP_engine_size M_bore M_num_of_doors M_price M_stroke REP_IMP_bore
127989     REP_IMP_stroke REP_aspiration REP_body_style REP_city_mpg REP_curb_weight
127990     REP_drive_wheels REP_engine_location REP_fuel_system REP_fuel_type REP_height
127991     REP_highway_mpg REP_horsepower REP_length REP_num_of_cylinders REP_peak_rpm
127992     REP_wheel_base REP_width Risk engine_type );
MPRINT(EM_DIAGRAM):   set EMWS1.Repl2_TRAIN(keep= IMP_num_of_doors LOG_REP_IMP_price
LOG_REP_compression_ratio LOG_REP_engine_size M_bore M_num_of_doors M_price M_stroke
REP_IMP_bore REP_IMP_stroke REP_aspiration REP_body_style REP_city_mpg REP_curb_weight
REP_drive_wheels REP_engine_location REP_fuel_system REP_fuel_type REP_height REP_highway_mpg
REP_horsepower REP_length REP_num_of_cylinders REP_peak_rpm REP_wheel_base REP_width Risk
engine_type );
127993     run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 100 observations read from the data set EMWS1.PART_TRAIN.
NOTE: There were 100 observations read from the data set EMWS1.IMPT_TRAIN.
NOTE: There were 100 observations read from the data set EMWS1.REPL_TRAIN.
NOTE: View EMWS1.REPL2_TRAIN.VIEW used (Total process time):
      real time           0.17 seconds
      cpu time            0.18 seconds
 
NOTE: There were 100 observations read from the data set EMWS1.TRANS_TRAIN.
NOTE: There were 100 observations read from the data set EMWS1.REPL2_TRAIN.
NOTE: The data set WORK.EM_NEURAL4 has 100 observations and 28 variables.
NOTE: DATA statement used (Total process time):
      real time           0.20 seconds
      cpu time            0.20 seconds
 
 
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   * Neural4: DMDBClass Macro ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
127994     *------------------------------------------------------------* ;
127995     * Neural4: DMDBClass Macro ;
127996     *------------------------------------------------------------* ;
127997     %macro DMDBClass;
127998         IMP_num_of_doors(ASC) M_bore(ASC) M_num_of_doors(ASC) M_price(ASC)
127999        M_stroke(ASC) REP_aspiration(ASC) REP_body_style(ASC) REP_drive_wheels(ASC)
128000        REP_engine_location(ASC) REP_fuel_system(ASC) REP_fuel_type(ASC)
128001        REP_num_of_cylinders(ASC) Risk(DESC) engine_type(ASC)
128002     %mend DMDBClass;
128003     *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
128004     * Neural4: DMDBVar Macro ;
MPRINT(EM_DIAGRAM):   * Neural4: DMDBVar Macro ;
128005     *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
128006     %macro DMDBVar;
128007         LOG_REP_IMP_price LOG_REP_compression_ratio LOG_REP_engine_size REP_IMP_bore
128008        REP_IMP_stroke REP_city_mpg REP_curb_weight REP_height REP_highway_mpg
128009        REP_horsepower REP_length REP_peak_rpm REP_wheel_base REP_width
128010     %mend DMDBVar;
128011     *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
128012     * Neural4: Create DMDB;
MPRINT(EM_DIAGRAM):   * Neural4: Create DMDB;
128013     *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
128014     proc dmdb batch data=WORK.EM_Neural4
128015     dmdbcat=WORK.Neural4_DMDB
128016     maxlevel = 513
128017     ;
MPRINT(EM_DIAGRAM):   proc dmdb batch data=WORK.EM_Neural4 dmdbcat=WORK.Neural4_DMDB maxlevel
= 513 ;
MPRINT(EM_DIAGRAM):   class
128018     class %DMDBClass;
MPRINT(DMDBCLASS):   IMP_num_of_doors(ASC) M_bore(ASC) M_num_of_doors(ASC) M_price(ASC)
M_stroke(ASC) REP_aspiration(ASC) REP_body_style(ASC) REP_drive_wheels(ASC)
REP_engine_location(ASC) REP_fuel_system(ASC) REP_fuel_type(ASC) REP_num_of_cylinders(ASC)
Risk(DESC) engine_type(ASC)
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   var
128019     var %DMDBVar;
MPRINT(DMDBVAR):   LOG_REP_IMP_price LOG_REP_compression_ratio LOG_REP_engine_size
REP_IMP_bore REP_IMP_stroke REP_city_mpg REP_curb_weight REP_height REP_highway_mpg
REP_horsepower REP_length REP_peak_rpm REP_wheel_base REP_width
MPRINT(EM_DIAGRAM):  ;
128020     target
128021     Risk
128022     ;
MPRINT(EM_DIAGRAM):   target Risk ;
128023     run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: Records processed = 100   Memory used = 511K.
NOTE: There were 100 observations read from the data set WORK.EM_NEURAL4.
NOTE: PROCEDURE DMDB used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_DIAGRAM):   quit;
MPRINT(EM_DIAGRAM):   *--- end code ---*;
128024     quit;
128025     *--- end code ---*;
 
128026     *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------* ;
128027     * Neural4: Interval Input Variables Macro ;
MPRINT(EM_DIAGRAM):   * Neural4: Interval Input Variables Macro ;
128028     *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
128029     %macro INTINPUTS;
128030         LOG_REP_IMP_price LOG_REP_compression_ratio LOG_REP_engine_size REP_IMP_bore
128031        REP_IMP_stroke REP_city_mpg REP_curb_weight REP_height REP_highway_mpg
128032        REP_horsepower REP_length REP_peak_rpm REP_wheel_base REP_width
128033     %mend INTINPUTS;
128034     *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
128035     * Neural4: Binary Inputs Macro ;
MPRINT(EM_DIAGRAM):   * Neural4: Binary Inputs Macro ;
128036     *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
128037     %macro BININPUTS;
128038         M_bore M_num_of_doors M_price M_stroke
128039     %mend BININPUTS;
128040     *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
128041     * Neural4: Nominal Inputs Macro ;
MPRINT(EM_DIAGRAM):   * Neural4: Nominal Inputs Macro ;
128042     *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
128043     %macro NOMINPUTS;
128044         IMP_num_of_doors REP_aspiration REP_body_style REP_drive_wheels
128045        REP_engine_location REP_fuel_system REP_fuel_type REP_num_of_cylinders
128046        engine_type
128047     %mend NOMINPUTS;
128048     *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
128049     * Neural4: Ordinal Inputs Macro ;
MPRINT(EM_DIAGRAM):   * Neural4: Ordinal Inputs Macro ;
128050     *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
128051     %macro ORDINPUTS;
128052
128053     %mend ORDINPUTS;
128054     *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
128055     * Neural Network Training;
MPRINT(EM_DIAGRAM):   * Neural Network Training;
128056     ;
MPRINT(EM_DIAGRAM):   ;
128057     *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
128058     proc neural data=EM_Neural4 dmdbcat=WORK.Neural4_DMDB
128059     validdata = EMWS1.Repl2_VALIDATE
128060     random=12345
128061     ;
MPRINT(EM_DIAGRAM):   proc neural data=EM_Neural4 dmdbcat=WORK.Neural4_DMDB validdata =
EMWS1.Repl2_VALIDATE random=12345 ;
128062     nloptions
128063     ;
MPRINT(EM_DIAGRAM):   nloptions ;
128064     performance alldetails noutilfile;
MPRINT(EM_DIAGRAM):   performance alldetails noutilfile;
128065     netopts
128066     decay=0;
MPRINT(EM_DIAGRAM):   netopts decay=0;
MPRINT(EM_DIAGRAM):   input
128067     input %INTINPUTS / level=interval id=intvl
MPRINT(INTINPUTS):   LOG_REP_IMP_price LOG_REP_compression_ratio LOG_REP_engine_size
REP_IMP_bore REP_IMP_stroke REP_city_mpg REP_curb_weight REP_height REP_highway_mpg
REP_horsepower REP_length REP_peak_rpm REP_wheel_base REP_width
128068     ;
MPRINT(EM_DIAGRAM):   / level=interval id=intvl ;
MPRINT(EM_DIAGRAM):   input
128069     input %BININPUTS / level=nominal id=bin
MPRINT(BININPUTS):   M_bore M_num_of_doors M_price M_stroke
128070     ;
MPRINT(EM_DIAGRAM):   / level=nominal id=bin ;
MPRINT(EM_DIAGRAM):   input
128071     input %NOMINPUTS / level=nominal id=nom
MPRINT(NOMINPUTS):   IMP_num_of_doors REP_aspiration REP_body_style REP_drive_wheels
REP_engine_location REP_fuel_system REP_fuel_type REP_num_of_cylinders engine_type
128072     ;
MPRINT(EM_DIAGRAM):   / level=nominal id=nom ;
128073     target Risk / level=NOMINAL id=Risk
128074     bias
128075     ;
MPRINT(EM_DIAGRAM):   target Risk / level=NOMINAL id=Risk bias ;
128076     arch MLP
128077     Hidden=4
128078     ;
MPRINT(EM_DIAGRAM):   arch MLP Hidden=4 ;
128079     save network=EMWS1.Neural4_NETWORK.dm_neural;
MPRINT(EM_DIAGRAM):   save network=EMWS1.Neural4_NETWORK.dm_neural;
NOTE: Entry EMWS1.NEURAL4_NETWORK.DM_NEURAL has been opened.
NOTE: Entry EMWS1.NEURAL4_NETWORK.DM_NEURAL has been closed.
128080     train Maxiter=50
128081     maxtime=300
128082     Outest=EMWS1.Neural4_outest estiter=1
128083     Outfit=EMWS1.Neural4_OUTFIT
128084     ;
MPRINT(EM_DIAGRAM):   train Maxiter=50 maxtime=300 Outest=EMWS1.Neural4_outest estiter=1
Outfit=EMWS1.Neural4_OUTFIT ;
NOTE:  Synchronizing the objectives and the Solution.
NOTE: Convergence criterion (ABSGCONV=0.00001) satisfied.
NOTE: The data set EMWS1.NEURAL4_OUTEST has 34 observations and 160 variables.
NOTE: The data set EMWS1.NEURAL4_OUTFIT has 66 observations and 36 variables.
128085     run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: The data set WORK.EM_NEURAL4 has 100 observations and 28 variables.
NOTE: The data set EMWS1.REPL2_VALIDATE has . observations and 60 variables.
NOTE: There were 100 observations read from the data set EMWS1.PART_VALIDATE.
NOTE: There were 100 observations read from the data set EMWS1.IMPT_VALIDATE.
NOTE: There were 100 observations read from the data set EMWS1.REPL_VALIDATE.
NOTE: View EMWS1.REPL2_VALIDATE.VIEW used (Total process time):
      real time           0.53 seconds
      cpu time            0.31 seconds
 
NOTE: There were 100 observations read from the data set EMWS1.TRANS_VALIDATE.
NOTE: Closing the Neural Application.
NOTE: The PROCEDURE NEURAL printed pages 95-97.
NOTE: PROCEDURE NEURAL used (Total process time):
      real time           0.55 seconds
      cpu time            0.35 seconds
 
 
MPRINT(EM_DIAGRAM):   quit;
128086     quit;
 
128087     proc sort data=EMWS1.Neural4_OUTFIT(where=(_iter_ ne . and _NAME_="OVERALL"))
128087   ! out=fit_Neural4;
MPRINT(EM_DIAGRAM):    proc sort data=EMWS1.Neural4_OUTFIT(where=(_iter_ ne . and
_NAME_="OVERALL")) out=fit_Neural4;
128088     by _VAVERR_;
MPRINT(EM_DIAGRAM):   by _VAVERR_;
128089     run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 33 observations read from the data set EMWS1.NEURAL4_OUTFIT.
      WHERE (_iter_ not = .) and (_NAME_='OVERALL');
NOTE: The data set WORK.FIT_NEURAL4 has 33 observations and 36 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.02 seconds
      cpu time            0.00 seconds
 
 
128090     %GLOBAL ITER;
128091     data _null_;
MPRINT(EM_DIAGRAM):   data _null_;
128092     set fit_Neural4(obs=1);
MPRINT(EM_DIAGRAM):   set fit_Neural4(obs=1);
128093     call symput('ITER',put(_ITER_, 6.));
MPRINT(EM_DIAGRAM):   call symput('ITER',put(_ITER_, 6.));
128094     run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 1 observations read from the data set WORK.FIT_NEURAL4.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
128095     data EMWS1.Neural4_INITIAL;
MPRINT(EM_DIAGRAM):   data EMWS1.Neural4_INITIAL;
128096     set EMWS1.Neural4_outest(where=(_ITER_ eq &ITER and _OBJ_ ne .));
MPRINT(EM_DIAGRAM):   set EMWS1.Neural4_outest(where=(_ITER_ eq 8 and _OBJ_ ne .));
128097     run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 1 observations read from the data set EMWS1.NEURAL4_OUTEST.
      WHERE (_ITER_=8) and (_OBJ_ not = .);
NOTE: The data set EMWS1.NEURAL4_INITIAL has 1 observations and 160 variables.
NOTE: DATA statement used (Total process time):
      real time           0.09 seconds
      cpu time            0.04 seconds
 
 
128098     *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
128099     * Neural Network Model Selection;
MPRINT(EM_DIAGRAM):   * Neural Network Model Selection;
128100     ;
MPRINT(EM_DIAGRAM):   ;
128101     *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
128102     proc neural data=EM_Neural4 dmdbcat=WORK.Neural4_DMDB
128103     validdata = EMWS1.Repl2_VALIDATE
128104     network = EMWS1.Neural4_NETWORK.dm_neural
128105     random=12345
128106     ;
MPRINT(EM_DIAGRAM):   proc neural data=EM_Neural4 dmdbcat=WORK.Neural4_DMDB validdata =
EMWS1.Repl2_VALIDATE network = EMWS1.Neural4_NETWORK.dm_neural random=12345 ;
NOTE: Entry EMWS1.NEURAL4_NETWORK.DM_NEURAL has been opened.
NOTE: Entry EMWS1.NEURAL4_NETWORK.DM_NEURAL has been closed.
128107     nloptions noprint;
MPRINT(EM_DIAGRAM):   nloptions noprint;
128108     performance alldetails noutilfile;
MPRINT(EM_DIAGRAM):   performance alldetails noutilfile;
128109     initial inest=EMWS1.Neural4_INITIAL;
MPRINT(EM_DIAGRAM):   initial inest=EMWS1.Neural4_INITIAL;
NOTE: The data set EMWS1.NEURAL4_INITIAL has 1 observations and 160 variables.
128110     train tech=NONE;
MPRINT(EM_DIAGRAM):   train tech=NONE;
NOTE: No optimization performed.
128111     code file="H:\746\Decision Tree test\Workspaces\EMWS1\Neural4\SCORECODE.sas"
128112     group=Neural4
128113     ;
MPRINT(EM_DIAGRAM):   code file="H:\746\Decision Tree
test\Workspaces\EMWS1\Neural4\SCORECODE.sas" group=Neural4 ;
NOTE: External file H:\746\Decision Tree test\Workspaces\EMWS1\Neural4\SCORECODE.sas opened.
128114     ;
MPRINT(EM_DIAGRAM):   ;
128115     code file="H:\746\Decision Tree test\Workspaces\EMWS1\Neural4\RESIDUALSCORECODE.sas"
128116     group=Neural4
128117     residual
128118     ;
MPRINT(EM_DIAGRAM):   code file="H:\746\Decision Tree
test\Workspaces\EMWS1\Neural4\RESIDUALSCORECODE.sas" group=Neural4 residual ;
NOTE: External file H:\746\Decision Tree test\Workspaces\EMWS1\Neural4\RESIDUALSCORECODE.sas
      opened.
128119     ;
MPRINT(EM_DIAGRAM):   ;
128120     score data=EMWS1.Repl2_TRAIN out=_NULL_
NOTE: View EMWS1.REPL2_TRAIN.VIEW used (Total process time):
      real time           0.27 seconds
      cpu time            0.17 seconds
 
128121     outfit=WORK.FIT1
128122     role=TRAIN
128123     outkey=EMWS1.Neural4_OUTKEY;
MPRINT(EM_DIAGRAM):   score data=EMWS1.Repl2_TRAIN out=_NULL_ outfit=WORK.FIT1 role=TRAIN
outkey=EMWS1.Neural4_OUTKEY;
NOTE: The data set EMWS1.NEURAL4_OUTKEY has 50 observations and 8 variables.
NOTE: The data set EMWS1.REPL2_TRAIN has . observations and 60 variables.
NOTE: There were 100 observations read from the data set EMWS1.PART_TRAIN.
NOTE: There were 100 observations read from the data set EMWS1.IMPT_TRAIN.
NOTE: There were 100 observations read from the data set EMWS1.REPL_TRAIN.
NOTE: There were 100 observations read from the data set EMWS1.TRANS_TRAIN.
NOTE: The data set WORK.FIT1 has 2 observations and 23 variables.
128124     score data=EMWS1.Repl2_VALIDATE out=_NULL_
NOTE: View EMWS1.REPL2_VALIDATE.VIEW used (Total process time):
      real time           0.25 seconds
      cpu time            0.17 seconds
 
128125     outfit=WORK.FIT2
128126     role=VALID
128127     outkey=EMWS1.Neural4_OUTKEY;
MPRINT(EM_DIAGRAM):   score data=EMWS1.Repl2_VALIDATE out=_NULL_ outfit=WORK.FIT2 role=VALID
outkey=EMWS1.Neural4_OUTKEY;
NOTE: The data set EMWS1.NEURAL4_OUTKEY has 50 observations and 8 variables.
NOTE: The data set EMWS1.REPL2_VALIDATE has . observations and 60 variables.
NOTE: There were 100 observations read from the data set EMWS1.PART_VALIDATE.
NOTE: There were 100 observations read from the data set EMWS1.IMPT_VALIDATE.
NOTE: There were 100 observations read from the data set EMWS1.REPL_VALIDATE.
NOTE: There were 100 observations read from the data set EMWS1.TRANS_VALIDATE.
NOTE: The data set WORK.FIT2 has 2 observations and 15 variables.
128128     run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: The data set WORK.EM_NEURAL4 has 100 observations and 28 variables.
NOTE: The data set EMWS1.REPL2_VALIDATE has . observations and 60 variables.
NOTE: There were 100 observations read from the data set EMWS1.PART_VALIDATE.
NOTE: There were 100 observations read from the data set EMWS1.IMPT_VALIDATE.
NOTE: There were 100 observations read from the data set EMWS1.REPL_VALIDATE.
NOTE: View EMWS1.REPL2_VALIDATE.VIEW used (Total process time):
      real time           1.09 seconds
      cpu time            0.62 seconds
 
NOTE: There were 100 observations read from the data set EMWS1.TRANS_VALIDATE.
NOTE: Closing the Neural Application.
NOTE: PROCEDURE NEURAL used (Total process time):
      real time           1.11 seconds
      cpu time            0.62 seconds
 
 
MPRINT(EM_DIAGRAM):   quit;
128129     quit;
128130     data EMWS1.Neural4_OUTFIT;
MPRINT(EM_DIAGRAM):   data EMWS1.Neural4_OUTFIT;
128131     merge WORK.FIT1 WORK.FIT2;
MPRINT(EM_DIAGRAM):   merge WORK.FIT1 WORK.FIT2;
128132     run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 2 observations read from the data set WORK.FIT1.
NOTE: There were 2 observations read from the data set WORK.FIT2.
NOTE: The data set EMWS1.NEURAL4_OUTFIT has 2 observations and 36 variables.
NOTE: DATA statement used (Total process time):
      real time           0.05 seconds
      cpu time            0.00 seconds
 
 
128133     data EMWS1.Neural4_EMESTIMATE;
MPRINT(EM_DIAGRAM):   data EMWS1.Neural4_EMESTIMATE;
128134     set EMWS1.Neural4_outest;
MPRINT(EM_DIAGRAM):   set EMWS1.Neural4_outest;
128135     if _type_ ^in('HESSIAN' 'GRAD');
MPRINT(EM_DIAGRAM):   if _type_ ^in('HESSIAN' 'GRAD');
128136     run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 34 observations read from the data set EMWS1.NEURAL4_OUTEST.
NOTE: The data set EMWS1.NEURAL4_EMESTIMATE has 33 observations and 160 variables.
NOTE: DATA statement used (Total process time):
      real time           0.05 seconds
      cpu time            0.01 seconds
 
 
128137     proc datasets lib=work nolist;
MPRINT(EM_DIAGRAM):   proc datasets lib=work nolist;
128138     delete EM_Neural4;
MPRINT(EM_DIAGRAM):   delete EM_Neural4;
128139     run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: Deleting WORK.EM_NEURAL4 (memtype=DATA).
128140     quit;
MPRINT(EM_DIAGRAM):   quit;
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.14 seconds
      cpu time            0.03 seconds
 
 
128141     data EMWS1.Neural4_PLOTDS(where=(_iter_ ne . and _NAME_="OVERALL"));
MPRINT(EM_DIAGRAM):    data EMWS1.Neural4_PLOTDS(where=(_iter_ ne . and _NAME_="OVERALL"));
128142     set fit_Neural4;
MPRINT(EM_DIAGRAM):   set fit_Neural4;
128143     attrib _ITER_ label="%sysfunc(sasmsg(sashelp.dmine, rpt_trainiterations_vlabel  ,
128143   ! NOQUOTE))";
MPRINT(EM_DIAGRAM):   attrib _ITER_ label="Training Iterations";
128144     attrib _NAME_ label="%sysfunc(sasmsg(sashelp.dmine, rpt_varsel_label_name  ,
128144   ! NOQUOTE))";
MPRINT(EM_DIAGRAM):   attrib _NAME_ label="Name";
128145     run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 33 observations read from the data set WORK.FIT_NEURAL4.
NOTE: The data set EMWS1.NEURAL4_PLOTDS has 33 observations and 36 variables.
NOTE: DATA statement used (Total process time):
      real time           0.05 seconds
      cpu time            0.00 seconds
 
 
128146     proc sort data=EMWS1.Neural4_PLOTDS;
MPRINT(EM_DIAGRAM):   proc sort data=EMWS1.Neural4_PLOTDS;
128147     by _ITER_;
MPRINT(EM_DIAGRAM):   by _ITER_;
128148     run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 33 observations read from the data set EMWS1.NEURAL4_PLOTDS.
NOTE: The data set EMWS1.NEURAL4_PLOTDS has 33 observations and 36 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.09 seconds
      cpu time            0.01 seconds
 
 
128149     data tempweight (drop= _tech_ _decay_ _seed_ _nobj_ _obj_ _objerr_ _averr_ _p_num_
128149   ! where=(_type_ eq "PARMS" and _iter_ eq 8) );
MPRINT(EM_DIAGRAM):    data tempweight (drop= _tech_ _decay_ _seed_ _nobj_ _obj_ _objerr_
_averr_ _p_num_ where=(_type_ eq "PARMS" and _iter_ eq 8) );
128150     set EMWS1.Neural4_EMESTIMATE;
MPRINT(EM_DIAGRAM):   set EMWS1.Neural4_EMESTIMATE;
128151     run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 33 observations read from the data set EMWS1.NEURAL4_EMESTIMATE.
NOTE: The data set WORK.TEMPWEIGHT has 1 observations and 152 variables.
NOTE: DATA statement used (Total process time):
      real time           0.02 seconds
      cpu time            0.00 seconds
 
 
128152     proc sort;
MPRINT(EM_DIAGRAM):   proc sort;
128153     by _name_;
MPRINT(EM_DIAGRAM):   by _name_;
128154     run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 1 observations read from the data set WORK.TEMPWEIGHT.
NOTE: The data set WORK.TEMPWEIGHT has 1 observations and 152 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.03 seconds
      cpu time            0.01 seconds
 
 
128155     proc transpose data=tempweight out=EMWS1.Neural4_WEIGHTDS;
MPRINT(EM_DIAGRAM):   proc transpose data=tempweight out=EMWS1.Neural4_WEIGHTDS;
128156     by _name_;
MPRINT(EM_DIAGRAM):   by _name_;
128157     run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 1 observations read from the data set WORK.TEMPWEIGHT.
NOTE: The data set EMWS1.NEURAL4_WEIGHTDS has 150 observations and 3 variables.
NOTE: PROCEDURE TRANSPOSE used (Total process time):
      real time           0.08 seconds
      cpu time            0.00 seconds
 
 
128158     data EMWS1.Neural4_WEIGHTDS;
MPRINT(EM_DIAGRAM):   data EMWS1.Neural4_WEIGHTDS;
128159     set EMWS1.Neural4_WEIGHTDS;
MPRINT(EM_DIAGRAM):   set EMWS1.Neural4_WEIGHTDS;
128160     FROM = trim(left(scan(_LABEL_, 1, '->')));
MPRINT(EM_DIAGRAM):   FROM = trim(left(scan(_LABEL_, 1, '->')));
128161     TO = trim(left(scan(_LABEL_, 2, '>')));
MPRINT(EM_DIAGRAM):   TO = trim(left(scan(_LABEL_, 2, '>')));
128162     WEIGHT = COL1;
MPRINT(EM_DIAGRAM):   WEIGHT = COL1;
128163     if (TO eq '') or (FROM eq '') then delete;
MPRINT(EM_DIAGRAM):   if (TO eq '') or (FROM eq '') then delete;
128164     label _LABEL_ ="%sysfunc(sasmsg(sashelp.dmine, meta_label_vlabel  , NOQUOTE))" FROM
128164   ! = "%sysfunc(sasmsg(sashelp.dmine, rpt_from_vlabel  , NOQUOTE))" TO =
128164   ! "%sysfunc(sasmsg(sashelp.dmine, rpt_into_vlabel  , NOQUOTE))" WEIGHT =
128165        "%sysfunc(sasmsg(sashelp.dmine, rpt_weight_vlabel  , NOQUOTE))";
MPRINT(EM_DIAGRAM):   label _LABEL_ = "Label" FROM = "From" TO = "Into" WEIGHT = "Weight";
128166     keep FROM TO WEIGHT _LABEL_;
MPRINT(EM_DIAGRAM):   keep FROM TO WEIGHT _LABEL_;
128167     run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 150 observations read from the data set EMWS1.NEURAL4_WEIGHTDS.
NOTE: The data set EMWS1.NEURAL4_WEIGHTDS has 145 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.15 seconds
      cpu time            0.00 seconds
 
 
128168     proc sort data=EMWS1.Neural4_WEIGHTDS nodupkey;
MPRINT(EM_DIAGRAM):   proc sort data=EMWS1.Neural4_WEIGHTDS nodupkey;
128169     by _LABEL_;
MPRINT(EM_DIAGRAM):   by _LABEL_;
128170     run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 145 observations read from the data set EMWS1.NEURAL4_WEIGHTDS.
NOTE: 0 observations with duplicate key values were deleted.
NOTE: The data set EMWS1.NEURAL4_WEIGHTDS has 145 observations and 4 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.24 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_DIAGRAM):    proc printto;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   call symput('NLDATE', strip(put(date(), NLDATE.)));
MPRINT(EM_DIAGRAM):   call symput('NLTIME', strip(put(datetime(), NLTIME.)));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   nldate= sasmsg("sashelp.dmine", "log_date_note", 'N', "April 16, 2021" );
MPRINT(EM_DIAGRAM):   nltime= sasmsg("sashelp.dmine", "log_time_note", 'N', "11:32:00 o'clock"
);
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "* Score Log";
MPRINT(EM_DIAGRAM):   put nldate;
MPRINT(EM_DIAGRAM):   put nltime;
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   run;
*------------------------------------------------------------*
* Score Log
Date:                April 16, 2021
Time:                11:32:00 o'clock
*------------------------------------------------------------*
MPRINT(EM_DIAGRAM):    filename O389T7B4 "H:\746\Decision Tree
test\Workspaces\EMWS1\Neural4\EMSCORE.out" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):   proc printto print=O389T7B4 new;
MPRINT(EM_DIAGRAM):   run;
128272     data work.outkey;
MPRINT(EM_DIAGRAM):    data work.outkey;
128273     set EMWS1.Neural4_OUTKEY;
MPRINT(EM_DIAGRAM):   set EMWS1.Neural4_OUTKEY;
128274     if upcase(ROLE) = 'HIDDEN';
MPRINT(EM_DIAGRAM):   if upcase(ROLE) = 'HIDDEN';
128275     run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 50 observations read from the data set EMWS1.NEURAL4_OUTKEY.
NOTE: The data set WORK.OUTKEY has 4 observations and 8 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
128276     filename emflow "H:\746\Decision Tree test\Workspaces\EMWS1\Neural4\EMFLOWSCORE.sas"
128276   ! ;
MPRINT(EM_DIAGRAM):    filename emflow "H:\746\Decision Tree
test\Workspaces\EMWS1\Neural4\EMFLOWSCORE.sas";
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Neural4: Scoring DATA data;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
128277     *------------------------------------------------------------*;
128278     * Neural4: Scoring DATA data;
128279     *------------------------------------------------------------*;
128280     data EMWS1.Neural4_TRAIN
128281     / view=EMWS1.Neural4_TRAIN
128282     ;
MPRINT(EM_DIAGRAM):   data EMWS1.Neural4_TRAIN / view=EMWS1.Neural4_TRAIN ;
128283     set EMWS1.Repl2_TRAIN
128284     ;
MPRINT(EM_DIAGRAM):   set EMWS1.Repl2_TRAIN ;
128285     %inc emflow;
NOTE: %INCLUDE (level 1) file EMFLOW is file H:\746\Decision Tree
      test\Workspaces\EMWS1\Neural4\EMFLOWSCORE.sas.
128286    +***********************************;
MPRINT(EM_DIAGRAM):   ***********************************;
128287    +*** Begin Scoring Code for Neural;
MPRINT(EM_DIAGRAM):   *** Begin Scoring Code for Neural;
128288    +***********************************;
MPRINT(EM_DIAGRAM):   ***********************************;
128289    +DROP _DM_BAD _EPS _NOCL_ _MAX_ _MAXP_ _SUM_ _NTRIALS;
MPRINT(EM_DIAGRAM):   DROP _DM_BAD _EPS _NOCL_ _MAX_ _MAXP_ _SUM_ _NTRIALS;
128290    + _DM_BAD = 0;
MPRINT(EM_DIAGRAM):   _DM_BAD = 0;
128291    + _NOCL_ = .;
MPRINT(EM_DIAGRAM):   _NOCL_ = .;
128292    + _MAX_ = .;
MPRINT(EM_DIAGRAM):   _MAX_ = .;
128293    + _MAXP_ = .;
MPRINT(EM_DIAGRAM):   _MAXP_ = .;
128294    + _SUM_ = .;
MPRINT(EM_DIAGRAM):   _SUM_ = .;
128295    + _NTRIALS = .;
MPRINT(EM_DIAGRAM):   _NTRIALS = .;
128296    + _EPS =                1E-10;
MPRINT(EM_DIAGRAM):   _EPS = 1E-10;
128297    +LENGTH _WARN_ $4
128298    +      F_Risk  $ 12
128299    +;
MPRINT(EM_DIAGRAM):   LENGTH _WARN_ $4 F_Risk $ 12 ;
128300    +      label S_LOG_REP_IMP_price = 'Standard: LOG_REP_IMP_price' ;
MPRINT(EM_DIAGRAM):   label S_LOG_REP_IMP_price = 'Standard: LOG_REP_IMP_price' ;
128301    +
128302    +      label S_LOG_REP_compression_ratio =
128303    +'Standard: LOG_REP_compression_ratio' ;
MPRINT(EM_DIAGRAM):   label S_LOG_REP_compression_ratio = 'Standard:
LOG_REP_compression_ratio' ;
128304    +
128305    +      label S_LOG_REP_engine_size = 'Standard: LOG_REP_engine_size' ;
MPRINT(EM_DIAGRAM):   label S_LOG_REP_engine_size = 'Standard: LOG_REP_engine_size' ;
128306    +
128307    +      label S_REP_IMP_bore = 'Standard: REP_IMP_bore' ;
MPRINT(EM_DIAGRAM):   label S_REP_IMP_bore = 'Standard: REP_IMP_bore' ;
128308    +
128309    +      label S_REP_IMP_stroke = 'Standard: REP_IMP_stroke' ;
MPRINT(EM_DIAGRAM):   label S_REP_IMP_stroke = 'Standard: REP_IMP_stroke' ;
128310    +
128311    +      label S_REP_city_mpg = 'Standard: REP_city_mpg' ;
MPRINT(EM_DIAGRAM):   label S_REP_city_mpg = 'Standard: REP_city_mpg' ;
128312    +
128313    +      label S_REP_curb_weight = 'Standard: REP_curb_weight' ;
MPRINT(EM_DIAGRAM):   label S_REP_curb_weight = 'Standard: REP_curb_weight' ;
128314    +
128315    +      label S_REP_height = 'Standard: REP_height' ;
MPRINT(EM_DIAGRAM):   label S_REP_height = 'Standard: REP_height' ;
128316    +
128317    +      label S_REP_highway_mpg = 'Standard: REP_highway_mpg' ;
MPRINT(EM_DIAGRAM):   label S_REP_highway_mpg = 'Standard: REP_highway_mpg' ;
128318    +
128319    +      label S_REP_horsepower = 'Standard: REP_horsepower' ;
MPRINT(EM_DIAGRAM):   label S_REP_horsepower = 'Standard: REP_horsepower' ;
128320    +
128321    +      label S_REP_length = 'Standard: REP_length' ;
MPRINT(EM_DIAGRAM):   label S_REP_length = 'Standard: REP_length' ;
128322    +
128323    +      label S_REP_peak_rpm = 'Standard: REP_peak_rpm' ;
MPRINT(EM_DIAGRAM):   label S_REP_peak_rpm = 'Standard: REP_peak_rpm' ;
128324    +
128325    +      label S_REP_wheel_base = 'Standard: REP_wheel_base' ;
MPRINT(EM_DIAGRAM):   label S_REP_wheel_base = 'Standard: REP_wheel_base' ;
128326    +
128327    +      label S_REP_width = 'Standard: REP_width' ;
MPRINT(EM_DIAGRAM):   label S_REP_width = 'Standard: REP_width' ;
128328    +
128329    +      label M_bore0 = 'Dummy: M_bore=0' ;
MPRINT(EM_DIAGRAM):   label M_bore0 = 'Dummy: M_bore=0' ;
128330    +
128331    +      label M_num_of_doors0 = 'Dummy: M_num_of_doors=0' ;
MPRINT(EM_DIAGRAM):   label M_num_of_doors0 = 'Dummy: M_num_of_doors=0' ;
128332    +
128333    +      label M_price0 = 'Dummy: M_price=0' ;
MPRINT(EM_DIAGRAM):   label M_price0 = 'Dummy: M_price=0' ;
128334    +
128335    +      label M_stroke0 = 'Dummy: M_stroke=0' ;
MPRINT(EM_DIAGRAM):   label M_stroke0 = 'Dummy: M_stroke=0' ;
128336    +
128337    +      label IMP_num_of_doors2 = 'Dummy: IMP_num_of_doors=2' ;
MPRINT(EM_DIAGRAM):   label IMP_num_of_doors2 = 'Dummy: IMP_num_of_doors=2' ;
128338    +
128339    +      label REP_aspirationS = 'Dummy: REP_aspiration=S' ;
MPRINT(EM_DIAGRAM):   label REP_aspirationS = 'Dummy: REP_aspiration=S' ;
128340    +
128341    +      label REP_body_styleC = 'Dummy: REP_body_style=C' ;
MPRINT(EM_DIAGRAM):   label REP_body_styleC = 'Dummy: REP_body_style=C' ;
128342    +
128343    +      label REP_body_styleH = 'Dummy: REP_body_style=H' ;
MPRINT(EM_DIAGRAM):   label REP_body_styleH = 'Dummy: REP_body_style=H' ;
128344    +
128345    +      label REP_body_styleS = 'Dummy: REP_body_style=S' ;
MPRINT(EM_DIAGRAM):   label REP_body_styleS = 'Dummy: REP_body_style=S' ;
128346    +
128347    +      label REP_drive_wheels4 = 'Dummy: REP_drive_wheels=4' ;
MPRINT(EM_DIAGRAM):   label REP_drive_wheels4 = 'Dummy: REP_drive_wheels=4' ;
128348    +
128349    +      label REP_drive_wheelsF = 'Dummy: REP_drive_wheels=F' ;
MPRINT(EM_DIAGRAM):   label REP_drive_wheelsF = 'Dummy: REP_drive_wheels=F' ;
128350    +
128351    +      label REP_engine_locationF = 'Dummy: REP_engine_location=F' ;
MPRINT(EM_DIAGRAM):   label REP_engine_locationF = 'Dummy: REP_engine_location=F' ;
128352    +
128353    +      label REP_fuel_systemnon_spdi = 'Dummy: REP_fuel_system=non-spdi' ;
MPRINT(EM_DIAGRAM):   label REP_fuel_systemnon_spdi = 'Dummy: REP_fuel_system=non-spdi' ;
128354    +
128355    +      label REP_fuel_typeD = 'Dummy: REP_fuel_type=D' ;
MPRINT(EM_DIAGRAM):   label REP_fuel_typeD = 'Dummy: REP_fuel_type=D' ;
128356    +
128357    +      label REP_num_of_cylinders__4 = 'Dummy: REP_num_of_cylinders=<=4' ;
MPRINT(EM_DIAGRAM):   label REP_num_of_cylinders__4 = 'Dummy: REP_num_of_cylinders=<=4' ;
128358    +
128359    +      label engine_typedohc = 'Dummy: engine_type=dohc' ;
MPRINT(EM_DIAGRAM):   label engine_typedohc = 'Dummy: engine_type=dohc' ;
128360    +
128361    +      label engine_typel = 'Dummy: engine_type=l' ;
MPRINT(EM_DIAGRAM):   label engine_typel = 'Dummy: engine_type=l' ;
128362    +
128363    +      label engine_typeohc = 'Dummy: engine_type=ohc' ;
MPRINT(EM_DIAGRAM):   label engine_typeohc = 'Dummy: engine_type=ohc' ;
128364    +
128365    +      label engine_typeohcf = 'Dummy: engine_type=ohcf' ;
MPRINT(EM_DIAGRAM):   label engine_typeohcf = 'Dummy: engine_type=ohcf' ;
128366    +
128367    +      label engine_typeohcv = 'Dummy: engine_type=ohcv' ;
MPRINT(EM_DIAGRAM):   label engine_typeohcv = 'Dummy: engine_type=ohcv' ;
128368    +
128369    +      label H11 = 'Hidden: H1=1' ;
MPRINT(EM_DIAGRAM):   label H11 = 'Hidden: H1=1' ;
128370    +
128371    +      label H12 = 'Hidden: H1=2' ;
MPRINT(EM_DIAGRAM):   label H12 = 'Hidden: H1=2' ;
128372    +
128373    +      label H13 = 'Hidden: H1=3' ;
MPRINT(EM_DIAGRAM):   label H13 = 'Hidden: H1=3' ;
128374    +
128375    +      label H14 = 'Hidden: H1=4' ;
MPRINT(EM_DIAGRAM):   label H14 = 'Hidden: H1=4' ;
128376    +
128377    +      label I_Risk = 'Into: Risk' ;
MPRINT(EM_DIAGRAM):   label I_Risk = 'Into: Risk' ;
128378    +
128379    +      label F_Risk = 'From: Risk' ;
MPRINT(EM_DIAGRAM):   label F_Risk = 'From: Risk' ;
128380    +
128381    +      label U_Risk = 'Unnormalized Into: Risk' ;
MPRINT(EM_DIAGRAM):   label U_Risk = 'Unnormalized Into: Risk' ;
128382    +
128383    +      label P_Risk1 = 'Predicted: Risk=1' ;
MPRINT(EM_DIAGRAM):   label P_Risk1 = 'Predicted: Risk=1' ;
128384    +
128385    +      label R_Risk1 = 'Residual: Risk=1' ;
MPRINT(EM_DIAGRAM):   label R_Risk1 = 'Residual: Risk=1' ;
128386    +
128387    +      label P_Risk0 = 'Predicted: Risk=0' ;
MPRINT(EM_DIAGRAM):   label P_Risk0 = 'Predicted: Risk=0' ;
128388    +
128389    +      label R_Risk0 = 'Residual: Risk=0' ;
MPRINT(EM_DIAGRAM):   label R_Risk0 = 'Residual: Risk=0' ;
128390    +
128391    +      label  _WARN_ = "Warnings";
MPRINT(EM_DIAGRAM):   label _WARN_ = "Warnings";
128392    +
128393    +*** Generate dummy variables for M_bore ;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for M_bore ;
128394    +drop M_bore0 ;
MPRINT(EM_DIAGRAM):   drop M_bore0 ;
128395    +if missing( M_bore ) then do;
MPRINT(EM_DIAGRAM):   if missing( M_bore ) then do;
128396    +   M_bore0 = .;
MPRINT(EM_DIAGRAM):   M_bore0 = .;
128397    +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
128398    +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
128399    +end;
MPRINT(EM_DIAGRAM):   end;
128400    +else do;
MPRINT(EM_DIAGRAM):   else do;
128401    +   length _dm12 $ 12; drop _dm12 ;
MPRINT(EM_DIAGRAM):   length _dm12 $ 12;
MPRINT(EM_DIAGRAM):   drop _dm12 ;
128402    +   _dm12 = put( M_bore , BEST12. );
MPRINT(EM_DIAGRAM):   _dm12 = put( M_bore , BEST12. );
128403    +   %DMNORMIP( _dm12 )
MPRINT(DMNORMIP):   call dmnorm(_dm12,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
128404    +   if _dm12 = '0'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 = '0' then do;
128405    +      M_bore0 = 1;
MPRINT(EM_DIAGRAM):   M_bore0 = 1;
128406    +   end;
MPRINT(EM_DIAGRAM):   end;
128407    +   else if _dm12 = '1'  then do;
MPRINT(EM_DIAGRAM):   else if _dm12 = '1' then do;
128408    +      M_bore0 = -1;
MPRINT(EM_DIAGRAM):   M_bore0 = -1;
128409    +   end;
MPRINT(EM_DIAGRAM):   end;
128410    +   else do;
MPRINT(EM_DIAGRAM):   else do;
128411    +      M_bore0 = .;
MPRINT(EM_DIAGRAM):   M_bore0 = .;
128412    +      substr(_warn_,2,1) = 'U';
MPRINT(EM_DIAGRAM):   substr(_warn_,2,1) = 'U';
128413    +      _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
128414    +   end;
MPRINT(EM_DIAGRAM):   end;
128415    +end;
MPRINT(EM_DIAGRAM):   end;
128416    +
128417    +*** Generate dummy variables for M_num_of_doors ;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for M_num_of_doors ;
128418    +drop M_num_of_doors0 ;
MPRINT(EM_DIAGRAM):   drop M_num_of_doors0 ;
128419    +if missing( M_num_of_doors ) then do;
MPRINT(EM_DIAGRAM):   if missing( M_num_of_doors ) then do;
128420    +   M_num_of_doors0 = .;
MPRINT(EM_DIAGRAM):   M_num_of_doors0 = .;
128421    +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
128422    +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
128423    +end;
MPRINT(EM_DIAGRAM):   end;
128424    +else do;
MPRINT(EM_DIAGRAM):   else do;
128425    +   length _dm12 $ 12; drop _dm12 ;
MPRINT(EM_DIAGRAM):   length _dm12 $ 12;
MPRINT(EM_DIAGRAM):   drop _dm12 ;
128426    +   _dm12 = put( M_num_of_doors , BEST12. );
MPRINT(EM_DIAGRAM):   _dm12 = put( M_num_of_doors , BEST12. );
128427    +   %DMNORMIP( _dm12 )
MPRINT(DMNORMIP):   call dmnorm(_dm12,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
128428    +   if _dm12 = '0'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 = '0' then do;
128429    +      M_num_of_doors0 = 1;
MPRINT(EM_DIAGRAM):   M_num_of_doors0 = 1;
128430    +   end;
MPRINT(EM_DIAGRAM):   end;
128431    +   else if _dm12 = '1'  then do;
MPRINT(EM_DIAGRAM):   else if _dm12 = '1' then do;
128432    +      M_num_of_doors0 = -1;
MPRINT(EM_DIAGRAM):   M_num_of_doors0 = -1;
128433    +   end;
MPRINT(EM_DIAGRAM):   end;
128434    +   else do;
MPRINT(EM_DIAGRAM):   else do;
128435    +      M_num_of_doors0 = .;
MPRINT(EM_DIAGRAM):   M_num_of_doors0 = .;
128436    +      substr(_warn_,2,1) = 'U';
MPRINT(EM_DIAGRAM):   substr(_warn_,2,1) = 'U';
128437    +      _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
128438    +   end;
MPRINT(EM_DIAGRAM):   end;
128439    +end;
MPRINT(EM_DIAGRAM):   end;
128440    +
128441    +*** Generate dummy variables for M_price ;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for M_price ;
128442    +drop M_price0 ;
MPRINT(EM_DIAGRAM):   drop M_price0 ;
128443    +if missing( M_price ) then do;
MPRINT(EM_DIAGRAM):   if missing( M_price ) then do;
128444    +   M_price0 = .;
MPRINT(EM_DIAGRAM):   M_price0 = .;
128445    +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
128446    +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
128447    +end;
MPRINT(EM_DIAGRAM):   end;
128448    +else do;
MPRINT(EM_DIAGRAM):   else do;
128449    +   length _dm12 $ 12; drop _dm12 ;
MPRINT(EM_DIAGRAM):   length _dm12 $ 12;
MPRINT(EM_DIAGRAM):   drop _dm12 ;
128450    +   _dm12 = put( M_price , BEST12. );
MPRINT(EM_DIAGRAM):   _dm12 = put( M_price , BEST12. );
128451    +   %DMNORMIP( _dm12 )
MPRINT(DMNORMIP):   call dmnorm(_dm12,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
128452    +   if _dm12 = '0'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 = '0' then do;
128453    +      M_price0 = 1;
MPRINT(EM_DIAGRAM):   M_price0 = 1;
128454    +   end;
MPRINT(EM_DIAGRAM):   end;
128455    +   else if _dm12 = '1'  then do;
MPRINT(EM_DIAGRAM):   else if _dm12 = '1' then do;
128456    +      M_price0 = -1;
MPRINT(EM_DIAGRAM):   M_price0 = -1;
128457    +   end;
MPRINT(EM_DIAGRAM):   end;
128458    +   else do;
MPRINT(EM_DIAGRAM):   else do;
128459    +      M_price0 = .;
MPRINT(EM_DIAGRAM):   M_price0 = .;
128460    +      substr(_warn_,2,1) = 'U';
MPRINT(EM_DIAGRAM):   substr(_warn_,2,1) = 'U';
128461    +      _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
128462    +   end;
MPRINT(EM_DIAGRAM):   end;
128463    +end;
MPRINT(EM_DIAGRAM):   end;
128464    +
128465    +*** Generate dummy variables for M_stroke ;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for M_stroke ;
128466    +drop M_stroke0 ;
MPRINT(EM_DIAGRAM):   drop M_stroke0 ;
128467    +if missing( M_stroke ) then do;
MPRINT(EM_DIAGRAM):   if missing( M_stroke ) then do;
128468    +   M_stroke0 = .;
MPRINT(EM_DIAGRAM):   M_stroke0 = .;
128469    +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
128470    +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
128471    +end;
MPRINT(EM_DIAGRAM):   end;
128472    +else do;
MPRINT(EM_DIAGRAM):   else do;
128473    +   length _dm12 $ 12; drop _dm12 ;
MPRINT(EM_DIAGRAM):   length _dm12 $ 12;
MPRINT(EM_DIAGRAM):   drop _dm12 ;
128474    +   _dm12 = put( M_stroke , BEST12. );
MPRINT(EM_DIAGRAM):   _dm12 = put( M_stroke , BEST12. );
128475    +   %DMNORMIP( _dm12 )
MPRINT(DMNORMIP):   call dmnorm(_dm12,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
128476    +   if _dm12 = '0'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 = '0' then do;
128477    +      M_stroke0 = 1;
MPRINT(EM_DIAGRAM):   M_stroke0 = 1;
128478    +   end;
MPRINT(EM_DIAGRAM):   end;
128479    +   else if _dm12 = '1'  then do;
MPRINT(EM_DIAGRAM):   else if _dm12 = '1' then do;
128480    +      M_stroke0 = -1;
MPRINT(EM_DIAGRAM):   M_stroke0 = -1;
128481    +   end;
MPRINT(EM_DIAGRAM):   end;
128482    +   else do;
MPRINT(EM_DIAGRAM):   else do;
128483    +      M_stroke0 = .;
MPRINT(EM_DIAGRAM):   M_stroke0 = .;
128484    +      substr(_warn_,2,1) = 'U';
MPRINT(EM_DIAGRAM):   substr(_warn_,2,1) = 'U';
128485    +      _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
128486    +   end;
MPRINT(EM_DIAGRAM):   end;
128487    +end;
MPRINT(EM_DIAGRAM):   end;
128488    +
128489    +*** Generate dummy variables for IMP_num_of_doors ;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for IMP_num_of_doors ;
128490    +drop IMP_num_of_doors2 ;
MPRINT(EM_DIAGRAM):   drop IMP_num_of_doors2 ;
128491    +if missing( IMP_num_of_doors ) then do;
MPRINT(EM_DIAGRAM):   if missing( IMP_num_of_doors ) then do;
128492    +   IMP_num_of_doors2 = .;
MPRINT(EM_DIAGRAM):   IMP_num_of_doors2 = .;
128493    +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
128494    +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
128495    +end;
MPRINT(EM_DIAGRAM):   end;
128496    +else do;
MPRINT(EM_DIAGRAM):   else do;
128497    +   length _dm12 $ 12; drop _dm12 ;
MPRINT(EM_DIAGRAM):   length _dm12 $ 12;
MPRINT(EM_DIAGRAM):   drop _dm12 ;
128498    +   _dm12 = put( IMP_num_of_doors , BEST12. );
MPRINT(EM_DIAGRAM):   _dm12 = put( IMP_num_of_doors , BEST12. );
128499    +   %DMNORMIP( _dm12 )
MPRINT(DMNORMIP):   call dmnorm(_dm12,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
128500    +   if _dm12 = '4'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 = '4' then do;
128501    +      IMP_num_of_doors2 = -1;
MPRINT(EM_DIAGRAM):   IMP_num_of_doors2 = -1;
128502    +   end;
MPRINT(EM_DIAGRAM):   end;
128503    +   else if _dm12 = '2'  then do;
MPRINT(EM_DIAGRAM):   else if _dm12 = '2' then do;
128504    +      IMP_num_of_doors2 = 1;
MPRINT(EM_DIAGRAM):   IMP_num_of_doors2 = 1;
128505    +   end;
MPRINT(EM_DIAGRAM):   end;
128506    +   else do;
MPRINT(EM_DIAGRAM):   else do;
128507    +      IMP_num_of_doors2 = .;
MPRINT(EM_DIAGRAM):   IMP_num_of_doors2 = .;
128508    +      substr(_warn_,2,1) = 'U';
MPRINT(EM_DIAGRAM):   substr(_warn_,2,1) = 'U';
128509    +      _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
128510    +   end;
MPRINT(EM_DIAGRAM):   end;
128511    +end;
MPRINT(EM_DIAGRAM):   end;
128512    +
128513    +*** Generate dummy variables for REP_aspiration ;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for REP_aspiration ;
128514    +drop REP_aspirationS ;
MPRINT(EM_DIAGRAM):   drop REP_aspirationS ;
128515    +if missing( REP_aspiration ) then do;
MPRINT(EM_DIAGRAM):   if missing( REP_aspiration ) then do;
128516    +   REP_aspirationS = .;
MPRINT(EM_DIAGRAM):   REP_aspirationS = .;
128517    +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
128518    +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
128519    +end;
MPRINT(EM_DIAGRAM):   end;
128520    +else do;
MPRINT(EM_DIAGRAM):   else do;
128521    +   length _dm5 $ 5; drop _dm5 ;
MPRINT(EM_DIAGRAM):   length _dm5 $ 5;
MPRINT(EM_DIAGRAM):   drop _dm5 ;
128522    +   _dm5 = put( REP_aspiration , $5. );
MPRINT(EM_DIAGRAM):   _dm5 = put( REP_aspiration , $5. );
128523    +   %DMNORMIP( _dm5 )
MPRINT(DMNORMIP):   call dmnorm(_dm5,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
128524    +   if _dm5 = 'S'  then do;
MPRINT(EM_DIAGRAM):   if _dm5 = 'S' then do;
128525    +      REP_aspirationS = 1;
MPRINT(EM_DIAGRAM):   REP_aspirationS = 1;
128526    +   end;
MPRINT(EM_DIAGRAM):   end;
128527    +   else if _dm5 = 'T'  then do;
MPRINT(EM_DIAGRAM):   else if _dm5 = 'T' then do;
128528    +      REP_aspirationS = -1;
MPRINT(EM_DIAGRAM):   REP_aspirationS = -1;
128529    +   end;
MPRINT(EM_DIAGRAM):   end;
128530    +   else do;
MPRINT(EM_DIAGRAM):   else do;
128531    +      REP_aspirationS = .;
MPRINT(EM_DIAGRAM):   REP_aspirationS = .;
128532    +      substr(_warn_,2,1) = 'U';
MPRINT(EM_DIAGRAM):   substr(_warn_,2,1) = 'U';
128533    +      _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
128534    +   end;
MPRINT(EM_DIAGRAM):   end;
128535    +end;
MPRINT(EM_DIAGRAM):   end;
128536    +
128537    +*** Generate dummy variables for REP_body_style ;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for REP_body_style ;
128538    +drop REP_body_styleC REP_body_styleH REP_body_styleS ;
MPRINT(EM_DIAGRAM):   drop REP_body_styleC REP_body_styleH REP_body_styleS ;
128539    +if missing( REP_body_style ) then do;
MPRINT(EM_DIAGRAM):   if missing( REP_body_style ) then do;
128540    +   REP_body_styleC = .;
MPRINT(EM_DIAGRAM):   REP_body_styleC = .;
128541    +   REP_body_styleH = .;
MPRINT(EM_DIAGRAM):   REP_body_styleH = .;
128542    +   REP_body_styleS = .;
MPRINT(EM_DIAGRAM):   REP_body_styleS = .;
128543    +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
128544    +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
128545    +end;
MPRINT(EM_DIAGRAM):   end;
128546    +else do;
MPRINT(EM_DIAGRAM):   else do;
128547    +   length _dm11 $ 11; drop _dm11 ;
MPRINT(EM_DIAGRAM):   length _dm11 $ 11;
MPRINT(EM_DIAGRAM):   drop _dm11 ;
128548    +   %DMNORMCP( REP_body_style , _dm11 )
MPRINT(DMNORMCP):   _dm11=dmnorm(REP_body_style,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMCP):  );
128549    +   if _dm11 = 'S'  then do;
MPRINT(EM_DIAGRAM):   if _dm11 = 'S' then do;
128550    +      REP_body_styleC = 0;
MPRINT(EM_DIAGRAM):   REP_body_styleC = 0;
128551    +      REP_body_styleH = 0;
MPRINT(EM_DIAGRAM):   REP_body_styleH = 0;
128552    +      REP_body_styleS = 1;
MPRINT(EM_DIAGRAM):   REP_body_styleS = 1;
128553    +   end;
MPRINT(EM_DIAGRAM):   end;
128554    +   else if _dm11 = 'H'  then do;
MPRINT(EM_DIAGRAM):   else if _dm11 = 'H' then do;
128555    +      REP_body_styleC = 0;
MPRINT(EM_DIAGRAM):   REP_body_styleC = 0;
128556    +      REP_body_styleH = 1;
MPRINT(EM_DIAGRAM):   REP_body_styleH = 1;
128557    +      REP_body_styleS = 0;
MPRINT(EM_DIAGRAM):   REP_body_styleS = 0;
128558    +   end;
MPRINT(EM_DIAGRAM):   end;
128559    +   else if _dm11 = 'W'  then do;
MPRINT(EM_DIAGRAM):   else if _dm11 = 'W' then do;
128560    +      REP_body_styleC = -1;
MPRINT(EM_DIAGRAM):   REP_body_styleC = -1;
128561    +      REP_body_styleH = -1;
MPRINT(EM_DIAGRAM):   REP_body_styleH = -1;
128562    +      REP_body_styleS = -1;
MPRINT(EM_DIAGRAM):   REP_body_styleS = -1;
128563    +   end;
MPRINT(EM_DIAGRAM):   end;
128564    +   else if _dm11 = 'C'  then do;
MPRINT(EM_DIAGRAM):   else if _dm11 = 'C' then do;
128565    +      REP_body_styleC = 1;
MPRINT(EM_DIAGRAM):   REP_body_styleC = 1;
128566    +      REP_body_styleH = 0;
MPRINT(EM_DIAGRAM):   REP_body_styleH = 0;
128567    +      REP_body_styleS = 0;
MPRINT(EM_DIAGRAM):   REP_body_styleS = 0;
128568    +   end;
MPRINT(EM_DIAGRAM):   end;
128569    +   else do;
MPRINT(EM_DIAGRAM):   else do;
128570    +      REP_body_styleC = .;
MPRINT(EM_DIAGRAM):   REP_body_styleC = .;
128571    +      REP_body_styleH = .;
MPRINT(EM_DIAGRAM):   REP_body_styleH = .;
128572    +      REP_body_styleS = .;
MPRINT(EM_DIAGRAM):   REP_body_styleS = .;
128573    +      substr(_warn_,2,1) = 'U';
MPRINT(EM_DIAGRAM):   substr(_warn_,2,1) = 'U';
128574    +      _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
128575    +   end;
MPRINT(EM_DIAGRAM):   end;
128576    +end;
MPRINT(EM_DIAGRAM):   end;
128577    +
128578    +*** Generate dummy variables for REP_drive_wheels ;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for REP_drive_wheels ;
128579    +drop REP_drive_wheels4 REP_drive_wheelsF ;
MPRINT(EM_DIAGRAM):   drop REP_drive_wheels4 REP_drive_wheelsF ;
128580    +if missing( REP_drive_wheels ) then do;
MPRINT(EM_DIAGRAM):   if missing( REP_drive_wheels ) then do;
128581    +   REP_drive_wheels4 = .;
MPRINT(EM_DIAGRAM):   REP_drive_wheels4 = .;
128582    +   REP_drive_wheelsF = .;
MPRINT(EM_DIAGRAM):   REP_drive_wheelsF = .;
128583    +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
128584    +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
128585    +end;
MPRINT(EM_DIAGRAM):   end;
128586    +else do;
MPRINT(EM_DIAGRAM):   else do;
128587    +   length _dm3 $ 3; drop _dm3 ;
MPRINT(EM_DIAGRAM):   length _dm3 $ 3;
MPRINT(EM_DIAGRAM):   drop _dm3 ;
128588    +   %DMNORMCP( REP_drive_wheels , _dm3 )
MPRINT(DMNORMCP):   _dm3=dmnorm(REP_drive_wheels,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMCP):  );
128589    +   if _dm3 = 'F'  then do;
MPRINT(EM_DIAGRAM):   if _dm3 = 'F' then do;
128590    +      REP_drive_wheels4 = 0;
MPRINT(EM_DIAGRAM):   REP_drive_wheels4 = 0;
128591    +      REP_drive_wheelsF = 1;
MPRINT(EM_DIAGRAM):   REP_drive_wheelsF = 1;
128592    +   end;
MPRINT(EM_DIAGRAM):   end;
128593    +   else if _dm3 = 'R'  then do;
MPRINT(EM_DIAGRAM):   else if _dm3 = 'R' then do;
128594    +      REP_drive_wheels4 = -1;
MPRINT(EM_DIAGRAM):   REP_drive_wheels4 = -1;
128595    +      REP_drive_wheelsF = -1;
MPRINT(EM_DIAGRAM):   REP_drive_wheelsF = -1;
128596    +   end;
MPRINT(EM_DIAGRAM):   end;
128597    +   else if _dm3 = '4'  then do;
MPRINT(EM_DIAGRAM):   else if _dm3 = '4' then do;
128598    +      REP_drive_wheels4 = 1;
MPRINT(EM_DIAGRAM):   REP_drive_wheels4 = 1;
128599    +      REP_drive_wheelsF = 0;
MPRINT(EM_DIAGRAM):   REP_drive_wheelsF = 0;
128600    +   end;
MPRINT(EM_DIAGRAM):   end;
128601    +   else do;
MPRINT(EM_DIAGRAM):   else do;
128602    +      REP_drive_wheels4 = .;
MPRINT(EM_DIAGRAM):   REP_drive_wheels4 = .;
128603    +      REP_drive_wheelsF = .;
MPRINT(EM_DIAGRAM):   REP_drive_wheelsF = .;
128604    +      substr(_warn_,2,1) = 'U';
MPRINT(EM_DIAGRAM):   substr(_warn_,2,1) = 'U';
128605    +      _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
128606    +   end;
MPRINT(EM_DIAGRAM):   end;
128607    +end;
MPRINT(EM_DIAGRAM):   end;
128608    +
128609    +*** Generate dummy variables for REP_engine_location ;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for REP_engine_location ;
128610    +drop REP_engine_locationF ;
MPRINT(EM_DIAGRAM):   drop REP_engine_locationF ;
128611    +if missing( REP_engine_location ) then do;
MPRINT(EM_DIAGRAM):   if missing( REP_engine_location ) then do;
128612    +   REP_engine_locationF = .;
MPRINT(EM_DIAGRAM):   REP_engine_locationF = .;
128613    +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
128614    +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
128615    +end;
MPRINT(EM_DIAGRAM):   end;
128616    +else do;
MPRINT(EM_DIAGRAM):   else do;
128617    +   length _dm5 $ 5; drop _dm5 ;
MPRINT(EM_DIAGRAM):   length _dm5 $ 5;
MPRINT(EM_DIAGRAM):   drop _dm5 ;
128618    +   %DMNORMCP( REP_engine_location , _dm5 )
MPRINT(DMNORMCP):   _dm5=dmnorm(REP_engine_location,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMCP):  );
128619    +   if _dm5 = 'F'  then do;
MPRINT(EM_DIAGRAM):   if _dm5 = 'F' then do;
128620    +      REP_engine_locationF = 1;
MPRINT(EM_DIAGRAM):   REP_engine_locationF = 1;
128621    +   end;
MPRINT(EM_DIAGRAM):   end;
128622    +   else if _dm5 = 'R'  then do;
MPRINT(EM_DIAGRAM):   else if _dm5 = 'R' then do;
128623    +      REP_engine_locationF = -1;
MPRINT(EM_DIAGRAM):   REP_engine_locationF = -1;
128624    +   end;
MPRINT(EM_DIAGRAM):   end;
128625    +   else do;
MPRINT(EM_DIAGRAM):   else do;
128626    +      REP_engine_locationF = .;
MPRINT(EM_DIAGRAM):   REP_engine_locationF = .;
128627    +      substr(_warn_,2,1) = 'U';
MPRINT(EM_DIAGRAM):   substr(_warn_,2,1) = 'U';
128628    +      _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
128629    +   end;
MPRINT(EM_DIAGRAM):   end;
128630    +end;
MPRINT(EM_DIAGRAM):   end;
128631    +
128632    +*** Generate dummy variables for REP_fuel_system ;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for REP_fuel_system ;
128633    +drop REP_fuel_systemnon_spdi ;
MPRINT(EM_DIAGRAM):   drop REP_fuel_systemnon_spdi ;
128634    +if missing( REP_fuel_system ) then do;
MPRINT(EM_DIAGRAM):   if missing( REP_fuel_system ) then do;
128635    +   REP_fuel_systemnon_spdi = .;
MPRINT(EM_DIAGRAM):   REP_fuel_systemnon_spdi = .;
128636    +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
128637    +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
128638    +end;
MPRINT(EM_DIAGRAM):   end;
128639    +else do;
MPRINT(EM_DIAGRAM):   else do;
128640    +   length _dm8 $ 8; drop _dm8 ;
MPRINT(EM_DIAGRAM):   length _dm8 $ 8;
MPRINT(EM_DIAGRAM):   drop _dm8 ;
128641    +   %DMNORMCP( REP_fuel_system , _dm8 )
MPRINT(DMNORMCP):   _dm8=dmnorm(REP_fuel_system,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMCP):  );
128642    +   if _dm8 = 'NON-SPDI'  then do;
MPRINT(EM_DIAGRAM):   if _dm8 = 'NON-SPDI' then do;
128643    +      REP_fuel_systemnon_spdi = 1;
MPRINT(EM_DIAGRAM):   REP_fuel_systemnon_spdi = 1;
128644    +   end;
MPRINT(EM_DIAGRAM):   end;
128645    +   else if _dm8 = 'SPDI'  then do;
MPRINT(EM_DIAGRAM):   else if _dm8 = 'SPDI' then do;
128646    +      REP_fuel_systemnon_spdi = -1;
MPRINT(EM_DIAGRAM):   REP_fuel_systemnon_spdi = -1;
128647    +   end;
MPRINT(EM_DIAGRAM):   end;
128648    +   else do;
MPRINT(EM_DIAGRAM):   else do;
128649    +      REP_fuel_systemnon_spdi = .;
MPRINT(EM_DIAGRAM):   REP_fuel_systemnon_spdi = .;
128650    +      substr(_warn_,2,1) = 'U';
MPRINT(EM_DIAGRAM):   substr(_warn_,2,1) = 'U';
128651    +      _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
128652    +   end;
MPRINT(EM_DIAGRAM):   end;
128653    +end;
MPRINT(EM_DIAGRAM):   end;
128654    +
128655    +*** Generate dummy variables for REP_fuel_type ;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for REP_fuel_type ;
128656    +drop REP_fuel_typeD ;
MPRINT(EM_DIAGRAM):   drop REP_fuel_typeD ;
128657    +if missing( REP_fuel_type ) then do;
MPRINT(EM_DIAGRAM):   if missing( REP_fuel_type ) then do;
128658    +   REP_fuel_typeD = .;
MPRINT(EM_DIAGRAM):   REP_fuel_typeD = .;
128659    +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
128660    +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
128661    +end;
MPRINT(EM_DIAGRAM):   end;
128662    +else do;
MPRINT(EM_DIAGRAM):   else do;
128663    +   length _dm6 $ 6; drop _dm6 ;
MPRINT(EM_DIAGRAM):   length _dm6 $ 6;
MPRINT(EM_DIAGRAM):   drop _dm6 ;
128664    +   %DMNORMCP( REP_fuel_type , _dm6 )
MPRINT(DMNORMCP):   _dm6=dmnorm(REP_fuel_type,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMCP):  );
128665    +   if _dm6 = 'G'  then do;
MPRINT(EM_DIAGRAM):   if _dm6 = 'G' then do;
128666    +      REP_fuel_typeD = -1;
MPRINT(EM_DIAGRAM):   REP_fuel_typeD = -1;
128667    +   end;
MPRINT(EM_DIAGRAM):   end;
128668    +   else if _dm6 = 'D'  then do;
MPRINT(EM_DIAGRAM):   else if _dm6 = 'D' then do;
128669    +      REP_fuel_typeD = 1;
MPRINT(EM_DIAGRAM):   REP_fuel_typeD = 1;
128670    +   end;
MPRINT(EM_DIAGRAM):   end;
128671    +   else do;
MPRINT(EM_DIAGRAM):   else do;
128672    +      REP_fuel_typeD = .;
MPRINT(EM_DIAGRAM):   REP_fuel_typeD = .;
128673    +      substr(_warn_,2,1) = 'U';
MPRINT(EM_DIAGRAM):   substr(_warn_,2,1) = 'U';
128674    +      _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
128675    +   end;
MPRINT(EM_DIAGRAM):   end;
128676    +end;
MPRINT(EM_DIAGRAM):   end;
128677    +
128678    +*** Generate dummy variables for REP_num_of_cylinders ;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for REP_num_of_cylinders ;
128679    +drop REP_num_of_cylinders__4 ;
MPRINT(EM_DIAGRAM):   drop REP_num_of_cylinders__4 ;
128680    +if missing( REP_num_of_cylinders ) then do;
MPRINT(EM_DIAGRAM):   if missing( REP_num_of_cylinders ) then do;
128681    +   REP_num_of_cylinders__4 = .;
MPRINT(EM_DIAGRAM):   REP_num_of_cylinders__4 = .;
128682    +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
128683    +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
128684    +end;
MPRINT(EM_DIAGRAM):   end;
128685    +else do;
MPRINT(EM_DIAGRAM):   else do;
128686    +   length _dm6 $ 6; drop _dm6 ;
MPRINT(EM_DIAGRAM):   length _dm6 $ 6;
MPRINT(EM_DIAGRAM):   drop _dm6 ;
128687    +   %DMNORMCP( REP_num_of_cylinders , _dm6 )
MPRINT(DMNORMCP):   _dm6=dmnorm(REP_num_of_cylinders,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMCP):  );
128688    +   if _dm6 = '<=4'  then do;
MPRINT(EM_DIAGRAM):   if _dm6 = '<=4' then do;
128689    +      REP_num_of_cylinders__4 = 1;
MPRINT(EM_DIAGRAM):   REP_num_of_cylinders__4 = 1;
128690    +   end;
MPRINT(EM_DIAGRAM):   end;
128691    +   else if _dm6 = '>4'  then do;
MPRINT(EM_DIAGRAM):   else if _dm6 = '>4' then do;
128692    +      REP_num_of_cylinders__4 = -1;
MPRINT(EM_DIAGRAM):   REP_num_of_cylinders__4 = -1;
128693    +   end;
MPRINT(EM_DIAGRAM):   end;
128694    +   else do;
MPRINT(EM_DIAGRAM):   else do;
128695    +      REP_num_of_cylinders__4 = .;
MPRINT(EM_DIAGRAM):   REP_num_of_cylinders__4 = .;
128696    +      substr(_warn_,2,1) = 'U';
MPRINT(EM_DIAGRAM):   substr(_warn_,2,1) = 'U';
128697    +      _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
128698    +   end;
MPRINT(EM_DIAGRAM):   end;
128699    +end;
MPRINT(EM_DIAGRAM):   end;
128700    +
128701    +*** Generate dummy variables for engine_type ;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for engine_type ;
128702    +drop engine_typedohc engine_typel engine_typeohc engine_typeohcf
128703    +        engine_typeohcv ;
MPRINT(EM_DIAGRAM):   drop engine_typedohc engine_typel engine_typeohc engine_typeohcf
engine_typeohcv ;
128704    +*** encoding is sparse, initialize to zero;
MPRINT(EM_DIAGRAM):   *** encoding is sparse, initialize to zero;
128705    +engine_typedohc = 0;
MPRINT(EM_DIAGRAM):   engine_typedohc = 0;
128706    +engine_typel = 0;
MPRINT(EM_DIAGRAM):   engine_typel = 0;
128707    +engine_typeohc = 0;
MPRINT(EM_DIAGRAM):   engine_typeohc = 0;
128708    +engine_typeohcf = 0;
MPRINT(EM_DIAGRAM):   engine_typeohcf = 0;
128709    +engine_typeohcv = 0;
MPRINT(EM_DIAGRAM):   engine_typeohcv = 0;
128710    +if missing( engine_type ) then do;
MPRINT(EM_DIAGRAM):   if missing( engine_type ) then do;
128711    +   engine_typedohc = .;
MPRINT(EM_DIAGRAM):   engine_typedohc = .;
128712    +   engine_typel = .;
MPRINT(EM_DIAGRAM):   engine_typel = .;
128713    +   engine_typeohc = .;
MPRINT(EM_DIAGRAM):   engine_typeohc = .;
128714    +   engine_typeohcf = .;
MPRINT(EM_DIAGRAM):   engine_typeohcf = .;
128715    +   engine_typeohcv = .;
MPRINT(EM_DIAGRAM):   engine_typeohcv = .;
128716    +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
128717    +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
128718    +end;
MPRINT(EM_DIAGRAM):   end;
128719    +else do;
MPRINT(EM_DIAGRAM):   else do;
128720    +   length _dm5 $ 5; drop _dm5 ;
MPRINT(EM_DIAGRAM):   length _dm5 $ 5;
MPRINT(EM_DIAGRAM):   drop _dm5 ;
128721    +   %DMNORMCP( engine_type , _dm5 )
MPRINT(DMNORMCP):   _dm5=dmnorm(engine_type,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMCP):  );
128722    +   if _dm5 = 'OHC'  then do;
MPRINT(EM_DIAGRAM):   if _dm5 = 'OHC' then do;
128723    +      engine_typeohc = 1;
MPRINT(EM_DIAGRAM):   engine_typeohc = 1;
128724    +   end;
MPRINT(EM_DIAGRAM):   end;
128725    +   else if _dm5 = 'OHCF'  then do;
MPRINT(EM_DIAGRAM):   else if _dm5 = 'OHCF' then do;
128726    +      engine_typeohcf = 1;
MPRINT(EM_DIAGRAM):   engine_typeohcf = 1;
128727    +   end;
MPRINT(EM_DIAGRAM):   end;
128728    +   else if _dm5 = 'OHCV'  then do;
MPRINT(EM_DIAGRAM):   else if _dm5 = 'OHCV' then do;
128729    +      engine_typeohcv = 1;
MPRINT(EM_DIAGRAM):   engine_typeohcv = 1;
128730    +   end;
MPRINT(EM_DIAGRAM):   end;
128731    +   else if _dm5 = 'DOHC'  then do;
MPRINT(EM_DIAGRAM):   else if _dm5 = 'DOHC' then do;
128732    +      engine_typedohc = 1;
MPRINT(EM_DIAGRAM):   engine_typedohc = 1;
128733    +   end;
MPRINT(EM_DIAGRAM):   end;
128734    +   else if _dm5 = 'L'  then do;
MPRINT(EM_DIAGRAM):   else if _dm5 = 'L' then do;
128735    +      engine_typel = 1;
MPRINT(EM_DIAGRAM):   engine_typel = 1;
128736    +   end;
MPRINT(EM_DIAGRAM):   end;
128737    +   else if _dm5 = 'ROTOR'  then do;
MPRINT(EM_DIAGRAM):   else if _dm5 = 'ROTOR' then do;
128738    +      engine_typedohc = -1;
MPRINT(EM_DIAGRAM):   engine_typedohc = -1;
128739    +      engine_typel = -1;
MPRINT(EM_DIAGRAM):   engine_typel = -1;
128740    +      engine_typeohc = -1;
MPRINT(EM_DIAGRAM):   engine_typeohc = -1;
128741    +      engine_typeohcf = -1;
MPRINT(EM_DIAGRAM):   engine_typeohcf = -1;
128742    +      engine_typeohcv = -1;
MPRINT(EM_DIAGRAM):   engine_typeohcv = -1;
128743    +   end;
MPRINT(EM_DIAGRAM):   end;
128744    +   else do;
MPRINT(EM_DIAGRAM):   else do;
128745    +      engine_typedohc = .;
MPRINT(EM_DIAGRAM):   engine_typedohc = .;
128746    +      engine_typel = .;
MPRINT(EM_DIAGRAM):   engine_typel = .;
128747    +      engine_typeohc = .;
MPRINT(EM_DIAGRAM):   engine_typeohc = .;
128748    +      engine_typeohcf = .;
MPRINT(EM_DIAGRAM):   engine_typeohcf = .;
128749    +      engine_typeohcv = .;
MPRINT(EM_DIAGRAM):   engine_typeohcv = .;
128750    +      substr(_warn_,2,1) = 'U';
MPRINT(EM_DIAGRAM):   substr(_warn_,2,1) = 'U';
128751    +      _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
128752    +   end;
MPRINT(EM_DIAGRAM):   end;
128753    +end;
MPRINT(EM_DIAGRAM):   end;
128754    +
128755    +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
128756    +*** Checking missing input Interval
128757    +*** *************************;
MPRINT(EM_DIAGRAM):   *** Checking missing input Interval *** *************************;
128758    +
128759    +IF NMISS(
128760    +   LOG_REP_IMP_price ,
128761    +   LOG_REP_compression_ratio ,
128762    +   LOG_REP_engine_size ,
128763    +   REP_IMP_bore ,
128764    +   REP_IMP_stroke ,
128765    +   REP_city_mpg ,
128766    +   REP_curb_weight ,
128767    +   REP_height ,
128768    +   REP_highway_mpg ,
128769    +   REP_horsepower ,
128770    +   REP_length ,
128771    +   REP_peak_rpm ,
128772    +   REP_wheel_base ,
128773    +   REP_width   ) THEN DO;
MPRINT(EM_DIAGRAM):   IF NMISS( LOG_REP_IMP_price , LOG_REP_compression_ratio ,
LOG_REP_engine_size , REP_IMP_bore , REP_IMP_stroke , REP_city_mpg , REP_curb_weight ,
REP_height , REP_highway_mpg , REP_horsepower , REP_length , REP_peak_rpm , REP_wheel_base ,
REP_width ) THEN DO;
128774    +   SUBSTR(_WARN_, 1, 1) = 'M';
MPRINT(EM_DIAGRAM):   SUBSTR(_WARN_, 1, 1) = 'M';
128775    +
128776    +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
128777    +END;
MPRINT(EM_DIAGRAM):   END;
128778    +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
128779    +*** Writing the Node intvl ;
MPRINT(EM_DIAGRAM):   *** Writing the Node intvl ;
128780    +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
128781    +IF _DM_BAD EQ 0 THEN DO;
MPRINT(EM_DIAGRAM):   IF _DM_BAD EQ 0 THEN DO;
128782    +   S_LOG_REP_IMP_price  =    -20.2356185469493 +     2.16855745948401 *
128783    +        LOG_REP_IMP_price ;
MPRINT(EM_DIAGRAM):   S_LOG_REP_IMP_price = -20.2356185469493 + 2.16855745948401 *
LOG_REP_IMP_price ;
128784    +   S_LOG_REP_compression_ratio
128785    +          =    -8.72649819321039 +     3.65742873950677 *
128786    +        LOG_REP_compression_ratio ;
MPRINT(EM_DIAGRAM):   S_LOG_REP_compression_ratio = -8.72649819321039 + 3.65742873950677 *
LOG_REP_compression_ratio ;
128787    +   S_LOG_REP_engine_size  =    -19.3053254119757 +     4.02929302984948 *
128788    +        LOG_REP_engine_size ;
MPRINT(EM_DIAGRAM):   S_LOG_REP_engine_size = -19.3053254119757 + 4.02929302984948 *
LOG_REP_engine_size ;
128789    +   S_REP_IMP_bore  =    -13.3604302656684 +     4.04536293034574 *
128790    +        REP_IMP_bore ;
MPRINT(EM_DIAGRAM):   S_REP_IMP_bore = -13.3604302656684 + 4.04536293034574 * REP_IMP_bore ;
128791    +   S_REP_IMP_stroke  =    -11.3205669287077 +     3.47855217496738 *
128792    +        REP_IMP_stroke ;
MPRINT(EM_DIAGRAM):   S_REP_IMP_stroke = -11.3205669287077 + 3.47855217496738 * REP_IMP_stroke
;
128793    +   S_REP_city_mpg  =    -4.23279255832632 +     0.16535248553422 *
128794    +        REP_city_mpg ;
MPRINT(EM_DIAGRAM):   S_REP_city_mpg = -4.23279255832632 + 0.16535248553422 * REP_city_mpg ;
128795    +   S_REP_curb_weight  =    -5.35597047742979 +     0.00212869810672 *
128796    +        REP_curb_weight ;
MPRINT(EM_DIAGRAM):   S_REP_curb_weight = -5.35597047742979 + 0.00212869810672 *
REP_curb_weight ;
128797    +   S_REP_height  =    -21.8926608140893 +     0.40589318675657 * REP_height ;
MPRINT(EM_DIAGRAM):   S_REP_height = -21.8926608140893 + 0.40589318675657 * REP_height ;
128798    +   S_REP_highway_mpg  =    -4.99166764925563 +     0.16020006928199 *
128799    +        REP_highway_mpg ;
MPRINT(EM_DIAGRAM):   S_REP_highway_mpg = -4.99166764925563 + 0.16020006928199 *
REP_highway_mpg ;
128800    +   S_REP_horsepower  =    -2.74643097264309 +     0.02734944206973 *
128801    +        REP_horsepower ;
MPRINT(EM_DIAGRAM):   S_REP_horsepower = -2.74643097264309 + 0.02734944206973 * REP_horsepower
;
128802    +   S_REP_length  =    -15.2378498365576 +     0.08781104037663 * REP_length ;
MPRINT(EM_DIAGRAM):   S_REP_length = -15.2378498365576 + 0.08781104037663 * REP_length ;
128803    +   S_REP_peak_rpm  =    -10.6885709541859 +     0.00208333904184 *
128804    +        REP_peak_rpm ;
MPRINT(EM_DIAGRAM):   S_REP_peak_rpm = -10.6885709541859 + 0.00208333904184 * REP_peak_rpm ;
128805    +   S_REP_wheel_base  =    -17.8009087180129 +     0.18059887504832 *
128806    +        REP_wheel_base ;
MPRINT(EM_DIAGRAM):   S_REP_wheel_base = -17.8009087180129 + 0.18059887504832 * REP_wheel_base
;
128807    +   S_REP_width  =    -35.9167499004784 +     0.54673628301566 * REP_width ;
MPRINT(EM_DIAGRAM):   S_REP_width = -35.9167499004784 + 0.54673628301566 * REP_width ;
128808    +END;
MPRINT(EM_DIAGRAM):   END;
128809    +ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
128810    +   IF MISSING( LOG_REP_IMP_price ) THEN S_LOG_REP_IMP_price  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( LOG_REP_IMP_price ) THEN S_LOG_REP_IMP_price = . ;
128811    +   ELSE S_LOG_REP_IMP_price  =    -20.2356185469493 +     2.16855745948401 *
128812    +        LOG_REP_IMP_price ;
MPRINT(EM_DIAGRAM):   ELSE S_LOG_REP_IMP_price = -20.2356185469493 + 2.16855745948401 *
LOG_REP_IMP_price ;
128813    +   IF MISSING( LOG_REP_compression_ratio ) THEN S_LOG_REP_compression_ratio
128814    +          = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( LOG_REP_compression_ratio ) THEN S_LOG_REP_compression_ratio
= . ;
128815    +   ELSE S_LOG_REP_compression_ratio
128816    +          =    -8.72649819321039 +     3.65742873950677 *
128817    +        LOG_REP_compression_ratio ;
MPRINT(EM_DIAGRAM):   ELSE S_LOG_REP_compression_ratio = -8.72649819321039 + 3.65742873950677
* LOG_REP_compression_ratio ;
128818    +   IF MISSING( LOG_REP_engine_size ) THEN S_LOG_REP_engine_size  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( LOG_REP_engine_size ) THEN S_LOG_REP_engine_size = . ;
128819    +   ELSE S_LOG_REP_engine_size
128820    +          =    -19.3053254119757 +     4.02929302984948 * LOG_REP_engine_size
128821    +         ;
MPRINT(EM_DIAGRAM):   ELSE S_LOG_REP_engine_size = -19.3053254119757 + 4.02929302984948 *
LOG_REP_engine_size ;
128822    +   IF MISSING( REP_IMP_bore ) THEN S_REP_IMP_bore  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( REP_IMP_bore ) THEN S_REP_IMP_bore = . ;
128823    +   ELSE S_REP_IMP_bore  =    -13.3604302656684 +     4.04536293034574 *
128824    +        REP_IMP_bore ;
MPRINT(EM_DIAGRAM):   ELSE S_REP_IMP_bore = -13.3604302656684 + 4.04536293034574 *
REP_IMP_bore ;
128825    +   IF MISSING( REP_IMP_stroke ) THEN S_REP_IMP_stroke  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( REP_IMP_stroke ) THEN S_REP_IMP_stroke = . ;
128826    +   ELSE S_REP_IMP_stroke  =    -11.3205669287077 +     3.47855217496738 *
128827    +        REP_IMP_stroke ;
MPRINT(EM_DIAGRAM):   ELSE S_REP_IMP_stroke = -11.3205669287077 + 3.47855217496738 *
REP_IMP_stroke ;
128828    +   IF MISSING( REP_city_mpg ) THEN S_REP_city_mpg  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( REP_city_mpg ) THEN S_REP_city_mpg = . ;
128829    +   ELSE S_REP_city_mpg  =    -4.23279255832632 +     0.16535248553422 *
128830    +        REP_city_mpg ;
MPRINT(EM_DIAGRAM):   ELSE S_REP_city_mpg = -4.23279255832632 + 0.16535248553422 *
REP_city_mpg ;
128831    +   IF MISSING( REP_curb_weight ) THEN S_REP_curb_weight  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( REP_curb_weight ) THEN S_REP_curb_weight = . ;
128832    +   ELSE S_REP_curb_weight  =    -5.35597047742979 +     0.00212869810672 *
128833    +        REP_curb_weight ;
MPRINT(EM_DIAGRAM):   ELSE S_REP_curb_weight = -5.35597047742979 + 0.00212869810672 *
REP_curb_weight ;
128834    +   IF MISSING( REP_height ) THEN S_REP_height  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( REP_height ) THEN S_REP_height = . ;
128835    +   ELSE S_REP_height  =    -21.8926608140893 +     0.40589318675657 *
128836    +        REP_height ;
MPRINT(EM_DIAGRAM):   ELSE S_REP_height = -21.8926608140893 + 0.40589318675657 * REP_height ;
128837    +   IF MISSING( REP_highway_mpg ) THEN S_REP_highway_mpg  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( REP_highway_mpg ) THEN S_REP_highway_mpg = . ;
128838    +   ELSE S_REP_highway_mpg  =    -4.99166764925563 +     0.16020006928199 *
128839    +        REP_highway_mpg ;
MPRINT(EM_DIAGRAM):   ELSE S_REP_highway_mpg = -4.99166764925563 + 0.16020006928199 *
REP_highway_mpg ;
128840    +   IF MISSING( REP_horsepower ) THEN S_REP_horsepower  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( REP_horsepower ) THEN S_REP_horsepower = . ;
128841    +   ELSE S_REP_horsepower  =    -2.74643097264309 +     0.02734944206973 *
128842    +        REP_horsepower ;
MPRINT(EM_DIAGRAM):   ELSE S_REP_horsepower = -2.74643097264309 + 0.02734944206973 *
REP_horsepower ;
128843    +   IF MISSING( REP_length ) THEN S_REP_length  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( REP_length ) THEN S_REP_length = . ;
128844    +   ELSE S_REP_length  =    -15.2378498365576 +     0.08781104037663 *
128845    +        REP_length ;
MPRINT(EM_DIAGRAM):   ELSE S_REP_length = -15.2378498365576 + 0.08781104037663 * REP_length ;
128846    +   IF MISSING( REP_peak_rpm ) THEN S_REP_peak_rpm  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( REP_peak_rpm ) THEN S_REP_peak_rpm = . ;
128847    +   ELSE S_REP_peak_rpm  =    -10.6885709541859 +     0.00208333904184 *
128848    +        REP_peak_rpm ;
MPRINT(EM_DIAGRAM):   ELSE S_REP_peak_rpm = -10.6885709541859 + 0.00208333904184 *
REP_peak_rpm ;
128849    +   IF MISSING( REP_wheel_base ) THEN S_REP_wheel_base  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( REP_wheel_base ) THEN S_REP_wheel_base = . ;
128850    +   ELSE S_REP_wheel_base  =    -17.8009087180129 +     0.18059887504832 *
128851    +        REP_wheel_base ;
MPRINT(EM_DIAGRAM):   ELSE S_REP_wheel_base = -17.8009087180129 + 0.18059887504832 *
REP_wheel_base ;
128852    +   IF MISSING( REP_width ) THEN S_REP_width  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( REP_width ) THEN S_REP_width = . ;
128853    +   ELSE S_REP_width  =    -35.9167499004784 +     0.54673628301566 * REP_width
128854    +         ;
MPRINT(EM_DIAGRAM):   ELSE S_REP_width = -35.9167499004784 + 0.54673628301566 * REP_width ;
128855    +END;
MPRINT(EM_DIAGRAM):   END;
128856    +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
128857    +*** Writing the Node bin ;
MPRINT(EM_DIAGRAM):   *** Writing the Node bin ;
128858    +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
128859    +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
128860    +*** Writing the Node nom ;
MPRINT(EM_DIAGRAM):   *** Writing the Node nom ;
128861    +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
128862    +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
128863    +*** Writing the Node H1 ;
MPRINT(EM_DIAGRAM):   *** Writing the Node H1 ;
128864    +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
128865    +IF _DM_BAD EQ 0 THEN DO;
MPRINT(EM_DIAGRAM):   IF _DM_BAD EQ 0 THEN DO;
128866    +   H11  =    -0.30239282542129 * S_LOG_REP_IMP_price
128867    +          +     0.07375266777945 * S_LOG_REP_compression_ratio
128868    +          +    -0.32314301225116 * S_LOG_REP_engine_size
128869    +          +    -0.05791191369564 * S_REP_IMP_bore  +    -0.31295728139086 *
128870    +        S_REP_IMP_stroke  +    -0.50271357032608 * S_REP_city_mpg
128871    +          +    -0.49945653510897 * S_REP_curb_weight
128872    +          +    -0.35982904642168 * S_REP_height  +     0.17605089142765 *
128873    +        S_REP_highway_mpg  +     0.28723977440497 * S_REP_horsepower
128874    +          +     0.00026487266845 * S_REP_length  +     0.02115131299283 *
128875    +        S_REP_peak_rpm  +    -0.71479623156263 * S_REP_wheel_base
128876    +          +     0.57582729455077 * S_REP_width ;
MPRINT(EM_DIAGRAM):   H11 = -0.30239282542129 * S_LOG_REP_IMP_price + 0.07375266777945 *
S_LOG_REP_compression_ratio + -0.32314301225116 * S_LOG_REP_engine_size + -0.05791191369564 *
S_REP_IMP_bore + -0.31295728139086 * S_REP_IMP_stroke + -0.50271357032608 * S_REP_city_mpg +
-0.49945653510897 * S_REP_curb_weight + -0.35982904642168 * S_REP_height + 0.17605089142765 *
S_REP_highway_mpg + 0.28723977440497 * S_REP_horsepower + 0.00026487266845 * S_REP_length +
0.02115131299283 * S_REP_peak_rpm + -0.71479623156263 * S_REP_wheel_base + 0.57582729455077 *
S_REP_width ;
128877    +   H12  =     0.06053587643791 * S_LOG_REP_IMP_price
128878    +          +      0.0008309684403 * S_LOG_REP_compression_ratio
128879    +          +     0.10954404329148 * S_LOG_REP_engine_size
128880    +          +    -0.15328263161893 * S_REP_IMP_bore  +      0.3532849519374 *
128881    +        S_REP_IMP_stroke  +    -0.15402746977116 * S_REP_city_mpg
128882    +          +     0.08110850880681 * S_REP_curb_weight
128883    +          +      0.1651911585853 * S_REP_height  +    -0.32984368998018 *
128884    +        S_REP_highway_mpg  +     0.18550754810975 * S_REP_horsepower
128885    +          +     0.41047827319029 * S_REP_length  +     0.63048066732644 *
128886    +        S_REP_peak_rpm  +    -0.29989205901953 * S_REP_wheel_base
128887    +          +     -0.1141373130746 * S_REP_width ;
MPRINT(EM_DIAGRAM):   H12 = 0.06053587643791 * S_LOG_REP_IMP_price + 0.0008309684403 *
S_LOG_REP_compression_ratio + 0.10954404329148 * S_LOG_REP_engine_size + -0.15328263161893 *
S_REP_IMP_bore + 0.3532849519374 * S_REP_IMP_stroke + -0.15402746977116 * S_REP_city_mpg +
0.08110850880681 * S_REP_curb_weight + 0.1651911585853 * S_REP_height + -0.32984368998018 *
S_REP_highway_mpg + 0.18550754810975 * S_REP_horsepower + 0.41047827319029 * S_REP_length +
0.63048066732644 * S_REP_peak_rpm + -0.29989205901953 * S_REP_wheel_base + -0.1141373130746 *
S_REP_width ;
128888    +   H13  =    -0.12651763973835 * S_LOG_REP_IMP_price
128889    +          +     0.02916610158425 * S_LOG_REP_compression_ratio
128890    +          +    -0.35464297055318 * S_LOG_REP_engine_size
128891    +          +    -0.46861794622827 * S_REP_IMP_bore  +    -0.02615304729098 *
128892    +        S_REP_IMP_stroke  +    -0.62348817252786 * S_REP_city_mpg
128893    +          +    -0.40578479144999 * S_REP_curb_weight
128894    +          +    -0.07842498208478 * S_REP_height  +     0.04009867443631 *
128895    +        S_REP_highway_mpg  +    -0.15410203402429 * S_REP_horsepower
128896    +          +     0.56826194006802 * S_REP_length  +    -0.18451746998248 *
128897    +        S_REP_peak_rpm  +    -0.85455873337219 * S_REP_wheel_base
128898    +          +     0.42143506757855 * S_REP_width ;
MPRINT(EM_DIAGRAM):   H13 = -0.12651763973835 * S_LOG_REP_IMP_price + 0.02916610158425 *
S_LOG_REP_compression_ratio + -0.35464297055318 * S_LOG_REP_engine_size + -0.46861794622827 *
S_REP_IMP_bore + -0.02615304729098 * S_REP_IMP_stroke + -0.62348817252786 * S_REP_city_mpg +
-0.40578479144999 * S_REP_curb_weight + -0.07842498208478 * S_REP_height + 0.04009867443631 *
S_REP_highway_mpg + -0.15410203402429 * S_REP_horsepower + 0.56826194006802 * S_REP_length +
-0.18451746998248 * S_REP_peak_rpm + -0.85455873337219 * S_REP_wheel_base + 0.42143506757855 *
S_REP_width ;
128899    +   H14  =    -0.14040869686762 * S_LOG_REP_IMP_price
128900    +          +     0.26990612353105 * S_LOG_REP_compression_ratio
128901    +          +     0.08219740713507 * S_LOG_REP_engine_size
128902    +          +    -0.28143237638041 * S_REP_IMP_bore  +     0.00240833621272 *
128903    +        S_REP_IMP_stroke  +     0.36691424782401 * S_REP_city_mpg
128904    +          +     0.05296966762507 * S_REP_curb_weight
128905    +          +    -0.25195594241151 * S_REP_height  +     -0.2869086713551 *
128906    +        S_REP_highway_mpg  +     0.10149659867121 * S_REP_horsepower
128907    +          +     -0.1051173203177 * S_REP_length  +     -0.3623925092356 *
128908    +        S_REP_peak_rpm  +      0.0608651450636 * S_REP_wheel_base
128909    +          +     0.01925376907658 * S_REP_width ;
MPRINT(EM_DIAGRAM):   H14 = -0.14040869686762 * S_LOG_REP_IMP_price + 0.26990612353105 *
S_LOG_REP_compression_ratio + 0.08219740713507 * S_LOG_REP_engine_size + -0.28143237638041 *
S_REP_IMP_bore + 0.00240833621272 * S_REP_IMP_stroke + 0.36691424782401 * S_REP_city_mpg +
0.05296966762507 * S_REP_curb_weight + -0.25195594241151 * S_REP_height + -0.2869086713551 *
S_REP_highway_mpg + 0.10149659867121 * S_REP_horsepower + -0.1051173203177 * S_REP_length +
-0.3623925092356 * S_REP_peak_rpm + 0.0608651450636 * S_REP_wheel_base + 0.01925376907658 *
S_REP_width ;
128910    +   H11  = H11  +    -0.14261512916098 * M_bore0  +    -0.15389501961531 *
128911    +        M_num_of_doors0  +     0.35584066469033 * M_price0
128912    +          +     0.27766950948074 * M_stroke0 ;
MPRINT(EM_DIAGRAM):   H11 = H11 + -0.14261512916098 * M_bore0 + -0.15389501961531 *
M_num_of_doors0 + 0.35584066469033 * M_price0 + 0.27766950948074 * M_stroke0 ;
128913    +   H12  = H12  +    -0.05100694260106 * M_bore0  +     0.06706620637318 *
128914    +        M_num_of_doors0  +      0.3061805720719 * M_price0
128915    +          +     0.12447551805965 * M_stroke0 ;
MPRINT(EM_DIAGRAM):   H12 = H12 + -0.05100694260106 * M_bore0 + 0.06706620637318 *
M_num_of_doors0 + 0.3061805720719 * M_price0 + 0.12447551805965 * M_stroke0 ;
128916    +   H13  = H13  +    -0.24380670225771 * M_bore0  +     0.00690440155477 *
128917    +        M_num_of_doors0  +     0.44779145359173 * M_price0
128918    +          +    -0.23546408240278 * M_stroke0 ;
MPRINT(EM_DIAGRAM):   H13 = H13 + -0.24380670225771 * M_bore0 + 0.00690440155477 *
M_num_of_doors0 + 0.44779145359173 * M_price0 + -0.23546408240278 * M_stroke0 ;
128919    +   H14  = H14  +     0.27468171274192 * M_bore0  +    -0.08256208447896 *
128920    +        M_num_of_doors0  +    -0.00282400944614 * M_price0
128921    +          +    -0.06998464230678 * M_stroke0 ;
MPRINT(EM_DIAGRAM):   H14 = H14 + 0.27468171274192 * M_bore0 + -0.08256208447896 *
M_num_of_doors0 + -0.00282400944614 * M_price0 + -0.06998464230678 * M_stroke0 ;
128922    +   H11  = H11  +     1.04565178534847 * IMP_num_of_doors2
128923    +          +    -0.19697323559306 * REP_aspirationS  +     0.22441677117341 *
128924    +        REP_body_styleC  +    -0.02928079039896 * REP_body_styleH
128925    +          +    -0.32302273741455 * REP_body_styleS  +    -0.34785776016975 *
128926    +        REP_drive_wheels4  +     0.10897139165566 * REP_drive_wheelsF
128927    +          +    -0.04922700305318 * REP_engine_locationF
128928    +          +    -0.26217753108901 * REP_fuel_systemnon_spdi
128929    +          +    -0.09655321276347 * REP_fuel_typeD  +     0.23776476290772 *
128930    +        REP_num_of_cylinders__4  +     0.09807786136518 * engine_typedohc
128931    +          +    -0.13265317517425 * engine_typel  +    -0.20346070618898 *
128932    +        engine_typeohc  +    -0.38758952222173 * engine_typeohcf
128933    +          +    -0.02182861600599 * engine_typeohcv ;
MPRINT(EM_DIAGRAM):   H11 = H11 + 1.04565178534847 * IMP_num_of_doors2 + -0.19697323559306 *
REP_aspirationS + 0.22441677117341 * REP_body_styleC + -0.02928079039896 * REP_body_styleH +
-0.32302273741455 * REP_body_styleS + -0.34785776016975 * REP_drive_wheels4 + 0.10897139165566
* REP_drive_wheelsF + -0.04922700305318 * REP_engine_locationF + -0.26217753108901 *
REP_fuel_systemnon_spdi + -0.09655321276347 * REP_fuel_typeD + 0.23776476290772 *
REP_num_of_cylinders__4 + 0.09807786136518 * engine_typedohc + -0.13265317517425 *
engine_typel + -0.20346070618898 * engine_typeohc + -0.38758952222173 * engine_typeohcf +
-0.02182861600599 * engine_typeohcv ;
128934    +   H12  = H12  +     0.26990643452778 * IMP_num_of_doors2
128935    +          +       0.167681754676 * REP_aspirationS  +     0.12265207155474 *
128936    +        REP_body_styleC  +     0.01179187263391 * REP_body_styleH
128937    +          +    -0.19097006494623 * REP_body_styleS  +     0.02816873649616 *
128938    +        REP_drive_wheels4  +     0.00159784165226 * REP_drive_wheelsF
128939    +          +    -0.02772792707071 * REP_engine_locationF
128940    +          +     0.12038561732288 * REP_fuel_systemnon_spdi
128941    +          +    -0.14129190020361 * REP_fuel_typeD  +     0.19062991356263 *
128942    +        REP_num_of_cylinders__4  +     0.24458965384513 * engine_typedohc
128943    +          +     0.06535466491026 * engine_typel  +     0.03320508558174 *
128944    +        engine_typeohc  +    -0.18114960783147 * engine_typeohcf
128945    +          +    -0.07940214830665 * engine_typeohcv ;
MPRINT(EM_DIAGRAM):   H12 = H12 + 0.26990643452778 * IMP_num_of_doors2 + 0.167681754676 *
REP_aspirationS + 0.12265207155474 * REP_body_styleC + 0.01179187263391 * REP_body_styleH +
-0.19097006494623 * REP_body_styleS + 0.02816873649616 * REP_drive_wheels4 + 0.00159784165226
* REP_drive_wheelsF + -0.02772792707071 * REP_engine_locationF + 0.12038561732288 *
REP_fuel_systemnon_spdi + -0.14129190020361 * REP_fuel_typeD + 0.19062991356263 *
REP_num_of_cylinders__4 + 0.24458965384513 * engine_typedohc + 0.06535466491026 * engine_typel
+ 0.03320508558174 * engine_typeohc + -0.18114960783147 * engine_typeohcf + -0.07940214830665
* engine_typeohcv ;
128946    +   H13  = H13  +     1.05539312393709 * IMP_num_of_doors2
128947    +          +     0.12429838443133 * REP_aspirationS  +     0.40169612542437 *
128948    +        REP_body_styleC  +    -0.09868938303023 * REP_body_styleH
128949    +          +      0.2376441839816 * REP_body_styleS  +     0.13697634714208 *
128950    +        REP_drive_wheels4  +     0.10951824489242 * REP_drive_wheelsF
128951    +          +    -0.39061918168859 * REP_engine_locationF
128952    +          +    -0.35137171605866 * REP_fuel_systemnon_spdi
128953    +          +    -0.02185171430754 * REP_fuel_typeD  +    -0.09138285511683 *
128954    +        REP_num_of_cylinders__4  +     0.03269731016982 * engine_typedohc
128955    +          +     0.05515310047148 * engine_typel  +     0.73759347527352 *
128956    +        engine_typeohc  +    -0.25108559978843 * engine_typeohcf
128957    +          +    -0.04350517211887 * engine_typeohcv ;
MPRINT(EM_DIAGRAM):   H13 = H13 + 1.05539312393709 * IMP_num_of_doors2 + 0.12429838443133 *
REP_aspirationS + 0.40169612542437 * REP_body_styleC + -0.09868938303023 * REP_body_styleH +
0.2376441839816 * REP_body_styleS + 0.13697634714208 * REP_drive_wheels4 + 0.10951824489242 *
REP_drive_wheelsF + -0.39061918168859 * REP_engine_locationF + -0.35137171605866 *
REP_fuel_systemnon_spdi + -0.02185171430754 * REP_fuel_typeD + -0.09138285511683 *
REP_num_of_cylinders__4 + 0.03269731016982 * engine_typedohc + 0.05515310047148 * engine_typel
+ 0.73759347527352 * engine_typeohc + -0.25108559978843 * engine_typeohcf + -0.04350517211887
* engine_typeohcv ;
128958    +   H14  = H14  +    -0.02666661002825 * IMP_num_of_doors2
128959    +          +     0.23388455289343 * REP_aspirationS  +     0.14743723464082 *
128960    +        REP_body_styleC  +      0.0123336113796 * REP_body_styleH
128961    +          +     0.09096512684108 * REP_body_styleS  +     0.10317954156915 *
128962    +        REP_drive_wheels4  +    -0.02461397967256 * REP_drive_wheelsF
128963    +          +     0.23880808113951 * REP_engine_locationF
128964    +          +     0.07730157092911 * REP_fuel_systemnon_spdi
128965    +          +    -0.18576165929056 * REP_fuel_typeD  +    -0.07768584919964 *
128966    +        REP_num_of_cylinders__4  +    -0.12278489872095 * engine_typedohc
128967    +          +    -0.11219020348018 * engine_typel  +    -0.25056732048025 *
128968    +        engine_typeohc  +     0.04020447734225 * engine_typeohcf
128969    +          +    -0.01124754988024 * engine_typeohcv ;
MPRINT(EM_DIAGRAM):   H14 = H14 + -0.02666661002825 * IMP_num_of_doors2 + 0.23388455289343 *
REP_aspirationS + 0.14743723464082 * REP_body_styleC + 0.0123336113796 * REP_body_styleH +
0.09096512684108 * REP_body_styleS + 0.10317954156915 * REP_drive_wheels4 + -0.02461397967256
* REP_drive_wheelsF + 0.23880808113951 * REP_engine_locationF + 0.07730157092911 *
REP_fuel_systemnon_spdi + -0.18576165929056 * REP_fuel_typeD + -0.07768584919964 *
REP_num_of_cylinders__4 + -0.12278489872095 * engine_typedohc + -0.11219020348018 *
engine_typel + -0.25056732048025 * engine_typeohc + 0.04020447734225 * engine_typeohcf +
-0.01124754988024 * engine_typeohcv ;
128970    +   H11  =     0.16799741694776 + H11 ;
MPRINT(EM_DIAGRAM):   H11 = 0.16799741694776 + H11 ;
128971    +   H12  =     0.36085487833004 + H12 ;
MPRINT(EM_DIAGRAM):   H12 = 0.36085487833004 + H12 ;
128972    +   H13  =     0.92763058157618 + H13 ;
MPRINT(EM_DIAGRAM):   H13 = 0.92763058157618 + H13 ;
128973    +   H14  =     1.24301062195055 + H14 ;
MPRINT(EM_DIAGRAM):   H14 = 1.24301062195055 + H14 ;
128974    +   H11  = TANH(H11 );
MPRINT(EM_DIAGRAM):   H11 = TANH(H11 );
128975    +   H12  = TANH(H12 );
MPRINT(EM_DIAGRAM):   H12 = TANH(H12 );
128976    +   H13  = TANH(H13 );
MPRINT(EM_DIAGRAM):   H13 = TANH(H13 );
128977    +   H14  = TANH(H14 );
MPRINT(EM_DIAGRAM):   H14 = TANH(H14 );
128978    +END;
MPRINT(EM_DIAGRAM):   END;
128979    +ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
128980    +   H11  = .;
MPRINT(EM_DIAGRAM):   H11 = .;
128981    +   H12  = .;
MPRINT(EM_DIAGRAM):   H12 = .;
128982    +   H13  = .;
MPRINT(EM_DIAGRAM):   H13 = .;
128983    +   H14  = .;
MPRINT(EM_DIAGRAM):   H14 = .;
128984    +END;
MPRINT(EM_DIAGRAM):   END;
128985    +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
128986    +*** Writing the Node Risk ;
MPRINT(EM_DIAGRAM):   *** Writing the Node Risk ;
128987    +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
128988    +
128989    +*** Generate dummy variables for Risk ;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for Risk ;
128990    +drop Risk1 Risk0 ;
MPRINT(EM_DIAGRAM):   drop Risk1 Risk0 ;
128991    +label F_Risk = 'From: Risk' ;
MPRINT(EM_DIAGRAM):   label F_Risk = 'From: Risk' ;
128992    +length F_Risk $ 12;
MPRINT(EM_DIAGRAM):   length F_Risk $ 12;
128993    +F_Risk = put( Risk , BEST12. );
MPRINT(EM_DIAGRAM):   F_Risk = put( Risk , BEST12. );
128994    +%DMNORMIP( F_Risk )
MPRINT(DMNORMIP):   call dmnorm(F_Risk,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
128995    +if missing( Risk ) then do;
MPRINT(EM_DIAGRAM):   if missing( Risk ) then do;
128996    +   Risk1 = .;
MPRINT(EM_DIAGRAM):   Risk1 = .;
128997    +   Risk0 = .;
MPRINT(EM_DIAGRAM):   Risk0 = .;
128998    +end;
MPRINT(EM_DIAGRAM):   end;
128999    +else do;
MPRINT(EM_DIAGRAM):   else do;
129000    +   if F_Risk = '1'  then do;
MPRINT(EM_DIAGRAM):   if F_Risk = '1' then do;
129001    +      Risk1 = 1;
MPRINT(EM_DIAGRAM):   Risk1 = 1;
129002    +      Risk0 = 0;
MPRINT(EM_DIAGRAM):   Risk0 = 0;
129003    +   end;
MPRINT(EM_DIAGRAM):   end;
129004    +   else if F_Risk = '0'  then do;
MPRINT(EM_DIAGRAM):   else if F_Risk = '0' then do;
129005    +      Risk1 = 0;
MPRINT(EM_DIAGRAM):   Risk1 = 0;
129006    +      Risk0 = 1;
MPRINT(EM_DIAGRAM):   Risk0 = 1;
129007    +   end;
MPRINT(EM_DIAGRAM):   end;
129008    +   else do;
MPRINT(EM_DIAGRAM):   else do;
129009    +      Risk1 = .;
MPRINT(EM_DIAGRAM):   Risk1 = .;
129010    +      Risk0 = .;
MPRINT(EM_DIAGRAM):   Risk0 = .;
129011    +   end;
MPRINT(EM_DIAGRAM):   end;
129012    +end;
MPRINT(EM_DIAGRAM):   end;
129013    +IF _DM_BAD EQ 0 THEN DO;
MPRINT(EM_DIAGRAM):   IF _DM_BAD EQ 0 THEN DO;
129014    +   P_Risk1  =     2.33058130691871 * H11  +      0.6315559780393 * H12
129015    +          +     2.68752606098709 * H13  +     -0.1774721562472 * H14 ;
MPRINT(EM_DIAGRAM):   P_Risk1 = 2.33058130691871 * H11 + 0.6315559780393 * H12 +
2.68752606098709 * H13 + -0.1774721562472 * H14 ;
129016    +   P_Risk1  =    -0.37783197107417 + P_Risk1 ;
MPRINT(EM_DIAGRAM):   P_Risk1 = -0.37783197107417 + P_Risk1 ;
129017    +   P_Risk0  = 0;
MPRINT(EM_DIAGRAM):   P_Risk0 = 0;
129018    +   _MAX_ = MAX (P_Risk1 , P_Risk0 );
MPRINT(EM_DIAGRAM):   _MAX_ = MAX (P_Risk1 , P_Risk0 );
129019    +   _SUM_ = 0.;
MPRINT(EM_DIAGRAM):   _SUM_ = 0.;
129020    +   P_Risk1  = EXP(P_Risk1  - _MAX_);
MPRINT(EM_DIAGRAM):   P_Risk1 = EXP(P_Risk1 - _MAX_);
129021    +   _SUM_ = _SUM_ + P_Risk1 ;
MPRINT(EM_DIAGRAM):   _SUM_ = _SUM_ + P_Risk1 ;
129022    +   P_Risk0  = EXP(P_Risk0  - _MAX_);
MPRINT(EM_DIAGRAM):   P_Risk0 = EXP(P_Risk0 - _MAX_);
129023    +   _SUM_ = _SUM_ + P_Risk0 ;
MPRINT(EM_DIAGRAM):   _SUM_ = _SUM_ + P_Risk0 ;
129024    +   P_Risk1  = P_Risk1  / _SUM_;
MPRINT(EM_DIAGRAM):   P_Risk1 = P_Risk1 / _SUM_;
129025    +   P_Risk0  = P_Risk0  / _SUM_;
MPRINT(EM_DIAGRAM):   P_Risk0 = P_Risk0 / _SUM_;
129026    +END;
MPRINT(EM_DIAGRAM):   END;
129027    +ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
129028    +   P_Risk1  = .;
MPRINT(EM_DIAGRAM):   P_Risk1 = .;
129029    +   P_Risk0  = .;
MPRINT(EM_DIAGRAM):   P_Risk0 = .;
129030    +END;
MPRINT(EM_DIAGRAM):   END;
129031    +IF _DM_BAD EQ 1 THEN DO;
MPRINT(EM_DIAGRAM):   IF _DM_BAD EQ 1 THEN DO;
129032    +   P_Risk1  =                 0.54;
MPRINT(EM_DIAGRAM):   P_Risk1 = 0.54;
129033    +   P_Risk0  =                 0.46;
MPRINT(EM_DIAGRAM):   P_Risk0 = 0.46;
129034    +END;
MPRINT(EM_DIAGRAM):   END;
129035    +*** *****************************;
MPRINT(EM_DIAGRAM):   *** *****************************;
129036    +*** Writing the Residuals  of the Node Risk ;
MPRINT(EM_DIAGRAM):   *** Writing the Residuals of the Node Risk ;
129037    +*** ******************************;
MPRINT(EM_DIAGRAM):   *** ******************************;
129038    +IF MISSING( Risk1 ) THEN R_Risk1  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( Risk1 ) THEN R_Risk1 = . ;
129039    +ELSE R_Risk1  = Risk1  - P_Risk1 ;
MPRINT(EM_DIAGRAM):   ELSE R_Risk1 = Risk1 - P_Risk1 ;
129040    +IF MISSING( Risk0 ) THEN R_Risk0  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( Risk0 ) THEN R_Risk0 = . ;
129041    +ELSE R_Risk0  = Risk0  - P_Risk0 ;
MPRINT(EM_DIAGRAM):   ELSE R_Risk0 = Risk0 - P_Risk0 ;
129042    +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
129043    +*** Writing the I_Risk  AND U_Risk ;
MPRINT(EM_DIAGRAM):   *** Writing the I_Risk AND U_Risk ;
129044    +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
129045    +_MAXP_ = P_Risk1 ;
MPRINT(EM_DIAGRAM):   _MAXP_ = P_Risk1 ;
129046    +I_Risk  = "1           " ;
MPRINT(EM_DIAGRAM):   I_Risk = "1           " ;
129047    +U_Risk  =                    1;
MPRINT(EM_DIAGRAM):   U_Risk = 1;
129048    +IF( _MAXP_ LT P_Risk0  ) THEN DO;
MPRINT(EM_DIAGRAM):   IF( _MAXP_ LT P_Risk0 ) THEN DO;
129049    +   _MAXP_ = P_Risk0 ;
MPRINT(EM_DIAGRAM):   _MAXP_ = P_Risk0 ;
129050    +   I_Risk  = "0           " ;
MPRINT(EM_DIAGRAM):   I_Risk = "0           " ;
129051    +   U_Risk  =                    0;
MPRINT(EM_DIAGRAM):   U_Risk = 0;
129052    +END;
MPRINT(EM_DIAGRAM):   END;
129053    +********************************;
MPRINT(EM_DIAGRAM):   ********************************;
129054    +*** End Scoring Code for Neural;
MPRINT(EM_DIAGRAM):   *** End Scoring Code for Neural;
129055    +********************************;
MPRINT(EM_DIAGRAM):   ********************************;
129056    +drop
129057    +H11
129058    +H12
129059    +H13
129060    +H14
129061    +;
MPRINT(EM_DIAGRAM):   drop H11 H12 H13 H14 ;
129062    +drop S_:;
MPRINT(EM_DIAGRAM):   drop S_:;
NOTE: %INCLUDE (level 1) ending.
MPRINT(EM_DIAGRAM):   run;
129063     run;
 
NOTE: DATA STEP view saved on file EMWS1.NEURAL4_TRAIN.
NOTE: A stored DATA STEP view cannot run under a different operating system.
NOTE: View EMWS1.REPL2_TRAIN.VIEW used (Total process time):
      real time           0.25 seconds
      cpu time            0.18 seconds
 
NOTE: DATA statement used (Total process time):
      real time           0.26 seconds
      cpu time            0.20 seconds
 
 
MPRINT(EM_DIAGRAM):   quit;
129064     quit;
129065     filename emflow;
MPRINT(EM_DIAGRAM):   filename emflow;
NOTE: Fileref EMFLOW has been deassigned.
129066     filename emflow "H:\746\Decision Tree test\Workspaces\EMWS1\Neural4\EMFLOWSCORE.sas"
129066   ! ;
MPRINT(EM_DIAGRAM):    filename emflow "H:\746\Decision Tree
test\Workspaces\EMWS1\Neural4\EMFLOWSCORE.sas";
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Neural4: Scoring VALIDATE data;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
129067     *------------------------------------------------------------*;
129068     * Neural4: Scoring VALIDATE data;
129069     *------------------------------------------------------------*;
129070     data EMWS1.Neural4_VALIDATE
129071     / view=EMWS1.Neural4_VALIDATE
129072     ;
MPRINT(EM_DIAGRAM):   data EMWS1.Neural4_VALIDATE / view=EMWS1.Neural4_VALIDATE ;
129073     set EMWS1.Repl2_VALIDATE
129074     ;
MPRINT(EM_DIAGRAM):   set EMWS1.Repl2_VALIDATE ;
129075     %inc emflow;
NOTE: %INCLUDE (level 1) file EMFLOW is file H:\746\Decision Tree
      test\Workspaces\EMWS1\Neural4\EMFLOWSCORE.sas.
129076    +***********************************;
MPRINT(EM_DIAGRAM):   ***********************************;
129077    +*** Begin Scoring Code for Neural;
MPRINT(EM_DIAGRAM):   *** Begin Scoring Code for Neural;
129078    +***********************************;
MPRINT(EM_DIAGRAM):   ***********************************;
129079    +DROP _DM_BAD _EPS _NOCL_ _MAX_ _MAXP_ _SUM_ _NTRIALS;
MPRINT(EM_DIAGRAM):   DROP _DM_BAD _EPS _NOCL_ _MAX_ _MAXP_ _SUM_ _NTRIALS;
129080    + _DM_BAD = 0;
MPRINT(EM_DIAGRAM):   _DM_BAD = 0;
129081    + _NOCL_ = .;
MPRINT(EM_DIAGRAM):   _NOCL_ = .;
129082    + _MAX_ = .;
MPRINT(EM_DIAGRAM):   _MAX_ = .;
129083    + _MAXP_ = .;
MPRINT(EM_DIAGRAM):   _MAXP_ = .;
129084    + _SUM_ = .;
MPRINT(EM_DIAGRAM):   _SUM_ = .;
129085    + _NTRIALS = .;
MPRINT(EM_DIAGRAM):   _NTRIALS = .;
129086    + _EPS =                1E-10;
MPRINT(EM_DIAGRAM):   _EPS = 1E-10;
129087    +LENGTH _WARN_ $4
129088    +      F_Risk  $ 12
129089    +;
MPRINT(EM_DIAGRAM):   LENGTH _WARN_ $4 F_Risk $ 12 ;
129090    +      label S_LOG_REP_IMP_price = 'Standard: LOG_REP_IMP_price' ;
MPRINT(EM_DIAGRAM):   label S_LOG_REP_IMP_price = 'Standard: LOG_REP_IMP_price' ;
129091    +
129092    +      label S_LOG_REP_compression_ratio =
129093    +'Standard: LOG_REP_compression_ratio' ;
MPRINT(EM_DIAGRAM):   label S_LOG_REP_compression_ratio = 'Standard:
LOG_REP_compression_ratio' ;
129094    +
129095    +      label S_LOG_REP_engine_size = 'Standard: LOG_REP_engine_size' ;
MPRINT(EM_DIAGRAM):   label S_LOG_REP_engine_size = 'Standard: LOG_REP_engine_size' ;
129096    +
129097    +      label S_REP_IMP_bore = 'Standard: REP_IMP_bore' ;
MPRINT(EM_DIAGRAM):   label S_REP_IMP_bore = 'Standard: REP_IMP_bore' ;
129098    +
129099    +      label S_REP_IMP_stroke = 'Standard: REP_IMP_stroke' ;
MPRINT(EM_DIAGRAM):   label S_REP_IMP_stroke = 'Standard: REP_IMP_stroke' ;
129100    +
129101    +      label S_REP_city_mpg = 'Standard: REP_city_mpg' ;
MPRINT(EM_DIAGRAM):   label S_REP_city_mpg = 'Standard: REP_city_mpg' ;
129102    +
129103    +      label S_REP_curb_weight = 'Standard: REP_curb_weight' ;
MPRINT(EM_DIAGRAM):   label S_REP_curb_weight = 'Standard: REP_curb_weight' ;
129104    +
129105    +      label S_REP_height = 'Standard: REP_height' ;
MPRINT(EM_DIAGRAM):   label S_REP_height = 'Standard: REP_height' ;
129106    +
129107    +      label S_REP_highway_mpg = 'Standard: REP_highway_mpg' ;
MPRINT(EM_DIAGRAM):   label S_REP_highway_mpg = 'Standard: REP_highway_mpg' ;
129108    +
129109    +      label S_REP_horsepower = 'Standard: REP_horsepower' ;
MPRINT(EM_DIAGRAM):   label S_REP_horsepower = 'Standard: REP_horsepower' ;
129110    +
129111    +      label S_REP_length = 'Standard: REP_length' ;
MPRINT(EM_DIAGRAM):   label S_REP_length = 'Standard: REP_length' ;
129112    +
129113    +      label S_REP_peak_rpm = 'Standard: REP_peak_rpm' ;
MPRINT(EM_DIAGRAM):   label S_REP_peak_rpm = 'Standard: REP_peak_rpm' ;
129114    +
129115    +      label S_REP_wheel_base = 'Standard: REP_wheel_base' ;
MPRINT(EM_DIAGRAM):   label S_REP_wheel_base = 'Standard: REP_wheel_base' ;
129116    +
129117    +      label S_REP_width = 'Standard: REP_width' ;
MPRINT(EM_DIAGRAM):   label S_REP_width = 'Standard: REP_width' ;
129118    +
129119    +      label M_bore0 = 'Dummy: M_bore=0' ;
MPRINT(EM_DIAGRAM):   label M_bore0 = 'Dummy: M_bore=0' ;
129120    +
129121    +      label M_num_of_doors0 = 'Dummy: M_num_of_doors=0' ;
MPRINT(EM_DIAGRAM):   label M_num_of_doors0 = 'Dummy: M_num_of_doors=0' ;
129122    +
129123    +      label M_price0 = 'Dummy: M_price=0' ;
MPRINT(EM_DIAGRAM):   label M_price0 = 'Dummy: M_price=0' ;
129124    +
129125    +      label M_stroke0 = 'Dummy: M_stroke=0' ;
MPRINT(EM_DIAGRAM):   label M_stroke0 = 'Dummy: M_stroke=0' ;
129126    +
129127    +      label IMP_num_of_doors2 = 'Dummy: IMP_num_of_doors=2' ;
MPRINT(EM_DIAGRAM):   label IMP_num_of_doors2 = 'Dummy: IMP_num_of_doors=2' ;
129128    +
129129    +      label REP_aspirationS = 'Dummy: REP_aspiration=S' ;
MPRINT(EM_DIAGRAM):   label REP_aspirationS = 'Dummy: REP_aspiration=S' ;
129130    +
129131    +      label REP_body_styleC = 'Dummy: REP_body_style=C' ;
MPRINT(EM_DIAGRAM):   label REP_body_styleC = 'Dummy: REP_body_style=C' ;
129132    +
129133    +      label REP_body_styleH = 'Dummy: REP_body_style=H' ;
MPRINT(EM_DIAGRAM):   label REP_body_styleH = 'Dummy: REP_body_style=H' ;
129134    +
129135    +      label REP_body_styleS = 'Dummy: REP_body_style=S' ;
MPRINT(EM_DIAGRAM):   label REP_body_styleS = 'Dummy: REP_body_style=S' ;
129136    +
129137    +      label REP_drive_wheels4 = 'Dummy: REP_drive_wheels=4' ;
MPRINT(EM_DIAGRAM):   label REP_drive_wheels4 = 'Dummy: REP_drive_wheels=4' ;
129138    +
129139    +      label REP_drive_wheelsF = 'Dummy: REP_drive_wheels=F' ;
MPRINT(EM_DIAGRAM):   label REP_drive_wheelsF = 'Dummy: REP_drive_wheels=F' ;
129140    +
129141    +      label REP_engine_locationF = 'Dummy: REP_engine_location=F' ;
MPRINT(EM_DIAGRAM):   label REP_engine_locationF = 'Dummy: REP_engine_location=F' ;
129142    +
129143    +      label REP_fuel_systemnon_spdi = 'Dummy: REP_fuel_system=non-spdi' ;
MPRINT(EM_DIAGRAM):   label REP_fuel_systemnon_spdi = 'Dummy: REP_fuel_system=non-spdi' ;
129144    +
129145    +      label REP_fuel_typeD = 'Dummy: REP_fuel_type=D' ;
MPRINT(EM_DIAGRAM):   label REP_fuel_typeD = 'Dummy: REP_fuel_type=D' ;
129146    +
129147    +      label REP_num_of_cylinders__4 = 'Dummy: REP_num_of_cylinders=<=4' ;
MPRINT(EM_DIAGRAM):   label REP_num_of_cylinders__4 = 'Dummy: REP_num_of_cylinders=<=4' ;
129148    +
129149    +      label engine_typedohc = 'Dummy: engine_type=dohc' ;
MPRINT(EM_DIAGRAM):   label engine_typedohc = 'Dummy: engine_type=dohc' ;
129150    +
129151    +      label engine_typel = 'Dummy: engine_type=l' ;
MPRINT(EM_DIAGRAM):   label engine_typel = 'Dummy: engine_type=l' ;
129152    +
129153    +      label engine_typeohc = 'Dummy: engine_type=ohc' ;
MPRINT(EM_DIAGRAM):   label engine_typeohc = 'Dummy: engine_type=ohc' ;
129154    +
129155    +      label engine_typeohcf = 'Dummy: engine_type=ohcf' ;
MPRINT(EM_DIAGRAM):   label engine_typeohcf = 'Dummy: engine_type=ohcf' ;
129156    +
129157    +      label engine_typeohcv = 'Dummy: engine_type=ohcv' ;
MPRINT(EM_DIAGRAM):   label engine_typeohcv = 'Dummy: engine_type=ohcv' ;
129158    +
129159    +      label H11 = 'Hidden: H1=1' ;
MPRINT(EM_DIAGRAM):   label H11 = 'Hidden: H1=1' ;
129160    +
129161    +      label H12 = 'Hidden: H1=2' ;
MPRINT(EM_DIAGRAM):   label H12 = 'Hidden: H1=2' ;
129162    +
129163    +      label H13 = 'Hidden: H1=3' ;
MPRINT(EM_DIAGRAM):   label H13 = 'Hidden: H1=3' ;
129164    +
129165    +      label H14 = 'Hidden: H1=4' ;
MPRINT(EM_DIAGRAM):   label H14 = 'Hidden: H1=4' ;
129166    +
129167    +      label I_Risk = 'Into: Risk' ;
MPRINT(EM_DIAGRAM):   label I_Risk = 'Into: Risk' ;
129168    +
129169    +      label F_Risk = 'From: Risk' ;
MPRINT(EM_DIAGRAM):   label F_Risk = 'From: Risk' ;
129170    +
129171    +      label U_Risk = 'Unnormalized Into: Risk' ;
MPRINT(EM_DIAGRAM):   label U_Risk = 'Unnormalized Into: Risk' ;
129172    +
129173    +      label P_Risk1 = 'Predicted: Risk=1' ;
MPRINT(EM_DIAGRAM):   label P_Risk1 = 'Predicted: Risk=1' ;
129174    +
129175    +      label R_Risk1 = 'Residual: Risk=1' ;
MPRINT(EM_DIAGRAM):   label R_Risk1 = 'Residual: Risk=1' ;
129176    +
129177    +      label P_Risk0 = 'Predicted: Risk=0' ;
MPRINT(EM_DIAGRAM):   label P_Risk0 = 'Predicted: Risk=0' ;
129178    +
129179    +      label R_Risk0 = 'Residual: Risk=0' ;
MPRINT(EM_DIAGRAM):   label R_Risk0 = 'Residual: Risk=0' ;
129180    +
129181    +      label  _WARN_ = "Warnings";
MPRINT(EM_DIAGRAM):   label _WARN_ = "Warnings";
129182    +
129183    +*** Generate dummy variables for M_bore ;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for M_bore ;
129184    +drop M_bore0 ;
MPRINT(EM_DIAGRAM):   drop M_bore0 ;
129185    +if missing( M_bore ) then do;
MPRINT(EM_DIAGRAM):   if missing( M_bore ) then do;
129186    +   M_bore0 = .;
MPRINT(EM_DIAGRAM):   M_bore0 = .;
129187    +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
129188    +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
129189    +end;
MPRINT(EM_DIAGRAM):   end;
129190    +else do;
MPRINT(EM_DIAGRAM):   else do;
129191    +   length _dm12 $ 12; drop _dm12 ;
MPRINT(EM_DIAGRAM):   length _dm12 $ 12;
MPRINT(EM_DIAGRAM):   drop _dm12 ;
129192    +   _dm12 = put( M_bore , BEST12. );
MPRINT(EM_DIAGRAM):   _dm12 = put( M_bore , BEST12. );
129193    +   %DMNORMIP( _dm12 )
MPRINT(DMNORMIP):   call dmnorm(_dm12,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
129194    +   if _dm12 = '0'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 = '0' then do;
129195    +      M_bore0 = 1;
MPRINT(EM_DIAGRAM):   M_bore0 = 1;
129196    +   end;
MPRINT(EM_DIAGRAM):   end;
129197    +   else if _dm12 = '1'  then do;
MPRINT(EM_DIAGRAM):   else if _dm12 = '1' then do;
129198    +      M_bore0 = -1;
MPRINT(EM_DIAGRAM):   M_bore0 = -1;
129199    +   end;
MPRINT(EM_DIAGRAM):   end;
129200    +   else do;
MPRINT(EM_DIAGRAM):   else do;
129201    +      M_bore0 = .;
MPRINT(EM_DIAGRAM):   M_bore0 = .;
129202    +      substr(_warn_,2,1) = 'U';
MPRINT(EM_DIAGRAM):   substr(_warn_,2,1) = 'U';
129203    +      _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
129204    +   end;
MPRINT(EM_DIAGRAM):   end;
129205    +end;
MPRINT(EM_DIAGRAM):   end;
129206    +
129207    +*** Generate dummy variables for M_num_of_doors ;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for M_num_of_doors ;
129208    +drop M_num_of_doors0 ;
MPRINT(EM_DIAGRAM):   drop M_num_of_doors0 ;
129209    +if missing( M_num_of_doors ) then do;
MPRINT(EM_DIAGRAM):   if missing( M_num_of_doors ) then do;
129210    +   M_num_of_doors0 = .;
MPRINT(EM_DIAGRAM):   M_num_of_doors0 = .;
129211    +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
129212    +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
129213    +end;
MPRINT(EM_DIAGRAM):   end;
129214    +else do;
MPRINT(EM_DIAGRAM):   else do;
129215    +   length _dm12 $ 12; drop _dm12 ;
MPRINT(EM_DIAGRAM):   length _dm12 $ 12;
MPRINT(EM_DIAGRAM):   drop _dm12 ;
129216    +   _dm12 = put( M_num_of_doors , BEST12. );
MPRINT(EM_DIAGRAM):   _dm12 = put( M_num_of_doors , BEST12. );
129217    +   %DMNORMIP( _dm12 )
MPRINT(DMNORMIP):   call dmnorm(_dm12,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
129218    +   if _dm12 = '0'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 = '0' then do;
129219    +      M_num_of_doors0 = 1;
MPRINT(EM_DIAGRAM):   M_num_of_doors0 = 1;
129220    +   end;
MPRINT(EM_DIAGRAM):   end;
129221    +   else if _dm12 = '1'  then do;
MPRINT(EM_DIAGRAM):   else if _dm12 = '1' then do;
129222    +      M_num_of_doors0 = -1;
MPRINT(EM_DIAGRAM):   M_num_of_doors0 = -1;
129223    +   end;
MPRINT(EM_DIAGRAM):   end;
129224    +   else do;
MPRINT(EM_DIAGRAM):   else do;
129225    +      M_num_of_doors0 = .;
MPRINT(EM_DIAGRAM):   M_num_of_doors0 = .;
129226    +      substr(_warn_,2,1) = 'U';
MPRINT(EM_DIAGRAM):   substr(_warn_,2,1) = 'U';
129227    +      _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
129228    +   end;
MPRINT(EM_DIAGRAM):   end;
129229    +end;
MPRINT(EM_DIAGRAM):   end;
129230    +
129231    +*** Generate dummy variables for M_price ;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for M_price ;
129232    +drop M_price0 ;
MPRINT(EM_DIAGRAM):   drop M_price0 ;
129233    +if missing( M_price ) then do;
MPRINT(EM_DIAGRAM):   if missing( M_price ) then do;
129234    +   M_price0 = .;
MPRINT(EM_DIAGRAM):   M_price0 = .;
129235    +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
129236    +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
129237    +end;
MPRINT(EM_DIAGRAM):   end;
129238    +else do;
MPRINT(EM_DIAGRAM):   else do;
129239    +   length _dm12 $ 12; drop _dm12 ;
MPRINT(EM_DIAGRAM):   length _dm12 $ 12;
MPRINT(EM_DIAGRAM):   drop _dm12 ;
129240    +   _dm12 = put( M_price , BEST12. );
MPRINT(EM_DIAGRAM):   _dm12 = put( M_price , BEST12. );
129241    +   %DMNORMIP( _dm12 )
MPRINT(DMNORMIP):   call dmnorm(_dm12,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
129242    +   if _dm12 = '0'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 = '0' then do;
129243    +      M_price0 = 1;
MPRINT(EM_DIAGRAM):   M_price0 = 1;
129244    +   end;
MPRINT(EM_DIAGRAM):   end;
129245    +   else if _dm12 = '1'  then do;
MPRINT(EM_DIAGRAM):   else if _dm12 = '1' then do;
129246    +      M_price0 = -1;
MPRINT(EM_DIAGRAM):   M_price0 = -1;
129247    +   end;
MPRINT(EM_DIAGRAM):   end;
129248    +   else do;
MPRINT(EM_DIAGRAM):   else do;
129249    +      M_price0 = .;
MPRINT(EM_DIAGRAM):   M_price0 = .;
129250    +      substr(_warn_,2,1) = 'U';
MPRINT(EM_DIAGRAM):   substr(_warn_,2,1) = 'U';
129251    +      _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
129252    +   end;
MPRINT(EM_DIAGRAM):   end;
129253    +end;
MPRINT(EM_DIAGRAM):   end;
129254    +
129255    +*** Generate dummy variables for M_stroke ;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for M_stroke ;
129256    +drop M_stroke0 ;
MPRINT(EM_DIAGRAM):   drop M_stroke0 ;
129257    +if missing( M_stroke ) then do;
MPRINT(EM_DIAGRAM):   if missing( M_stroke ) then do;
129258    +   M_stroke0 = .;
MPRINT(EM_DIAGRAM):   M_stroke0 = .;
129259    +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
129260    +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
129261    +end;
MPRINT(EM_DIAGRAM):   end;
129262    +else do;
MPRINT(EM_DIAGRAM):   else do;
129263    +   length _dm12 $ 12; drop _dm12 ;
MPRINT(EM_DIAGRAM):   length _dm12 $ 12;
MPRINT(EM_DIAGRAM):   drop _dm12 ;
129264    +   _dm12 = put( M_stroke , BEST12. );
MPRINT(EM_DIAGRAM):   _dm12 = put( M_stroke , BEST12. );
129265    +   %DMNORMIP( _dm12 )
MPRINT(DMNORMIP):   call dmnorm(_dm12,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
129266    +   if _dm12 = '0'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 = '0' then do;
129267    +      M_stroke0 = 1;
MPRINT(EM_DIAGRAM):   M_stroke0 = 1;
129268    +   end;
MPRINT(EM_DIAGRAM):   end;
129269    +   else if _dm12 = '1'  then do;
MPRINT(EM_DIAGRAM):   else if _dm12 = '1' then do;
129270    +      M_stroke0 = -1;
MPRINT(EM_DIAGRAM):   M_stroke0 = -1;
129271    +   end;
MPRINT(EM_DIAGRAM):   end;
129272    +   else do;
MPRINT(EM_DIAGRAM):   else do;
129273    +      M_stroke0 = .;
MPRINT(EM_DIAGRAM):   M_stroke0 = .;
129274    +      substr(_warn_,2,1) = 'U';
MPRINT(EM_DIAGRAM):   substr(_warn_,2,1) = 'U';
129275    +      _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
129276    +   end;
MPRINT(EM_DIAGRAM):   end;
129277    +end;
MPRINT(EM_DIAGRAM):   end;
129278    +
129279    +*** Generate dummy variables for IMP_num_of_doors ;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for IMP_num_of_doors ;
129280    +drop IMP_num_of_doors2 ;
MPRINT(EM_DIAGRAM):   drop IMP_num_of_doors2 ;
129281    +if missing( IMP_num_of_doors ) then do;
MPRINT(EM_DIAGRAM):   if missing( IMP_num_of_doors ) then do;
129282    +   IMP_num_of_doors2 = .;
MPRINT(EM_DIAGRAM):   IMP_num_of_doors2 = .;
129283    +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
129284    +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
129285    +end;
MPRINT(EM_DIAGRAM):   end;
129286    +else do;
MPRINT(EM_DIAGRAM):   else do;
129287    +   length _dm12 $ 12; drop _dm12 ;
MPRINT(EM_DIAGRAM):   length _dm12 $ 12;
MPRINT(EM_DIAGRAM):   drop _dm12 ;
129288    +   _dm12 = put( IMP_num_of_doors , BEST12. );
MPRINT(EM_DIAGRAM):   _dm12 = put( IMP_num_of_doors , BEST12. );
129289    +   %DMNORMIP( _dm12 )
MPRINT(DMNORMIP):   call dmnorm(_dm12,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
129290    +   if _dm12 = '4'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 = '4' then do;
129291    +      IMP_num_of_doors2 = -1;
MPRINT(EM_DIAGRAM):   IMP_num_of_doors2 = -1;
129292    +   end;
MPRINT(EM_DIAGRAM):   end;
129293    +   else if _dm12 = '2'  then do;
MPRINT(EM_DIAGRAM):   else if _dm12 = '2' then do;
129294    +      IMP_num_of_doors2 = 1;
MPRINT(EM_DIAGRAM):   IMP_num_of_doors2 = 1;
129295    +   end;
MPRINT(EM_DIAGRAM):   end;
129296    +   else do;
MPRINT(EM_DIAGRAM):   else do;
129297    +      IMP_num_of_doors2 = .;
MPRINT(EM_DIAGRAM):   IMP_num_of_doors2 = .;
129298    +      substr(_warn_,2,1) = 'U';
MPRINT(EM_DIAGRAM):   substr(_warn_,2,1) = 'U';
129299    +      _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
129300    +   end;
MPRINT(EM_DIAGRAM):   end;
129301    +end;
MPRINT(EM_DIAGRAM):   end;
129302    +
129303    +*** Generate dummy variables for REP_aspiration ;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for REP_aspiration ;
129304    +drop REP_aspirationS ;
MPRINT(EM_DIAGRAM):   drop REP_aspirationS ;
129305    +if missing( REP_aspiration ) then do;
MPRINT(EM_DIAGRAM):   if missing( REP_aspiration ) then do;
129306    +   REP_aspirationS = .;
MPRINT(EM_DIAGRAM):   REP_aspirationS = .;
129307    +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
129308    +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
129309    +end;
MPRINT(EM_DIAGRAM):   end;
129310    +else do;
MPRINT(EM_DIAGRAM):   else do;
129311    +   length _dm5 $ 5; drop _dm5 ;
MPRINT(EM_DIAGRAM):   length _dm5 $ 5;
MPRINT(EM_DIAGRAM):   drop _dm5 ;
129312    +   _dm5 = put( REP_aspiration , $5. );
MPRINT(EM_DIAGRAM):   _dm5 = put( REP_aspiration , $5. );
129313    +   %DMNORMIP( _dm5 )
MPRINT(DMNORMIP):   call dmnorm(_dm5,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
129314    +   if _dm5 = 'S'  then do;
MPRINT(EM_DIAGRAM):   if _dm5 = 'S' then do;
129315    +      REP_aspirationS = 1;
MPRINT(EM_DIAGRAM):   REP_aspirationS = 1;
129316    +   end;
MPRINT(EM_DIAGRAM):   end;
129317    +   else if _dm5 = 'T'  then do;
MPRINT(EM_DIAGRAM):   else if _dm5 = 'T' then do;
129318    +      REP_aspirationS = -1;
MPRINT(EM_DIAGRAM):   REP_aspirationS = -1;
129319    +   end;
MPRINT(EM_DIAGRAM):   end;
129320    +   else do;
MPRINT(EM_DIAGRAM):   else do;
129321    +      REP_aspirationS = .;
MPRINT(EM_DIAGRAM):   REP_aspirationS = .;
129322    +      substr(_warn_,2,1) = 'U';
MPRINT(EM_DIAGRAM):   substr(_warn_,2,1) = 'U';
129323    +      _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
129324    +   end;
MPRINT(EM_DIAGRAM):   end;
129325    +end;
MPRINT(EM_DIAGRAM):   end;
129326    +
129327    +*** Generate dummy variables for REP_body_style ;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for REP_body_style ;
129328    +drop REP_body_styleC REP_body_styleH REP_body_styleS ;
MPRINT(EM_DIAGRAM):   drop REP_body_styleC REP_body_styleH REP_body_styleS ;
129329    +if missing( REP_body_style ) then do;
MPRINT(EM_DIAGRAM):   if missing( REP_body_style ) then do;
129330    +   REP_body_styleC = .;
MPRINT(EM_DIAGRAM):   REP_body_styleC = .;
129331    +   REP_body_styleH = .;
MPRINT(EM_DIAGRAM):   REP_body_styleH = .;
129332    +   REP_body_styleS = .;
MPRINT(EM_DIAGRAM):   REP_body_styleS = .;
129333    +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
129334    +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
129335    +end;
MPRINT(EM_DIAGRAM):   end;
129336    +else do;
MPRINT(EM_DIAGRAM):   else do;
129337    +   length _dm11 $ 11; drop _dm11 ;
MPRINT(EM_DIAGRAM):   length _dm11 $ 11;
MPRINT(EM_DIAGRAM):   drop _dm11 ;
129338    +   %DMNORMCP( REP_body_style , _dm11 )
MPRINT(DMNORMCP):   _dm11=dmnorm(REP_body_style,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMCP):  );
129339    +   if _dm11 = 'S'  then do;
MPRINT(EM_DIAGRAM):   if _dm11 = 'S' then do;
129340    +      REP_body_styleC = 0;
MPRINT(EM_DIAGRAM):   REP_body_styleC = 0;
129341    +      REP_body_styleH = 0;
MPRINT(EM_DIAGRAM):   REP_body_styleH = 0;
129342    +      REP_body_styleS = 1;
MPRINT(EM_DIAGRAM):   REP_body_styleS = 1;
129343    +   end;
MPRINT(EM_DIAGRAM):   end;
129344    +   else if _dm11 = 'H'  then do;
MPRINT(EM_DIAGRAM):   else if _dm11 = 'H' then do;
129345    +      REP_body_styleC = 0;
MPRINT(EM_DIAGRAM):   REP_body_styleC = 0;
129346    +      REP_body_styleH = 1;
MPRINT(EM_DIAGRAM):   REP_body_styleH = 1;
129347    +      REP_body_styleS = 0;
MPRINT(EM_DIAGRAM):   REP_body_styleS = 0;
129348    +   end;
MPRINT(EM_DIAGRAM):   end;
129349    +   else if _dm11 = 'W'  then do;
MPRINT(EM_DIAGRAM):   else if _dm11 = 'W' then do;
129350    +      REP_body_styleC = -1;
MPRINT(EM_DIAGRAM):   REP_body_styleC = -1;
129351    +      REP_body_styleH = -1;
MPRINT(EM_DIAGRAM):   REP_body_styleH = -1;
129352    +      REP_body_styleS = -1;
MPRINT(EM_DIAGRAM):   REP_body_styleS = -1;
129353    +   end;
MPRINT(EM_DIAGRAM):   end;
129354    +   else if _dm11 = 'C'  then do;
MPRINT(EM_DIAGRAM):   else if _dm11 = 'C' then do;
129355    +      REP_body_styleC = 1;
MPRINT(EM_DIAGRAM):   REP_body_styleC = 1;
129356    +      REP_body_styleH = 0;
MPRINT(EM_DIAGRAM):   REP_body_styleH = 0;
129357    +      REP_body_styleS = 0;
MPRINT(EM_DIAGRAM):   REP_body_styleS = 0;
129358    +   end;
MPRINT(EM_DIAGRAM):   end;
129359    +   else do;
MPRINT(EM_DIAGRAM):   else do;
129360    +      REP_body_styleC = .;
MPRINT(EM_DIAGRAM):   REP_body_styleC = .;
129361    +      REP_body_styleH = .;
MPRINT(EM_DIAGRAM):   REP_body_styleH = .;
129362    +      REP_body_styleS = .;
MPRINT(EM_DIAGRAM):   REP_body_styleS = .;
129363    +      substr(_warn_,2,1) = 'U';
MPRINT(EM_DIAGRAM):   substr(_warn_,2,1) = 'U';
129364    +      _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
129365    +   end;
MPRINT(EM_DIAGRAM):   end;
129366    +end;
MPRINT(EM_DIAGRAM):   end;
129367    +
129368    +*** Generate dummy variables for REP_drive_wheels ;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for REP_drive_wheels ;
129369    +drop REP_drive_wheels4 REP_drive_wheelsF ;
MPRINT(EM_DIAGRAM):   drop REP_drive_wheels4 REP_drive_wheelsF ;
129370    +if missing( REP_drive_wheels ) then do;
MPRINT(EM_DIAGRAM):   if missing( REP_drive_wheels ) then do;
129371    +   REP_drive_wheels4 = .;
MPRINT(EM_DIAGRAM):   REP_drive_wheels4 = .;
129372    +   REP_drive_wheelsF = .;
MPRINT(EM_DIAGRAM):   REP_drive_wheelsF = .;
129373    +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
129374    +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
129375    +end;
MPRINT(EM_DIAGRAM):   end;
129376    +else do;
MPRINT(EM_DIAGRAM):   else do;
129377    +   length _dm3 $ 3; drop _dm3 ;
MPRINT(EM_DIAGRAM):   length _dm3 $ 3;
MPRINT(EM_DIAGRAM):   drop _dm3 ;
129378    +   %DMNORMCP( REP_drive_wheels , _dm3 )
MPRINT(DMNORMCP):   _dm3=dmnorm(REP_drive_wheels,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMCP):  );
129379    +   if _dm3 = 'F'  then do;
MPRINT(EM_DIAGRAM):   if _dm3 = 'F' then do;
129380    +      REP_drive_wheels4 = 0;
MPRINT(EM_DIAGRAM):   REP_drive_wheels4 = 0;
129381    +      REP_drive_wheelsF = 1;
MPRINT(EM_DIAGRAM):   REP_drive_wheelsF = 1;
129382    +   end;
MPRINT(EM_DIAGRAM):   end;
129383    +   else if _dm3 = 'R'  then do;
MPRINT(EM_DIAGRAM):   else if _dm3 = 'R' then do;
129384    +      REP_drive_wheels4 = -1;
MPRINT(EM_DIAGRAM):   REP_drive_wheels4 = -1;
129385    +      REP_drive_wheelsF = -1;
MPRINT(EM_DIAGRAM):   REP_drive_wheelsF = -1;
129386    +   end;
MPRINT(EM_DIAGRAM):   end;
129387    +   else if _dm3 = '4'  then do;
MPRINT(EM_DIAGRAM):   else if _dm3 = '4' then do;
129388    +      REP_drive_wheels4 = 1;
MPRINT(EM_DIAGRAM):   REP_drive_wheels4 = 1;
129389    +      REP_drive_wheelsF = 0;
MPRINT(EM_DIAGRAM):   REP_drive_wheelsF = 0;
129390    +   end;
MPRINT(EM_DIAGRAM):   end;
129391    +   else do;
MPRINT(EM_DIAGRAM):   else do;
129392    +      REP_drive_wheels4 = .;
MPRINT(EM_DIAGRAM):   REP_drive_wheels4 = .;
129393    +      REP_drive_wheelsF = .;
MPRINT(EM_DIAGRAM):   REP_drive_wheelsF = .;
129394    +      substr(_warn_,2,1) = 'U';
MPRINT(EM_DIAGRAM):   substr(_warn_,2,1) = 'U';
129395    +      _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
129396    +   end;
MPRINT(EM_DIAGRAM):   end;
129397    +end;
MPRINT(EM_DIAGRAM):   end;
129398    +
129399    +*** Generate dummy variables for REP_engine_location ;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for REP_engine_location ;
129400    +drop REP_engine_locationF ;
MPRINT(EM_DIAGRAM):   drop REP_engine_locationF ;
129401    +if missing( REP_engine_location ) then do;
MPRINT(EM_DIAGRAM):   if missing( REP_engine_location ) then do;
129402    +   REP_engine_locationF = .;
MPRINT(EM_DIAGRAM):   REP_engine_locationF = .;
129403    +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
129404    +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
129405    +end;
MPRINT(EM_DIAGRAM):   end;
129406    +else do;
MPRINT(EM_DIAGRAM):   else do;
129407    +   length _dm5 $ 5; drop _dm5 ;
MPRINT(EM_DIAGRAM):   length _dm5 $ 5;
MPRINT(EM_DIAGRAM):   drop _dm5 ;
129408    +   %DMNORMCP( REP_engine_location , _dm5 )
MPRINT(DMNORMCP):   _dm5=dmnorm(REP_engine_location,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMCP):  );
129409    +   if _dm5 = 'F'  then do;
MPRINT(EM_DIAGRAM):   if _dm5 = 'F' then do;
129410    +      REP_engine_locationF = 1;
MPRINT(EM_DIAGRAM):   REP_engine_locationF = 1;
129411    +   end;
MPRINT(EM_DIAGRAM):   end;
129412    +   else if _dm5 = 'R'  then do;
MPRINT(EM_DIAGRAM):   else if _dm5 = 'R' then do;
129413    +      REP_engine_locationF = -1;
MPRINT(EM_DIAGRAM):   REP_engine_locationF = -1;
129414    +   end;
MPRINT(EM_DIAGRAM):   end;
129415    +   else do;
MPRINT(EM_DIAGRAM):   else do;
129416    +      REP_engine_locationF = .;
MPRINT(EM_DIAGRAM):   REP_engine_locationF = .;
129417    +      substr(_warn_,2,1) = 'U';
MPRINT(EM_DIAGRAM):   substr(_warn_,2,1) = 'U';
129418    +      _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
129419    +   end;
MPRINT(EM_DIAGRAM):   end;
129420    +end;
MPRINT(EM_DIAGRAM):   end;
129421    +
129422    +*** Generate dummy variables for REP_fuel_system ;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for REP_fuel_system ;
129423    +drop REP_fuel_systemnon_spdi ;
MPRINT(EM_DIAGRAM):   drop REP_fuel_systemnon_spdi ;
129424    +if missing( REP_fuel_system ) then do;
MPRINT(EM_DIAGRAM):   if missing( REP_fuel_system ) then do;
129425    +   REP_fuel_systemnon_spdi = .;
MPRINT(EM_DIAGRAM):   REP_fuel_systemnon_spdi = .;
129426    +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
129427    +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
129428    +end;
MPRINT(EM_DIAGRAM):   end;
129429    +else do;
MPRINT(EM_DIAGRAM):   else do;
129430    +   length _dm8 $ 8; drop _dm8 ;
MPRINT(EM_DIAGRAM):   length _dm8 $ 8;
MPRINT(EM_DIAGRAM):   drop _dm8 ;
129431    +   %DMNORMCP( REP_fuel_system , _dm8 )
MPRINT(DMNORMCP):   _dm8=dmnorm(REP_fuel_system,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMCP):  );
129432    +   if _dm8 = 'NON-SPDI'  then do;
MPRINT(EM_DIAGRAM):   if _dm8 = 'NON-SPDI' then do;
129433    +      REP_fuel_systemnon_spdi = 1;
MPRINT(EM_DIAGRAM):   REP_fuel_systemnon_spdi = 1;
129434    +   end;
MPRINT(EM_DIAGRAM):   end;
129435    +   else if _dm8 = 'SPDI'  then do;
MPRINT(EM_DIAGRAM):   else if _dm8 = 'SPDI' then do;
129436    +      REP_fuel_systemnon_spdi = -1;
MPRINT(EM_DIAGRAM):   REP_fuel_systemnon_spdi = -1;
129437    +   end;
MPRINT(EM_DIAGRAM):   end;
129438    +   else do;
MPRINT(EM_DIAGRAM):   else do;
129439    +      REP_fuel_systemnon_spdi = .;
MPRINT(EM_DIAGRAM):   REP_fuel_systemnon_spdi = .;
129440    +      substr(_warn_,2,1) = 'U';
MPRINT(EM_DIAGRAM):   substr(_warn_,2,1) = 'U';
129441    +      _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
129442    +   end;
MPRINT(EM_DIAGRAM):   end;
129443    +end;
MPRINT(EM_DIAGRAM):   end;
129444    +
129445    +*** Generate dummy variables for REP_fuel_type ;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for REP_fuel_type ;
129446    +drop REP_fuel_typeD ;
MPRINT(EM_DIAGRAM):   drop REP_fuel_typeD ;
129447    +if missing( REP_fuel_type ) then do;
MPRINT(EM_DIAGRAM):   if missing( REP_fuel_type ) then do;
129448    +   REP_fuel_typeD = .;
MPRINT(EM_DIAGRAM):   REP_fuel_typeD = .;
129449    +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
129450    +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
129451    +end;
MPRINT(EM_DIAGRAM):   end;
129452    +else do;
MPRINT(EM_DIAGRAM):   else do;
129453    +   length _dm6 $ 6; drop _dm6 ;
MPRINT(EM_DIAGRAM):   length _dm6 $ 6;
MPRINT(EM_DIAGRAM):   drop _dm6 ;
129454    +   %DMNORMCP( REP_fuel_type , _dm6 )
MPRINT(DMNORMCP):   _dm6=dmnorm(REP_fuel_type,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMCP):  );
129455    +   if _dm6 = 'G'  then do;
MPRINT(EM_DIAGRAM):   if _dm6 = 'G' then do;
129456    +      REP_fuel_typeD = -1;
MPRINT(EM_DIAGRAM):   REP_fuel_typeD = -1;
129457    +   end;
MPRINT(EM_DIAGRAM):   end;
129458    +   else if _dm6 = 'D'  then do;
MPRINT(EM_DIAGRAM):   else if _dm6 = 'D' then do;
129459    +      REP_fuel_typeD = 1;
MPRINT(EM_DIAGRAM):   REP_fuel_typeD = 1;
129460    +   end;
MPRINT(EM_DIAGRAM):   end;
129461    +   else do;
MPRINT(EM_DIAGRAM):   else do;
129462    +      REP_fuel_typeD = .;
MPRINT(EM_DIAGRAM):   REP_fuel_typeD = .;
129463    +      substr(_warn_,2,1) = 'U';
MPRINT(EM_DIAGRAM):   substr(_warn_,2,1) = 'U';
129464    +      _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
129465    +   end;
MPRINT(EM_DIAGRAM):   end;
129466    +end;
MPRINT(EM_DIAGRAM):   end;
129467    +
129468    +*** Generate dummy variables for REP_num_of_cylinders ;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for REP_num_of_cylinders ;
129469    +drop REP_num_of_cylinders__4 ;
MPRINT(EM_DIAGRAM):   drop REP_num_of_cylinders__4 ;
129470    +if missing( REP_num_of_cylinders ) then do;
MPRINT(EM_DIAGRAM):   if missing( REP_num_of_cylinders ) then do;
129471    +   REP_num_of_cylinders__4 = .;
MPRINT(EM_DIAGRAM):   REP_num_of_cylinders__4 = .;
129472    +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
129473    +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
129474    +end;
MPRINT(EM_DIAGRAM):   end;
129475    +else do;
MPRINT(EM_DIAGRAM):   else do;
129476    +   length _dm6 $ 6; drop _dm6 ;
MPRINT(EM_DIAGRAM):   length _dm6 $ 6;
MPRINT(EM_DIAGRAM):   drop _dm6 ;
129477    +   %DMNORMCP( REP_num_of_cylinders , _dm6 )
MPRINT(DMNORMCP):   _dm6=dmnorm(REP_num_of_cylinders,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMCP):  );
129478    +   if _dm6 = '<=4'  then do;
MPRINT(EM_DIAGRAM):   if _dm6 = '<=4' then do;
129479    +      REP_num_of_cylinders__4 = 1;
MPRINT(EM_DIAGRAM):   REP_num_of_cylinders__4 = 1;
129480    +   end;
MPRINT(EM_DIAGRAM):   end;
129481    +   else if _dm6 = '>4'  then do;
MPRINT(EM_DIAGRAM):   else if _dm6 = '>4' then do;
129482    +      REP_num_of_cylinders__4 = -1;
MPRINT(EM_DIAGRAM):   REP_num_of_cylinders__4 = -1;
129483    +   end;
MPRINT(EM_DIAGRAM):   end;
129484    +   else do;
MPRINT(EM_DIAGRAM):   else do;
129485    +      REP_num_of_cylinders__4 = .;
MPRINT(EM_DIAGRAM):   REP_num_of_cylinders__4 = .;
129486    +      substr(_warn_,2,1) = 'U';
MPRINT(EM_DIAGRAM):   substr(_warn_,2,1) = 'U';
129487    +      _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
129488    +   end;
MPRINT(EM_DIAGRAM):   end;
129489    +end;
MPRINT(EM_DIAGRAM):   end;
129490    +
129491    +*** Generate dummy variables for engine_type ;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for engine_type ;
129492    +drop engine_typedohc engine_typel engine_typeohc engine_typeohcf
129493    +        engine_typeohcv ;
MPRINT(EM_DIAGRAM):   drop engine_typedohc engine_typel engine_typeohc engine_typeohcf
engine_typeohcv ;
129494    +*** encoding is sparse, initialize to zero;
MPRINT(EM_DIAGRAM):   *** encoding is sparse, initialize to zero;
129495    +engine_typedohc = 0;
MPRINT(EM_DIAGRAM):   engine_typedohc = 0;
129496    +engine_typel = 0;
MPRINT(EM_DIAGRAM):   engine_typel = 0;
129497    +engine_typeohc = 0;
MPRINT(EM_DIAGRAM):   engine_typeohc = 0;
129498    +engine_typeohcf = 0;
MPRINT(EM_DIAGRAM):   engine_typeohcf = 0;
129499    +engine_typeohcv = 0;
MPRINT(EM_DIAGRAM):   engine_typeohcv = 0;
129500    +if missing( engine_type ) then do;
MPRINT(EM_DIAGRAM):   if missing( engine_type ) then do;
129501    +   engine_typedohc = .;
MPRINT(EM_DIAGRAM):   engine_typedohc = .;
129502    +   engine_typel = .;
MPRINT(EM_DIAGRAM):   engine_typel = .;
129503    +   engine_typeohc = .;
MPRINT(EM_DIAGRAM):   engine_typeohc = .;
129504    +   engine_typeohcf = .;
MPRINT(EM_DIAGRAM):   engine_typeohcf = .;
129505    +   engine_typeohcv = .;
MPRINT(EM_DIAGRAM):   engine_typeohcv = .;
129506    +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
129507    +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
129508    +end;
MPRINT(EM_DIAGRAM):   end;
129509    +else do;
MPRINT(EM_DIAGRAM):   else do;
129510    +   length _dm5 $ 5; drop _dm5 ;
MPRINT(EM_DIAGRAM):   length _dm5 $ 5;
MPRINT(EM_DIAGRAM):   drop _dm5 ;
129511    +   %DMNORMCP( engine_type , _dm5 )
MPRINT(DMNORMCP):   _dm5=dmnorm(engine_type,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMCP):  );
129512    +   if _dm5 = 'OHC'  then do;
MPRINT(EM_DIAGRAM):   if _dm5 = 'OHC' then do;
129513    +      engine_typeohc = 1;
MPRINT(EM_DIAGRAM):   engine_typeohc = 1;
129514    +   end;
MPRINT(EM_DIAGRAM):   end;
129515    +   else if _dm5 = 'OHCF'  then do;
MPRINT(EM_DIAGRAM):   else if _dm5 = 'OHCF' then do;
129516    +      engine_typeohcf = 1;
MPRINT(EM_DIAGRAM):   engine_typeohcf = 1;
129517    +   end;
MPRINT(EM_DIAGRAM):   end;
129518    +   else if _dm5 = 'OHCV'  then do;
MPRINT(EM_DIAGRAM):   else if _dm5 = 'OHCV' then do;
129519    +      engine_typeohcv = 1;
MPRINT(EM_DIAGRAM):   engine_typeohcv = 1;
129520    +   end;
MPRINT(EM_DIAGRAM):   end;
129521    +   else if _dm5 = 'DOHC'  then do;
MPRINT(EM_DIAGRAM):   else if _dm5 = 'DOHC' then do;
129522    +      engine_typedohc = 1;
MPRINT(EM_DIAGRAM):   engine_typedohc = 1;
129523    +   end;
MPRINT(EM_DIAGRAM):   end;
129524    +   else if _dm5 = 'L'  then do;
MPRINT(EM_DIAGRAM):   else if _dm5 = 'L' then do;
129525    +      engine_typel = 1;
MPRINT(EM_DIAGRAM):   engine_typel = 1;
129526    +   end;
MPRINT(EM_DIAGRAM):   end;
129527    +   else if _dm5 = 'ROTOR'  then do;
MPRINT(EM_DIAGRAM):   else if _dm5 = 'ROTOR' then do;
129528    +      engine_typedohc = -1;
MPRINT(EM_DIAGRAM):   engine_typedohc = -1;
129529    +      engine_typel = -1;
MPRINT(EM_DIAGRAM):   engine_typel = -1;
129530    +      engine_typeohc = -1;
MPRINT(EM_DIAGRAM):   engine_typeohc = -1;
129531    +      engine_typeohcf = -1;
MPRINT(EM_DIAGRAM):   engine_typeohcf = -1;
129532    +      engine_typeohcv = -1;
MPRINT(EM_DIAGRAM):   engine_typeohcv = -1;
129533    +   end;
MPRINT(EM_DIAGRAM):   end;
129534    +   else do;
MPRINT(EM_DIAGRAM):   else do;
129535    +      engine_typedohc = .;
MPRINT(EM_DIAGRAM):   engine_typedohc = .;
129536    +      engine_typel = .;
MPRINT(EM_DIAGRAM):   engine_typel = .;
129537    +      engine_typeohc = .;
MPRINT(EM_DIAGRAM):   engine_typeohc = .;
129538    +      engine_typeohcf = .;
MPRINT(EM_DIAGRAM):   engine_typeohcf = .;
129539    +      engine_typeohcv = .;
MPRINT(EM_DIAGRAM):   engine_typeohcv = .;
129540    +      substr(_warn_,2,1) = 'U';
MPRINT(EM_DIAGRAM):   substr(_warn_,2,1) = 'U';
129541    +      _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
129542    +   end;
MPRINT(EM_DIAGRAM):   end;
129543    +end;
MPRINT(EM_DIAGRAM):   end;
129544    +
129545    +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
129546    +*** Checking missing input Interval
129547    +*** *************************;
MPRINT(EM_DIAGRAM):   *** Checking missing input Interval *** *************************;
129548    +
129549    +IF NMISS(
129550    +   LOG_REP_IMP_price ,
129551    +   LOG_REP_compression_ratio ,
129552    +   LOG_REP_engine_size ,
129553    +   REP_IMP_bore ,
129554    +   REP_IMP_stroke ,
129555    +   REP_city_mpg ,
129556    +   REP_curb_weight ,
129557    +   REP_height ,
129558    +   REP_highway_mpg ,
129559    +   REP_horsepower ,
129560    +   REP_length ,
129561    +   REP_peak_rpm ,
129562    +   REP_wheel_base ,
129563    +   REP_width   ) THEN DO;
MPRINT(EM_DIAGRAM):   IF NMISS( LOG_REP_IMP_price , LOG_REP_compression_ratio ,
LOG_REP_engine_size , REP_IMP_bore , REP_IMP_stroke , REP_city_mpg , REP_curb_weight ,
REP_height , REP_highway_mpg , REP_horsepower , REP_length , REP_peak_rpm , REP_wheel_base ,
REP_width ) THEN DO;
129564    +   SUBSTR(_WARN_, 1, 1) = 'M';
MPRINT(EM_DIAGRAM):   SUBSTR(_WARN_, 1, 1) = 'M';
129565    +
129566    +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
129567    +END;
MPRINT(EM_DIAGRAM):   END;
129568    +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
129569    +*** Writing the Node intvl ;
MPRINT(EM_DIAGRAM):   *** Writing the Node intvl ;
129570    +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
129571    +IF _DM_BAD EQ 0 THEN DO;
MPRINT(EM_DIAGRAM):   IF _DM_BAD EQ 0 THEN DO;
129572    +   S_LOG_REP_IMP_price  =    -20.2356185469493 +     2.16855745948401 *
129573    +        LOG_REP_IMP_price ;
MPRINT(EM_DIAGRAM):   S_LOG_REP_IMP_price = -20.2356185469493 + 2.16855745948401 *
LOG_REP_IMP_price ;
129574    +   S_LOG_REP_compression_ratio
129575    +          =    -8.72649819321039 +     3.65742873950677 *
129576    +        LOG_REP_compression_ratio ;
MPRINT(EM_DIAGRAM):   S_LOG_REP_compression_ratio = -8.72649819321039 + 3.65742873950677 *
LOG_REP_compression_ratio ;
129577    +   S_LOG_REP_engine_size  =    -19.3053254119757 +     4.02929302984948 *
129578    +        LOG_REP_engine_size ;
MPRINT(EM_DIAGRAM):   S_LOG_REP_engine_size = -19.3053254119757 + 4.02929302984948 *
LOG_REP_engine_size ;
129579    +   S_REP_IMP_bore  =    -13.3604302656684 +     4.04536293034574 *
129580    +        REP_IMP_bore ;
MPRINT(EM_DIAGRAM):   S_REP_IMP_bore = -13.3604302656684 + 4.04536293034574 * REP_IMP_bore ;
129581    +   S_REP_IMP_stroke  =    -11.3205669287077 +     3.47855217496738 *
129582    +        REP_IMP_stroke ;
MPRINT(EM_DIAGRAM):   S_REP_IMP_stroke = -11.3205669287077 + 3.47855217496738 * REP_IMP_stroke
;
129583    +   S_REP_city_mpg  =    -4.23279255832632 +     0.16535248553422 *
129584    +        REP_city_mpg ;
MPRINT(EM_DIAGRAM):   S_REP_city_mpg = -4.23279255832632 + 0.16535248553422 * REP_city_mpg ;
129585    +   S_REP_curb_weight  =    -5.35597047742979 +     0.00212869810672 *
129586    +        REP_curb_weight ;
MPRINT(EM_DIAGRAM):   S_REP_curb_weight = -5.35597047742979 + 0.00212869810672 *
REP_curb_weight ;
129587    +   S_REP_height  =    -21.8926608140893 +     0.40589318675657 * REP_height ;
MPRINT(EM_DIAGRAM):   S_REP_height = -21.8926608140893 + 0.40589318675657 * REP_height ;
129588    +   S_REP_highway_mpg  =    -4.99166764925563 +     0.16020006928199 *
129589    +        REP_highway_mpg ;
MPRINT(EM_DIAGRAM):   S_REP_highway_mpg = -4.99166764925563 + 0.16020006928199 *
REP_highway_mpg ;
129590    +   S_REP_horsepower  =    -2.74643097264309 +     0.02734944206973 *
129591    +        REP_horsepower ;
MPRINT(EM_DIAGRAM):   S_REP_horsepower = -2.74643097264309 + 0.02734944206973 * REP_horsepower
;
129592    +   S_REP_length  =    -15.2378498365576 +     0.08781104037663 * REP_length ;
MPRINT(EM_DIAGRAM):   S_REP_length = -15.2378498365576 + 0.08781104037663 * REP_length ;
129593    +   S_REP_peak_rpm  =    -10.6885709541859 +     0.00208333904184 *
129594    +        REP_peak_rpm ;
MPRINT(EM_DIAGRAM):   S_REP_peak_rpm = -10.6885709541859 + 0.00208333904184 * REP_peak_rpm ;
129595    +   S_REP_wheel_base  =    -17.8009087180129 +     0.18059887504832 *
129596    +        REP_wheel_base ;
MPRINT(EM_DIAGRAM):   S_REP_wheel_base = -17.8009087180129 + 0.18059887504832 * REP_wheel_base
;
129597    +   S_REP_width  =    -35.9167499004784 +     0.54673628301566 * REP_width ;
MPRINT(EM_DIAGRAM):   S_REP_width = -35.9167499004784 + 0.54673628301566 * REP_width ;
129598    +END;
MPRINT(EM_DIAGRAM):   END;
129599    +ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
129600    +   IF MISSING( LOG_REP_IMP_price ) THEN S_LOG_REP_IMP_price  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( LOG_REP_IMP_price ) THEN S_LOG_REP_IMP_price = . ;
129601    +   ELSE S_LOG_REP_IMP_price  =    -20.2356185469493 +     2.16855745948401 *
129602    +        LOG_REP_IMP_price ;
MPRINT(EM_DIAGRAM):   ELSE S_LOG_REP_IMP_price = -20.2356185469493 + 2.16855745948401 *
LOG_REP_IMP_price ;
129603    +   IF MISSING( LOG_REP_compression_ratio ) THEN S_LOG_REP_compression_ratio
129604    +          = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( LOG_REP_compression_ratio ) THEN S_LOG_REP_compression_ratio
= . ;
129605    +   ELSE S_LOG_REP_compression_ratio
129606    +          =    -8.72649819321039 +     3.65742873950677 *
129607    +        LOG_REP_compression_ratio ;
MPRINT(EM_DIAGRAM):   ELSE S_LOG_REP_compression_ratio = -8.72649819321039 + 3.65742873950677
* LOG_REP_compression_ratio ;
129608    +   IF MISSING( LOG_REP_engine_size ) THEN S_LOG_REP_engine_size  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( LOG_REP_engine_size ) THEN S_LOG_REP_engine_size = . ;
129609    +   ELSE S_LOG_REP_engine_size
129610    +          =    -19.3053254119757 +     4.02929302984948 * LOG_REP_engine_size
129611    +         ;
MPRINT(EM_DIAGRAM):   ELSE S_LOG_REP_engine_size = -19.3053254119757 + 4.02929302984948 *
LOG_REP_engine_size ;
129612    +   IF MISSING( REP_IMP_bore ) THEN S_REP_IMP_bore  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( REP_IMP_bore ) THEN S_REP_IMP_bore = . ;
129613    +   ELSE S_REP_IMP_bore  =    -13.3604302656684 +     4.04536293034574 *
129614    +        REP_IMP_bore ;
MPRINT(EM_DIAGRAM):   ELSE S_REP_IMP_bore = -13.3604302656684 + 4.04536293034574 *
REP_IMP_bore ;
129615    +   IF MISSING( REP_IMP_stroke ) THEN S_REP_IMP_stroke  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( REP_IMP_stroke ) THEN S_REP_IMP_stroke = . ;
129616    +   ELSE S_REP_IMP_stroke  =    -11.3205669287077 +     3.47855217496738 *
129617    +        REP_IMP_stroke ;
MPRINT(EM_DIAGRAM):   ELSE S_REP_IMP_stroke = -11.3205669287077 + 3.47855217496738 *
REP_IMP_stroke ;
129618    +   IF MISSING( REP_city_mpg ) THEN S_REP_city_mpg  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( REP_city_mpg ) THEN S_REP_city_mpg = . ;
129619    +   ELSE S_REP_city_mpg  =    -4.23279255832632 +     0.16535248553422 *
129620    +        REP_city_mpg ;
MPRINT(EM_DIAGRAM):   ELSE S_REP_city_mpg = -4.23279255832632 + 0.16535248553422 *
REP_city_mpg ;
129621    +   IF MISSING( REP_curb_weight ) THEN S_REP_curb_weight  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( REP_curb_weight ) THEN S_REP_curb_weight = . ;
129622    +   ELSE S_REP_curb_weight  =    -5.35597047742979 +     0.00212869810672 *
129623    +        REP_curb_weight ;
MPRINT(EM_DIAGRAM):   ELSE S_REP_curb_weight = -5.35597047742979 + 0.00212869810672 *
REP_curb_weight ;
129624    +   IF MISSING( REP_height ) THEN S_REP_height  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( REP_height ) THEN S_REP_height = . ;
129625    +   ELSE S_REP_height  =    -21.8926608140893 +     0.40589318675657 *
129626    +        REP_height ;
MPRINT(EM_DIAGRAM):   ELSE S_REP_height = -21.8926608140893 + 0.40589318675657 * REP_height ;
129627    +   IF MISSING( REP_highway_mpg ) THEN S_REP_highway_mpg  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( REP_highway_mpg ) THEN S_REP_highway_mpg = . ;
129628    +   ELSE S_REP_highway_mpg  =    -4.99166764925563 +     0.16020006928199 *
129629    +        REP_highway_mpg ;
MPRINT(EM_DIAGRAM):   ELSE S_REP_highway_mpg = -4.99166764925563 + 0.16020006928199 *
REP_highway_mpg ;
129630    +   IF MISSING( REP_horsepower ) THEN S_REP_horsepower  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( REP_horsepower ) THEN S_REP_horsepower = . ;
129631    +   ELSE S_REP_horsepower  =    -2.74643097264309 +     0.02734944206973 *
129632    +        REP_horsepower ;
MPRINT(EM_DIAGRAM):   ELSE S_REP_horsepower = -2.74643097264309 + 0.02734944206973 *
REP_horsepower ;
129633    +   IF MISSING( REP_length ) THEN S_REP_length  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( REP_length ) THEN S_REP_length = . ;
129634    +   ELSE S_REP_length  =    -15.2378498365576 +     0.08781104037663 *
129635    +        REP_length ;
MPRINT(EM_DIAGRAM):   ELSE S_REP_length = -15.2378498365576 + 0.08781104037663 * REP_length ;
129636    +   IF MISSING( REP_peak_rpm ) THEN S_REP_peak_rpm  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( REP_peak_rpm ) THEN S_REP_peak_rpm = . ;
129637    +   ELSE S_REP_peak_rpm  =    -10.6885709541859 +     0.00208333904184 *
129638    +        REP_peak_rpm ;
MPRINT(EM_DIAGRAM):   ELSE S_REP_peak_rpm = -10.6885709541859 + 0.00208333904184 *
REP_peak_rpm ;
129639    +   IF MISSING( REP_wheel_base ) THEN S_REP_wheel_base  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( REP_wheel_base ) THEN S_REP_wheel_base = . ;
129640    +   ELSE S_REP_wheel_base  =    -17.8009087180129 +     0.18059887504832 *
129641    +        REP_wheel_base ;
MPRINT(EM_DIAGRAM):   ELSE S_REP_wheel_base = -17.8009087180129 + 0.18059887504832 *
REP_wheel_base ;
129642    +   IF MISSING( REP_width ) THEN S_REP_width  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( REP_width ) THEN S_REP_width = . ;
129643    +   ELSE S_REP_width  =    -35.9167499004784 +     0.54673628301566 * REP_width
129644    +         ;
MPRINT(EM_DIAGRAM):   ELSE S_REP_width = -35.9167499004784 + 0.54673628301566 * REP_width ;
129645    +END;
MPRINT(EM_DIAGRAM):   END;
129646    +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
129647    +*** Writing the Node bin ;
MPRINT(EM_DIAGRAM):   *** Writing the Node bin ;
129648    +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
129649    +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
129650    +*** Writing the Node nom ;
MPRINT(EM_DIAGRAM):   *** Writing the Node nom ;
129651    +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
129652    +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
129653    +*** Writing the Node H1 ;
MPRINT(EM_DIAGRAM):   *** Writing the Node H1 ;
129654    +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
129655    +IF _DM_BAD EQ 0 THEN DO;
MPRINT(EM_DIAGRAM):   IF _DM_BAD EQ 0 THEN DO;
129656    +   H11  =    -0.30239282542129 * S_LOG_REP_IMP_price
129657    +          +     0.07375266777945 * S_LOG_REP_compression_ratio
129658    +          +    -0.32314301225116 * S_LOG_REP_engine_size
129659    +          +    -0.05791191369564 * S_REP_IMP_bore  +    -0.31295728139086 *
129660    +        S_REP_IMP_stroke  +    -0.50271357032608 * S_REP_city_mpg
129661    +          +    -0.49945653510897 * S_REP_curb_weight
129662    +          +    -0.35982904642168 * S_REP_height  +     0.17605089142765 *
129663    +        S_REP_highway_mpg  +     0.28723977440497 * S_REP_horsepower
129664    +          +     0.00026487266845 * S_REP_length  +     0.02115131299283 *
129665    +        S_REP_peak_rpm  +    -0.71479623156263 * S_REP_wheel_base
129666    +          +     0.57582729455077 * S_REP_width ;
MPRINT(EM_DIAGRAM):   H11 = -0.30239282542129 * S_LOG_REP_IMP_price + 0.07375266777945 *
S_LOG_REP_compression_ratio + -0.32314301225116 * S_LOG_REP_engine_size + -0.05791191369564 *
S_REP_IMP_bore + -0.31295728139086 * S_REP_IMP_stroke + -0.50271357032608 * S_REP_city_mpg +
-0.49945653510897 * S_REP_curb_weight + -0.35982904642168 * S_REP_height + 0.17605089142765 *
S_REP_highway_mpg + 0.28723977440497 * S_REP_horsepower + 0.00026487266845 * S_REP_length +
0.02115131299283 * S_REP_peak_rpm + -0.71479623156263 * S_REP_wheel_base + 0.57582729455077 *
S_REP_width ;
129667    +   H12  =     0.06053587643791 * S_LOG_REP_IMP_price
129668    +          +      0.0008309684403 * S_LOG_REP_compression_ratio
129669    +          +     0.10954404329148 * S_LOG_REP_engine_size
129670    +          +    -0.15328263161893 * S_REP_IMP_bore  +      0.3532849519374 *
129671    +        S_REP_IMP_stroke  +    -0.15402746977116 * S_REP_city_mpg
129672    +          +     0.08110850880681 * S_REP_curb_weight
129673    +          +      0.1651911585853 * S_REP_height  +    -0.32984368998018 *
129674    +        S_REP_highway_mpg  +     0.18550754810975 * S_REP_horsepower
129675    +          +     0.41047827319029 * S_REP_length  +     0.63048066732644 *
129676    +        S_REP_peak_rpm  +    -0.29989205901953 * S_REP_wheel_base
129677    +          +     -0.1141373130746 * S_REP_width ;
MPRINT(EM_DIAGRAM):   H12 = 0.06053587643791 * S_LOG_REP_IMP_price + 0.0008309684403 *
S_LOG_REP_compression_ratio + 0.10954404329148 * S_LOG_REP_engine_size + -0.15328263161893 *
S_REP_IMP_bore + 0.3532849519374 * S_REP_IMP_stroke + -0.15402746977116 * S_REP_city_mpg +
0.08110850880681 * S_REP_curb_weight + 0.1651911585853 * S_REP_height + -0.32984368998018 *
S_REP_highway_mpg + 0.18550754810975 * S_REP_horsepower + 0.41047827319029 * S_REP_length +
0.63048066732644 * S_REP_peak_rpm + -0.29989205901953 * S_REP_wheel_base + -0.1141373130746 *
S_REP_width ;
129678    +   H13  =    -0.12651763973835 * S_LOG_REP_IMP_price
129679    +          +     0.02916610158425 * S_LOG_REP_compression_ratio
129680    +          +    -0.35464297055318 * S_LOG_REP_engine_size
129681    +          +    -0.46861794622827 * S_REP_IMP_bore  +    -0.02615304729098 *
129682    +        S_REP_IMP_stroke  +    -0.62348817252786 * S_REP_city_mpg
129683    +          +    -0.40578479144999 * S_REP_curb_weight
129684    +          +    -0.07842498208478 * S_REP_height  +     0.04009867443631 *
129685    +        S_REP_highway_mpg  +    -0.15410203402429 * S_REP_horsepower
129686    +          +     0.56826194006802 * S_REP_length  +    -0.18451746998248 *
129687    +        S_REP_peak_rpm  +    -0.85455873337219 * S_REP_wheel_base
129688    +          +     0.42143506757855 * S_REP_width ;
MPRINT(EM_DIAGRAM):   H13 = -0.12651763973835 * S_LOG_REP_IMP_price + 0.02916610158425 *
S_LOG_REP_compression_ratio + -0.35464297055318 * S_LOG_REP_engine_size + -0.46861794622827 *
S_REP_IMP_bore + -0.02615304729098 * S_REP_IMP_stroke + -0.62348817252786 * S_REP_city_mpg +
-0.40578479144999 * S_REP_curb_weight + -0.07842498208478 * S_REP_height + 0.04009867443631 *
S_REP_highway_mpg + -0.15410203402429 * S_REP_horsepower + 0.56826194006802 * S_REP_length +
-0.18451746998248 * S_REP_peak_rpm + -0.85455873337219 * S_REP_wheel_base + 0.42143506757855 *
S_REP_width ;
129689    +   H14  =    -0.14040869686762 * S_LOG_REP_IMP_price
129690    +          +     0.26990612353105 * S_LOG_REP_compression_ratio
129691    +          +     0.08219740713507 * S_LOG_REP_engine_size
129692    +          +    -0.28143237638041 * S_REP_IMP_bore  +     0.00240833621272 *
129693    +        S_REP_IMP_stroke  +     0.36691424782401 * S_REP_city_mpg
129694    +          +     0.05296966762507 * S_REP_curb_weight
129695    +          +    -0.25195594241151 * S_REP_height  +     -0.2869086713551 *
129696    +        S_REP_highway_mpg  +     0.10149659867121 * S_REP_horsepower
129697    +          +     -0.1051173203177 * S_REP_length  +     -0.3623925092356 *
129698    +        S_REP_peak_rpm  +      0.0608651450636 * S_REP_wheel_base
129699    +          +     0.01925376907658 * S_REP_width ;
MPRINT(EM_DIAGRAM):   H14 = -0.14040869686762 * S_LOG_REP_IMP_price + 0.26990612353105 *
S_LOG_REP_compression_ratio + 0.08219740713507 * S_LOG_REP_engine_size + -0.28143237638041 *
S_REP_IMP_bore + 0.00240833621272 * S_REP_IMP_stroke + 0.36691424782401 * S_REP_city_mpg +
0.05296966762507 * S_REP_curb_weight + -0.25195594241151 * S_REP_height + -0.2869086713551 *
S_REP_highway_mpg + 0.10149659867121 * S_REP_horsepower + -0.1051173203177 * S_REP_length +
-0.3623925092356 * S_REP_peak_rpm + 0.0608651450636 * S_REP_wheel_base + 0.01925376907658 *
S_REP_width ;
129700    +   H11  = H11  +    -0.14261512916098 * M_bore0  +    -0.15389501961531 *
129701    +        M_num_of_doors0  +     0.35584066469033 * M_price0
129702    +          +     0.27766950948074 * M_stroke0 ;
MPRINT(EM_DIAGRAM):   H11 = H11 + -0.14261512916098 * M_bore0 + -0.15389501961531 *
M_num_of_doors0 + 0.35584066469033 * M_price0 + 0.27766950948074 * M_stroke0 ;
129703    +   H12  = H12  +    -0.05100694260106 * M_bore0  +     0.06706620637318 *
129704    +        M_num_of_doors0  +      0.3061805720719 * M_price0
129705    +          +     0.12447551805965 * M_stroke0 ;
MPRINT(EM_DIAGRAM):   H12 = H12 + -0.05100694260106 * M_bore0 + 0.06706620637318 *
M_num_of_doors0 + 0.3061805720719 * M_price0 + 0.12447551805965 * M_stroke0 ;
129706    +   H13  = H13  +    -0.24380670225771 * M_bore0  +     0.00690440155477 *
129707    +        M_num_of_doors0  +     0.44779145359173 * M_price0
129708    +          +    -0.23546408240278 * M_stroke0 ;
MPRINT(EM_DIAGRAM):   H13 = H13 + -0.24380670225771 * M_bore0 + 0.00690440155477 *
M_num_of_doors0 + 0.44779145359173 * M_price0 + -0.23546408240278 * M_stroke0 ;
129709    +   H14  = H14  +     0.27468171274192 * M_bore0  +    -0.08256208447896 *
129710    +        M_num_of_doors0  +    -0.00282400944614 * M_price0
129711    +          +    -0.06998464230678 * M_stroke0 ;
MPRINT(EM_DIAGRAM):   H14 = H14 + 0.27468171274192 * M_bore0 + -0.08256208447896 *
M_num_of_doors0 + -0.00282400944614 * M_price0 + -0.06998464230678 * M_stroke0 ;
129712    +   H11  = H11  +     1.04565178534847 * IMP_num_of_doors2
129713    +          +    -0.19697323559306 * REP_aspirationS  +     0.22441677117341 *
129714    +        REP_body_styleC  +    -0.02928079039896 * REP_body_styleH
129715    +          +    -0.32302273741455 * REP_body_styleS  +    -0.34785776016975 *
129716    +        REP_drive_wheels4  +     0.10897139165566 * REP_drive_wheelsF
129717    +          +    -0.04922700305318 * REP_engine_locationF
129718    +          +    -0.26217753108901 * REP_fuel_systemnon_spdi
129719    +          +    -0.09655321276347 * REP_fuel_typeD  +     0.23776476290772 *
129720    +        REP_num_of_cylinders__4  +     0.09807786136518 * engine_typedohc
129721    +          +    -0.13265317517425 * engine_typel  +    -0.20346070618898 *
129722    +        engine_typeohc  +    -0.38758952222173 * engine_typeohcf
129723    +          +    -0.02182861600599 * engine_typeohcv ;
MPRINT(EM_DIAGRAM):   H11 = H11 + 1.04565178534847 * IMP_num_of_doors2 + -0.19697323559306 *
REP_aspirationS + 0.22441677117341 * REP_body_styleC + -0.02928079039896 * REP_body_styleH +
-0.32302273741455 * REP_body_styleS + -0.34785776016975 * REP_drive_wheels4 + 0.10897139165566
* REP_drive_wheelsF + -0.04922700305318 * REP_engine_locationF + -0.26217753108901 *
REP_fuel_systemnon_spdi + -0.09655321276347 * REP_fuel_typeD + 0.23776476290772 *
REP_num_of_cylinders__4 + 0.09807786136518 * engine_typedohc + -0.13265317517425 *
engine_typel + -0.20346070618898 * engine_typeohc + -0.38758952222173 * engine_typeohcf +
-0.02182861600599 * engine_typeohcv ;
129724    +   H12  = H12  +     0.26990643452778 * IMP_num_of_doors2
129725    +          +       0.167681754676 * REP_aspirationS  +     0.12265207155474 *
129726    +        REP_body_styleC  +     0.01179187263391 * REP_body_styleH
129727    +          +    -0.19097006494623 * REP_body_styleS  +     0.02816873649616 *
129728    +        REP_drive_wheels4  +     0.00159784165226 * REP_drive_wheelsF
129729    +          +    -0.02772792707071 * REP_engine_locationF
129730    +          +     0.12038561732288 * REP_fuel_systemnon_spdi
129731    +          +    -0.14129190020361 * REP_fuel_typeD  +     0.19062991356263 *
129732    +        REP_num_of_cylinders__4  +     0.24458965384513 * engine_typedohc
129733    +          +     0.06535466491026 * engine_typel  +     0.03320508558174 *
129734    +        engine_typeohc  +    -0.18114960783147 * engine_typeohcf
129735    +          +    -0.07940214830665 * engine_typeohcv ;
MPRINT(EM_DIAGRAM):   H12 = H12 + 0.26990643452778 * IMP_num_of_doors2 + 0.167681754676 *
REP_aspirationS + 0.12265207155474 * REP_body_styleC + 0.01179187263391 * REP_body_styleH +
-0.19097006494623 * REP_body_styleS + 0.02816873649616 * REP_drive_wheels4 + 0.00159784165226
* REP_drive_wheelsF + -0.02772792707071 * REP_engine_locationF + 0.12038561732288 *
REP_fuel_systemnon_spdi + -0.14129190020361 * REP_fuel_typeD + 0.19062991356263 *
REP_num_of_cylinders__4 + 0.24458965384513 * engine_typedohc + 0.06535466491026 * engine_typel
+ 0.03320508558174 * engine_typeohc + -0.18114960783147 * engine_typeohcf + -0.07940214830665
* engine_typeohcv ;
129736    +   H13  = H13  +     1.05539312393709 * IMP_num_of_doors2
129737    +          +     0.12429838443133 * REP_aspirationS  +     0.40169612542437 *
129738    +        REP_body_styleC  +    -0.09868938303023 * REP_body_styleH
129739    +          +      0.2376441839816 * REP_body_styleS  +     0.13697634714208 *
129740    +        REP_drive_wheels4  +     0.10951824489242 * REP_drive_wheelsF
129741    +          +    -0.39061918168859 * REP_engine_locationF
129742    +          +    -0.35137171605866 * REP_fuel_systemnon_spdi
129743    +          +    -0.02185171430754 * REP_fuel_typeD  +    -0.09138285511683 *
129744    +        REP_num_of_cylinders__4  +     0.03269731016982 * engine_typedohc
129745    +          +     0.05515310047148 * engine_typel  +     0.73759347527352 *
129746    +        engine_typeohc  +    -0.25108559978843 * engine_typeohcf
129747    +          +    -0.04350517211887 * engine_typeohcv ;
MPRINT(EM_DIAGRAM):   H13 = H13 + 1.05539312393709 * IMP_num_of_doors2 + 0.12429838443133 *
REP_aspirationS + 0.40169612542437 * REP_body_styleC + -0.09868938303023 * REP_body_styleH +
0.2376441839816 * REP_body_styleS + 0.13697634714208 * REP_drive_wheels4 + 0.10951824489242 *
REP_drive_wheelsF + -0.39061918168859 * REP_engine_locationF + -0.35137171605866 *
REP_fuel_systemnon_spdi + -0.02185171430754 * REP_fuel_typeD + -0.09138285511683 *
REP_num_of_cylinders__4 + 0.03269731016982 * engine_typedohc + 0.05515310047148 * engine_typel
+ 0.73759347527352 * engine_typeohc + -0.25108559978843 * engine_typeohcf + -0.04350517211887
* engine_typeohcv ;
129748    +   H14  = H14  +    -0.02666661002825 * IMP_num_of_doors2
129749    +          +     0.23388455289343 * REP_aspirationS  +     0.14743723464082 *
129750    +        REP_body_styleC  +      0.0123336113796 * REP_body_styleH
129751    +          +     0.09096512684108 * REP_body_styleS  +     0.10317954156915 *
129752    +        REP_drive_wheels4  +    -0.02461397967256 * REP_drive_wheelsF
129753    +          +     0.23880808113951 * REP_engine_locationF
129754    +          +     0.07730157092911 * REP_fuel_systemnon_spdi
129755    +          +    -0.18576165929056 * REP_fuel_typeD  +    -0.07768584919964 *
129756    +        REP_num_of_cylinders__4  +    -0.12278489872095 * engine_typedohc
129757    +          +    -0.11219020348018 * engine_typel  +    -0.25056732048025 *
129758    +        engine_typeohc  +     0.04020447734225 * engine_typeohcf
129759    +          +    -0.01124754988024 * engine_typeohcv ;
MPRINT(EM_DIAGRAM):   H14 = H14 + -0.02666661002825 * IMP_num_of_doors2 + 0.23388455289343 *
REP_aspirationS + 0.14743723464082 * REP_body_styleC + 0.0123336113796 * REP_body_styleH +
0.09096512684108 * REP_body_styleS + 0.10317954156915 * REP_drive_wheels4 + -0.02461397967256
* REP_drive_wheelsF + 0.23880808113951 * REP_engine_locationF + 0.07730157092911 *
REP_fuel_systemnon_spdi + -0.18576165929056 * REP_fuel_typeD + -0.07768584919964 *
REP_num_of_cylinders__4 + -0.12278489872095 * engine_typedohc + -0.11219020348018 *
engine_typel + -0.25056732048025 * engine_typeohc + 0.04020447734225 * engine_typeohcf +
-0.01124754988024 * engine_typeohcv ;
129760    +   H11  =     0.16799741694776 + H11 ;
MPRINT(EM_DIAGRAM):   H11 = 0.16799741694776 + H11 ;
129761    +   H12  =     0.36085487833004 + H12 ;
MPRINT(EM_DIAGRAM):   H12 = 0.36085487833004 + H12 ;
129762    +   H13  =     0.92763058157618 + H13 ;
MPRINT(EM_DIAGRAM):   H13 = 0.92763058157618 + H13 ;
129763    +   H14  =     1.24301062195055 + H14 ;
MPRINT(EM_DIAGRAM):   H14 = 1.24301062195055 + H14 ;
129764    +   H11  = TANH(H11 );
MPRINT(EM_DIAGRAM):   H11 = TANH(H11 );
129765    +   H12  = TANH(H12 );
MPRINT(EM_DIAGRAM):   H12 = TANH(H12 );
129766    +   H13  = TANH(H13 );
MPRINT(EM_DIAGRAM):   H13 = TANH(H13 );
129767    +   H14  = TANH(H14 );
MPRINT(EM_DIAGRAM):   H14 = TANH(H14 );
129768    +END;
MPRINT(EM_DIAGRAM):   END;
129769    +ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
129770    +   H11  = .;
MPRINT(EM_DIAGRAM):   H11 = .;
129771    +   H12  = .;
MPRINT(EM_DIAGRAM):   H12 = .;
129772    +   H13  = .;
MPRINT(EM_DIAGRAM):   H13 = .;
129773    +   H14  = .;
MPRINT(EM_DIAGRAM):   H14 = .;
129774    +END;
MPRINT(EM_DIAGRAM):   END;
129775    +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
129776    +*** Writing the Node Risk ;
MPRINT(EM_DIAGRAM):   *** Writing the Node Risk ;
129777    +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
129778    +
129779    +*** Generate dummy variables for Risk ;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for Risk ;
129780    +drop Risk1 Risk0 ;
MPRINT(EM_DIAGRAM):   drop Risk1 Risk0 ;
129781    +label F_Risk = 'From: Risk' ;
MPRINT(EM_DIAGRAM):   label F_Risk = 'From: Risk' ;
129782    +length F_Risk $ 12;
MPRINT(EM_DIAGRAM):   length F_Risk $ 12;
129783    +F_Risk = put( Risk , BEST12. );
MPRINT(EM_DIAGRAM):   F_Risk = put( Risk , BEST12. );
129784    +%DMNORMIP( F_Risk )
MPRINT(DMNORMIP):   call dmnorm(F_Risk,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
129785    +if missing( Risk ) then do;
MPRINT(EM_DIAGRAM):   if missing( Risk ) then do;
129786    +   Risk1 = .;
MPRINT(EM_DIAGRAM):   Risk1 = .;
129787    +   Risk0 = .;
MPRINT(EM_DIAGRAM):   Risk0 = .;
129788    +end;
MPRINT(EM_DIAGRAM):   end;
129789    +else do;
MPRINT(EM_DIAGRAM):   else do;
129790    +   if F_Risk = '1'  then do;
MPRINT(EM_DIAGRAM):   if F_Risk = '1' then do;
129791    +      Risk1 = 1;
MPRINT(EM_DIAGRAM):   Risk1 = 1;
129792    +      Risk0 = 0;
MPRINT(EM_DIAGRAM):   Risk0 = 0;
129793    +   end;
MPRINT(EM_DIAGRAM):   end;
129794    +   else if F_Risk = '0'  then do;
MPRINT(EM_DIAGRAM):   else if F_Risk = '0' then do;
129795    +      Risk1 = 0;
MPRINT(EM_DIAGRAM):   Risk1 = 0;
129796    +      Risk0 = 1;
MPRINT(EM_DIAGRAM):   Risk0 = 1;
129797    +   end;
MPRINT(EM_DIAGRAM):   end;
129798    +   else do;
MPRINT(EM_DIAGRAM):   else do;
129799    +      Risk1 = .;
MPRINT(EM_DIAGRAM):   Risk1 = .;
129800    +      Risk0 = .;
MPRINT(EM_DIAGRAM):   Risk0 = .;
129801    +   end;
MPRINT(EM_DIAGRAM):   end;
129802    +end;
MPRINT(EM_DIAGRAM):   end;
129803    +IF _DM_BAD EQ 0 THEN DO;
MPRINT(EM_DIAGRAM):   IF _DM_BAD EQ 0 THEN DO;
129804    +   P_Risk1  =     2.33058130691871 * H11  +      0.6315559780393 * H12
129805    +          +     2.68752606098709 * H13  +     -0.1774721562472 * H14 ;
MPRINT(EM_DIAGRAM):   P_Risk1 = 2.33058130691871 * H11 + 0.6315559780393 * H12 +
2.68752606098709 * H13 + -0.1774721562472 * H14 ;
129806    +   P_Risk1  =    -0.37783197107417 + P_Risk1 ;
MPRINT(EM_DIAGRAM):   P_Risk1 = -0.37783197107417 + P_Risk1 ;
129807    +   P_Risk0  = 0;
MPRINT(EM_DIAGRAM):   P_Risk0 = 0;
129808    +   _MAX_ = MAX (P_Risk1 , P_Risk0 );
MPRINT(EM_DIAGRAM):   _MAX_ = MAX (P_Risk1 , P_Risk0 );
129809    +   _SUM_ = 0.;
MPRINT(EM_DIAGRAM):   _SUM_ = 0.;
129810    +   P_Risk1  = EXP(P_Risk1  - _MAX_);
MPRINT(EM_DIAGRAM):   P_Risk1 = EXP(P_Risk1 - _MAX_);
129811    +   _SUM_ = _SUM_ + P_Risk1 ;
MPRINT(EM_DIAGRAM):   _SUM_ = _SUM_ + P_Risk1 ;
129812    +   P_Risk0  = EXP(P_Risk0  - _MAX_);
MPRINT(EM_DIAGRAM):   P_Risk0 = EXP(P_Risk0 - _MAX_);
129813    +   _SUM_ = _SUM_ + P_Risk0 ;
MPRINT(EM_DIAGRAM):   _SUM_ = _SUM_ + P_Risk0 ;
129814    +   P_Risk1  = P_Risk1  / _SUM_;
MPRINT(EM_DIAGRAM):   P_Risk1 = P_Risk1 / _SUM_;
129815    +   P_Risk0  = P_Risk0  / _SUM_;
MPRINT(EM_DIAGRAM):   P_Risk0 = P_Risk0 / _SUM_;
129816    +END;
MPRINT(EM_DIAGRAM):   END;
129817    +ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
129818    +   P_Risk1  = .;
MPRINT(EM_DIAGRAM):   P_Risk1 = .;
129819    +   P_Risk0  = .;
MPRINT(EM_DIAGRAM):   P_Risk0 = .;
129820    +END;
MPRINT(EM_DIAGRAM):   END;
129821    +IF _DM_BAD EQ 1 THEN DO;
MPRINT(EM_DIAGRAM):   IF _DM_BAD EQ 1 THEN DO;
129822    +   P_Risk1  =                 0.54;
MPRINT(EM_DIAGRAM):   P_Risk1 = 0.54;
129823    +   P_Risk0  =                 0.46;
MPRINT(EM_DIAGRAM):   P_Risk0 = 0.46;
129824    +END;
MPRINT(EM_DIAGRAM):   END;
129825    +*** *****************************;
MPRINT(EM_DIAGRAM):   *** *****************************;
129826    +*** Writing the Residuals  of the Node Risk ;
MPRINT(EM_DIAGRAM):   *** Writing the Residuals of the Node Risk ;
129827    +*** ******************************;
MPRINT(EM_DIAGRAM):   *** ******************************;
129828    +IF MISSING( Risk1 ) THEN R_Risk1  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( Risk1 ) THEN R_Risk1 = . ;
129829    +ELSE R_Risk1  = Risk1  - P_Risk1 ;
MPRINT(EM_DIAGRAM):   ELSE R_Risk1 = Risk1 - P_Risk1 ;
129830    +IF MISSING( Risk0 ) THEN R_Risk0  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( Risk0 ) THEN R_Risk0 = . ;
129831    +ELSE R_Risk0  = Risk0  - P_Risk0 ;
MPRINT(EM_DIAGRAM):   ELSE R_Risk0 = Risk0 - P_Risk0 ;
129832    +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
129833    +*** Writing the I_Risk  AND U_Risk ;
MPRINT(EM_DIAGRAM):   *** Writing the I_Risk AND U_Risk ;
129834    +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
129835    +_MAXP_ = P_Risk1 ;
MPRINT(EM_DIAGRAM):   _MAXP_ = P_Risk1 ;
129836    +I_Risk  = "1           " ;
MPRINT(EM_DIAGRAM):   I_Risk = "1           " ;
129837    +U_Risk  =                    1;
MPRINT(EM_DIAGRAM):   U_Risk = 1;
129838    +IF( _MAXP_ LT P_Risk0  ) THEN DO;
MPRINT(EM_DIAGRAM):   IF( _MAXP_ LT P_Risk0 ) THEN DO;
129839    +   _MAXP_ = P_Risk0 ;
MPRINT(EM_DIAGRAM):   _MAXP_ = P_Risk0 ;
129840    +   I_Risk  = "0           " ;
MPRINT(EM_DIAGRAM):   I_Risk = "0           " ;
129841    +   U_Risk  =                    0;
MPRINT(EM_DIAGRAM):   U_Risk = 0;
129842    +END;
MPRINT(EM_DIAGRAM):   END;
129843    +********************************;
MPRINT(EM_DIAGRAM):   ********************************;
129844    +*** End Scoring Code for Neural;
MPRINT(EM_DIAGRAM):   *** End Scoring Code for Neural;
129845    +********************************;
MPRINT(EM_DIAGRAM):   ********************************;
129846    +drop
129847    +H11
129848    +H12
129849    +H13
129850    +H14
129851    +;
MPRINT(EM_DIAGRAM):   drop H11 H12 H13 H14 ;
129852    +drop S_:;
MPRINT(EM_DIAGRAM):   drop S_:;
NOTE: %INCLUDE (level 1) ending.
MPRINT(EM_DIAGRAM):   run;
129853     run;
 
NOTE: DATA STEP view saved on file EMWS1.NEURAL4_VALIDATE.
NOTE: A stored DATA STEP view cannot run under a different operating system.
NOTE: View EMWS1.REPL2_VALIDATE.VIEW used (Total process time):
      real time           0.23 seconds
      cpu time            0.17 seconds
 
NOTE: DATA statement used (Total process time):
      real time           0.24 seconds
      cpu time            0.18 seconds
 
 
MPRINT(EM_DIAGRAM):   quit;
129854     quit;
129855     filename emflow;
MPRINT(EM_DIAGRAM):   filename emflow;
NOTE: Fileref EMFLOW has been deassigned.
129856     *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
129857     * Neural4: Computing metadata for TRAIN data;
MPRINT(EM_DIAGRAM):   * Neural4: Computing metadata for TRAIN data;
129858     *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
 
NOTE: View EMWS1.NEURAL4_TRAIN.VIEW used (Total process time):
      real time           0.21 seconds
      cpu time            0.21 seconds
 
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * &nodeid: Computing Metadata for TRAIN data;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   filename _delta "H:\746\Decision Tree
test\Workspaces\EMWS1\Neural4\CDELTA_TRAIN.sas";
MPRINT(EMADVISECOLUMNS):   proc display c=sashelp.emmeta.advisecolumns.scl;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    options validvarname=any;
MPRINT(EMADVISECOLUMNS):   proc contents data=EMWS1.Neural4_TRAIN out=_tempAdvisor noprint;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):   options validvarname=V7;
MPRINT(EMADVISECOLUMNS):    data _null_;
MPRINT(EMADVISECOLUMNS):   dsid = open('EMWS1.Neural4_TRAIN');
MPRINT(EMADVISECOLUMNS):   call symput('_dsidTable', strip(put(dsid, best.)));
MPRINT(EMADVISECOLUMNS):   if dsid then do;
MPRINT(EMADVISECOLUMNS):   call symput('_engineTable', attrc(dsid, 'ENGINE'));
MPRINT(EMADVISECOLUMNS):   dsid = close(dsid);
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    proc contents data=EMWS1.Neural4_TRAIN out=WORK.M15JAT62 noprint;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M15JAT62;
MPRINT(EMADVISECOLUMNS):   length NAME $ 64 TYPE $ 1 LABEL $ 200 FORMAT $ 36 INFORMAT $36
INDEX $ 1 INDEXTYPE $ 9;
MPRINT(EMADVISECOLUMNS):   label NAME =;
MPRINT(EMADVISECOLUMNS):   set WORK.M15JAT62(keep=name type length label format formatl
formatd informat informl informd idxusage rename=(type=itype));
MPRINT(EMADVISECOLUMNS):   if itype = 1 then type = 'N';
MPRINT(EMADVISECOLUMNS):   else type = 'C';
MPRINT(EMADVISECOLUMNS):   if formatl > 0 then do;
MPRINT(EMADVISECOLUMNS):   if format ne ' ' then format = strip(format)!!strip(put(formatl,
best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EMADVISECOLUMNS):   else format = strip(put(formatl, best12.))!!'.'!!strip(put(formatd,
best12.));
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if format ne '' then format = strip(format)!!'.';
MPRINT(EMADVISECOLUMNS):   if informl > 0 then do;
MPRINT(EMADVISECOLUMNS):   if informat ne ' ' then informat =
strip(informat)!!strip(put(informl, best12.))!!'.'!!strip(put(informd, best12.));
MPRINT(EMADVISECOLUMNS):   else informat = strip(put(informl,
best12.))!!'.'!!strip(put(informd, best12.));
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if informat ne '' then informat = strip(informat)!!'.';
MPRINT(EMADVISECOLUMNS):   if idxusage = 'NONE' then index ="N";
MPRINT(EMADVISECOLUMNS):   else index = "Y";
MPRINT(EMADVISECOLUMNS):   indextype = idxusage;
MPRINT(EMADVISECOLUMNS):   drop idxusage itype formatl formatd informl informd;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M15JAT62;
MPRINT(EMADVISECOLUMNS):   length UNAME $64;
MPRINT(EMADVISECOLUMNS):   set WORK.M15JAT62;
MPRINT(EMADVISECOLUMNS):   UNAME = upcase(NAME);
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    proc sort data=WORK.M1GIGLE8 NOTHREADS;
MPRINT(EMADVISECOLUMNS):   by UNAME;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M1GIGLE8;
MPRINT(EMADVISECOLUMNS):   drop UNAME;
MPRINT(EMADVISECOLUMNS):   set WORK.M1GIGLE8;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M01DXNPZ(keep=NAME ATTR);
MPRINT(EMADVISECOLUMNS):   length ATTR $ 20;
MPRINT(EMADVISECOLUMNS):   set WORK.M1GIGLE8;
MPRINT(EMADVISECOLUMNS):   if level ne "INTERVAL" then do;
MPRINT(EMADVISECOLUMNS):   if order = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'ORDER';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if format ne ' ' and formattype = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'FORMATTYPE';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if role = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'ROLE';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if level = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'LEVEL';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if type = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'TYPE';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if index = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'INDEX';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if report = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'REPORT';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):   proc sort NOTHREADS;
MPRINT(EMADVISECOLUMNS):   by attr;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M1GIGLE8;
MPRINT(EMADVISECOLUMNS):   length NAME $64 ROLE $ 32 LEVEL $ 10 ORDER $ 8 CREATOR $32
FORMATTYPE $ 10 FAMILY $ 10 LOWERLIMIT 8 UPPERLIMIT 8 REPORT $1 DISTRIBUTION $ 20 COMMENT $64;
MPRINT(EMADVISECOLUMNS):   length levelAssigned 8 roleAssigned 8 PRICE 8;
MPRINT(EMADVISECOLUMNS):   set WORK.M1GIGLE8;
MPRINT(EMADVISECOLUMNS):   if formattype = ' ' then do;
MPRINT(EMADVISECOLUMNS):   if format ne ' ' then do;
MPRINT(EMADVISECOLUMNS):   if type = 'N' then do;
MPRINT(EMADVISECOLUMNS):   pos = indexc(format,'.1234567890');
MPRINT(EMADVISECOLUMNS):   if pos > 1 then tempfmt = substr(format,1, pos-1);
MPRINT(EMADVISECOLUMNS):   else tempfmt = ' ';
MPRINT(EMADVISECOLUMNS):   flen = length(tempfmt);
MPRINT(EMADVISECOLUMNS):   select;
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("DATE" "DAY" "DDMMYY" "DOWNAME" "JULDAY" "JULIAN"
"MMDDYY" "MMDDYYD" "MMDDYYC" "MMDDYYN" "MMDDYYP" "MMDDYYS" "MONNAME" "MONTH" "MONYY" "NENGO"
"QTR" "QTRR" "WEEKDATE" "WEEKDATX" "WEEKDAY" "WORDDATE" "WORDDATX" "YEAR" "YYMMDD" "YYMON"
"YYMMDDC" "YYMMDDD" "YYMMDDN" "YYMMDDP" "YYMMDDS" "EURDFDE" "NJDATE" "NLDATE" "EURDFDD"
"EURDFDWN" "EURDFMN" "EURDFMY" "EURDFWK" "EURDFWKX" "EURDFWDX" "EURDFDN" "EURDFDE" ))
formattype = 'DATE';
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("DATETIME" "EURDFDT" "TOD" )) formattype =
"DATETIME";
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("HHMM" "HOUR" "MMSS" "TIME" "TIMEAMPM" ))
formattype = "TIME";
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("COMMA" "COMMAX" "DOLLAR" "DOLLARX" "E" "FRACT"
"NEGPAREN" "PERCENT")) formattype="QUANTITY";
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("BINARY" "HEX" "IB" "OCTAL" "PD" "PIB" "PK" "RB"
"SSN" "Z" "ZD")) formattype = "CODING";
MPRINT(EMADVISECOLUMNS):   otherwise do;
MPRINT(EMADVISECOLUMNS):   formattype = "USER";
MPRINT(EMADVISECOLUMNS):   if substr(tempfmt, 1, 6)='NLDATE' then formattype = "DATE";
MPRINT(EMADVISECOLUMNS):   else if substr(tempfmt, 1, 6)='NLDATM' then formattype = "DATETIME";
MPRINT(EMADVISECOLUMNS):   else if substr(tempfmt, 1, 4)='NLTIM' then formattype = "TIME";
MPRINT(EMADVISECOLUMNS):   else if flen >= 4 then do;
MPRINT(EMADVISECOLUMNS):   str = substr(tempfmt,1,4);
MPRINT(EMADVISECOLUMNS):   if str in ("MMYY" "YYMM" "YYQR") then formattype ="DATE";
MPRINT(EMADVISECOLUMNS):   else if str = "S370" then formattype = "CODING";
MPRINT(EMADVISECOLUMNS):   else if str = "BEST" then formattype = "NUM";
MPRINT(EMADVISECOLUMNS):   drop str;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if flen >=3 and substr(tempfmt,1,3) = "YYQ" then formatType =
"DATE";
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   drop flen tempfmt pos;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else do;
MPRINT(EMADVISECOLUMNS):   formatType = "CATEGORY";
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if formatType = "NUM" then do;
MPRINT(EMADVISECOLUMNS):   if index = "Y" then formatType = "DISCRETE";
MPRINT(EMADVISECOLUMNS):   else formatType = "QUANTITY";
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if level = ' ' then do;
MPRINT(EMADVISECOLUMNS):   if formatType in ("CATEGORY", "CODING", "ID") or type = "C" then
level = "NOMINAL";
MPRINT(EMADVISECOLUMNS):   else level = "INTERVAL";
MPRINT(EMADVISECOLUMNS):   levelAssigned = 1;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else level = upcase(level);
MPRINT(EMADVISECOLUMNS):   if role = ' ' then do;
MPRINT(EMADVISECOLUMNS):   length name_prefix $8 _uname $64;
MPRINT(EMADVISECOLUMNS):   drop name_prefix _uname _freqflag;
MPRINT(EMADVISECOLUMNS):   retain _freqflag;
MPRINT(EMADVISECOLUMNS):   if LENGTH> 80 then ROLE = 'TEXT';
MPRINT(EMADVISECOLUMNS):   _uname = upcase(NAME);
MPRINT(EMADVISECOLUMNS):   select(_uname);
MPRINT(EMADVISECOLUMNS):   when('_PARTIND_') do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'ID';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   when('_WARN_') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_SEGMENT') do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'SEGMENT';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   when('_NODE_') do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'SEGMENT';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   when('EM_CLASSTARGET') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_VALUETARGET') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_PREDICTION') ROLE = 'PREDICT';
MPRINT(EMADVISECOLUMNS):   when('EM_PROBABILITY') ROLE = 'PREDICT';
MPRINT(EMADVISECOLUMNS):   when('EM_EVENTPROBABILITY') ROLE = 'PREDICT';
MPRINT(EMADVISECOLUMNS):   when('EM_CLASSIFICATION') ROLE = 'CLASSIFICATION';
MPRINT(EMADVISECOLUMNS):   when('EM_DECISION') ROLE = 'DECISION';
MPRINT(EMADVISECOLUMNS):   when('EM_PROFIT') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_LOSS') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_ROI') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('URI') ROLE = 'URL';
MPRINT(EMADVISECOLUMNS):   when('FILTERED') ROLE = 'TEXTLOC';
MPRINT(EMADVISECOLUMNS):   otherwise do;
MPRINT(EMADVISECOLUMNS):   if upcase(NAME) =: 'ZIP' then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'REJECTED';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   COMMENT = 'Rejected by: Exceed the maximum class level of %s';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if upcase(NAME) in('FREQ', 'FREQUENCY') then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'FREQ';
MPRINT(EMADVISECOLUMNS):   if TYPE = 'C' then ROLE = 'INPUT';
MPRINT(EMADVISECOLUMNS):   else if _freqflag =1 then ROLE='REJECTED';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else do;
MPRINT(EMADVISECOLUMNS):   name_prefix = scan(_uname, 1, '_');
MPRINT(EMADVISECOLUMNS):   if scan(_uname, 2, '_') = '' then name_prefix='';
MPRINT(EMADVISECOLUMNS):   if name_prefix in('F', 'I', 'U') then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'CLASSIFICATION';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if name_prefix in('P', 'V') then ROLE = 'PREDICT';
MPRINT(EMADVISECOLUMNS):   else if name_prefix in('R', 'RS', 'RT', 'RD', 'RDS', 'RDT', 'RA',
'RAS', 'RAT') then ROLE = 'RESIDUAL';
MPRINT(EMADVISECOLUMNS):   else if name_prefix ='D' then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'DECISION';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if name_prefix ='B' then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'SEGMENT';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if name_prefix in('EP', 'BP', 'CP', 'EL', 'CL', 'BL', 'W',
'ROI', 'IC') then ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   else do;
MPRINT(EMADVISECOLUMNS):   array _ROLE_ (19) $32 _TEMPORARY_
('ASSESS','CLASSIFICATION','CENSOR', 'COST', 'CROSSID', 'DECISION', 'ID','INPUT', 'LABEL',
'MISSING','PREDICT','REFERRER','REJECTED', 'RESIDUAL','SEGMENT', 'SEQUENCE','TARGET', 'TEXT',
'TIMEID');
MPRINT(EMADVISECOLUMNS):   drop _found_ i;
MPRINT(EMADVISECOLUMNS):   _found_=0;
MPRINT(EMADVISECOLUMNS):   do i=1 to 19 until(_found_=1);
MPRINT(EMADVISECOLUMNS):   if index(_uname, trim(_ROLE_{i}))=1 then do;
MPRINT(EMADVISECOLUMNS):   ROLE=_ROLE_{i};
MPRINT(EMADVISECOLUMNS):   if ROLE = 'ID' then LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   else if ROLE = 'SEGMENT' then LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   else if ROLE = 'TIMEID' and TYPE='N' then LEVEL = 'INTERVAL';
MPRINT(EMADVISECOLUMNS):   _found_=1;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if length(_uname)>2 then do;
MPRINT(EMADVISECOLUMNS):   if substr(reverse(trim(_uname)), 1, 3) = 'DI_' then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'ID';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if ROLE='FREQ' then _freqflag=1;
MPRINT(EMADVISECOLUMNS):   else if ROLE = 'CLASSIFICATION' then LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   if symexist('RATEMKG_ROLE') then do;
MPRINT(EMADVISECOLUMNS):   if upcase(symget('RATEMKG_ROLE')) in('Y', 'YES') then do;
MPRINT(EMADVISECOLUMNS):   if _uname =: 'POLICY' then ROLE = 'POLICYID';
MPRINT(EMADVISECOLUMNS):   else if _uname in ('PARTITION', '_PARTIND_') then ROLE =
'PARTITION';
MPRINT(EMADVISECOLUMNS):   else if type = 'N' then do;
MPRINT(EMADVISECOLUMNS):   if _uname = 'EXPOSURE' then ROLE = 'EXPOSURE';
MPRINT(EMADVISECOLUMNS):   else if _uname = 'YEAR' then ROLE = 'YEAR';
MPRINT(EMADVISECOLUMNS):   else if _uname = 'WEIGHT' then ROLE = 'WEIGHT';
MPRINT(EMADVISECOLUMNS):   else if _uname = 'OFFSET' then ROLE = 'OFFSET';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if role = ' ' then do;
MPRINT(EMADVISECOLUMNS):   if formattype in('DATE', 'DATETIME', 'TIME') then role = 'TIMEID';
MPRINT(EMADVISECOLUMNS):   else role = 'INPUT';
MPRINT(EMADVISECOLUMNS):   roleAssigned = 1;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else role = upcase(role);
MPRINT(EMADVISECOLUMNS):   if REPORT = '' then REPORT = 'N';
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M1GIGLE8;
MPRINT(EMADVISECOLUMNS):   set WORK.M1GIGLE8;
MPRINT(EMADVISECOLUMNS):   label NAME = "Variable Name" TYPE = "Type" ROLE = "Role" LEVEL=
"Measurement Level" ORDER= "Order" CREATOR= "Creator" FORMATTYPE= "Format Type" FAMILY=
"Family" DISTRIBUTION= "Distribution" PRICE= "Price" LOWERLIMIT= "Lower limit" UPPERLIMIT=
"Upper Limit" REPORT= "Report" COMMENT= "Comment" INDEX= "Index" INDEXTYPE= "IndexType" LABEL=
"Label" LENGTH= "Length";
MPRINT(EMADVISECOLUMNS):   drop levelAssigned roleAssigned;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   proc sort data=WORK.COLUMNMETA;
MPRINT(EM_DIAGRAM):   by NAME;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * &nodeid: Merge incoming metadata;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   proc contents data=EMWS1.Repl2_TRAIN noprint out=_temp2(keep=NAME);
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=_temp2;
MPRINT(EM_DIAGRAM):   by NAME;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=EMWS1.Repl2_CMeta_TRAIN out=_temp;
MPRINT(EM_DIAGRAM):   by NAME;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data EMWS1.Neural4_CMeta_TRAIN;
MPRINT(EM_DIAGRAM):   merge WORK.COLUMNMETA(in=_a) _temp2(in=_b) _temp(drop=FORMAT INFORMAT
LENGTH INDEX INDEXTYPE in=_c) end=_eof_;
MPRINT(EM_DIAGRAM):   by NAME;
MPRINT(EM_DIAGRAM):   if (^_a and _b) or (^_c and _a and _b) then delete;
MPRINT(EM_DIAGRAM):   if ^_b then CREATOR = "Neural4";
MPRINT(EM_DIAGRAM):   length model $200;
MPRINT(EM_DIAGRAM):   label MODEL = "Model Node";
MPRINT(EM_DIAGRAM):   select(upcase(name));
MPRINT(EM_DIAGRAM):   when("P_RISK1") creator = "Neural4";
MPRINT(EM_DIAGRAM):   when("R_RISK1") creator = "Neural4";
MPRINT(EM_DIAGRAM):   when("P_RISK0") creator = "Neural4";
MPRINT(EM_DIAGRAM):   when("R_RISK0") creator = "Neural4";
MPRINT(EM_DIAGRAM):   when("F_RISK") creator = "Neural4";
MPRINT(EM_DIAGRAM):   when("I_RISK") creator = "Neural4";
MPRINT(EM_DIAGRAM):   when("U_RISK") creator = "Neural4";
MPRINT(EM_DIAGRAM):   when("_WARN_") creator = "Neural4";
MPRINT(EM_DIAGRAM):   when("RISK") model = "Neural4";
MPRINT(EM_DIAGRAM):   when('');
MPRINT(EM_DIAGRAM):   otherwise;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Neural4: Apply Delta Code;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   filename _delta;
130197     data WORK.MODELTEMP_INFO;
MPRINT(EM_DIAGRAM):    data WORK.MODELTEMP_INFO;
130198     set EMWS1.Neural4_EMINFO;
MPRINT(EM_DIAGRAM):   set EMWS1.Neural4_EMINFO;
130199     where DATA='Neural4' and KEY ^in('DECDATA', 'DECMETA', 'IMPORTANCE', 'MODEL');
MPRINT(EM_DIAGRAM):   where DATA='Neural4' and KEY ^in('DECDATA', 'DECMETA', 'IMPORTANCE',
'MODEL');
130200     run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 0 observations read from the data set EMWS1.NEURAL4_EMINFO.
      WHERE (DATA='Neural4') and KEY not in ('DECDATA', 'DECMETA', 'IMPORTANCE', 'MODEL');
NOTE: The data set WORK.MODELTEMP_INFO has 0 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
130201     data EMWS1.Neural4_EMINFO;
MPRINT(EM_DIAGRAM):    data EMWS1.Neural4_EMINFO;
130202     length TARGET KEY $32 DATA $43;
MPRINT(EM_DIAGRAM):   length TARGET KEY $32 DATA $43;
130203     input TARGET KEY DATA $;
MPRINT(EM_DIAGRAM):   input TARGET KEY DATA $;
130204     cards;
MPRINT(EM_DIAGRAM):   cards;
 
NOTE: The data set EMWS1.NEURAL4_EMINFO has 3 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.04 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_DIAGRAM):   run;
130208     run;
130209     data EMWS1.Neural4_EMINFO;
MPRINT(EM_DIAGRAM):   data EMWS1.Neural4_EMINFO;
130210     set EMWS1.Neural4_EMINFO WORK.MODELTEMP_INFO;
MPRINT(EM_DIAGRAM):   set EMWS1.Neural4_EMINFO WORK.MODELTEMP_INFO;
130211     run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 3 observations read from the data set EMWS1.NEURAL4_EMINFO.
NOTE: There were 0 observations read from the data set WORK.MODELTEMP_INFO.
NOTE: The data set EMWS1.NEURAL4_EMINFO has 3 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.09 seconds
      cpu time            0.01 seconds
 
 
130212     proc sort data = EMWS1.Neural4_EMINFO NOTHREADS;
MPRINT(EM_DIAGRAM):    proc sort data = EMWS1.Neural4_EMINFO NOTHREADS;
130213     by TARGET KEY;
MPRINT(EM_DIAGRAM):   by TARGET KEY;
130214     run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 3 observations read from the data set EMWS1.NEURAL4_EMINFO.
NOTE: The data set EMWS1.NEURAL4_EMINFO has 3 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.40 seconds
      cpu time            0.01 seconds
 
 
130215     proc sort data = EMWS1.FIMPORT_EMINFO OUT=WORK.SORTEDEMINFO NOTHREADS;
MPRINT(EM_DIAGRAM):    proc sort data = EMWS1.FIMPORT_EMINFO OUT=WORK.SORTEDEMINFO NOTHREADS;
130216     by TARGET KEY;
MPRINT(EM_DIAGRAM):   by TARGET KEY;
130217     run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 1 observations read from the data set EMWS1.FIMPORT_EMINFO.
NOTE: The data set WORK.SORTEDEMINFO has 1 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.03 seconds
      cpu time            0.01 seconds
 
 
130218     proc sort data = EMWS1.Neural4_EMINFO OUT=WORK.TEMP_INFO NOTHREADS;
MPRINT(EM_DIAGRAM):   proc sort data = EMWS1.Neural4_EMINFO OUT=WORK.TEMP_INFO NOTHREADS;
130219     by TARGET KEY;
MPRINT(EM_DIAGRAM):   by TARGET KEY;
130220     run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: Input data set is already sorted; it has been copied to the output data set.
NOTE: There were 3 observations read from the data set EMWS1.NEURAL4_EMINFO.
NOTE: The data set WORK.TEMP_INFO has 3 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
130221     data EMWS1.Neural4_EMINFO;
MPRINT(EM_DIAGRAM):   data EMWS1.Neural4_EMINFO;
130222     merge WORK.SORTEDEMINFO WORK.TEMP_INFO;
MPRINT(EM_DIAGRAM):   merge WORK.SORTEDEMINFO WORK.TEMP_INFO;
130223     by TARGET KEY;
MPRINT(EM_DIAGRAM):   by TARGET KEY;
130224     run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 1 observations read from the data set WORK.SORTEDEMINFO.
NOTE: There were 3 observations read from the data set WORK.TEMP_INFO.
NOTE: The data set EMWS1.NEURAL4_EMINFO has 4 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.07 seconds
      cpu time            0.01 seconds
 
 
130225     proc datasets lib=work nolist;
MPRINT(EM_DIAGRAM):   proc datasets lib=work nolist;
130226     delete TEMP_INFO SORTEDEMINFO;
MPRINT(EM_DIAGRAM):   delete TEMP_INFO SORTEDEMINFO;
130227     run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: Deleting WORK.TEMP_INFO (memtype=DATA).
NOTE: Deleting WORK.SORTEDEMINFO (memtype=DATA).
130228     quit;
MPRINT(EM_DIAGRAM):   quit;
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.02 seconds
      cpu time            0.01 seconds
 
 
NOTE: View EMWS1.NEURAL4_TRAIN.VIEW used (Total process time):
      real time           0.20 seconds
      cpu time            0.20 seconds
 
NOTE: View EMWS1.NEURAL4_VALIDATE.VIEW used (Total process time):
      real time           0.21 seconds
      cpu time            0.21 seconds
 
MPRINT(EM_DIAGRAM):    proc printto;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   call symput('NLDATE', strip(put(date(), NLDATE.)));
MPRINT(EM_DIAGRAM):   call symput('NLTIME', strip(put(datetime(), NLTIME.)));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   nldate= sasmsg("sashelp.dmine", "log_date_note", 'N', "April 16, 2021" );
MPRINT(EM_DIAGRAM):   nltime= sasmsg("sashelp.dmine", "log_time_note", 'N', "11:32:07 o'clock"
);
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "* Report Log";
MPRINT(EM_DIAGRAM):   put nldate;
MPRINT(EM_DIAGRAM):   put nltime;
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   run;
*------------------------------------------------------------*
* Report Log
Date:                April 16, 2021
Time:                11:32:07 o'clock
*------------------------------------------------------------*
MPRINT(EM_DIAGRAM):    filename O3V901SO "H:\746\Decision Tree
test\Workspaces\EMWS1\Neural4\EMREPORT.out" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):   proc printto print=O3V901SO new;
MPRINT(EM_DIAGRAM):   run;
130252     data EMWS1.Neural4_EMOUTFIT(rename=(_NAME_=TARGET));
MPRINT(EM_DIAGRAM):    data EMWS1.Neural4_EMOUTFIT(rename=(_NAME_=TARGET));
130253     set EMWS1.Neural4_OUTFIT(where=(_NAME_ eq 'OVERALL'));
MPRINT(EM_DIAGRAM):   set EMWS1.Neural4_OUTFIT(where=(_NAME_ eq 'OVERALL'));
130254     label _NAME_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_target_vlabel  , NOQUOTE))";
MPRINT(EM_DIAGRAM):   label _NAME_ = "Target";
130255     if _NAME_='OVERALL' then _NAME_='Risk';
MPRINT(EM_DIAGRAM):   if _NAME_='OVERALL' then _NAME_='Risk';
130256     drop _ITER_;
MPRINT(EM_DIAGRAM):   drop _ITER_;
130257     run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 1 observations read from the data set EMWS1.NEURAL4_OUTFIT.
      WHERE _NAME_='OVERALL';
NOTE: The data set EMWS1.NEURAL4_EMOUTFIT has 1 observations and 35 variables.
NOTE: DATA statement used (Total process time):
      real time           0.06 seconds
      cpu time            0.01 seconds
 
 
130258     proc sort data=EMWS1.Neural4_EMOUTFIT nodupkey;
MPRINT(EM_DIAGRAM):   proc sort data=EMWS1.Neural4_EMOUTFIT nodupkey;
130259     by TARGET;
MPRINT(EM_DIAGRAM):   by TARGET;
130260     run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 1 observations read from the data set EMWS1.NEURAL4_EMOUTFIT.
NOTE: 0 observations with duplicate key values were deleted.
NOTE: The data set EMWS1.NEURAL4_EMOUTFIT has 1 observations and 35 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.07 seconds
      cpu time            0.00 seconds
 
 
130261     data EMWS1.Neural4_EMOUTFIT;
MPRINT(EM_DIAGRAM):    data EMWS1.Neural4_EMOUTFIT;
130262     set EMWS1.Neural4_EMOUTFIT;
MPRINT(EM_DIAGRAM):   set EMWS1.Neural4_EMOUTFIT;
130263     length TargetLabel $200;
MPRINT(EM_DIAGRAM):   length TargetLabel $200;
130264     label targetLabel = "%sysfunc(sasmsg(sashelp.dmine, meta_targetlabel_vlabel,
130264   ! NOQUOTE))";
MPRINT(EM_DIAGRAM):   label targetLabel = "Target Label";
130265     run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: Variable TargetLabel is uninitialized.
NOTE: There were 1 observations read from the data set EMWS1.NEURAL4_EMOUTFIT.
NOTE: The data set EMWS1.NEURAL4_EMOUTFIT has 1 observations and 36 variables.
NOTE: DATA statement used (Total process time):
      real time           0.07 seconds
      cpu time            0.03 seconds
 
 
130266     proc sort data=EMWS1.Neural4_EMREPORTFIT nothreads;
MPRINT(EM_DIAGRAM):    proc sort data=EMWS1.Neural4_EMREPORTFIT nothreads;
130267     by TARGET;
MPRINT(EM_DIAGRAM):   by TARGET;
130268     run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 21 observations read from the data set EMWS1.NEURAL4_EMREPORTFIT.
NOTE: The data set EMWS1.NEURAL4_EMREPORTFIT has 21 observations and 7 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.07 seconds
      cpu time            0.04 seconds
 
 
130269     %let _EMwarndup = 0;
130270     %let _EMtargetdup =;
130271     %let _EMASEtargetdup =;
130272     data _null_;
MPRINT(EM_DIAGRAM):    data _null_;
130273     set EMWS1.Neural4_EMOUTFIT;
MPRINT(EM_DIAGRAM):   set EMWS1.Neural4_EMOUTFIT;
130274     if .<_ASE_<0.000001 then do;
MPRINT(EM_DIAGRAM):   if .<_ASE_<0.000001 then do;
130275     call symput('_EMwarndup', '1');
MPRINT(EM_DIAGRAM):   call symput('_EMwarndup', '1');
130276     call symput('_EMtargetdup', target);
MPRINT(EM_DIAGRAM):   call symput('_EMtargetdup', target);
130277     call symput('_EMASEtargetdup', put(_ASE_, best.));
MPRINT(EM_DIAGRAM):   call symput('_EMASEtargetdup', put(_ASE_, best.));
130278     end;
MPRINT(EM_DIAGRAM):   end;
130279     run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 1 observations read from the data set EMWS1.NEURAL4_EMOUTFIT.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
130280     proc sort data=EMWS1.Repl2_CMeta_TRAIN out=WORK.SUBSETINMETA;
MPRINT(EM_DIAGRAM):    proc sort data=EMWS1.Repl2_CMeta_TRAIN out=WORK.SUBSETINMETA;
130281     by NAME;
MPRINT(EM_DIAGRAM):   by NAME;
130282     run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 53 observations read from the data set EMWS1.REPL2_CMETA_TRAIN.
NOTE: The data set WORK.SUBSETINMETA has 53 observations and 28 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
130283     proc sort data=EMWS1.Neural4_VariableSet out=WORK.SUBSETVARSET(keep=NAME REPORT);
MPRINT(EM_DIAGRAM):   proc sort data=EMWS1.Neural4_VariableSet out=WORK.SUBSETVARSET(keep=NAME
REPORT);
130284     by NAME;
MPRINT(EM_DIAGRAM):   by NAME;
130285     run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 52 observations read from the data set EMWS1.NEURAL4_VARIABLESET.
NOTE: The data set WORK.SUBSETVARSET has 52 observations and 2 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.02 seconds
      cpu time            0.00 seconds
 
 
130286     data WORK.ASSESS_META;
MPRINT(EM_DIAGRAM):   data WORK.ASSESS_META;
130287     merge WORK.SUBSETINMETA WORK.SUBSETVARSET;
MPRINT(EM_DIAGRAM):   merge WORK.SUBSETINMETA WORK.SUBSETVARSET;
130288     by NAME;
MPRINT(EM_DIAGRAM):   by NAME;
130289     run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 53 observations read from the data set WORK.SUBSETINMETA.
NOTE: There were 52 observations read from the data set WORK.SUBSETVARSET.
NOTE: The data set WORK.ASSESS_META has 53 observations and 28 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
130290     data EM_temp_assessMeta;
MPRINT(EM_DIAGRAM):    data EM_temp_assessMeta;
130291     set EMWS1.Neural4_CMeta_TRAIN;
MPRINT(EM_DIAGRAM):   set EMWS1.Neural4_CMeta_TRAIN;
130292     where role in('DECISION', 'PREDICT', 'RESIDUAL', 'CLASSIFICATION', 'ASSESS', 'COST')
130292   ! ;
MPRINT(EM_DIAGRAM):   where role in('DECISION', 'PREDICT', 'RESIDUAL', 'CLASSIFICATION',
'ASSESS', 'COST');
130293     run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 8 observations read from the data set EMWS1.NEURAL4_CMETA_TRAIN.
      WHERE role in ('ASSESS', 'CLASSIFICATION', 'COST', 'DECISION', 'PREDICT', 'RESIDUAL');
NOTE: The data set WORK.EM_TEMP_ASSESSMETA has 8 observations and 29 variables.
NOTE: DATA statement used (Total process time):
      real time           0.02 seconds
      cpu time            0.00 seconds
 
 
130294     data EM_temp_assessdata;
MPRINT(EM_DIAGRAM):    data EM_temp_assessdata;
130295     set EMWS1.Neural4_TRAIN(keep=
130296     F_Risk
130297     I_Risk
130298     P_Risk0
130299     P_Risk1
130300     R_Risk0
130301     R_Risk1
130302     U_Risk
130303     _WARN_
130304     Risk
130305     );
MPRINT(EM_DIAGRAM):   set EMWS1.Neural4_TRAIN(keep= F_Risk I_Risk P_Risk0 P_Risk1 R_Risk0
R_Risk1 U_Risk _WARN_ Risk );
130306     run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 100 observations read from the data set EMWS1.PART_TRAIN.
NOTE: There were 100 observations read from the data set EMWS1.IMPT_TRAIN.
NOTE: There were 100 observations read from the data set EMWS1.REPL_TRAIN.
NOTE: There were 100 observations read from the data set EMWS1.TRANS_TRAIN.
NOTE: View EMWS1.NEURAL4_TRAIN.VIEW used (Total process time):
      real time           0.21 seconds
      cpu time            0.22 seconds
 
NOTE: There were 100 observations read from the data set EMWS1.REPL2_TRAIN.
NOTE: There were 100 observations read from the data set EMWS1.NEURAL4_TRAIN.
NOTE: The data set WORK.EM_TEMP_ASSESSDATA has 100 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.24 seconds
      cpu time            0.23 seconds
 
 
MPRINT(EM_DIAGRAM):    proc freq data=EM_temp_assessdata noprint;
MPRINT(EM_DIAGRAM):   table I_Risk*F_Risk / out = WORK.Neural4_28F83IB nocol norow outpct;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data WORK.Neural4_28F83IB;
MPRINT(EM_DIAGRAM):   length _TYPE_ $10 DATAROLE TARGET $32 TARGETLABEL $200 FROM INTO $32
CORRECTTEXT $40 ;
MPRINT(EM_DIAGRAM):   label _TYPE_ = "Outcome Type";
MPRINT(EM_DIAGRAM):   label DATAROLE = "Data Role";
MPRINT(EM_DIAGRAM):   label TARGET = "Target Variable";
MPRINT(EM_DIAGRAM):   label TARGETLABEL = "Target Label";
MPRINT(EM_DIAGRAM):   label FROM = "Target";
MPRINT(EM_DIAGRAM):   label INTO = "Outcome";
MPRINT(EM_DIAGRAM):   label PCT_ROW = "Target Percentage";
MPRINT(EM_DIAGRAM):   label PCT_COL = "Outcome Percentage";
MPRINT(EM_DIAGRAM):   label COUNT = "Frequency Count";
MPRINT(EM_DIAGRAM):   label PERCENT = "Total Percentage";
MPRINT(EM_DIAGRAM):   label CORRECTTEXT = "Correct Text";
MPRINT(EM_DIAGRAM):   label CORRECT = "Correct";
MPRINT(EM_DIAGRAM):   set WORK.Neural4_28F83IB(rename=(F_Risk=FROM I_Risk=INTO));
MPRINT(EM_DIAGRAM):   retain _TYPE_ 'PREDICTION' DATAROLE "TRAIN" TARGET "Risk";
MPRINT(EM_DIAGRAM):   if FROM eq INTO then do;
MPRINT(EM_DIAGRAM):   CORRECT = 0;
MPRINT(EM_DIAGRAM):   CORRECTTEXT="Correct";
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   CORRECT = 1;
MPRINT(EM_DIAGRAM):   CORRECTTEXT="Incorrect";
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data EMWS1.Neural4_EMCLASSIFICATION;
MPRINT(EM_DIAGRAM):   set WORK.Neural4_28F83IB;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data WORK.MISCREPORT;
MPRINT(EM_DIAGRAM):   set WORK.Neural4_28F83IB;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data WORK.MISCREPORT(drop=INTO FROM _TYPE_);
MPRINT(EM_DIAGRAM):   set WORK.MISCREPORT;
MPRINT(EM_DIAGRAM):   length MISC $12;
MPRINT(EM_DIAGRAM):   if FROM='1' and INTO='1' then MISC='TRUEEVENT';
MPRINT(EM_DIAGRAM):   else if FROM='1' and INTO ne '1' then MISC='FALSENEVENT';
MPRINT(EM_DIAGRAM):   else if FROM ne '1' and INTO='1' then MISC='FALSEEVENT';
MPRINT(EM_DIAGRAM):   else if FROM ne'1' and INTO ne '1' then MISC='TRUENEVENT';
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=WORK.MISCREPORT nothreads;
MPRINT(EM_DIAGRAM):   by DATAROLE TARGET;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc summary data=WORK.MISCREPORT NWAY;
MPRINT(EM_DIAGRAM):   output out=WORK.MISCCOUNT(drop=_FREQ_ _TYPE_) SUM=COUNT;
MPRINT(EM_DIAGRAM):   CLASS MISC;
MPRINT(EM_DIAGRAM):   VAR COUNT;
MPRINT(EM_DIAGRAM):   by DATAROLE TARGET;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc transpose data=WORK.MISCCOUNT out=WORK.MISCREPORT(drop=_NAME_
_LABEL_);
MPRINT(EM_DIAGRAM):   by DATAROLE TARGET;
MPRINT(EM_DIAGRAM):   ID MISC;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data EMWS1.Neural4_EMEVENTREPORT;
MPRINT(EM_DIAGRAM):   length TARGETLABEL $200;
MPRINT(EM_DIAGRAM):   label TARGETLABEL = "Target Label";
MPRINT(EM_DIAGRAM):   set WORK.MISCREPORT;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data ASSESS_REPORTMETA;
MPRINT(EM_DIAGRAM):   set EMWS1.Neural4_VariableSet;
MPRINT(EM_DIAGRAM):   where REPORT='Y';
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   filename temp catalog 'sashelp.emassmt.em_assess.source';
MPRINT(EM_DIAGRAM):   filename temp;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   set EMWS1.Neural4_Risk_DM;
MPRINT(EM_DIAGRAM):   where _TYPE_="TARGET";
MPRINT(EM_DIAGRAM):   call symput('ASSMT_EVENT', strip(event));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):
MPRINT(EM_ASSESS):   data _ea_tmpdata;
MPRINT(EM_ASSESS):   set EM_temp_assessdata;
MPRINT(EM_ASSESS):   _tmpfreqvar_=1;
MPRINT(EM_ASSESS):   run;
MPRINT(EM_CHECKEMSETINIT):   DATA _NULL_;
MPRINT(EM_CHECKEMSETINIT):   EM_SETINIT = 'N';
MPRINT(EM_CHECKEMSETINIT):   IF SYSPROD('PRODNUM50') THEN EM_SETINIT = 'Y';
MPRINT(EM_CHECKEMSETINIT):   ELSE IF SYSPROD('PRODNUM448') THEN EM_SETINIT = 'Y';
MPRINT(EM_CHECKEMSETINIT):   ELSE IF SYSPROD('PRODNUM102') THEN EM_SETINIT = 'Y';
MPRINT(EM_CHECKEMSETINIT):   ELSE IF SYSPROD('PRODNUM103') THEN EM_SETINIT = 'Y';
MPRINT(EM_CHECKEMSETINIT):   CALL SYMPUT('EM_SETINIT', EM_SETINIT);
MPRINT(EM_CHECKEMSETINIT):   RUN;
MPRINT(EM_ASSESS):  ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ............ Reading in reporting data set;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   DATA _NULL_;
MPRINT(EM_ASSESS):   SET ASSESS_REPORTMETA END = EOF;
MPRINT(EM_ASSESS):   IF TYPE = "C" OR UPCASE (LEVEL) IN ("NOMINAL", "BINARY" , "ORDINAL") THEN
DO;
MPRINT(EM_ASSESS):   IF UPCASE (NAME) NE UPCASE ("F_Risk") THEN DO;
MPRINT(EM_ASSESS):   NUMCTOREPORT + 1;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("REPORTC" || LEFT (PUT (NUMCTOREPORT, 5.)), NAME);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE CALL SYMPUTX ("RPRT_TRGT", "C");
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE IF TYPE = "N" THEN DO;
MPRINT(EM_ASSESS):   IF UPCASE(NAME) NE UPCASE ("F_Risk") THEN DO;
MPRINT(EM_ASSESS):   NUMNTOREPORT + 1;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("REPORTN" || LEFT (PUT (NUMNTOREPORT, 5.)), NAME);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE CALL SYMPUTX ("RPRT_TRGT", "N");
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   IF EOF THEN DO;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("NUMNTOREPORT", NUMNTOREPORT);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("NUMCTOREPORT", NUMCTOREPORT);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("NUMTOREPORT", SUM (NUMNTOREPORT, NUMCTOREPORT));
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   PROC DMDB DATA = _ea_tmpdata VAROUT = VAROUT DMDBCAT = _D CLASSOUT =
_ASSMT_CLASSOUT;
MPRINT(EM_ASSESS):   CLASS F_Risk ;
 
MPRINT(EM_ASSESS):   VAR P_Risk1 _tmpfreqvar_ ;
MPRINT(EM_ASSESS):   FREQ _tmpfreqvar_;
MPRINT(EM_ASSESS):   RUN ;
MPRINT(EM_ASSESS):   QUIT;
MPRINT(EM_ASSESS):   PROC SORT DATA = _ASSMT_CLASSOUT;
MPRINT(EM_ASSESS):   BY NAME;
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   DATA _auxeventname (keep = __event__) ;
MPRINT(EM_ASSESS):   * ;
MPRINT(EM_ASSESS):   * ...FLAG0_1 = ..... TARGET IS 0, 1 & EVENT = 1;
 
MPRINT(EM_ASSESS):   ;
MPRINT(EM_ASSESS):   length __event__ $ 32;
MPRINT(EM_ASSESS):   RETAIN FLAG0_1 1 NUM1 . NUM0 . __event__ "_missing_" ;
 
MPRINT(EM_ASSESS):   SET _ASSMT_CLASSOUT END = EOF;
MPRINT(EM_ASSESS):   BY NAME;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ....... LEVEL = BINARY OR NOMINAL OR ORDINAL;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
 
MPRINT(EM_ASSESS):   IF UPCASE(NAME) = UPCASE ("F_Risk") THEN DO;
MPRINT(EM_ASSESS):   CUMFREQ + FREQUENCY;
MPRINT(EM_ASSESS):   IF LEVEL NE "." THEN DO;
MPRINT(EM_ASSESS):   N1 + 1;
MPRINT(EM_ASSESS):   IF (NRAW NE 0 AND NRAW NE 1) OR TYPE NE "N" OR "" > " " THEN FLAG0_1 = 0;
MPRINT(EM_ASSESS):   * ;
MPRINT(EM_ASSESS):   * ......................... IF EVENT NE BLANK;
MPRINT(EM_ASSESS):   * ....................LEVEL IS CHAR VAR ;
MPRINT(EM_ASSESS):   * ;
MPRINT(EM_ASSESS):   IF UPCASE("1") = UPCASE(LEVEL) THEN DO;
MPRINT(EM_ASSESS):   NUM1 = FREQUENCY;
MPRINT(EM_ASSESS):   IF TYPE = "C" THEN do;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("EVENTVALUERAW", CRAW );
MPRINT(EM_ASSESS):   __event__ = craw;
MPRINT(EM_ASSESS):   end;
MPRINT(EM_ASSESS):   ELSE do;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("EVENTVALUERAW", NRAW );
MPRINT(EM_ASSESS):   __event__ = nraw;
MPRINT(EM_ASSESS):   end;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   IF LAST.NAME THEN DO;
 
MPRINT(EM_ASSESS):   * ;
MPRINT(EM_ASSESS):   * .............. IN NOMINAL CASE, NEED TO GROUP ALL '0' ;
MPRINT(EM_ASSESS):   *;
 
MPRINT(EM_ASSESS):   NUM0 = SUM (CUMFREQ, - NUM1);
MPRINT(EM_ASSESS):   IF NUM0 < 0 THEN NUM0 = 0;
MPRINT(EM_ASSESS):   IF NUM1 = . THEN NUM1 = 0;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("NUM0", NUM0 );
MPRINT(EM_ASSESS):   CALL SYMPUTX ("NUM1", NUM1);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("PNUM1", NUM1 / CUMFREQ);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("PNUM0", (CUMFREQ - NUM1) / CUMFREQ);
MPRINT(EM_ASSESS):   IF TYPE = "C" THEN DO;
MPRINT(EM_ASSESS):   FLAG0_1 = 0;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("TARGETTYPE", "C" );
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE IF TYPE = "N" THEN DO;
MPRINT(EM_ASSESS):   IF "" = " " THEN DO;
MPRINT(EM_ASSESS):   IF "1" NE "1" THEN FLAG0_1 = 0;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("TARGETTYPE", "N" );
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   * ................... IF TYPE = N;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("FLAG0_1", FLAG0_1 );
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   * ..................IF LAST.NAME ;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   * ...............IF LEVEL NE '.' ;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   * .............. IF NAME = TARGET;
MPRINT(EM_ASSESS):   ELSE IF "" > " " AND UPCASE(NAME) = UPCASE("") THEN DO;
MPRINT(EM_ASSESS):   NUMDECISIONS + 1;
MPRINT(EM_ASSESS):   LEVEL = TRANSLATE (LEVEL, "_", "'", "_", '"');
MPRINT(EM_ASSESS):   CALL SYMPUTX ("D_LABEL" || LEFT (PUT (NUMDECISIONS, 3.)), LEVEL );
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   * ..................... ELSE IF UPCASE;
MPRINT(EM_ASSESS):   IF EOF THEN DO;
MPRINT(EM_ASSESS):   output _auxeventname;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("NUMOBS", CUMFREQ);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("NUMDECISIONS", NUMDECISIONS);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   DATA _NULL_;
MPRINT(EM_ASSESS):   SET VAROUT END = EOF;
MPRINT(EM_ASSESS):   IF UPCASE (NAME) = UPCASE ("P_Risk1") THEN DO;
MPRINT(EM_ASSESS):   IF N = 0 THEN DO;
MPRINT(EM_ASSESS):   PUT //// "          Warning: All posterior probabilities are missing
values ";
MPRINT(EM_ASSESS):   PUT ///;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("ALLMISS", 1);
MPRINT(EM_ASSESS):   STOP;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE CALL SYMPUTX ("ALLMISS", 0);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("MINPROB", MIN);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("MAXPROB", MAX);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("DIFF", MAX - MIN);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("NMISSPROB", NMISS);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE IF UPCASE (NAME) = UPCASE ("_tmpfreqvar_") THEN DO;
MPRINT(EM_ASSESS):   AUXMIN = MIN - INT (MIN);
MPRINT(EM_ASSESS):   AUXMAX = MAX - INT (MAX);
MPRINT(EM_ASSESS):   IF AUXMIN > 0 OR AUXMAX > 0 THEN CALL SYMPUTX ("USEWEIGHT", "Y");
MPRINT(EM_ASSESS):   ELSE CALL SYMPUTX ("USEWEIGHT", "N");
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   DATA _ANY0;
MPRINT(EM_ASSESS):   SET _ea_tmpdata (KEEP = F_Risk P_Risk1 _tmpfreqvar_ );
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ................... No Formats;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   IF LEFT ( F_Risk ) = "1" THEN NTARGET = 1;
MPRINT(EM_ASSESS):   ELSE NTARGET = 0;
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * .............. Before proc summary of binary case;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   PROC SUMMARY DATA = _ANY0 (KEEP = P_Risk1 NTARGET _tmpfreqvar_ WHERE =
(NTARGET > . )) NWAY MISSING;
MPRINT(EM_ASSESS):   ;
MPRINT(EM_ASSESS):   CLASS P_Risk1 ;
MPRINT(EM_ASSESS):   VAR NTARGET ;
MPRINT(EM_ASSESS):   FREQ _tmpfreqvar_ ;
MPRINT(EM_ASSESS):   OUTPUT OUT = ANYSUM (DROP = _TYPE_) MEAN = _MEANTARGET _MEANFREQVAR ;
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   QUIT;
MPRINT(EM_ASSESS):   ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * .................... Main Data Set Processing, Binary case;
MPRINT(EM_ASSESS):   *;
 
MPRINT(EM_ASSESS):   DATA WORK._TEMPRANK (KEEP = BASECAPC BASECAP __EVENT__ BASEEVENTS
BASEGAIN BASELIFT BASERESP BASERESPC BESTCAP BESTCAPC BESTGAIN BESTLIFT BESTLIFTC
BESTNUMEVENTS BESTRESP BESTRESPC BIN CBASELIFT C_LIFT C_P_CAPT_RESP C_P_RESP GAIN LIFT MAXPROB
MINPROB MNPROB NUMNONRESP NUMOBS NUMRESP PERCENTILE P_CAPT_RESP P_RESP ) WORK._TEMPSCOREDIST
(KEEP = BIN LOWERPROB UPPERPROB EVENTVALUE SCR_NUMEVENTS MODELSCORE SCR_NUMNONEVENTS RANGE
NUMOBSINGROUP PERCOBSINGROUP C_PERCOBSINGROUP SCR_P_EVENTS SCR_CP_EVENTS SCR_P_NONEVENTS
SCR_CP_NONEVENTS SCR_MNPROB SCR_MINPROB SCR_MAXPROB ) ;
 
MPRINT(EM_ASSESS):   SET ANYSUM END = EOF;
 
MPRINT(EM_ASSESS):   IF _N_ = 1 THEN SET _AUXEVENTNAME;
 
MPRINT(EM_ASSESS):   RETAIN MINPROB1 - MINPROB20 1 MAXPROB1 - MAXPROB20 0 MNPROB1 - MNPROB20 0
NUMOBS1 - NUMOBS20 0 NUMRESP1 - NUMRESP20 0 TRUEPOS1 - TRUEPOS100 0 TRUENEG1 - TRUENEG100 0
FALSEPOS1 - FALSEPOS100 0 FALSENEG1 - FALSENEG100 0 EVENTS1 - EVENTS100 NONEVENTS1 -
NONEVENTS100 0 FIRSTIN1 - FIRSTIN100 . LASTIN1 - LASTIN100 . RESPRATE 0.54 _NEVENTS 54
_NNONEVENTS 46 TARGET "NTARGET" ;
MPRINT(EM_ASSESS):   ARRAY MINPROBS (20) MINPROB1 - MINPROB20;
MPRINT(EM_ASSESS):   ARRAY MAXPROBS (20) MAXPROB1 - MAXPROB20;
MPRINT(EM_ASSESS):   ARRAY MNPROBS (20) MNPROB1 - MNPROB20;
MPRINT(EM_ASSESS):   ARRAY NUMOBSS (20) NUMOBS1 - NUMOBS20;
MPRINT(EM_ASSESS):   ARRAY NUMRESPS (20) NUMRESP1 - NUMRESP20;
MPRINT(EM_ASSESS):   ARRAY TRUEPOSX (100) TRUEPOS1 - TRUEPOS100;
MPRINT(EM_ASSESS):   ARRAY FALSEPOSX (100) FALSEPOS1 - FALSEPOS100;
MPRINT(EM_ASSESS):   ARRAY FALSENEGX (100) FALSENEG1 - FALSENEG100;
MPRINT(EM_ASSESS):   ARRAY TRUENEGX (100) TRUENEG1 - TRUENEG100;
MPRINT(EM_ASSESS):   ARRAY _EVENTS (100) EVENTS1 - EVENTS100;
MPRINT(EM_ASSESS):   ARRAY NONEVENTS (100) NONEVENTS1 - NONEVENTS100;
MPRINT(EM_ASSESS):   ARRAY FIRSTIN (100) FIRSTIN1 - FIRSTIN100;
MPRINT(EM_ASSESS):   ARRAY LASTIN (100) LASTIN1 - LASTIN100;
MPRINT(EM_ASSESS):   RETAIN SCR_MNPROB1 - SCR_MNPROB100 0 SCR_MINPROB1 - SCR_MINPROB100 1
SCR_MAXPROB1 - SCR_MAXPROB100 0;
MPRINT(EM_ASSESS):   ARRAY SCR_MNPROBS (100) SCR_MNPROB1 - SCR_MNPROB100;
MPRINT(EM_ASSESS):   ARRAY SCR_MINPROBS (100) SCR_MINPROB1 - SCR_MINPROB100;
MPRINT(EM_ASSESS):   ARRAY SCR_MAXPROBS (100) SCR_MAXPROB1 - SCR_MAXPROB100;
MPRINT(EM_ASSESS):   DROP SCR_MINPROB1 - SCR_MINPROB100 SCR_MAXPROB1 - SCR_MAXPROB100
SCR_MNPROB1 - SCR_MNPROB100 ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ...... Area For 8 Financials ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   IF _MEANTARGET = . THEN _MEANTARGET = RESPRATE;
MPRINT(EM_ASSESS):   DROP N1 _K SUMWEIGHTS ;
MPRINT(EM_ASSESS):   SUMWEIGHTS = 1;
 
MPRINT(EM_ASSESS):   DO _K = 1 TO CEIL (_FREQ_);
MPRINT(EM_ASSESS):   IF _K = CEIL (_FREQ_) THEN DO;
MPRINT(EM_ASSESS):   IF _FREQ_ < CEIL (_FREQ_) THEN _WEIGHT = _FREQ_ - FLOOR (_FREQ_);
MPRINT(EM_ASSESS):   ELSE _WEIGHT = 1;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE _WEIGHT = 1;
MPRINT(EM_ASSESS):   N1 + _WEIGHT;
MPRINT(EM_ASSESS):   NTARGET = _MEANTARGET ;
MPRINT(EM_ASSESS):   DECILE = MIN (20, CEIL (N1 * 20 / 100));
MPRINT(EM_ASSESS):   MINPROBS ( DECILE) = MIN (MINPROBS ( DECILE), P_Risk1 );
MPRINT(EM_ASSESS):   MAXPROBS ( DECILE) = MAX (MAXPROBS ( DECILE), P_Risk1 );
MPRINT(EM_ASSESS):   MNPROBS ( DECILE) = SUM (MNPROBS ( DECILE), P_Risk1 * _WEIGHT);
MPRINT(EM_ASSESS):   NUMOBSS ( DECILE) = NUMOBSS ( DECILE) + _WEIGHT;
MPRINT(EM_ASSESS):   NUMRESPS ( DECILE) = NUMRESPS ( DECILE) + _MEANTARGET * _WEIGHT;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ........ outside of do loop, Area for final ROC;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   RANKDELTA = (ROUND ( _FREQ_ ) + 1) / 2;
MPRINT(EM_ASSESS):   RANK = UNTIEDRANK + RANKDELTA;
MPRINT(EM_ASSESS):   DROP RANK ;
MPRINT(EM_ASSESS):   SUMRANK1 + RANK * ROUND (_MEANTARGET * _FREQ_, .0000001);
MPRINT(EM_ASSESS):   UNTIEDRANK + ROUND (_FREQ_, .00000001);
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ............ Area For ROC Curve;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   DO _K = 1 TO 100;
MPRINT(EM_ASSESS):   IF P_Risk1 * 100 >= _K THEN DO;
MPRINT(EM_ASSESS):   TRUEPOSX ( _K ) + _FREQ_ * _MEANTARGET ;
MPRINT(EM_ASSESS):   FALSEPOSX ( _K ) + _FREQ_ * (1 - _MEANTARGET) ;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   TRUENEGX ( _K ) + _FREQ_ * ( 1 - _MEANTARGET) ;
MPRINT(EM_ASSESS):   FALSENEGX ( _K ) + _FREQ_ * _MEANTARGET ;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   SLOT = MIN (MAX (CEIL (P_Risk1 * 100), 1), 100) ;
MPRINT(EM_ASSESS):   DROP SLOT;
MPRINT(EM_ASSESS):   FIRSTIN ( SLOT ) = MIN ( FIRSTIN ( SLOT ), P_Risk1);
MPRINT(EM_ASSESS):   LASTIN ( SLOT ) = MAX ( LASTIN ( SLOT ), P_Risk1);
MPRINT(EM_ASSESS):   _EVENTS ( SLOT) = _EVENTS ( SLOT) + _FREQ_ * _MEANTARGET;
MPRINT(EM_ASSESS):   NONEVENTS ( SLOT) = NONEVENTS ( SLOT) + _FREQ_ * (1 - _MEANTARGET);
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ........ START OF OUTDIST IN BINARY CASE MAIN DATA STEP ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   SCR_MNPROBS ( SLOT ) = SUM (SCR_MNPROBS (SLOT), P_Risk1 * _FREQ_ );
MPRINT(EM_ASSESS):   SCR_MINPROBS ( SLOT ) = MIN (SCR_MINPROBS (SLOT), P_Risk1 );
MPRINT(EM_ASSESS):   SCR_MAXPROBS ( SLOT ) = MAX (SCR_MAXPROBS (SLOT), P_Risk1 );
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ........ End of Outdist in Binary case main DATA STEP ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   IF EOF THEN DO;
MPRINT(EM_ASSESS):   PUT //;
MPRINT(EM_ASSESS):   DO K = 1 TO 20;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   LENGTH EVENTVALUE $ 32;
MPRINT(EM_ASSESS):   RETAIN EVENTVALUE "1" ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ......... Start of EOF area of BINARY processing of main data set ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SUMRANK1", SUMRANK1);
MPRINT(EM_ASSESS):   LENGTH DATAROLE $ 10;
MPRINT(EM_ASSESS):   RETAIN DATAROLE "TRAIN" ;
MPRINT(EM_ASSESS):   RETAIN OVLMIN 0.0025965998 OVLMAX 0.993932443 ;
MPRINT(EM_ASSESS):   DROP OVLMIN OVLMAX ;
MPRINT(EM_ASSESS):   C_NUMOBS = 0;
MPRINT(EM_ASSESS):   C_NUM_RESP = 0;
MPRINT(EM_ASSESS):   C_NUM_NONRESP = 0;
MPRINT(EM_ASSESS):   C_P_RESP = 0;
MPRINT(EM_ASSESS):   P_CAPT_RESP = 0;
MPRINT(EM_ASSESS):   C_P_CAPT_RESP = 0;
MPRINT(EM_ASSESS):   PREVIOUSPROFIT = 0;
MPRINT(EM_ASSESS):   MAXPROFIT = 0;
MPRINT(EM_ASSESS):   _KS_BIN_ = 0;
MPRINT(EM_ASSESS):   DROP _KS_BIN_;
MPRINT(EM_ASSESS):   AVGNUMRESP = _NEVENTS / 20;
MPRINT(EM_ASSESS):   BASERESP = 100 * RESPRATE;
MPRINT(EM_ASSESS):   BASERESPC = BASERESP;
MPRINT(EM_ASSESS):   BASECAP = 100 / 20;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ........................Start OF Gainschart = Outranks Area;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   _KS_BIN_PROB = 0;
MPRINT(EM_ASSESS):   DO GROUP = 20 TO 1 BY -1;
 
MPRINT(EM_ASSESS):   BASECAPC + BASECAP;
MPRINT(EM_ASSESS):   PERCENTILE = GROUP * (100 / 20);
MPRINT(EM_ASSESS):   MINPROB = MINPROBS ( GROUP);
MPRINT(EM_ASSESS):   MAXPROB = MAXPROBS ( GROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("MINPROB" || LEFT ( PUT (GROUP, 3.)), MINPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("MAXPROB" || LEFT ( PUT (GROUP, 3.)), MAXPROB);
MPRINT(EM_ASSESS):   NUMOBS = NUMOBSS ( GROUP);
MPRINT(EM_ASSESS):   IF NUMOBS > 0 THEN MNPROB = MNPROBS ( GROUP) / NUMOBS;
MPRINT(EM_ASSESS):   ELSE MNPROB = .;
MPRINT(EM_ASSESS):   C_NUMOBS = SUM (NUMOBS, C_NUMOBS);
MPRINT(EM_ASSESS):   NUMRESP = NUMRESPS ( GROUP);
MPRINT(EM_ASSESS):   NUMNONRESP = NUMOBS - NUMRESP;
MPRINT(EM_ASSESS):   C_AVGNUM_RESP + AVGNUMRESP;
MPRINT(EM_ASSESS):   IF C_NUMOBS <= _NEVENTS THEN DO;
MPRINT(EM_ASSESS):   BESTNUMEVENTS = NUMOBS;
MPRINT(EM_ASSESS):   BESTCAPC = C_NUMOBS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   BASEEVENTS = _NEVENTS / 20;
MPRINT(EM_ASSESS):   BASENONEVENTS = 0;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   FLAG + 1;
MPRINT(EM_ASSESS):   DROP FLAG;
MPRINT(EM_ASSESS):   BESTNUMEVENTS = _NEVENTS - C_NUMOBS + NUMOBS;
MPRINT(EM_ASSESS):   IF FLAG > 1 THEN BESTNUMEVENTS = 0;
MPRINT(EM_ASSESS):   BESTCAPC = 100;
MPRINT(EM_ASSESS):   IF C_NUMOBS - _NEVENTS <= NUMOBS THEN DO;
MPRINT(EM_ASSESS):   BASEEVENTS = C_NUMOBS - _NEVENTS;
MPRINT(EM_ASSESS):   BASENONEVENTS = NUMOBS - C_NUMOBS + _NEVENTS;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   BASEEVENTS = 0;
MPRINT(EM_ASSESS):   BASENONEVENTS = NUMOBS;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   BESTCAP = BESTNUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   IF C_NUMOBS <= _NEVENTS THEN DO;
MPRINT(EM_ASSESS):   BESTLIFT = ((_NEVENTS+_NNONEVENTS) / 20) /AVGNUMRESP;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   BESTLIFT = BESTNUMEVENTS / AVGNUMRESP;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   C_BESTNUMEVENTS + BESTNUMEVENTS;
MPRINT(EM_ASSESS):   DROP C_BESTNUMEVENTS;
MPRINT(EM_ASSESS):   IF C_NUMOBS > 0 THEN BESTLIFTC = C_BESTNUMEVENTS / (_NEVENTS / 100 *
C_NUMOBS);
MPRINT(EM_ASSESS):   ELSE BESTLIFTC = .;
MPRINT(EM_ASSESS):   IF NUMOBS > 0 THEN DO;
MPRINT(EM_ASSESS):   BESTRESP = BESTNUMEVENTS * 100 / NUMOBS;
MPRINT(EM_ASSESS):   P_RESP = NUMRESP * 100 / NUMOBS;
MPRINT(EM_ASSESS):   P_NONRESP = NUMNONRESP * 100 / NUMOBS;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   BESTRESP = .;
MPRINT(EM_ASSESS):   P_RESP = .;
MPRINT(EM_ASSESS):   P_NONRESP = .;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   IF C_NUMOBS > 0 THEN DO;
MPRINT(EM_ASSESS):   BESTRESPC = C_BESTNUMEVENTS * 100 / C_NUMOBS;
MPRINT(EM_ASSESS):   BESTGAIN = MAX (0, ((C_BESTNUMEVENTS / C_NUMOBS ) / ( AVGNUMRESP /
(100/20)) - 1) * 100);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   BESTRESPC = .;
MPRINT(EM_ASSESS):   BESTGAIN = .;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   IF NUMNONRESP > 0 THEN ODDS = NUMRESP / NUMNONRESP;
MPRINT(EM_ASSESS):   ELSE ODDS = .;
MPRINT(EM_ASSESS):   C_NUM_RESP = SUM (C_NUM_RESP , NUMRESP );
MPRINT(EM_ASSESS):   C_NUM_NONRESP = SUM (C_NUM_NONRESP, NUMNONRESP );
MPRINT(EM_ASSESS):   IF C_NUM_NONRESP > 0 THEN C_ODDS = C_NUM_RESP / C_NUM_NONRESP;
MPRINT(EM_ASSESS):   ELSE C_ODDS = .;
MPRINT(EM_ASSESS):   IF C_NUMOBS > 0 THEN DO;
MPRINT(EM_ASSESS):   C_P_RESP = C_NUM_RESP * 100 / C_NUMOBS;
MPRINT(EM_ASSESS):   GAIN = ABS(100 * (((C_NUM_RESP / C_NUMOBS ) / (_NEVENTS / 100)) - 1));
MPRINT(EM_ASSESS):   BASEGAIN = 100 * (( (C_AVGNUM_RESP /((20-GROUP+1)* 100/20) ) / (
AVGNUMRESP / (100/20))) - 1);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   GAIN = .;
MPRINT(EM_ASSESS):   BASEGAIN = .;
MPRINT(EM_ASSESS):   C_P_RESP = .;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   IF BASEGAIN <= 0 THEN BASEGAIN = 0;
MPRINT(EM_ASSESS):   P_CAPT_RESP = NUMRESP * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   P_CAPT_NONRESP = NUMNONRESP * 100 / ( 100 - _NEVENTS);
MPRINT(EM_ASSESS):   C_P_CAPT_RESP = C_NUM_RESP * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   C_P_CAPT_NONRESP = C_NUM_NONRESP * 100 / ( 100 - _NEVENTS);
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * Area For Binned KS in Outranks area;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   _DIFFERENCE = C_P_CAPT_RESP - C_P_CAPT_NONRESP ;
MPRINT(EM_ASSESS):   IF _KS_BIN_ < _DIFFERENCE THEN DO;
MPRINT(EM_ASSESS):   _KS_BIN_ = _DIFFERENCE;
MPRINT(EM_ASSESS):   _KS_BIN_PROB = MINPROB + (MAXPROB - MINPROB) / 2 ;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   LIFT = P_RESP * .01 / RESPRATE ;
MPRINT(EM_ASSESS):   C_LIFT = C_P_RESP * .01 / RESPRATE;
MPRINT(EM_ASSESS):   IF NUMOBS > 0 THEN DO;
MPRINT(EM_ASSESS):   BASELIFT = AVGNUMRESP / ( RESPRATE * 100/20 );
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE BASELIFT = .;
MPRINT(EM_ASSESS):   IF C_NUMOBS > 0 THEN CBASELIFT = C_AVGNUM_RESP / (RESPRATE *
((20-GROUP+1)* 100/20));
MPRINT(EM_ASSESS):   ELSE CBASELIFT = .;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ........ WITHIN DO LOOP FOR OUTRANKS;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   BIN = 20 + 1 - GROUP;
MPRINT(EM_ASSESS):   PERCENTILE = BIN * (100 / 20);
MPRINT(EM_ASSESS):   B_C_P_RESP = PERCENTILE;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPRANK ;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ........................ END OF GAINSCHART = OUTRANKS AREA;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("MAXPROFITGROUP" , MAXPROFITGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("MAXPROFIT" , MAXPROFIT );
MPRINT(EM_ASSESS):   KS_ABSDIFF = 0 ;
MPRINT(EM_ASSESS):   MINPRECTPR = 9999;
MPRINT(EM_ASSESS):   Y0 = 1 - RESPRATE;
MPRINT(EM_ASSESS):   Y1 = RESPRATE;
MPRINT(EM_ASSESS):   MAXMUTUAL = 0;
MPRINT(EM_ASSESS):   DROP MAXMUTUAL KSPROB Y0 Y1 KS_ABSDIFF MINPRECTPR;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * .....................About to start Processing Outroc ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ........................... Finished Processing Outroc ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * .............. Outdist ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   BIN = 20 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS96 - EVENTS100 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS96 - NONEVENTS100);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB96 -
SCR_MNPROB100) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB96 - SCR_MINPROB100) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB96 - SCR_MAXPROB100) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 100;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 20;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 19 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS91 - EVENTS95 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS91 - NONEVENTS95);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB91 -
SCR_MNPROB95) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB91 - SCR_MINPROB95) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB91 - SCR_MAXPROB95) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 100;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 19;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 18 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS86 - EVENTS90 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS86 - NONEVENTS90);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB86 -
SCR_MNPROB90) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB86 - SCR_MINPROB90) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB86 - SCR_MAXPROB90) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 100;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 18;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 17 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS81 - EVENTS85 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS81 - NONEVENTS85);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB81 -
SCR_MNPROB85) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB81 - SCR_MINPROB85) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB81 - SCR_MAXPROB85) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 100;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 17;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 16 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS76 - EVENTS80 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS76 - NONEVENTS80);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB76 -
SCR_MNPROB80) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB76 - SCR_MINPROB80) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB76 - SCR_MAXPROB80) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 100;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 16;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 15 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS71 - EVENTS75 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS71 - NONEVENTS75);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB71 -
SCR_MNPROB75) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB71 - SCR_MINPROB75) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB71 - SCR_MAXPROB75) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 100;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 15;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 14 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS66 - EVENTS70 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS66 - NONEVENTS70);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB66 -
SCR_MNPROB70) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB66 - SCR_MINPROB70) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB66 - SCR_MAXPROB70) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 100;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 14;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 13 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS61 - EVENTS65 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS61 - NONEVENTS65);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB61 -
SCR_MNPROB65) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB61 - SCR_MINPROB65) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB61 - SCR_MAXPROB65) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 100;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 13;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 12 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS56 - EVENTS60 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS56 - NONEVENTS60);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB56 -
SCR_MNPROB60) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB56 - SCR_MINPROB60) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB56 - SCR_MAXPROB60) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 100;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 12;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 11 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS51 - EVENTS55 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS51 - NONEVENTS55);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB51 -
SCR_MNPROB55) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB51 - SCR_MINPROB55) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB51 - SCR_MAXPROB55) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 100;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 11;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 10 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS46 - EVENTS50 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS46 - NONEVENTS50);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB46 -
SCR_MNPROB50) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB46 - SCR_MINPROB50) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB46 - SCR_MAXPROB50) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 100;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 10;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 9 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS41 - EVENTS45 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS41 - NONEVENTS45);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB41 -
SCR_MNPROB45) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB41 - SCR_MINPROB45) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB41 - SCR_MAXPROB45) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 100;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 9;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 8 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS36 - EVENTS40 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS36 - NONEVENTS40);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB36 -
SCR_MNPROB40) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB36 - SCR_MINPROB40) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB36 - SCR_MAXPROB40) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 100;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 8;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 7 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS31 - EVENTS35 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS31 - NONEVENTS35);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB31 -
SCR_MNPROB35) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB31 - SCR_MINPROB35) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB31 - SCR_MAXPROB35) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 100;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 7;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 6 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS26 - EVENTS30 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS26 - NONEVENTS30);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB26 -
SCR_MNPROB30) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB26 - SCR_MINPROB30) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB26 - SCR_MAXPROB30) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 100;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 6;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 5 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS21 - EVENTS25 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS21 - NONEVENTS25);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB21 -
SCR_MNPROB25) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB21 - SCR_MINPROB25) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB21 - SCR_MAXPROB25) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 100;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 5;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 4 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS16 - EVENTS20 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS16 - NONEVENTS20);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB16 -
SCR_MNPROB20) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB16 - SCR_MINPROB20) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB16 - SCR_MAXPROB20) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 100;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 4;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 3 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS11 - EVENTS15 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS11 - NONEVENTS15);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB11 -
SCR_MNPROB15) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB11 - SCR_MINPROB15) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB11 - SCR_MAXPROB15) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 100;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 3;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 2 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS6 - EVENTS10 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS6 - NONEVENTS10);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB6 -
SCR_MNPROB10) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB6 - SCR_MINPROB10) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB6 - SCR_MAXPROB10) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 100;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 2;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 1 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS1 - EVENTS5 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS1 - NONEVENTS5);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB1 - SCR_MNPROB5)
/ NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB1 - SCR_MINPROB5) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB1 - SCR_MAXPROB5) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 100;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 1;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("KSPROB" , PUT (KSPROB, 5.3 ) );
MPRINT(EM_ASSESS):   CALL SYMPUTX ("_KS_BIN_PROB" , _KS_BIN_PROB );
MPRINT(EM_ASSESS):   CALL SYMPUTX ("_KS_BIN_" , _KS_BIN_ / 100 );
MPRINT(EM_ASSESS):   CALL SYMPUTX ("KSDIFF" , KS_ABSDIFF );
MPRINT(EM_ASSESS):   CALL SYMPUTX ("PRECTPR" , PRECTPR );
MPRINT(EM_ASSESS):   CALL SYMPUTX ("MAXMUTUALPROB" , MAXMUTUALPROB);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   LABEL __EVENT__ = "Event" DECILE = "Depth" BIN = "Bin" NUMOBS = "Number
of Observations" ;
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * RUN for large data set;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   PROC DATASETS NOLIST;
MPRINT(EM_ASSESS):   DELETE _AUXEVENTNAME;
MPRINT(EM_ASSESS):   QUIT;
 
MPRINT(EM_ASSESS):   OPTION NOCENTER LS = 95;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * Report Vars Area.;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ...........Start OF Outdist Modification;
MPRINT(EM_ASSESS):   *;
 
MPRINT(EM_ASSESS):   PROC DATASETS NOLIST LIB = WORK;
MPRINT(EM_ASSESS):   MODIFY _TEMPSCOREDIST;
MPRINT(EM_ASSESS):   RENAME MODELSCORE = SCORE UPPERPROB = UPPOSTERIOR SCR_CP_EVENTS =
CUMULATIVEPERCENTAGEOFEVENTS SCR_CP_NONEVENTS = CUMULATIVEPERCENTAGEOFNONEVENTS EVENTVALUE =
EVENT LOWERPROB = LOWPOSTERIOR NUMOBSINGROUP = N PERCOBSINGROUP = PERCENTAGE SCR_MINPROB =
_MINP_ SCR_MAXPROB = _MAXP_ SCR_MNPROB = _MEANP_ RANGE = P_LABEL C_PERCOBSINGROUP =
CUMULATIVEPERCENTAGE SCR_NUMEVENTS = NUMBEROFEVENTS SCR_NUMNONEVENTS = NUMBEROFNONEVENTS
SCR_P_EVENTS = PERCENTAGEOFEVENTS SCR_P_NONEVENTS = PERCENTAGEOFNONEVENTS ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * .................... OUTDIST MODIFICATION LABEL AREA;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   LABEL BIN = "Bin" N = "Number of Observations" P_LABEL = "Posterior
Probability Range" EVENT = "Event" LOWPOSTERIOR = "Lower Bound Posterior Probability"
PERCENTAGEOFEVENTS = "Percentage of Events" CUMULATIVEPERCENTAGEOFNONEVENTS = "Cumulative
Percentage of Nonevents" CUMULATIVEPERCENTAGE = "Cumulative Percentage" PERCENTAGEOFEVENTS =
"Percentage of Events" PERCENTAGEOFNONEVENTS = "Percentage of Nonevents"
CUMULATIVEPERCENTAGEOFEVENTS = "Cumulative Percentage of Events" UPPOSTERIOR = "Upper Bound
Posterior Probability" NUMBEROFEVENTS = "Number of Events" PERCENTAGE = "Percentage"
NUMBEROFNONEVENTS = "Number of Nonevents" _MEANP_ = "Mean Posterior Probability" _MINP_ = "Min
Posterior Probability" _MAXP_ = "Max Posterior Probability" SCORE = "Model Score" ;
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   QUIT;
MPRINT(EM_ASSESS):   DATA WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   SET WORK._TEMPSCOREDIST (WHERE = (_MEANP_ > .));
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ........... END OF OUTDIST MODIFICATION;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ...........Start of OUTRANKS Modification;
MPRINT(EM_ASSESS):   *;
 
MPRINT(EM_ASSESS):   PROC DATASETS NOLIST LIB = WORK;
MPRINT(EM_ASSESS):   MODIFY _TEMPRANK;
MPRINT(EM_ASSESS):   RENAME __EVENT__ = EVENT P_RESP = RESP C_P_CAPT_RESP = CAPC P_CAPT_RESP =
CAP NUMNONRESP = NUMNEVENT NUMRESP = NUMEVENT BASEEVENTS = BASENUMBEROFEVENTS BESTNUMEVENTS =
BESTNUMBEROFEVENTS MAXPROB = _MAXP_ MINPROB = _MINP_ CBASELIFT = BASELIFTC C_LIFT = LIFTC
MNPROB = _MEANP_ PERCENTILE = DECILE NUMOBS = N NUMEVENT = NUMBEROFEVENTS C_P_RESP = RESPC ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ................. OUTRANKS;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   LABEL _MAXP_ = "Max Posterior Probability" _MINP_ = "Min Posterior
Probability" _MEANP_ = "Mean Posterior Probability" BASECAP = "Baseline % Captured Response"
BASECAPC = "Baseline Cumulative % Captured Response" BASENUMBEROFEVENTS = "Baseline Number of
Events" BASEGAIN = "Baseline Gain" BASELIFT = "Baseline Lift" BASELIFTC = "Baseline Cumulative
Lift" BASERESP = "Baseline % Response" BASERESPC = "Baseline Cumulative % Response" BASELIFTC
= "Baseline Cumulative Lift" BESTCAP = "Best % Captured Response" BESTCAPC = "Best Cumulative
% Captured Response" BESTGAIN = "Best Gain" BESTRESP = "Best % Response" BESTRESPC = "Best
Cumulative % Response" BESTLIFT = "Best Lift" BESTLIFTC = "Best Cumulative Lift"
BESTNUMBEROFEVENTS = "Best Number of Events" CAP = "% Captured Response" CAPC = "Cumulative %
Captured Response" DECILE = "Depth" GAIN = "Gain" LIFT = "Lift" LIFTC = "Cumulative Lift"
NUMNEVENT = "Number of Nonevents" N = "Number of Observations" EVENT = "Event" RESPC =
"Cumulative % Response" NUMBEROFEVENTS = "Number of Events" RESP = "% Response" ;
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   QUIT;
MPRINT(EM_ASSESS):   DATA WORK._TEMPRANK;
MPRINT(EM_ASSESS):   SET WORK._TEMPRANK (WHERE = (_MEANP_ > .));
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   proc datasets lib=work nolist;
MPRINT(EM_ASSESS):   delete _ea_tmpdata;
MPRINT(EM_ASSESS):   run;
MPRINT(EM_ASSESS):   quit;
MPRINT(EM_ASSESS):  ;
MPRINT(EM_ASSESS):   OPTION ERRORS = 20;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):    data WORK._TEMPRANK;
MPRINT(EM_DIAGRAM):   length target $32 TARGETLABEL $200 dataRole $20;
MPRINT(EM_DIAGRAM):   label TARGETLABEL = "Target Label";
MPRINT(EM_DIAGRAM):   set WORK._TEMPRANK;
MPRINT(EM_DIAGRAM):   retain target "Risk";
MPRINT(EM_DIAGRAM):   retain dataRole "TRAIN";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data EMWS1.Neural4_EMRANK;
MPRINT(EM_DIAGRAM):   set WORK._TEMPRANK;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data WORK._TEMPSCOREDIST;
MPRINT(EM_DIAGRAM):   length target $32 TARGETLABEL $200 dataRole $20;
MPRINT(EM_DIAGRAM):   label TARGETLABEL = "Target Label";
MPRINT(EM_DIAGRAM):   set WORK._TEMPSCOREDIST;
MPRINT(EM_DIAGRAM):   retain target "Risk";
MPRINT(EM_DIAGRAM):   retain dataRole "TRAIN";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data EMWS1.Neural4_EMSCOREDIST;
MPRINT(EM_DIAGRAM):   set WORK._TEMPSCOREDIST;
MPRINT(EM_DIAGRAM):   run;
134587     data EM_temp_assessMeta;
MPRINT(EM_DIAGRAM):    data EM_temp_assessMeta;
134588     set EMWS1.Neural4_CMeta_TRAIN;
MPRINT(EM_DIAGRAM):   set EMWS1.Neural4_CMeta_TRAIN;
134589     where role in('DECISION', 'PREDICT', 'RESIDUAL', 'CLASSIFICATION', 'ASSESS', 'COST')
134589   ! ;
MPRINT(EM_DIAGRAM):   where role in('DECISION', 'PREDICT', 'RESIDUAL', 'CLASSIFICATION',
'ASSESS', 'COST');
134590     run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 8 observations read from the data set EMWS1.NEURAL4_CMETA_TRAIN.
      WHERE role in ('ASSESS', 'CLASSIFICATION', 'COST', 'DECISION', 'PREDICT', 'RESIDUAL');
NOTE: The data set WORK.EM_TEMP_ASSESSMETA has 8 observations and 29 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
134591     data EM_temp_assessdata;
MPRINT(EM_DIAGRAM):    data EM_temp_assessdata;
134592     set EMWS1.Neural4_VALIDATE(keep=
134593     F_Risk
134594     I_Risk
134595     P_Risk0
134596     P_Risk1
134597     R_Risk0
134598     R_Risk1
134599     U_Risk
134600     _WARN_
134601     Risk
134602     );
MPRINT(EM_DIAGRAM):   set EMWS1.Neural4_VALIDATE(keep= F_Risk I_Risk P_Risk0 P_Risk1 R_Risk0
R_Risk1 U_Risk _WARN_ Risk );
134603     run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 100 observations read from the data set EMWS1.PART_VALIDATE.
NOTE: There were 100 observations read from the data set EMWS1.IMPT_VALIDATE.
NOTE: There were 100 observations read from the data set EMWS1.REPL_VALIDATE.
NOTE: There were 100 observations read from the data set EMWS1.TRANS_VALIDATE.
NOTE: View EMWS1.NEURAL4_VALIDATE.VIEW used (Total process time):
      real time           4.34 seconds
      cpu time            0.21 seconds
 
NOTE: There were 100 observations read from the data set EMWS1.REPL2_VALIDATE.
NOTE: There were 100 observations read from the data set EMWS1.NEURAL4_VALIDATE.
NOTE: The data set WORK.EM_TEMP_ASSESSDATA has 100 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           4.40 seconds
      cpu time            0.21 seconds
 
 
MPRINT(EM_DIAGRAM):    proc freq data=EM_temp_assessdata noprint;
MPRINT(EM_DIAGRAM):   table I_Risk*F_Risk / out = WORK.Neural4_2S6EN_U nocol norow outpct;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data WORK.Neural4_2S6EN_U;
MPRINT(EM_DIAGRAM):   length _TYPE_ $10 DATAROLE TARGET $32 TARGETLABEL $200 FROM INTO $32
CORRECTTEXT $40 ;
MPRINT(EM_DIAGRAM):   label _TYPE_ = "Outcome Type";
MPRINT(EM_DIAGRAM):   label DATAROLE = "Data Role";
MPRINT(EM_DIAGRAM):   label TARGET = "Target Variable";
MPRINT(EM_DIAGRAM):   label TARGETLABEL = "Target Label";
MPRINT(EM_DIAGRAM):   label FROM = "Target";
MPRINT(EM_DIAGRAM):   label INTO = "Outcome";
MPRINT(EM_DIAGRAM):   label PCT_ROW = "Target Percentage";
MPRINT(EM_DIAGRAM):   label PCT_COL = "Outcome Percentage";
MPRINT(EM_DIAGRAM):   label COUNT = "Frequency Count";
MPRINT(EM_DIAGRAM):   label PERCENT = "Total Percentage";
MPRINT(EM_DIAGRAM):   label CORRECTTEXT = "Correct Text";
MPRINT(EM_DIAGRAM):   label CORRECT = "Correct";
MPRINT(EM_DIAGRAM):   set WORK.Neural4_2S6EN_U(rename=(F_Risk=FROM I_Risk=INTO));
MPRINT(EM_DIAGRAM):   retain _TYPE_ 'PREDICTION' DATAROLE "VALIDATE" TARGET "Risk";
MPRINT(EM_DIAGRAM):   if FROM eq INTO then do;
MPRINT(EM_DIAGRAM):   CORRECT = 0;
MPRINT(EM_DIAGRAM):   CORRECTTEXT="Correct";
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   CORRECT = 1;
MPRINT(EM_DIAGRAM):   CORRECTTEXT="Incorrect";
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data EMWS1.Neural4_EMCLASSIFICATION;
MPRINT(EM_DIAGRAM):   set EMWS1.Neural4_EMCLASSIFICATION WORK.Neural4_2S6EN_U;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data WORK.MISCREPORT;
MPRINT(EM_DIAGRAM):   set WORK.Neural4_2S6EN_U;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data WORK.MISCREPORT(drop=INTO FROM _TYPE_);
MPRINT(EM_DIAGRAM):   set WORK.MISCREPORT;
MPRINT(EM_DIAGRAM):   length MISC $12;
MPRINT(EM_DIAGRAM):   if FROM='1' and INTO='1' then MISC='TRUEEVENT';
MPRINT(EM_DIAGRAM):   else if FROM='1' and INTO ne '1' then MISC='FALSENEVENT';
MPRINT(EM_DIAGRAM):   else if FROM ne '1' and INTO='1' then MISC='FALSEEVENT';
MPRINT(EM_DIAGRAM):   else if FROM ne'1' and INTO ne '1' then MISC='TRUENEVENT';
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=WORK.MISCREPORT nothreads;
MPRINT(EM_DIAGRAM):   by DATAROLE TARGET;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc summary data=WORK.MISCREPORT NWAY;
MPRINT(EM_DIAGRAM):   output out=WORK.MISCCOUNT(drop=_FREQ_ _TYPE_) SUM=COUNT;
MPRINT(EM_DIAGRAM):   CLASS MISC;
MPRINT(EM_DIAGRAM):   VAR COUNT;
MPRINT(EM_DIAGRAM):   by DATAROLE TARGET;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc transpose data=WORK.MISCCOUNT out=WORK.MISCREPORT(drop=_NAME_
_LABEL_);
MPRINT(EM_DIAGRAM):   by DATAROLE TARGET;
MPRINT(EM_DIAGRAM):   ID MISC;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data EMWS1.Neural4_EMEVENTREPORT;
MPRINT(EM_DIAGRAM):   length TARGETLABEL $200;
MPRINT(EM_DIAGRAM):   label TARGETLABEL = "Target Label";
MPRINT(EM_DIAGRAM):   set EMWS1.Neural4_EMEVENTREPORT WORK.MISCREPORT;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data ASSESS_REPORTMETA;
MPRINT(EM_DIAGRAM):   set EMWS1.Neural4_VariableSet;
MPRINT(EM_DIAGRAM):   where REPORT='Y';
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   filename temp catalog 'sashelp.emassmt.em_assess.source';
MPRINT(EM_DIAGRAM):   filename temp;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   set EMWS1.Neural4_Risk_DM;
MPRINT(EM_DIAGRAM):   where _TYPE_="TARGET";
MPRINT(EM_DIAGRAM):   call symput('ASSMT_EVENT', strip(event));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):
MPRINT(EM_ASSESS):   data _ea_tmpdata;
MPRINT(EM_ASSESS):   set EM_temp_assessdata;
MPRINT(EM_ASSESS):   _tmpfreqvar_=1;
MPRINT(EM_ASSESS):   run;
MPRINT(EM_CHECKEMSETINIT):   DATA _NULL_;
MPRINT(EM_CHECKEMSETINIT):   EM_SETINIT = 'N';
MPRINT(EM_CHECKEMSETINIT):   IF SYSPROD('PRODNUM50') THEN EM_SETINIT = 'Y';
MPRINT(EM_CHECKEMSETINIT):   ELSE IF SYSPROD('PRODNUM448') THEN EM_SETINIT = 'Y';
MPRINT(EM_CHECKEMSETINIT):   ELSE IF SYSPROD('PRODNUM102') THEN EM_SETINIT = 'Y';
MPRINT(EM_CHECKEMSETINIT):   ELSE IF SYSPROD('PRODNUM103') THEN EM_SETINIT = 'Y';
MPRINT(EM_CHECKEMSETINIT):   CALL SYMPUT('EM_SETINIT', EM_SETINIT);
MPRINT(EM_CHECKEMSETINIT):   RUN;
MPRINT(EM_ASSESS):  ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ............ Reading in reporting data set;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   DATA _NULL_;
MPRINT(EM_ASSESS):   SET ASSESS_REPORTMETA END = EOF;
MPRINT(EM_ASSESS):   IF TYPE = "C" OR UPCASE (LEVEL) IN ("NOMINAL", "BINARY" , "ORDINAL") THEN
DO;
MPRINT(EM_ASSESS):   IF UPCASE (NAME) NE UPCASE ("F_Risk") THEN DO;
MPRINT(EM_ASSESS):   NUMCTOREPORT + 1;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("REPORTC" || LEFT (PUT (NUMCTOREPORT, 5.)), NAME);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE CALL SYMPUTX ("RPRT_TRGT", "C");
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE IF TYPE = "N" THEN DO;
MPRINT(EM_ASSESS):   IF UPCASE(NAME) NE UPCASE ("F_Risk") THEN DO;
MPRINT(EM_ASSESS):   NUMNTOREPORT + 1;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("REPORTN" || LEFT (PUT (NUMNTOREPORT, 5.)), NAME);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE CALL SYMPUTX ("RPRT_TRGT", "N");
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   IF EOF THEN DO;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("NUMNTOREPORT", NUMNTOREPORT);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("NUMCTOREPORT", NUMCTOREPORT);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("NUMTOREPORT", SUM (NUMNTOREPORT, NUMCTOREPORT));
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   PROC DMDB DATA = _ea_tmpdata VAROUT = VAROUT DMDBCAT = _D CLASSOUT =
_ASSMT_CLASSOUT;
MPRINT(EM_ASSESS):   CLASS F_Risk ;
 
MPRINT(EM_ASSESS):   VAR P_Risk1 _tmpfreqvar_ ;
MPRINT(EM_ASSESS):   FREQ _tmpfreqvar_;
MPRINT(EM_ASSESS):   RUN ;
MPRINT(EM_ASSESS):   QUIT;
MPRINT(EM_ASSESS):   PROC SORT DATA = _ASSMT_CLASSOUT;
MPRINT(EM_ASSESS):   BY NAME;
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   DATA _auxeventname (keep = __event__) ;
MPRINT(EM_ASSESS):   * ;
MPRINT(EM_ASSESS):   * ...FLAG0_1 = ..... TARGET IS 0, 1 & EVENT = 1;
 
MPRINT(EM_ASSESS):   ;
MPRINT(EM_ASSESS):   length __event__ $ 32;
MPRINT(EM_ASSESS):   RETAIN FLAG0_1 1 NUM1 . NUM0 . __event__ "_missing_" ;
 
MPRINT(EM_ASSESS):   SET _ASSMT_CLASSOUT END = EOF;
MPRINT(EM_ASSESS):   BY NAME;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ....... LEVEL = BINARY OR NOMINAL OR ORDINAL;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
 
MPRINT(EM_ASSESS):   IF UPCASE(NAME) = UPCASE ("F_Risk") THEN DO;
MPRINT(EM_ASSESS):   CUMFREQ + FREQUENCY;
MPRINT(EM_ASSESS):   IF LEVEL NE "." THEN DO;
MPRINT(EM_ASSESS):   N1 + 1;
MPRINT(EM_ASSESS):   IF (NRAW NE 0 AND NRAW NE 1) OR TYPE NE "N" OR "" > " " THEN FLAG0_1 = 0;
MPRINT(EM_ASSESS):   * ;
MPRINT(EM_ASSESS):   * ......................... IF EVENT NE BLANK;
MPRINT(EM_ASSESS):   * ....................LEVEL IS CHAR VAR ;
MPRINT(EM_ASSESS):   * ;
MPRINT(EM_ASSESS):   IF UPCASE("1") = UPCASE(LEVEL) THEN DO;
MPRINT(EM_ASSESS):   NUM1 = FREQUENCY;
MPRINT(EM_ASSESS):   IF TYPE = "C" THEN do;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("EVENTVALUERAW", CRAW );
MPRINT(EM_ASSESS):   __event__ = craw;
MPRINT(EM_ASSESS):   end;
MPRINT(EM_ASSESS):   ELSE do;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("EVENTVALUERAW", NRAW );
MPRINT(EM_ASSESS):   __event__ = nraw;
MPRINT(EM_ASSESS):   end;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   IF LAST.NAME THEN DO;
 
MPRINT(EM_ASSESS):   * ;
MPRINT(EM_ASSESS):   * .............. IN NOMINAL CASE, NEED TO GROUP ALL '0' ;
MPRINT(EM_ASSESS):   *;
 
MPRINT(EM_ASSESS):   NUM0 = SUM (CUMFREQ, - NUM1);
MPRINT(EM_ASSESS):   IF NUM0 < 0 THEN NUM0 = 0;
MPRINT(EM_ASSESS):   IF NUM1 = . THEN NUM1 = 0;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("NUM0", NUM0 );
MPRINT(EM_ASSESS):   CALL SYMPUTX ("NUM1", NUM1);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("PNUM1", NUM1 / CUMFREQ);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("PNUM0", (CUMFREQ - NUM1) / CUMFREQ);
MPRINT(EM_ASSESS):   IF TYPE = "C" THEN DO;
MPRINT(EM_ASSESS):   FLAG0_1 = 0;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("TARGETTYPE", "C" );
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE IF TYPE = "N" THEN DO;
MPRINT(EM_ASSESS):   IF "" = " " THEN DO;
MPRINT(EM_ASSESS):   IF "1" NE "1" THEN FLAG0_1 = 0;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("TARGETTYPE", "N" );
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   * ................... IF TYPE = N;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("FLAG0_1", FLAG0_1 );
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   * ..................IF LAST.NAME ;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   * ...............IF LEVEL NE '.' ;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   * .............. IF NAME = TARGET;
MPRINT(EM_ASSESS):   ELSE IF "" > " " AND UPCASE(NAME) = UPCASE("") THEN DO;
MPRINT(EM_ASSESS):   NUMDECISIONS + 1;
MPRINT(EM_ASSESS):   LEVEL = TRANSLATE (LEVEL, "_", "'", "_", '"');
MPRINT(EM_ASSESS):   CALL SYMPUTX ("D_LABEL" || LEFT (PUT (NUMDECISIONS, 3.)), LEVEL );
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   * ..................... ELSE IF UPCASE;
MPRINT(EM_ASSESS):   IF EOF THEN DO;
MPRINT(EM_ASSESS):   output _auxeventname;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("NUMOBS", CUMFREQ);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("NUMDECISIONS", NUMDECISIONS);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   DATA _NULL_;
MPRINT(EM_ASSESS):   SET VAROUT END = EOF;
MPRINT(EM_ASSESS):   IF UPCASE (NAME) = UPCASE ("P_Risk1") THEN DO;
MPRINT(EM_ASSESS):   IF N = 0 THEN DO;
MPRINT(EM_ASSESS):   PUT //// "          Warning: All posterior probabilities are missing
values ";
MPRINT(EM_ASSESS):   PUT ///;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("ALLMISS", 1);
MPRINT(EM_ASSESS):   STOP;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE CALL SYMPUTX ("ALLMISS", 0);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("MINPROB", MIN);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("MAXPROB", MAX);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("DIFF", MAX - MIN);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("NMISSPROB", NMISS);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE IF UPCASE (NAME) = UPCASE ("_tmpfreqvar_") THEN DO;
MPRINT(EM_ASSESS):   AUXMIN = MIN - INT (MIN);
MPRINT(EM_ASSESS):   AUXMAX = MAX - INT (MAX);
MPRINT(EM_ASSESS):   IF AUXMIN > 0 OR AUXMAX > 0 THEN CALL SYMPUTX ("USEWEIGHT", "Y");
MPRINT(EM_ASSESS):   ELSE CALL SYMPUTX ("USEWEIGHT", "N");
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   DATA _ANY0;
MPRINT(EM_ASSESS):   SET _ea_tmpdata (KEEP = F_Risk P_Risk1 _tmpfreqvar_ );
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ................... No Formats;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   IF LEFT ( F_Risk ) = "1" THEN NTARGET = 1;
MPRINT(EM_ASSESS):   ELSE NTARGET = 0;
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * .............. Before proc summary of binary case;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   PROC SUMMARY DATA = _ANY0 (KEEP = P_Risk1 NTARGET _tmpfreqvar_ WHERE =
(NTARGET > . )) NWAY MISSING;
MPRINT(EM_ASSESS):   ;
MPRINT(EM_ASSESS):   CLASS P_Risk1 ;
MPRINT(EM_ASSESS):   VAR NTARGET ;
MPRINT(EM_ASSESS):   FREQ _tmpfreqvar_ ;
MPRINT(EM_ASSESS):   OUTPUT OUT = ANYSUM (DROP = _TYPE_) MEAN = _MEANTARGET _MEANFREQVAR ;
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   QUIT;
MPRINT(EM_ASSESS):   ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * .................... Main Data Set Processing, Binary case;
MPRINT(EM_ASSESS):   *;
 
MPRINT(EM_ASSESS):   DATA WORK._TEMPRANK (KEEP = BASECAPC BASECAP __EVENT__ BASEEVENTS
BASEGAIN BASELIFT BASERESP BASERESPC BESTCAP BESTCAPC BESTGAIN BESTLIFT BESTLIFTC
BESTNUMEVENTS BESTRESP BESTRESPC BIN CBASELIFT C_LIFT C_P_CAPT_RESP C_P_RESP GAIN LIFT MAXPROB
MINPROB MNPROB NUMNONRESP NUMOBS NUMRESP PERCENTILE P_CAPT_RESP P_RESP ) WORK._TEMPSCOREDIST
(KEEP = BIN LOWERPROB UPPERPROB EVENTVALUE SCR_NUMEVENTS MODELSCORE SCR_NUMNONEVENTS RANGE
NUMOBSINGROUP PERCOBSINGROUP C_PERCOBSINGROUP SCR_P_EVENTS SCR_CP_EVENTS SCR_P_NONEVENTS
SCR_CP_NONEVENTS SCR_MNPROB SCR_MINPROB SCR_MAXPROB ) ;
 
MPRINT(EM_ASSESS):   SET ANYSUM END = EOF;
 
MPRINT(EM_ASSESS):   IF _N_ = 1 THEN SET _AUXEVENTNAME;
 
MPRINT(EM_ASSESS):   RETAIN MINPROB1 - MINPROB20 1 MAXPROB1 - MAXPROB20 0 MNPROB1 - MNPROB20 0
NUMOBS1 - NUMOBS20 0 NUMRESP1 - NUMRESP20 0 TRUEPOS1 - TRUEPOS100 0 TRUENEG1 - TRUENEG100 0
FALSEPOS1 - FALSEPOS100 0 FALSENEG1 - FALSENEG100 0 EVENTS1 - EVENTS100 NONEVENTS1 -
NONEVENTS100 0 FIRSTIN1 - FIRSTIN100 . LASTIN1 - LASTIN100 . RESPRATE 0.55 _NEVENTS 55
_NNONEVENTS 45 TARGET "NTARGET" ;
MPRINT(EM_ASSESS):   ARRAY MINPROBS (20) MINPROB1 - MINPROB20;
MPRINT(EM_ASSESS):   ARRAY MAXPROBS (20) MAXPROB1 - MAXPROB20;
MPRINT(EM_ASSESS):   ARRAY MNPROBS (20) MNPROB1 - MNPROB20;
MPRINT(EM_ASSESS):   ARRAY NUMOBSS (20) NUMOBS1 - NUMOBS20;
MPRINT(EM_ASSESS):   ARRAY NUMRESPS (20) NUMRESP1 - NUMRESP20;
MPRINT(EM_ASSESS):   ARRAY TRUEPOSX (100) TRUEPOS1 - TRUEPOS100;
MPRINT(EM_ASSESS):   ARRAY FALSEPOSX (100) FALSEPOS1 - FALSEPOS100;
MPRINT(EM_ASSESS):   ARRAY FALSENEGX (100) FALSENEG1 - FALSENEG100;
MPRINT(EM_ASSESS):   ARRAY TRUENEGX (100) TRUENEG1 - TRUENEG100;
MPRINT(EM_ASSESS):   ARRAY _EVENTS (100) EVENTS1 - EVENTS100;
MPRINT(EM_ASSESS):   ARRAY NONEVENTS (100) NONEVENTS1 - NONEVENTS100;
MPRINT(EM_ASSESS):   ARRAY FIRSTIN (100) FIRSTIN1 - FIRSTIN100;
MPRINT(EM_ASSESS):   ARRAY LASTIN (100) LASTIN1 - LASTIN100;
MPRINT(EM_ASSESS):   RETAIN SCR_MNPROB1 - SCR_MNPROB100 0 SCR_MINPROB1 - SCR_MINPROB100 1
SCR_MAXPROB1 - SCR_MAXPROB100 0;
MPRINT(EM_ASSESS):   ARRAY SCR_MNPROBS (100) SCR_MNPROB1 - SCR_MNPROB100;
MPRINT(EM_ASSESS):   ARRAY SCR_MINPROBS (100) SCR_MINPROB1 - SCR_MINPROB100;
MPRINT(EM_ASSESS):   ARRAY SCR_MAXPROBS (100) SCR_MAXPROB1 - SCR_MAXPROB100;
MPRINT(EM_ASSESS):   DROP SCR_MINPROB1 - SCR_MINPROB100 SCR_MAXPROB1 - SCR_MAXPROB100
SCR_MNPROB1 - SCR_MNPROB100 ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ...... Area For 8 Financials ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   IF _MEANTARGET = . THEN _MEANTARGET = RESPRATE;
MPRINT(EM_ASSESS):   DROP N1 _K SUMWEIGHTS ;
MPRINT(EM_ASSESS):   SUMWEIGHTS = 1;
 
MPRINT(EM_ASSESS):   DO _K = 1 TO CEIL (_FREQ_);
MPRINT(EM_ASSESS):   IF _K = CEIL (_FREQ_) THEN DO;
MPRINT(EM_ASSESS):   IF _FREQ_ < CEIL (_FREQ_) THEN _WEIGHT = _FREQ_ - FLOOR (_FREQ_);
MPRINT(EM_ASSESS):   ELSE _WEIGHT = 1;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE _WEIGHT = 1;
MPRINT(EM_ASSESS):   N1 + _WEIGHT;
MPRINT(EM_ASSESS):   NTARGET = _MEANTARGET ;
MPRINT(EM_ASSESS):   DECILE = MIN (20, CEIL (N1 * 20 / 100));
MPRINT(EM_ASSESS):   MINPROBS ( DECILE) = MIN (MINPROBS ( DECILE), P_Risk1 );
MPRINT(EM_ASSESS):   MAXPROBS ( DECILE) = MAX (MAXPROBS ( DECILE), P_Risk1 );
MPRINT(EM_ASSESS):   MNPROBS ( DECILE) = SUM (MNPROBS ( DECILE), P_Risk1 * _WEIGHT);
MPRINT(EM_ASSESS):   NUMOBSS ( DECILE) = NUMOBSS ( DECILE) + _WEIGHT;
MPRINT(EM_ASSESS):   NUMRESPS ( DECILE) = NUMRESPS ( DECILE) + _MEANTARGET * _WEIGHT;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ........ outside of do loop, Area for final ROC;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   RANKDELTA = (ROUND ( _FREQ_ ) + 1) / 2;
MPRINT(EM_ASSESS):   RANK = UNTIEDRANK + RANKDELTA;
MPRINT(EM_ASSESS):   DROP RANK ;
MPRINT(EM_ASSESS):   SUMRANK1 + RANK * ROUND (_MEANTARGET * _FREQ_, .0000001);
MPRINT(EM_ASSESS):   UNTIEDRANK + ROUND (_FREQ_, .00000001);
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ............ Area For ROC Curve;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   DO _K = 1 TO 100;
MPRINT(EM_ASSESS):   IF P_Risk1 * 100 >= _K THEN DO;
MPRINT(EM_ASSESS):   TRUEPOSX ( _K ) + _FREQ_ * _MEANTARGET ;
MPRINT(EM_ASSESS):   FALSEPOSX ( _K ) + _FREQ_ * (1 - _MEANTARGET) ;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   TRUENEGX ( _K ) + _FREQ_ * ( 1 - _MEANTARGET) ;
MPRINT(EM_ASSESS):   FALSENEGX ( _K ) + _FREQ_ * _MEANTARGET ;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   SLOT = MIN (MAX (CEIL (P_Risk1 * 100), 1), 100) ;
MPRINT(EM_ASSESS):   DROP SLOT;
MPRINT(EM_ASSESS):   FIRSTIN ( SLOT ) = MIN ( FIRSTIN ( SLOT ), P_Risk1);
MPRINT(EM_ASSESS):   LASTIN ( SLOT ) = MAX ( LASTIN ( SLOT ), P_Risk1);
MPRINT(EM_ASSESS):   _EVENTS ( SLOT) = _EVENTS ( SLOT) + _FREQ_ * _MEANTARGET;
MPRINT(EM_ASSESS):   NONEVENTS ( SLOT) = NONEVENTS ( SLOT) + _FREQ_ * (1 - _MEANTARGET);
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ........ START OF OUTDIST IN BINARY CASE MAIN DATA STEP ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   SCR_MNPROBS ( SLOT ) = SUM (SCR_MNPROBS (SLOT), P_Risk1 * _FREQ_ );
MPRINT(EM_ASSESS):   SCR_MINPROBS ( SLOT ) = MIN (SCR_MINPROBS (SLOT), P_Risk1 );
MPRINT(EM_ASSESS):   SCR_MAXPROBS ( SLOT ) = MAX (SCR_MAXPROBS (SLOT), P_Risk1 );
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ........ End of Outdist in Binary case main DATA STEP ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   IF EOF THEN DO;
MPRINT(EM_ASSESS):   PUT //;
MPRINT(EM_ASSESS):   DO K = 1 TO 20;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   LENGTH EVENTVALUE $ 32;
MPRINT(EM_ASSESS):   RETAIN EVENTVALUE "1" ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ......... Start of EOF area of BINARY processing of main data set ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SUMRANK1", SUMRANK1);
MPRINT(EM_ASSESS):   LENGTH DATAROLE $ 10;
MPRINT(EM_ASSESS):   RETAIN DATAROLE "VALIDATE" ;
MPRINT(EM_ASSESS):   RETAIN OVLMIN 0.0025743236 OVLMAX 0.9939378087 ;
MPRINT(EM_ASSESS):   DROP OVLMIN OVLMAX ;
MPRINT(EM_ASSESS):   C_NUMOBS = 0;
MPRINT(EM_ASSESS):   C_NUM_RESP = 0;
MPRINT(EM_ASSESS):   C_NUM_NONRESP = 0;
MPRINT(EM_ASSESS):   C_P_RESP = 0;
MPRINT(EM_ASSESS):   P_CAPT_RESP = 0;
MPRINT(EM_ASSESS):   C_P_CAPT_RESP = 0;
MPRINT(EM_ASSESS):   PREVIOUSPROFIT = 0;
MPRINT(EM_ASSESS):   MAXPROFIT = 0;
MPRINT(EM_ASSESS):   _KS_BIN_ = 0;
MPRINT(EM_ASSESS):   DROP _KS_BIN_;
MPRINT(EM_ASSESS):   AVGNUMRESP = _NEVENTS / 20;
MPRINT(EM_ASSESS):   BASERESP = 100 * RESPRATE;
MPRINT(EM_ASSESS):   BASERESPC = BASERESP;
MPRINT(EM_ASSESS):   BASECAP = 100 / 20;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ........................Start OF Gainschart = Outranks Area;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   _KS_BIN_PROB = 0;
MPRINT(EM_ASSESS):   DO GROUP = 20 TO 1 BY -1;
 
MPRINT(EM_ASSESS):   BASECAPC + BASECAP;
MPRINT(EM_ASSESS):   PERCENTILE = GROUP * (100 / 20);
MPRINT(EM_ASSESS):   MINPROB = MINPROBS ( GROUP);
MPRINT(EM_ASSESS):   MAXPROB = MAXPROBS ( GROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("MINPROB" || LEFT ( PUT (GROUP, 3.)), MINPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("MAXPROB" || LEFT ( PUT (GROUP, 3.)), MAXPROB);
MPRINT(EM_ASSESS):   NUMOBS = NUMOBSS ( GROUP);
MPRINT(EM_ASSESS):   IF NUMOBS > 0 THEN MNPROB = MNPROBS ( GROUP) / NUMOBS;
MPRINT(EM_ASSESS):   ELSE MNPROB = .;
MPRINT(EM_ASSESS):   C_NUMOBS = SUM (NUMOBS, C_NUMOBS);
MPRINT(EM_ASSESS):   NUMRESP = NUMRESPS ( GROUP);
MPRINT(EM_ASSESS):   NUMNONRESP = NUMOBS - NUMRESP;
MPRINT(EM_ASSESS):   C_AVGNUM_RESP + AVGNUMRESP;
MPRINT(EM_ASSESS):   IF C_NUMOBS <= _NEVENTS THEN DO;
MPRINT(EM_ASSESS):   BESTNUMEVENTS = NUMOBS;
MPRINT(EM_ASSESS):   BESTCAPC = C_NUMOBS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   BASEEVENTS = _NEVENTS / 20;
MPRINT(EM_ASSESS):   BASENONEVENTS = 0;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   FLAG + 1;
MPRINT(EM_ASSESS):   DROP FLAG;
MPRINT(EM_ASSESS):   BESTNUMEVENTS = _NEVENTS - C_NUMOBS + NUMOBS;
MPRINT(EM_ASSESS):   IF FLAG > 1 THEN BESTNUMEVENTS = 0;
MPRINT(EM_ASSESS):   BESTCAPC = 100;
MPRINT(EM_ASSESS):   IF C_NUMOBS - _NEVENTS <= NUMOBS THEN DO;
MPRINT(EM_ASSESS):   BASEEVENTS = C_NUMOBS - _NEVENTS;
MPRINT(EM_ASSESS):   BASENONEVENTS = NUMOBS - C_NUMOBS + _NEVENTS;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   BASEEVENTS = 0;
MPRINT(EM_ASSESS):   BASENONEVENTS = NUMOBS;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   BESTCAP = BESTNUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   IF C_NUMOBS <= _NEVENTS THEN DO;
MPRINT(EM_ASSESS):   BESTLIFT = ((_NEVENTS+_NNONEVENTS) / 20) /AVGNUMRESP;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   BESTLIFT = BESTNUMEVENTS / AVGNUMRESP;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   C_BESTNUMEVENTS + BESTNUMEVENTS;
MPRINT(EM_ASSESS):   DROP C_BESTNUMEVENTS;
MPRINT(EM_ASSESS):   IF C_NUMOBS > 0 THEN BESTLIFTC = C_BESTNUMEVENTS / (_NEVENTS / 100 *
C_NUMOBS);
MPRINT(EM_ASSESS):   ELSE BESTLIFTC = .;
MPRINT(EM_ASSESS):   IF NUMOBS > 0 THEN DO;
MPRINT(EM_ASSESS):   BESTRESP = BESTNUMEVENTS * 100 / NUMOBS;
MPRINT(EM_ASSESS):   P_RESP = NUMRESP * 100 / NUMOBS;
MPRINT(EM_ASSESS):   P_NONRESP = NUMNONRESP * 100 / NUMOBS;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   BESTRESP = .;
MPRINT(EM_ASSESS):   P_RESP = .;
MPRINT(EM_ASSESS):   P_NONRESP = .;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   IF C_NUMOBS > 0 THEN DO;
MPRINT(EM_ASSESS):   BESTRESPC = C_BESTNUMEVENTS * 100 / C_NUMOBS;
MPRINT(EM_ASSESS):   BESTGAIN = MAX (0, ((C_BESTNUMEVENTS / C_NUMOBS ) / ( AVGNUMRESP /
(100/20)) - 1) * 100);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   BESTRESPC = .;
MPRINT(EM_ASSESS):   BESTGAIN = .;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   IF NUMNONRESP > 0 THEN ODDS = NUMRESP / NUMNONRESP;
MPRINT(EM_ASSESS):   ELSE ODDS = .;
MPRINT(EM_ASSESS):   C_NUM_RESP = SUM (C_NUM_RESP , NUMRESP );
MPRINT(EM_ASSESS):   C_NUM_NONRESP = SUM (C_NUM_NONRESP, NUMNONRESP );
MPRINT(EM_ASSESS):   IF C_NUM_NONRESP > 0 THEN C_ODDS = C_NUM_RESP / C_NUM_NONRESP;
MPRINT(EM_ASSESS):   ELSE C_ODDS = .;
MPRINT(EM_ASSESS):   IF C_NUMOBS > 0 THEN DO;
MPRINT(EM_ASSESS):   C_P_RESP = C_NUM_RESP * 100 / C_NUMOBS;
MPRINT(EM_ASSESS):   GAIN = ABS(100 * (((C_NUM_RESP / C_NUMOBS ) / (_NEVENTS / 100)) - 1));
MPRINT(EM_ASSESS):   BASEGAIN = 100 * (( (C_AVGNUM_RESP /((20-GROUP+1)* 100/20) ) / (
AVGNUMRESP / (100/20))) - 1);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   GAIN = .;
MPRINT(EM_ASSESS):   BASEGAIN = .;
MPRINT(EM_ASSESS):   C_P_RESP = .;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   IF BASEGAIN <= 0 THEN BASEGAIN = 0;
MPRINT(EM_ASSESS):   P_CAPT_RESP = NUMRESP * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   P_CAPT_NONRESP = NUMNONRESP * 100 / ( 100 - _NEVENTS);
MPRINT(EM_ASSESS):   C_P_CAPT_RESP = C_NUM_RESP * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   C_P_CAPT_NONRESP = C_NUM_NONRESP * 100 / ( 100 - _NEVENTS);
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * Area For Binned KS in Outranks area;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   _DIFFERENCE = C_P_CAPT_RESP - C_P_CAPT_NONRESP ;
MPRINT(EM_ASSESS):   IF _KS_BIN_ < _DIFFERENCE THEN DO;
MPRINT(EM_ASSESS):   _KS_BIN_ = _DIFFERENCE;
MPRINT(EM_ASSESS):   _KS_BIN_PROB = MINPROB + (MAXPROB - MINPROB) / 2 ;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   LIFT = P_RESP * .01 / RESPRATE ;
MPRINT(EM_ASSESS):   C_LIFT = C_P_RESP * .01 / RESPRATE;
MPRINT(EM_ASSESS):   IF NUMOBS > 0 THEN DO;
MPRINT(EM_ASSESS):   BASELIFT = AVGNUMRESP / ( RESPRATE * 100/20 );
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE BASELIFT = .;
MPRINT(EM_ASSESS):   IF C_NUMOBS > 0 THEN CBASELIFT = C_AVGNUM_RESP / (RESPRATE *
((20-GROUP+1)* 100/20));
MPRINT(EM_ASSESS):   ELSE CBASELIFT = .;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ........ WITHIN DO LOOP FOR OUTRANKS;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   BIN = 20 + 1 - GROUP;
MPRINT(EM_ASSESS):   PERCENTILE = BIN * (100 / 20);
MPRINT(EM_ASSESS):   B_C_P_RESP = PERCENTILE;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPRANK ;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ........................ END OF GAINSCHART = OUTRANKS AREA;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("MAXPROFITGROUP" , MAXPROFITGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("MAXPROFIT" , MAXPROFIT );
MPRINT(EM_ASSESS):   KS_ABSDIFF = 0 ;
MPRINT(EM_ASSESS):   MINPRECTPR = 9999;
MPRINT(EM_ASSESS):   Y0 = 1 - RESPRATE;
MPRINT(EM_ASSESS):   Y1 = RESPRATE;
MPRINT(EM_ASSESS):   MAXMUTUAL = 0;
MPRINT(EM_ASSESS):   DROP MAXMUTUAL KSPROB Y0 Y1 KS_ABSDIFF MINPRECTPR;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * .....................About to start Processing Outroc ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ........................... Finished Processing Outroc ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * .............. Outdist ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   BIN = 20 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS96 - EVENTS100 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS96 - NONEVENTS100);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB96 -
SCR_MNPROB100) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB96 - SCR_MINPROB100) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB96 - SCR_MAXPROB100) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 100;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 20;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 19 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS91 - EVENTS95 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS91 - NONEVENTS95);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB91 -
SCR_MNPROB95) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB91 - SCR_MINPROB95) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB91 - SCR_MAXPROB95) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 100;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 19;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 18 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS86 - EVENTS90 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS86 - NONEVENTS90);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB86 -
SCR_MNPROB90) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB86 - SCR_MINPROB90) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB86 - SCR_MAXPROB90) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 100;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 18;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 17 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS81 - EVENTS85 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS81 - NONEVENTS85);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB81 -
SCR_MNPROB85) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB81 - SCR_MINPROB85) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB81 - SCR_MAXPROB85) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 100;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 17;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 16 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS76 - EVENTS80 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS76 - NONEVENTS80);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB76 -
SCR_MNPROB80) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB76 - SCR_MINPROB80) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB76 - SCR_MAXPROB80) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 100;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 16;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 15 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS71 - EVENTS75 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS71 - NONEVENTS75);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB71 -
SCR_MNPROB75) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB71 - SCR_MINPROB75) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB71 - SCR_MAXPROB75) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 100;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 15;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 14 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS66 - EVENTS70 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS66 - NONEVENTS70);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB66 -
SCR_MNPROB70) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB66 - SCR_MINPROB70) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB66 - SCR_MAXPROB70) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 100;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 14;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 13 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS61 - EVENTS65 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS61 - NONEVENTS65);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB61 -
SCR_MNPROB65) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB61 - SCR_MINPROB65) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB61 - SCR_MAXPROB65) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 100;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 13;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 12 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS56 - EVENTS60 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS56 - NONEVENTS60);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB56 -
SCR_MNPROB60) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB56 - SCR_MINPROB60) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB56 - SCR_MAXPROB60) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 100;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 12;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 11 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS51 - EVENTS55 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS51 - NONEVENTS55);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB51 -
SCR_MNPROB55) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB51 - SCR_MINPROB55) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB51 - SCR_MAXPROB55) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 100;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 11;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 10 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS46 - EVENTS50 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS46 - NONEVENTS50);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB46 -
SCR_MNPROB50) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB46 - SCR_MINPROB50) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB46 - SCR_MAXPROB50) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 100;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 10;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 9 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS41 - EVENTS45 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS41 - NONEVENTS45);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB41 -
SCR_MNPROB45) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB41 - SCR_MINPROB45) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB41 - SCR_MAXPROB45) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 100;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 9;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 8 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS36 - EVENTS40 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS36 - NONEVENTS40);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB36 -
SCR_MNPROB40) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB36 - SCR_MINPROB40) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB36 - SCR_MAXPROB40) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 100;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 8;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 7 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS31 - EVENTS35 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS31 - NONEVENTS35);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB31 -
SCR_MNPROB35) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB31 - SCR_MINPROB35) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB31 - SCR_MAXPROB35) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 100;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 7;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
The SAS System
 
MPRINT(EM_ASSESS):   BIN = 6 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS26 - EVENTS30 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS26 - NONEVENTS30);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB26 -
SCR_MNPROB30) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB26 - SCR_MINPROB30) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB26 - SCR_MAXPROB30) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 100;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 6;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 5 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS21 - EVENTS25 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS21 - NONEVENTS25);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB21 -
SCR_MNPROB25) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB21 - SCR_MINPROB25) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB21 - SCR_MAXPROB25) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 100;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 5;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 4 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS16 - EVENTS20 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS16 - NONEVENTS20);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB16 -
SCR_MNPROB20) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB16 - SCR_MINPROB20) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB16 - SCR_MAXPROB20) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 100;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 4;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 3 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS11 - EVENTS15 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS11 - NONEVENTS15);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB11 -
SCR_MNPROB15) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB11 - SCR_MINPROB15) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB11 - SCR_MAXPROB15) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 100;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 3;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 2 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS6 - EVENTS10 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS6 - NONEVENTS10);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB6 -
SCR_MNPROB10) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB6 - SCR_MINPROB10) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB6 - SCR_MAXPROB10) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 100;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 2;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 1 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS1 - EVENTS5 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS1 - NONEVENTS5);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB1 - SCR_MNPROB5)
/ NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB1 - SCR_MINPROB5) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB1 - SCR_MAXPROB5) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 100;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 1;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("KSPROB" , PUT (KSPROB, 5.3 ) );
MPRINT(EM_ASSESS):   CALL SYMPUTX ("_KS_BIN_PROB" , _KS_BIN_PROB );
MPRINT(EM_ASSESS):   CALL SYMPUTX ("_KS_BIN_" , _KS_BIN_ / 100 );
MPRINT(EM_ASSESS):   CALL SYMPUTX ("KSDIFF" , KS_ABSDIFF );
MPRINT(EM_ASSESS):   CALL SYMPUTX ("PRECTPR" , PRECTPR );
MPRINT(EM_ASSESS):   CALL SYMPUTX ("MAXMUTUALPROB" , MAXMUTUALPROB);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   LABEL __EVENT__ = "Event" DECILE = "Depth" BIN = "Bin" NUMOBS = "Number
of Observations" ;
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * RUN for large data set;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   PROC DATASETS NOLIST;
MPRINT(EM_ASSESS):   DELETE _AUXEVENTNAME;
MPRINT(EM_ASSESS):   QUIT;
 
MPRINT(EM_ASSESS):   OPTION NOCENTER LS = 95;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * Report Vars Area.;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ...........Start OF Outdist Modification;
MPRINT(EM_ASSESS):   *;
 
MPRINT(EM_ASSESS):   PROC DATASETS NOLIST LIB = WORK;
MPRINT(EM_ASSESS):   MODIFY _TEMPSCOREDIST;
MPRINT(EM_ASSESS):   RENAME MODELSCORE = SCORE UPPERPROB = UPPOSTERIOR SCR_CP_EVENTS =
CUMULATIVEPERCENTAGEOFEVENTS SCR_CP_NONEVENTS = CUMULATIVEPERCENTAGEOFNONEVENTS EVENTVALUE =
EVENT LOWERPROB = LOWPOSTERIOR NUMOBSINGROUP = N PERCOBSINGROUP = PERCENTAGE SCR_MINPROB =
_MINP_ SCR_MAXPROB = _MAXP_ SCR_MNPROB = _MEANP_ RANGE = P_LABEL C_PERCOBSINGROUP =
CUMULATIVEPERCENTAGE SCR_NUMEVENTS = NUMBEROFEVENTS SCR_NUMNONEVENTS = NUMBEROFNONEVENTS
SCR_P_EVENTS = PERCENTAGEOFEVENTS SCR_P_NONEVENTS = PERCENTAGEOFNONEVENTS ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * .................... OUTDIST MODIFICATION LABEL AREA;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   LABEL BIN = "Bin" N = "Number of Observations" P_LABEL = "Posterior
Probability Range" EVENT = "Event" LOWPOSTERIOR = "Lower Bound Posterior Probability"
PERCENTAGEOFEVENTS = "Percentage of Events" CUMULATIVEPERCENTAGEOFNONEVENTS = "Cumulative
Percentage of Nonevents" CUMULATIVEPERCENTAGE = "Cumulative Percentage" PERCENTAGEOFEVENTS =
"Percentage of Events" PERCENTAGEOFNONEVENTS = "Percentage of Nonevents"
CUMULATIVEPERCENTAGEOFEVENTS = "Cumulative Percentage of Events" UPPOSTERIOR = "Upper Bound
Posterior Probability" NUMBEROFEVENTS = "Number of Events" PERCENTAGE = "Percentage"
NUMBEROFNONEVENTS = "Number of Nonevents" _MEANP_ = "Mean Posterior Probability" _MINP_ = "Min
Posterior Probability" _MAXP_ = "Max Posterior Probability" SCORE = "Model Score" ;
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   QUIT;
MPRINT(EM_ASSESS):   DATA WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   SET WORK._TEMPSCOREDIST (WHERE = (_MEANP_ > .));
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ........... END OF OUTDIST MODIFICATION;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ...........Start of OUTRANKS Modification;
MPRINT(EM_ASSESS):   *;
 
MPRINT(EM_ASSESS):   PROC DATASETS NOLIST LIB = WORK;
MPRINT(EM_ASSESS):   MODIFY _TEMPRANK;
MPRINT(EM_ASSESS):   RENAME __EVENT__ = EVENT P_RESP = RESP C_P_CAPT_RESP = CAPC P_CAPT_RESP =
CAP NUMNONRESP = NUMNEVENT NUMRESP = NUMEVENT BASEEVENTS = BASENUMBEROFEVENTS BESTNUMEVENTS =
BESTNUMBEROFEVENTS MAXPROB = _MAXP_ MINPROB = _MINP_ CBASELIFT = BASELIFTC C_LIFT = LIFTC
MNPROB = _MEANP_ PERCENTILE = DECILE NUMOBS = N NUMEVENT = NUMBEROFEVENTS C_P_RESP = RESPC ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ................. OUTRANKS;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   LABEL _MAXP_ = "Max Posterior Probability" _MINP_ = "Min Posterior
Probability" _MEANP_ = "Mean Posterior Probability" BASECAP = "Baseline % Captured Response"
BASECAPC = "Baseline Cumulative % Captured Response" BASENUMBEROFEVENTS = "Baseline Number of
Events" BASEGAIN = "Baseline Gain" BASELIFT = "Baseline Lift" BASELIFTC = "Baseline Cumulative
Lift" BASERESP = "Baseline % Response" BASERESPC = "Baseline Cumulative % Response" BASELIFTC
= "Baseline Cumulative Lift" BESTCAP = "Best % Captured Response" BESTCAPC = "Best Cumulative
% Captured Response" BESTGAIN = "Best Gain" BESTRESP = "Best % Response" BESTRESPC = "Best
Cumulative % Response" BESTLIFT = "Best Lift" BESTLIFTC = "Best Cumulative Lift"
BESTNUMBEROFEVENTS = "Best Number of Events" CAP = "% Captured Response" CAPC = "Cumulative %
Captured Response" DECILE = "Depth" GAIN = "Gain" LIFT = "Lift" LIFTC = "Cumulative Lift"
NUMNEVENT = "Number of Nonevents" N = "Number of Observations" EVENT = "Event" RESPC =
"Cumulative % Response" NUMBEROFEVENTS = "Number of Events" RESP = "% Response" ;
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   QUIT;
MPRINT(EM_ASSESS):   DATA WORK._TEMPRANK;
MPRINT(EM_ASSESS):   SET WORK._TEMPRANK (WHERE = (_MEANP_ > .));
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   proc datasets lib=work nolist;
MPRINT(EM_ASSESS):   delete _ea_tmpdata;
MPRINT(EM_ASSESS):   run;
MPRINT(EM_ASSESS):   quit;
MPRINT(EM_ASSESS):  ;
MPRINT(EM_ASSESS):   OPTION ERRORS = 20;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):    data WORK._TEMPRANK;
MPRINT(EM_DIAGRAM):   length target $32 TARGETLABEL $200 dataRole $20;
MPRINT(EM_DIAGRAM):   label TARGETLABEL = "Target Label";
MPRINT(EM_DIAGRAM):   set WORK._TEMPRANK;
MPRINT(EM_DIAGRAM):   retain target "Risk";
MPRINT(EM_DIAGRAM):   retain dataRole "VALIDATE";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data EMWS1.Neural4_EMRANK;
MPRINT(EM_DIAGRAM):   length target $32;
MPRINT(EM_DIAGRAM):   length TARGETLABEL $200;
MPRINT(EM_DIAGRAM):   length dataRole $20;
MPRINT(EM_DIAGRAM):   length EVENT $32;
MPRINT(EM_DIAGRAM):   set EMWS1.Neural4_EMRANK WORK._TEMPRANK;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data WORK._TEMPSCOREDIST;
MPRINT(EM_DIAGRAM):   length target $32 TARGETLABEL $200 dataRole $20;
MPRINT(EM_DIAGRAM):   label TARGETLABEL = "Target Label";
MPRINT(EM_DIAGRAM):   set WORK._TEMPSCOREDIST;
MPRINT(EM_DIAGRAM):   retain target "Risk";
MPRINT(EM_DIAGRAM):   retain dataRole "VALIDATE";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data EMWS1.Neural4_EMSCOREDIST;
MPRINT(EM_DIAGRAM):   length target $32;
MPRINT(EM_DIAGRAM):   length TARGETLABEL $200;
MPRINT(EM_DIAGRAM):   length dataRole $20;
MPRINT(EM_DIAGRAM):   length EVENT $32;
MPRINT(EM_DIAGRAM):   length P_LABEL $9;
MPRINT(EM_DIAGRAM):   set EMWS1.Neural4_EMSCOREDIST WORK._TEMPSCOREDIST;
MPRINT(EM_DIAGRAM):   run;
138893     %let _cn = %sysfunc(getoption(CENTER));
138894     options nocenter;
MPRINT(EM_DIAGRAM):    options nocenter;
138895     proc print data=EMWS1.Neural4_EMREPORTFIT noobs label;
MPRINT(EM_DIAGRAM):   proc print data=EMWS1.Neural4_EMREPORTFIT noobs label;
138896     var STAT LABEL TRAIN
138897     VALIDATE
138898     ;
MPRINT(EM_DIAGRAM):   var STAT LABEL TRAIN VALIDATE ;
138899     by TARGET TARGETLABEL;
MPRINT(EM_DIAGRAM):   by TARGET TARGETLABEL;
138900     title9 ' ';
MPRINT(EM_DIAGRAM):   title9 ' ';
138901     title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_fitstat_title  , NOQUOTE))";
MPRINT(EM_DIAGRAM):   title10 "Fit Statistics";
MPRINT(EM_DIAGRAM):   run;
138902     run;
 
NOTE: There were 21 observations read from the data set EMWS1.NEURAL4_EMREPORTFIT.
NOTE: The PROCEDURE PRINT printed page 98.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
138903     title10;
MPRINT(EM_DIAGRAM):   title10;
138904     options &_cn;
MPRINT(EM_DIAGRAM):   options NOCENTER;
138905     proc sort data=EMWS1.Neural4_EMCLASSIFICATION nothreads;
MPRINT(EM_DIAGRAM):    proc sort data=EMWS1.Neural4_EMCLASSIFICATION nothreads;
138906     by DATAROLE TARGET TARGETLABEL;
MPRINT(EM_DIAGRAM):   by DATAROLE TARGET TARGETLABEL;
138907     run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 8 observations read from the data set EMWS1.NEURAL4_EMCLASSIFICATION.
NOTE: The data set EMWS1.NEURAL4_EMCLASSIFICATION has 8 observations and 12 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.08 seconds
      cpu time            0.01 seconds
 
 
138908     %let _cn = %sysfunc(getoption(CENTER));
138909     options nocenter;
MPRINT(EM_DIAGRAM):   options nocenter;
138910     proc print data=EMWS1.Neural4_EMCLASSIFICATION noobs label;
MPRINT(EM_DIAGRAM):   proc print data=EMWS1.Neural4_EMCLASSIFICATION noobs label;
138911     var from into pct_row pct_col count percent
138912     ;
MPRINT(EM_DIAGRAM):   var from into pct_row pct_col count percent ;
138913     by DATAROLE TARGET TARGETLABEL;
MPRINT(EM_DIAGRAM):   by DATAROLE TARGET TARGETLABEL;
138914     label FROM = "%sysfunc(sasmsg(sashelp.dmine, rpt_target_vlabel ,     NOQUOTE))";
MPRINT(EM_DIAGRAM):   label FROM = "Target";
138915     label INTO = "%sysfunc(sasmsg(sashelp.dmine, rpt_outcome_vlabel ,    NOQUOTE))";
MPRINT(EM_DIAGRAM):   label INTO = "Outcome";
138916     label PCT_ROW = "%sysfunc(sasmsg(sashelp.dmine, rpt_targetpct_vlabel ,  NOQUOTE))";
MPRINT(EM_DIAGRAM):   label PCT_ROW = "Target Percentage";
138917     label PCT_COL = "%sysfunc(sasmsg(sashelp.dmine, rpt_outcomepct_vlabel , NOQUOTE))";
MPRINT(EM_DIAGRAM):   label PCT_COL = "Outcome Percentage";
138918     label COUNT = "%sysfunc(sasmsg(sashelp.dmine, rpt_count_vlabel ,      NOQUOTE))";
MPRINT(EM_DIAGRAM):   label COUNT = "Frequency Count";
138919     label PERCENT = "%sysfunc(sasmsg(sashelp.dmine, rpt_totalpct_vlabel ,   NOQUOTE))";
MPRINT(EM_DIAGRAM):   label PERCENT = "Total Percentage";
138920     where _TYPE_='PREDICTION';
MPRINT(EM_DIAGRAM):   where _TYPE_='PREDICTION';
138921     title9 ' ';
MPRINT(EM_DIAGRAM):   title9 ' ';
138922     title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_classification_title    , NOQUOTE))";
MPRINT(EM_DIAGRAM):   title10 "Classification Table";
MPRINT(EM_DIAGRAM):   run;
138923     run;
 
NOTE: There were 8 observations read from the data set EMWS1.NEURAL4_EMCLASSIFICATION.
      WHERE _TYPE_='PREDICTION';
NOTE: The PROCEDURE PRINT printed page 99.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.02 seconds
      cpu time            0.03 seconds
 
 
138924     title9;
MPRINT(EM_DIAGRAM):   title9;
138925     title10;
MPRINT(EM_DIAGRAM):   title10;
138926     options &_cn;
MPRINT(EM_DIAGRAM):   options NOCENTER;
138927     %let _cn = %sysfunc(getoption(CENTER));
138928     options nocenter;
MPRINT(EM_DIAGRAM):    options nocenter;
138929     data EMWS1.Neural4_EMEVENTREPORT;
MPRINT(EM_DIAGRAM):   data EMWS1.Neural4_EMEVENTREPORT;
138930     length DATAROLE TARGET $32 TARGETLABEL $200 FALSENEVENT TRUENEVENT FALSEEVENT
138930   ! TRUEEVENT 8;
MPRINT(EM_DIAGRAM):   length DATAROLE TARGET $32 TARGETLABEL $200 FALSENEVENT TRUENEVENT
FALSEEVENT TRUEEVENT 8;
138931     label DATAROLE = "%sysfunc(sasmsg(sashelp.dmine, rpt_datarole_vlabel ,    NOQUOTE))"
138931   !  TARGET = "%sysfunc(sasmsg(sashelp.dmine, rpt_target_vlabel ,      NOQUOTE))"
138931   ! TARGETLABEL = "%sysfunc(sasmsg(sashelp.dmine, meta_targetlabel_vlabel, NOQUOTE))"
138931   ! FALSEEVENT
138932     = "%sysfunc(sasmsg(sashelp.dmine, rpt_falseevent_vlabel ,  NOQUOTE))" FALSENEVENT =
138932   ! "%sysfunc(sasmsg(sashelp.dmine, rpt_falsenevent_vlabel , NOQUOTE))" TRUEEVENT =
138932   ! "%sysfunc(sasmsg(sashelp.dmine, rpt_trueevent_vlabel ,   NOQUOTE))" TRUENEVENT =
138933        "%sysfunc(sasmsg(sashelp.dmine, rpt_truenevent_vlabel ,  NOQUOTE))";
MPRINT(EM_DIAGRAM):   label DATAROLE = "Data Role" TARGET = "Target" TARGETLABEL = "Target
Label" FALSEEVENT = "False Positive" FALSENEVENT = "False Negative" TRUEEVENT = "True
Positive" TRUENEVENT = "True Negative";
138934     FALSEEVENT=0;
MPRINT(EM_DIAGRAM):   FALSEEVENT=0;
138935     FALSENEVENT=0;
MPRINT(EM_DIAGRAM):   FALSENEVENT=0;
138936     TRUEEVENT=0;
MPRINT(EM_DIAGRAM):   TRUEEVENT=0;
138937     TRUENEVENT=0;
MPRINT(EM_DIAGRAM):   TRUENEVENT=0;
138938     set EMWS1.Neural4_EMEVENTREPORT;
MPRINT(EM_DIAGRAM):   set EMWS1.Neural4_EMEVENTREPORT;
138939     run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 2 observations read from the data set EMWS1.NEURAL4_EMEVENTREPORT.
NOTE: The data set EMWS1.NEURAL4_EMEVENTREPORT has 2 observations and 7 variables.
NOTE: DATA statement used (Total process time):
      real time           0.08 seconds
      cpu time            0.03 seconds
 
 
138940     proc print data=EMWS1.Neural4_EMEVENTREPORT noobs label;
MPRINT(EM_DIAGRAM):   proc print data=EMWS1.Neural4_EMEVENTREPORT noobs label;
138941     title9 ' ';
MPRINT(EM_DIAGRAM):   title9 ' ';
138942     title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_eventtable_title    , NOQUOTE))";
MPRINT(EM_DIAGRAM):   title10 "Event Classification Table";
MPRINT(EM_DIAGRAM):   by notsorted DATAROLE notsorted TARGET notsorted TARGETLABEL;
MPRINT(EM_DIAGRAM):   run;
138943     by notsorted DATAROLE notsorted TARGET notsorted TARGETLABEL;
138944     run;
 
NOTE: There were 2 observations read from the data set EMWS1.NEURAL4_EMEVENTREPORT.
NOTE: The PROCEDURE PRINT printed page 100.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
138945     title10;
MPRINT(EM_DIAGRAM):   title10;
138946     options &_cn;
MPRINT(EM_DIAGRAM):   options NOCENTER;
138947     proc datasets library=EMWS1 nolist;
MPRINT(EM_DIAGRAM):    proc datasets library=EMWS1 nolist;
138948     modify Neural4_EMRANK;
MPRINT(EM_DIAGRAM):   modify Neural4_EMRANK;
MPRINT(EM_DIAGRAM):   label target = "Target Variable";
138949     label target = "%sysfunc(sasmsg(sashelp.dmine, rpt_targetvar_vlabel ,   NOQUOTE))";
MPRINT(EM_DIAGRAM):   label datarole = "Data Role";
138950     label datarole = "%sysfunc(sasmsg(sashelp.dmine, rpt_datarole_vlabel ,    NOQUOTE))"
138950   ! ;
MPRINT(EM_DIAGRAM):   run;
138951     run;
 
NOTE: MODIFY was successful for EMWS1.NEURAL4_EMRANK.DATA.
138952     quit;
MPRINT(EM_DIAGRAM):   quit;
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           5.57 seconds
      cpu time            0.79 seconds
 
 
138953     %let _cn = %sysfunc(getoption(CENTER));
138954     options nocenter;
MPRINT(EM_DIAGRAM):    options nocenter;
138955     proc print data=EMWS1.Neural4_EMRANK label noobs;
MPRINT(EM_DIAGRAM):   proc print data=EMWS1.Neural4_EMRANK label noobs;
138956     var
138957     decile gain lift liftc resp respc N _meanP_;
MPRINT(EM_DIAGRAM):   var decile gain lift liftc resp respc N _meanP_;
138958     by
138959     notsorted DATAROLE
138960     notsorted TARGET
138961     notsorted TARGETLABEL
138962     ;
MPRINT(EM_DIAGRAM):   by notsorted DATAROLE notsorted TARGET notsorted TARGETLABEL ;
138963     title9 ' ';
MPRINT(EM_DIAGRAM):   title9 ' ';
138964     title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_scoreranking_title , NOQUOTE))";
MPRINT(EM_DIAGRAM):   title10 "Assessment Score Rankings";
MPRINT(EM_DIAGRAM):   run;
138965     run;
 
NOTE: There were 40 observations read from the data set EMWS1.NEURAL4_EMRANK.
NOTE: The PROCEDURE PRINT printed page 101.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
138966     title10;
MPRINT(EM_DIAGRAM):   title10;
138967     options &_cn;
MPRINT(EM_DIAGRAM):   options NOCENTER;
138968     proc datasets library=EMWS1 nolist;
MPRINT(EM_DIAGRAM):    proc datasets library=EMWS1 nolist;
138969     modify Neural4_EMSCOREDIST;
MPRINT(EM_DIAGRAM):   modify Neural4_EMSCOREDIST;
MPRINT(EM_DIAGRAM):   label target = "Target Variable";
138970     label target = "%sysfunc(sasmsg(sashelp.dmine, rpt_targetvar_vlabel ,
138970   ! NOQUOTE))";
MPRINT(EM_DIAGRAM):   label datarole = "Data Role";
138971     label datarole = "%sysfunc(sasmsg(sashelp.dmine, rpt_datarole_vlabel ,    NOQUOTE))"
138971   ! ;
MPRINT(EM_DIAGRAM):   run;
138972     run;
 
NOTE: MODIFY was successful for EMWS1.NEURAL4_EMSCOREDIST.DATA.
138973     quit;
MPRINT(EM_DIAGRAM):   quit;
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           7.22 seconds
      cpu time            0.57 seconds
 
 
MPRINT(EM_DIAGRAM):    options nocenter;
MPRINT(EM_DIAGRAM):   proc print data=EMWS1.Neural4_EMSCOREDIST label noobs;
MPRINT(EM_DIAGRAM):   var p_label numberOfEvents numberOfNonEvents _meanp_ percentage;
MPRINT(EM_DIAGRAM):   by notsorted DATAROLE notsorted TARGET notsorted TARGETLABEL ;
MPRINT(EM_DIAGRAM):   where TARGET in( "Risk" );
MPRINT(EM_DIAGRAM):   title9 ' ';
MPRINT(EM_DIAGRAM):   title10 "Assessment Score Distribution";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   title10;
MPRINT(EM_DIAGRAM):   options NOCENTER;
MPRINT(EM_DIAGRAM):   proc printto;
MPRINT(EM_DIAGRAM):   run;
