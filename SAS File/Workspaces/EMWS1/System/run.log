NOTE: PROCEDURE PRINTTO used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

Traverser: Traverser invoked.  MPCONNECT command is !sascmdv -nosyntaxcheck -noasynchio -noobjectserver. 
Traverser: Beginning flow traversal 
15924      data _null_;
MPRINT(EM_DIAGRAM):    data _null_;
15925      file emwipmsg;
MPRINT(EM_DIAGRAM):   file emwipmsg;
15926      put '<Node Id="FIMPORT" Event="Run" Pid="2144" Gridid=""/>';
MPRINT(EM_DIAGRAM):   put '<Node Id="FIMPORT" Event="Run" Pid="2144" Gridid=""/>';
15927      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: The file EMWIPMSG is:
      Local Host Name=C2-Complab-38,
      Local Host IP addr=10.21.104.163,
      Peer Hostname Name=C2-Complab-38.cencol.ca,
      Peer IP addr=127.0.0.1,Peer Name=N/A,
      Peer Portno=3478,Lrecl=32767,Recfm=Variable

NOTE: 1 record was written to the file EMWIPMSG.
      The minimum record length was 53.
      The maximum record length was 53.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

15928      %let emloopmode =;
*------------------------------------------------------------* 
* 
* FIMPORT : Beginning update before running 
* datetime : 16APR2021:13:01:28 
* 
*------------------------------------------------------------* 
MPRINT(EM_DIAGRAM):     *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * FIMPORT: Generation of macros and macro variables;
MPRINT(EM_DIAGRAM):   * To see the code generated, set the EM_DEBUG macro variable to SOURCE or _ALL_;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * FIMPORT: EM Macro Variables and Macros;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   * System Macro Variables;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   length string $2000;
MPRINT(EM_DIAGRAM):   string = 'Decision Tree test';
MPRINT(EM_DIAGRAM):   call symput('EM_PROJECTNAME', trim(string));
MPRINT(EM_DIAGRAM):   string = 'Decision Tree';
MPRINT(EM_DIAGRAM):   call symput('EM_WSNAME', trim(string));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   * Properties Macro Variables ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Files Macro Variables;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Import Macro Variables;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Export Macro Variables;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Decision Macro Variables;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Statement Macro Variables;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
16130      %let emexceptionString =;
16131      %let EMEXCEPTIONSTRING=;
16132      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
16133      * UPDATE: FIMPORT;
MPRINT(EM_DIAGRAM):   * UPDATE: FIMPORT;
16134      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
16135      %let EM_ACTION = UPDATE;
16136      %let syscc = 0;
16137      /* Fimport.source */
16138      %macro main;
16139            %if %upcase(&EM_ACTION) = CREATE %then %do;
16140               filename temp catalog 'sashelp.emsamp.Fimport_create.source';
16141               %include temp;
16142               filename temp;
16143               %create;
16144            %end;
16145            %else
16146            %if %upcase(&EM_ACTION) = TRAIN %then %do;
16147               filename temp catalog 'sashelp.emsamp.Fimport_train.source';
16148               %include temp;
16149               filename temp;
16150               %train;
16151            %end;
16152            %else
16153            %if %upcase(&EM_ACTION) = UPDATE %then %do;
16154               filename temp catalog 'sashelp.emsamp.Fimport_update.source';
16155               %include temp;
16156               filename temp;
16157               %update;
16158            %end;
16159            %else
16160            %if %upcase(&EM_ACTION) = PROPERTY %then %do;
16161               filename temp catalog 'sashelp.emsamp.Fimport_actions.source';
16162               %include temp;
16163               filename temp;
16164               %property;
16165            %end;
16166             %else
16167            %if %upcase(&EM_ACTION) = SCORE %then %do;
16168               filename temp catalog 'sashelp.emsamp.Fimport_score.source';
16169               %include temp;
16170               filename temp;
16171               %score;
16172            %end;
16173            %else
16174            %if %upcase(&EM_ACTION) = REPORT %then %do;
16175               filename temp catalog 'sashelp.emsamp.Fimport_report.source';
16176               %include temp;
16177               filename temp;
16178               %report;
16179            %end;
16180            %else
16181            %if %upcase(&EM_ACTION) = OPENVARIABLESET %then %do;
16182               filename temp catalog 'sashelp.emsamp.Fimport_actions.source';
16183               %include temp;
16184               filename temp;
16185               %openvariableset;
16186            %end;
16187            %else
16188            %if %upcase(&EM_ACTION) = CLOSEVARIABLESET %then %do;
16189               filename temp catalog 'sashelp.emsamp.Fimport_actions.source';
16190               %include temp;
16191               filename temp;
16192               %closevariableset;
16193            %end;
16194      %mend main;
16195      %main;
MPRINT(EM_DIAGRAM):    
MPRINT(MAIN):   filename temp catalog 'sashelp.emsamp.Fimport_update.source';
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMSAMP.FIMPORT_UPDATE.SOURCE.
16196     +%macro update;
16197     +    %let oldrole = %str();
16198     +    data _null_;
16199     +       set &em_data_exportset;
16200     +       where NODEPORT='TRAIN';
16201     +       call symput('oldrole', ROLE);
16202     +    run;
16203     +    %if &oldrole ne &em_property_role %then %do;
16204     +        data &em_data_exportset;
16205     +           set &em_data_exportset;
16206     +           if NODEPORT='TRAIN' then do;
16207     +              ROLE="&em_property_role";
16208     +              NEEDUPDATE='Y';
16209     +              EXPORT='Y';
16210     +           end;
16211     +        run;
16212     +        filename x "&EM_NODEDIR.&EM_DSEP._updatePath.st";
16213     +        data _null_;
16214     +           file x;
16215     +           put ' ';
16216     +        run;
16217     +        filename x;
16218     +    %end;
16219     +    %else %do;
16220     +        data &em_data_exportset;
16221     +           set &em_data_exportset;
16222     +           if NODEPORT='TRAIN' then do;
16223     +              ROLE="&em_property_role";
16224     +              NEEDUPDATE='Y';
16225     +              EXPORT='Y';
16226     +           end;
16227     +        run;
16228     +    %end;
16229     +
16230     +    %em_getname(key=EMCMETADEFAULT, type=DATA);
16231     +    %if %sysfunc(exist(&em_user_emcmetadefault)) and ^%sysfunc(exist(&em_lib..&em_nodeid._CMETA_TRAIN)) %then %do;
16232     +        data &em_lib..&em_nodeid._CMETA_TRAIN;
16233     +           set &em_user_emcmetadefault;
16234     +           drop DROP;
16235     +           where DROP='N';
16236     +        run;
16237     +    %end;
16238     +
16239     +%mend update;
16240     +
16241     +
16242     +
16243     +
NOTE: %INCLUDE (level 1) ending.
MPRINT(MAIN):   filename temp;
NOTE: Fileref TEMP has been deassigned.
MPRINT(UPDATE):   data _null_;
MPRINT(UPDATE):   set EMWS1.FIMPORT_ExportSet;
MPRINT(UPDATE):   where NODEPORT='TRAIN';
MPRINT(UPDATE):   call symput('oldrole', ROLE);
MPRINT(UPDATE):   run;

NOTE: There were 1 observations read from the data set EMWS1.FIMPORT_EXPORTSET.
      WHERE NODEPORT='TRAIN';
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(UPDATE):   data EMWS1.FIMPORT_ExportSet;
MPRINT(UPDATE):   set EMWS1.FIMPORT_ExportSet;
MPRINT(UPDATE):   if NODEPORT='TRAIN' then do;
MPRINT(UPDATE):   ROLE="TRAIN";
MPRINT(UPDATE):   NEEDUPDATE='Y';
MPRINT(UPDATE):   EXPORT='Y';
MPRINT(UPDATE):   end;
MPRINT(UPDATE):   run;

NOTE: There were 6 observations read from the data set EMWS1.FIMPORT_EXPORTSET.
NOTE: The data set EMWS1.FIMPORT_EXPORTSET has 6 observations and 18 variables.
NOTE: DATA statement used (Total process time):
      real time           0.07 seconds
      cpu time            0.03 seconds
      

MPRINT(UPDATE):  ;
MPRINT(MAIN):  ;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * End UPDATE: FIMPORT;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
16244      *------------------------------------------------------------*;
16245      * End UPDATE: FIMPORT;
16246      *------------------------------------------------------------*;

16247      %em_delMacro;
MPRINT(EM_DIAGRAM):   
MPRINT(EM_DIAGRAM):  ;

MPRINT(EM_DIAGRAM):    filename _emtool_ 'H:\746\Decision Tree test\Workspaces\EMWS1\FIMPORT\PROPERTIES.xml' encoding="UTF-8" NOBOM;
16249      %let _HPDMGRIDHOST=;
16250      %let _HPDMGRIDINSTALLLOC=;
16251      %let _HPDMGRIDDATASERVER=;
16252      %hpdm_gridSetOPtions;
MPRINT(EM_DIAGRAM):   
MPRINT(HPDM_GRIDSETOPTIONS):   data _null_;
MPRINT(HPDM_GRIDSETOPTIONS):   length optionString string $2000;
MPRINT(HPDM_GRIDSETOPTIONS):   optionString = reverse(getoption('SET'));
MPRINT(HPDM_GRIDSETOPTIONS):   index = index(optionString, reverse('GRIDHOST'));
MPRINT(HPDM_GRIDSETOPTIONS):   if index then do;
MPRINT(HPDM_GRIDSETOPTIONS):   string = reverse(substr(optionString, 1, index-4));
MPRINT(HPDM_GRIDSETOPTIONS):   host = '"'!!strip(tranwrd(scan(string, 1, ']'), '"', ''))!!'"';
MPRINT(HPDM_GRIDSETOPTIONS):   call symput('_HPDMGRIDHOST', strip(host));
MPRINT(HPDM_GRIDSETOPTIONS):   end;
MPRINT(HPDM_GRIDSETOPTIONS):   index = index(optionString, reverse('GRIDINSTALLLOC'));
MPRINT(HPDM_GRIDSETOPTIONS):   if index then do;
MPRINT(HPDM_GRIDSETOPTIONS):   string = reverse(substr(optionString, 1, index-4));
MPRINT(HPDM_GRIDSETOPTIONS):   install = '"'!!strip(tranwrd(scan(string, 1, ']'), '"', ''))!!'"';
MPRINT(HPDM_GRIDSETOPTIONS):   call symput('_HPDMGRIDINSTALLLOC', strip(install));
MPRINT(HPDM_GRIDSETOPTIONS):   end;
MPRINT(HPDM_GRIDSETOPTIONS):   index = index(optionString, reverse('GRIDDATASERVER'));
MPRINT(HPDM_GRIDSETOPTIONS):   if index then do;
MPRINT(HPDM_GRIDSETOPTIONS):   string = reverse(substr(optionString, 1, index-4));
MPRINT(HPDM_GRIDSETOPTIONS):   server = '"'!!strip(tranwrd(scan(string, 1, ']'), '"', ''))!!'"';
MPRINT(HPDM_GRIDSETOPTIONS):   call symput('_HPDMGRIDDATASERVER', strip(server));
MPRINT(HPDM_GRIDSETOPTIONS):   end;
MPRINT(HPDM_GRIDSETOPTIONS):   run;

NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(EM_DIAGRAM):  ;

*------------------------------------------------------------* 
* 
* FIMPORT : End update 
* datetime : 16APR2021:13:01:28 
* 
*------------------------------------------------------------* 
16253      %em_getactionstatus(emlib =EMWS1, nodeid=FIMPORT);
MPRINT(EM_DIAGRAM):   
MPRINT(EM_GETACTIONSTATUS):   proc display c=sashelp.emutil.getactionstatus.scl;
MPRINT(EM_GETACTIONSTATUS):   run;

16254      proc compare base=EMWS1.FIMPORT_emtrainvariable compare=EMWS1.FIMPORT_variableSet out=diffDS noprint outnoequal outbase outcomp outdiff;
MPRINT(EM_GETACTIONSTATUS):   proc compare base=EMWS1.FIMPORT_emtrainvariable compare=EMWS1.FIMPORT_variableSet out=diffDS noprint outnoequal outbase outcomp outdiff;
16255      run;
MPRINT(EM_GETACTIONSTATUS):   run;

NOTE: There were 27 observations read from the data set EMWS1.FIMPORT_EMTRAINVARIABLE.
NOTE: There were 27 observations read from the data set EMWS1.FIMPORT_VARIABLESET.
NOTE: The data set WORK.DIFFDS has 0 observations and 8 variables.
NOTE: PROCEDURE COMPARE used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

16256      %let diffVar = N;
16257      data _null_;
MPRINT(EM_GETACTIONSTATUS):   data _null_;
16258      set diffDs end=eof;
MPRINT(EM_GETACTIONSTATUS):   set diffDs end=eof;
16259      if eof and _N_>0 then call symput('diffVar', 'Y');
MPRINT(EM_GETACTIONSTATUS):   if eof and _N_>0 then call symput('diffVar', 'Y');
16260      run;
MPRINT(EM_GETACTIONSTATUS):   run;

NOTE: There were 0 observations read from the data set WORK.DIFFDS.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
      

16261      %let em_filemodtime=;
16262      data _null_;
MPRINT(EM_GETACTIONSTATUS):    data _null_;
16263      format modate best.;
MPRINT(EM_GETACTIONSTATUS):   format modate best.;
16264      set sashelp.Vextfl;
MPRINT(EM_GETACTIONSTATUS):   set sashelp.Vextfl;
16265      where fileref eq "#LN00121";
MPRINT(EM_GETACTIONSTATUS):   where fileref eq "#LN00121";
16266      call symput('EM_FILEMODTIME', put(modate, best.));
MPRINT(EM_GETACTIONSTATUS):   call symput('EM_FILEMODTIME', put(modate, best.));
16267      run;
MPRINT(EM_GETACTIONSTATUS):   run;

NOTE: There were 1 observations read from the data set SASHELP.VEXTFL.
      WHERE fileref='#LN00121';
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
      

16268      %symdel em_filemodtime;
WARNING: Attempt to delete macro variable EM_FILEMODTIME failed. Variable not found.
16269      %let em_Train = N;
16270      %let em_Score = N;
16271      %let em_Report = N;
16272      %let em_Run = N;
NOTE: PROCEDURE DISPLAY used (Total process time):
      real time           0.10 seconds
      cpu time            0.06 seconds
      

MPRINT(EM_GETACTIONSTATUS):     
MPRINT(EM_DIAGRAM):  ;

Node "FIMPORT" has already run. 
Node "FIMPORT" succeeded. 
16273      data _null_;
MPRINT(EM_DIAGRAM):    data _null_;
16274      file emwipmsg;
MPRINT(EM_DIAGRAM):   file emwipmsg;
16275      put '<Node Id="FIMPORT" Event="Complete" Pid="2144" Gridid=""/>';
MPRINT(EM_DIAGRAM):   put '<Node Id="FIMPORT" Event="Complete" Pid="2144" Gridid=""/>';
16276      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: The file EMWIPMSG is:
      Local Host Name=C2-Complab-38,
      Local Host IP addr=10.21.104.163,
      Peer Hostname Name=C2-Complab-38.cencol.ca,
      Peer IP addr=127.0.0.1,Peer Name=N/A,
      Peer Portno=3478,Lrecl=32767,Recfm=Variable

NOTE: 1 record was written to the file EMWIPMSG.
      The minimum record length was 58.
      The maximum record length was 58.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

Traverser: WaitingNode "TREE2" 
Traverser: WaitingNode "TREE" 
Traverser: WaitingNode "TREE3" 
Traverser: WaitingNode "NEURAL" 
Traverser: WaitingNode "NEURAL4" 
Traverser: WaitingNode "NEURAL3" 
Traverser: WaitingNode "NEURAL2" 
Traverser: WaitingNode "REG" 
Traverser: WaitingNode "NEURAL11" 
Traverser: WaitingNode "NEURAL5" 
Traverser: WaitingNode "REG2" 
Traverser: WaitingNode "NEURAL6" 
Traverser: WaitingNode "NEURAL13" 
Traverser: WaitingNode "NEURAL8" 
Traverser: WaitingNode "REG3" 
Traverser: WaitingNode "NEURAL7" 
Traverser: WaitingNode "NEURAL14" 
Traverser: WaitingNode "NEURAL9" 
Traverser: WaitingNode "PART" 
Traverser: WaitingNode "IMPT" 
Traverser: WaitingNode "REPL" 
Traverser: WaitingNode "TRANS" 
Traverser: WaitingNode "REPL2" 
Traverser: WaitingNode "REG4" 
Traverser: WaitingNode "NEURAL10" 
Traverser: WaitingNode "MDLCOMP" 
traverser_readyNode_note 
16277      data _null_;
MPRINT(EM_DIAGRAM):    data _null_;
16278      file emwipmsg;
MPRINT(EM_DIAGRAM):   file emwipmsg;
16279      put '<Node Id="Filter" Event="Run" Pid="2144" Gridid=""/>';
MPRINT(EM_DIAGRAM):   put '<Node Id="Filter" Event="Run" Pid="2144" Gridid=""/>';
16280      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: The file EMWIPMSG is:
      Local Host Name=C2-Complab-38,
      Local Host IP addr=10.21.104.163,
      Peer Hostname Name=C2-Complab-38.cencol.ca,
      Peer IP addr=127.0.0.1,Peer Name=N/A,
      Peer Portno=3478,Lrecl=32767,Recfm=Variable

NOTE: 1 record was written to the file EMWIPMSG.
      The minimum record length was 52.
      The maximum record length was 52.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

16281      %let emloopmode =;
*------------------------------------------------------------* 
* 
* Filter : Beginning update before running 
* datetime : 16APR2021:13:01:29 
* 
*------------------------------------------------------------* 
MPRINT(EM_DIAGRAM):     data WORK.Filter_FILTERSET;
MPRINT(EM_DIAGRAM):   length PORT $32 USE $1;
MPRINT(EM_DIAGRAM):   DROP DELTACODE APPLYDELTA APPLYSCORE IMPORTPORT;
MPRINT(EM_DIAGRAM):   set EMWS1.FIMPORT_exportSet ;
MPRINT(EM_DIAGRAM):   PORT = '';
MPRINT(EM_DIAGRAM):   USE = '';
MPRINT(EM_DIAGRAM):   where role in( "RAW" "TRAIN" "VALIDATE" "TEST" ) and EXPORT = 'Y' ;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _emtool_ 'H:\746\Decision Tree test\Workspaces\EMWS1\Filter\PROPERTIES.xml' encoding="UTF-8" NOBOM;
16301      %let _HPDMGRIDHOST=;
16302      %let _HPDMGRIDINSTALLLOC=;
16303      %let _HPDMGRIDDATASERVER=;
16304      %hpdm_gridSetOPtions;
MPRINT(EM_DIAGRAM):   
MPRINT(HPDM_GRIDSETOPTIONS):   data _null_;
MPRINT(HPDM_GRIDSETOPTIONS):   length optionString string $2000;
MPRINT(HPDM_GRIDSETOPTIONS):   optionString = reverse(getoption('SET'));
MPRINT(HPDM_GRIDSETOPTIONS):   index = index(optionString, reverse('GRIDHOST'));
MPRINT(HPDM_GRIDSETOPTIONS):   if index then do;
MPRINT(HPDM_GRIDSETOPTIONS):   string = reverse(substr(optionString, 1, index-4));
MPRINT(HPDM_GRIDSETOPTIONS):   host = '"'!!strip(tranwrd(scan(string, 1, ']'), '"', ''))!!'"';
MPRINT(HPDM_GRIDSETOPTIONS):   call symput('_HPDMGRIDHOST', strip(host));
MPRINT(HPDM_GRIDSETOPTIONS):   end;
MPRINT(HPDM_GRIDSETOPTIONS):   index = index(optionString, reverse('GRIDINSTALLLOC'));
MPRINT(HPDM_GRIDSETOPTIONS):   if index then do;
MPRINT(HPDM_GRIDSETOPTIONS):   string = reverse(substr(optionString, 1, index-4));
MPRINT(HPDM_GRIDSETOPTIONS):   install = '"'!!strip(tranwrd(scan(string, 1, ']'), '"', ''))!!'"';
MPRINT(HPDM_GRIDSETOPTIONS):   call symput('_HPDMGRIDINSTALLLOC', strip(install));
MPRINT(HPDM_GRIDSETOPTIONS):   end;
MPRINT(HPDM_GRIDSETOPTIONS):   index = index(optionString, reverse('GRIDDATASERVER'));
MPRINT(HPDM_GRIDSETOPTIONS):   if index then do;
MPRINT(HPDM_GRIDSETOPTIONS):   string = reverse(substr(optionString, 1, index-4));
MPRINT(HPDM_GRIDSETOPTIONS):   server = '"'!!strip(tranwrd(scan(string, 1, ']'), '"', ''))!!'"';
MPRINT(HPDM_GRIDSETOPTIONS):   call symput('_HPDMGRIDDATASERVER', strip(server));
MPRINT(HPDM_GRIDSETOPTIONS):   end;
MPRINT(HPDM_GRIDSETOPTIONS):   run;

NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(EM_DIAGRAM):  ;

*------------------------------------------------------------* 
* 
* Filter : End update 
* datetime : 16APR2021:13:01:29 
* 
*------------------------------------------------------------* 
16305      %em_getactionstatus(emlib =EMWS1, nodeid=Filter);
MPRINT(EM_DIAGRAM):   
MPRINT(EM_GETACTIONSTATUS):   proc display c=sashelp.emutil.getactionstatus.scl;
MPRINT(EM_GETACTIONSTATUS):   run;

16306      proc compare base=EMWS1.Filter_emtrainvariable compare=EMWS1.Filter_variableSet out=diffDS noprint outnoequal outbase outcomp outdiff;
MPRINT(EM_GETACTIONSTATUS):   proc compare base=EMWS1.Filter_emtrainvariable compare=EMWS1.Filter_variableSet out=diffDS noprint outnoequal outbase outcomp outdiff;
16307      run;
MPRINT(EM_GETACTIONSTATUS):   run;

NOTE: There were 27 observations read from the data set EMWS1.FILTER_EMTRAINVARIABLE.
NOTE: There were 27 observations read from the data set EMWS1.FILTER_VARIABLESET.
NOTE: The data set WORK.DIFFDS has 0 observations and 21 variables.
NOTE: PROCEDURE COMPARE used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

16308      %let diffVar = N;
16309      data _null_;
MPRINT(EM_GETACTIONSTATUS):   data _null_;
16310      set diffDs end=eof;
MPRINT(EM_GETACTIONSTATUS):   set diffDs end=eof;
16311      if eof and _N_>0 then call symput('diffVar', 'Y');
MPRINT(EM_GETACTIONSTATUS):   if eof and _N_>0 then call symput('diffVar', 'Y');
16312      run;
MPRINT(EM_GETACTIONSTATUS):   run;

NOTE: There were 0 observations read from the data set WORK.DIFFDS.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
      

16313      %let em_Train = N;
16314      %let em_Score = N;
16315      %let em_Report = N;
16316      %let em_Run = N;
NOTE: PROCEDURE DISPLAY used (Total process time):
      real time           0.09 seconds
      cpu time            0.07 seconds
      

MPRINT(EM_GETACTIONSTATUS):    
MPRINT(EM_DIAGRAM):  ;

Node "Filter" has already run. 
Node "Filter" succeeded. 
16317      data _null_;
MPRINT(EM_DIAGRAM):    data _null_;
16318      file emwipmsg;
MPRINT(EM_DIAGRAM):   file emwipmsg;
16319      put '<Node Id="Filter" Event="Complete" Pid="2144" Gridid=""/>';
MPRINT(EM_DIAGRAM):   put '<Node Id="Filter" Event="Complete" Pid="2144" Gridid=""/>';
16320      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: The file EMWIPMSG is:
      Local Host Name=C2-Complab-38,
      Local Host IP addr=10.21.104.163,
      Peer Hostname Name=C2-Complab-38.cencol.ca,
      Peer IP addr=127.0.0.1,Peer Name=N/A,
      Peer Portno=3478,Lrecl=32767,Recfm=Variable

NOTE: 1 record was written to the file EMWIPMSG.
      The minimum record length was 57.
      The maximum record length was 57.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

Traverser: WaitingNode "TREE2" 
Traverser: WaitingNode "TREE" 
Traverser: WaitingNode "TREE3" 
Traverser: WaitingNode "NEURAL" 
Traverser: WaitingNode "NEURAL4" 
Traverser: WaitingNode "NEURAL3" 
Traverser: WaitingNode "NEURAL2" 
Traverser: WaitingNode "REG" 
Traverser: WaitingNode "NEURAL11" 
Traverser: WaitingNode "NEURAL5" 
Traverser: WaitingNode "REG2" 
Traverser: WaitingNode "NEURAL6" 
Traverser: WaitingNode "NEURAL13" 
Traverser: WaitingNode "NEURAL8" 
Traverser: WaitingNode "REG3" 
Traverser: WaitingNode "NEURAL7" 
Traverser: WaitingNode "NEURAL14" 
Traverser: WaitingNode "NEURAL9" 
Traverser: WaitingNode "IMPT" 
Traverser: WaitingNode "REPL" 
Traverser: WaitingNode "TRANS" 
Traverser: WaitingNode "REPL2" 
Traverser: WaitingNode "REG4" 
Traverser: WaitingNode "NEURAL10" 
Traverser: WaitingNode "MDLCOMP" 
traverser_readyNode_note 
16321      data _null_;
MPRINT(EM_DIAGRAM):    data _null_;
16322      file emwipmsg;
MPRINT(EM_DIAGRAM):   file emwipmsg;
16323      put '<Node Id="Part" Event="Run" Pid="2144" Gridid=""/>';
MPRINT(EM_DIAGRAM):   put '<Node Id="Part" Event="Run" Pid="2144" Gridid=""/>';
16324      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: The file EMWIPMSG is:
      Local Host Name=C2-Complab-38,
      Local Host IP addr=10.21.104.163,
      Peer Hostname Name=C2-Complab-38.cencol.ca,
      Peer IP addr=127.0.0.1,Peer Name=N/A,
      Peer Portno=3478,Lrecl=32767,Recfm=Variable

NOTE: 1 record was written to the file EMWIPMSG.
      The minimum record length was 50.
      The maximum record length was 50.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

16325      %let emloopmode =;
*------------------------------------------------------------* 
* 
* Part : Beginning update before running 
* datetime : 16APR2021:13:01:30 
* 
*------------------------------------------------------------* 
MPRINT(EM_DIAGRAM):     data WORK.Part_FILTERSET;
MPRINT(EM_DIAGRAM):   length PORT $32 USE $1;
MPRINT(EM_DIAGRAM):   DROP DELTACODE APPLYDELTA APPLYSCORE IMPORTPORT;
MPRINT(EM_DIAGRAM):   set EMWS1.Filter_exportSet ;
MPRINT(EM_DIAGRAM):   PORT = '';
MPRINT(EM_DIAGRAM):   USE = '';
MPRINT(EM_DIAGRAM):   where role in( "RAW" "TRAIN" "DOCUMENT" ) and EXPORT = 'Y' ;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _emtool_ 'H:\746\Decision Tree test\Workspaces\EMWS1\Part\PROPERTIES.xml' encoding="UTF-8" NOBOM;
16344      %let _HPDMGRIDHOST=;
16345      %let _HPDMGRIDINSTALLLOC=;
16346      %let _HPDMGRIDDATASERVER=;
16347      %hpdm_gridSetOPtions;
MPRINT(EM_DIAGRAM):   
MPRINT(HPDM_GRIDSETOPTIONS):   data _null_;
MPRINT(HPDM_GRIDSETOPTIONS):   length optionString string $2000;
MPRINT(HPDM_GRIDSETOPTIONS):   optionString = reverse(getoption('SET'));
MPRINT(HPDM_GRIDSETOPTIONS):   index = index(optionString, reverse('GRIDHOST'));
MPRINT(HPDM_GRIDSETOPTIONS):   if index then do;
MPRINT(HPDM_GRIDSETOPTIONS):   string = reverse(substr(optionString, 1, index-4));
MPRINT(HPDM_GRIDSETOPTIONS):   host = '"'!!strip(tranwrd(scan(string, 1, ']'), '"', ''))!!'"';
MPRINT(HPDM_GRIDSETOPTIONS):   call symput('_HPDMGRIDHOST', strip(host));
MPRINT(HPDM_GRIDSETOPTIONS):   end;
MPRINT(HPDM_GRIDSETOPTIONS):   index = index(optionString, reverse('GRIDINSTALLLOC'));
MPRINT(HPDM_GRIDSETOPTIONS):   if index then do;
MPRINT(HPDM_GRIDSETOPTIONS):   string = reverse(substr(optionString, 1, index-4));
MPRINT(HPDM_GRIDSETOPTIONS):   install = '"'!!strip(tranwrd(scan(string, 1, ']'), '"', ''))!!'"';
MPRINT(HPDM_GRIDSETOPTIONS):   call symput('_HPDMGRIDINSTALLLOC', strip(install));
MPRINT(HPDM_GRIDSETOPTIONS):   end;
MPRINT(HPDM_GRIDSETOPTIONS):   index = index(optionString, reverse('GRIDDATASERVER'));
MPRINT(HPDM_GRIDSETOPTIONS):   if index then do;
MPRINT(HPDM_GRIDSETOPTIONS):   string = reverse(substr(optionString, 1, index-4));
MPRINT(HPDM_GRIDSETOPTIONS):   server = '"'!!strip(tranwrd(scan(string, 1, ']'), '"', ''))!!'"';
MPRINT(HPDM_GRIDSETOPTIONS):   call symput('_HPDMGRIDDATASERVER', strip(server));
MPRINT(HPDM_GRIDSETOPTIONS):   end;
MPRINT(HPDM_GRIDSETOPTIONS):   run;

NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(EM_DIAGRAM):  ;

*------------------------------------------------------------* 
* 
* Part : End update 
* datetime : 16APR2021:13:01:30 
* 
*------------------------------------------------------------* 
16348      %em_getactionstatus(emlib =EMWS1, nodeid=Part);
MPRINT(EM_DIAGRAM):   
MPRINT(EM_GETACTIONSTATUS):   proc display c=sashelp.emutil.getactionstatus.scl;
MPRINT(EM_GETACTIONSTATUS):   run;

16349      %let em_Train = N;
16350      %let em_Score = N;
16351      %let em_Report = N;
16352      %let em_Run = N;
NOTE: PROCEDURE DISPLAY used (Total process time):
      real time           0.06 seconds
      cpu time            0.00 seconds
      

MPRINT(EM_GETACTIONSTATUS):   
MPRINT(EM_DIAGRAM):  ;

Node "Part" has already run. 
Node "Part" succeeded. 
16353      data _null_;
MPRINT(EM_DIAGRAM):    data _null_;
16354      file emwipmsg;
MPRINT(EM_DIAGRAM):   file emwipmsg;
16355      put '<Node Id="Part" Event="Complete" Pid="2144" Gridid=""/>';
MPRINT(EM_DIAGRAM):   put '<Node Id="Part" Event="Complete" Pid="2144" Gridid=""/>';
16356      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: The file EMWIPMSG is:
      Local Host Name=C2-Complab-38,
      Local Host IP addr=10.21.104.163,
      Peer Hostname Name=C2-Complab-38.cencol.ca,
      Peer IP addr=127.0.0.1,Peer Name=N/A,
      Peer Portno=3478,Lrecl=32767,Recfm=Variable

NOTE: 1 record was written to the file EMWIPMSG.
      The minimum record length was 55.
      The maximum record length was 55.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

Traverser: WaitingNode "NEURAL" 
Traverser: WaitingNode "NEURAL4" 
Traverser: WaitingNode "NEURAL3" 
Traverser: WaitingNode "NEURAL2" 
Traverser: WaitingNode "REG" 
Traverser: WaitingNode "NEURAL11" 
Traverser: WaitingNode "NEURAL5" 
Traverser: WaitingNode "REG2" 
Traverser: WaitingNode "NEURAL6" 
Traverser: WaitingNode "NEURAL13" 
Traverser: WaitingNode "NEURAL8" 
Traverser: WaitingNode "REG3" 
Traverser: WaitingNode "NEURAL7" 
Traverser: WaitingNode "NEURAL14" 
Traverser: WaitingNode "NEURAL9" 
Traverser: WaitingNode "REPL" 
Traverser: WaitingNode "TRANS" 
Traverser: WaitingNode "REPL2" 
Traverser: WaitingNode "REG4" 
Traverser: WaitingNode "NEURAL10" 
Traverser: WaitingNode "MDLCOMP" 
traverser_readyNode_note 
traverser_readyNode_note 
traverser_readyNode_note 
traverser_readyNode_note 
16357      data _null_;
MPRINT(EM_DIAGRAM):    data _null_;
16358      file emwipmsg;
MPRINT(EM_DIAGRAM):   file emwipmsg;
16359      put '<Node Id="Tree2" Event="Run" Pid="2144" Gridid=""/>';
MPRINT(EM_DIAGRAM):   put '<Node Id="Tree2" Event="Run" Pid="2144" Gridid=""/>';
16360      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: The file EMWIPMSG is:
      Local Host Name=C2-Complab-38,
      Local Host IP addr=10.21.104.163,
      Peer Hostname Name=C2-Complab-38.cencol.ca,
      Peer IP addr=127.0.0.1,Peer Name=N/A,
      Peer Portno=3478,Lrecl=32767,Recfm=Variable

NOTE: 1 record was written to the file EMWIPMSG.
      The minimum record length was 51.
      The maximum record length was 51.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
      

16361      %let emloopmode =;
*------------------------------------------------------------* 
* 
* Tree2 : Beginning update before running 
* datetime : 16APR2021:13:01:35 
* 
*------------------------------------------------------------* 
MPRINT(EM_DIAGRAM):     data WORK.Tree2_FILTERSET;
MPRINT(EM_DIAGRAM):   length PORT $32 USE $1;
MPRINT(EM_DIAGRAM):   DROP DELTACODE APPLYDELTA APPLYSCORE IMPORTPORT;
MPRINT(EM_DIAGRAM):   set EMWS1.Part_exportSet ;
MPRINT(EM_DIAGRAM):   PORT = '';
MPRINT(EM_DIAGRAM):   USE = '';
MPRINT(EM_DIAGRAM):   where role in( "RAW" "TRAIN" "VALIDATE" "TEST" "SCORE" "TRANSACTION" "DOCUMENT" "RULES" "REPORTFIT" "RANK" "SCOREDIST" "ESTIMATE" "TREE" "CLUSSTAT" "CLUSMEAN" "VARMAP" ) and EXPORT = 'Y' ;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    proc datasets lib=work nolist;
MPRINT(EM_DIAGRAM):   modify Risk(type=PROFIT label= Risk);
MPRINT(EM_DIAGRAM):   label DECISION1= "1";
MPRINT(EM_DIAGRAM):   label DECISION2= "0";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   quit;
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Tree2: Generation of macros and macro variables;
MPRINT(EM_DIAGRAM):   * To see the code generated, set the EM_DEBUG macro variable to SOURCE or _ALL_;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Tree2: EM Macro Variables and Macros;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   * System Macro Variables;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   length string $2000;
MPRINT(EM_DIAGRAM):   string = 'Decision Tree test';
MPRINT(EM_DIAGRAM):   call symput('EM_PROJECTNAME', trim(string));
MPRINT(EM_DIAGRAM):   string = 'Decision Tree';
MPRINT(EM_DIAGRAM):   call symput('EM_WSNAME', trim(string));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   * Properties Macro Variables ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Files Macro Variables;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Import Macro Variables;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Export Macro Variables;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Decision Macro Variables;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   filename temp catalog 'sashelp.emutil.em_decdata.source';
MPRINT(EM_DIAGRAM):   filename temp;
MPRINT(EM_DECDATA):   proc display cat=sashelp.emutil.makedecdata.scl;
MPRINT(EM_DECDATA):   run;
MPRINT(EM_DECDATA):   *------------------------------------------------------------*;
MPRINT(EM_DECDATA):   * Tree2: Create decision matrix;
MPRINT(EM_DECDATA):   *------------------------------------------------------------*;
MPRINT(EM_DECDATA):   data WORK.Risk(label="Risk");
MPRINT(EM_DECDATA):   length Risk $ 32 COUNT 8 DATAPRIOR 8 TRAINPRIOR 8 DECPRIOR 8 DECISION1 8 DECISION2 8 ;
MPRINT(EM_DECDATA):   label COUNT= "Level Counts" DATAPRIOR= "Data Proportions" TRAINPRIOR= "Training Proportions" DECPRIOR= "Decision Priors" DECISION1= "1" DECISION2= "0" ;
MPRINT(EM_DECDATA):   Risk="1";
MPRINT(EM_DECDATA):   COUNT=54;
MPRINT(EM_DECDATA):   DATAPRIOR=0.54;
MPRINT(EM_DECDATA):   TRAINPRIOR=0.54;
MPRINT(EM_DECDATA):   DECPRIOR=.;
MPRINT(EM_DECDATA):   DECISION1=1;
MPRINT(EM_DECDATA):   DECISION2=0;
MPRINT(EM_DECDATA):   output;
MPRINT(EM_DECDATA):   Risk="0";
MPRINT(EM_DECDATA):   COUNT=46;
MPRINT(EM_DECDATA):   DATAPRIOR=0.46;
MPRINT(EM_DECDATA):   TRAINPRIOR=0.46;
MPRINT(EM_DECDATA):   DECPRIOR=.;
MPRINT(EM_DECDATA):   DECISION1=0;
MPRINT(EM_DECDATA):   DECISION2=1;
MPRINT(EM_DECDATA):   output;
MPRINT(EM_DECDATA):   ;
MPRINT(EM_DECDATA):   run;
MPRINT(EM_DECDATA):   proc datasets lib=work nolist;
MPRINT(EM_DECDATA):   modify Risk(type=PROFIT label= Risk);
MPRINT(EM_DECDATA):   label DECISION1= '1';
MPRINT(EM_DECDATA):   label DECISION2= '0';
MPRINT(EM_DECDATA):   run;
MPRINT(EM_DECDATA):   quit;
MPRINT(EM_DECDATA):   
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   proc datasets lib=work nolist;
MPRINT(EM_DIAGRAM):   modify Risk(type=PROFIT label= Risk);
MPRINT(EM_DIAGRAM):   label DECISION1= "1";
MPRINT(EM_DIAGRAM):   label DECISION2= "0";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   quit;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Statement Macro Variables;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   set EMWS1.FIMPORT_EMINFO;
MPRINT(EM_DIAGRAM):   where key in('HPDMSAMPLE', 'IDSTABLE');
MPRINT(EM_DIAGRAM):   if key = 'HPDMSAMPLE' then call symput('_ForceGrid', '1');
MPRINT(EM_DIAGRAM):   else call symput('_IDS_TABLE', DATA);
MPRINT(EM_DIAGRAM):   run;
MPRINT(HPDM_PERFORMANCE):  ;
PERFORMANCE  DETAILS
MPRINT(EM_DIAGRAM):  ;
16766      data EM_TARGETDECINFO;
MPRINT(EM_DIAGRAM):    data EM_TARGETDECINFO;
16767      length TARGET $32 DECDATA DECMETA $43;
MPRINT(EM_DIAGRAM):   length TARGET $32 DECDATA DECMETA $43;
16768      TARGET="Risk";
MPRINT(EM_DIAGRAM):   TARGET="Risk";
16769      DECDATA="EMWS1.Tree2_Risk_DD";
MPRINT(EM_DIAGRAM):   DECDATA="EMWS1.Tree2_Risk_DD";
16770      DECMETA="EMWS1.Tree2_Risk_DM";
MPRINT(EM_DIAGRAM):   DECMETA="EMWS1.Tree2_Risk_DM";
16771      output;
MPRINT(EM_DIAGRAM):   output;
16772      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: The data set WORK.EM_TARGETDECINFO has 1 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

16773      %let emexceptionString =;
16774      %let EMEXCEPTIONSTRING=;
16775      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
16776      * UPDATE: Tree2;
MPRINT(EM_DIAGRAM):   * UPDATE: Tree2;
16777      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
16778      %let EM_ACTION = UPDATE;
16779      %let syscc = 0;
16780      %macro main;
16781      
16782        %if %upcase(&EM_ACTION) = CREATE %then %do;
16783          filename temp catalog 'sashelp.emmodl.tree_create.source';
16784          %include temp;
16785          filename temp;
16786      
16787          %em_tree_create;
16788        %end;
16789      
16790         %else
16791         %if %upcase(&EM_ACTION) = TRAIN %then %do;
16792      
16793             filename temp catalog 'sashelp.emmodl.tree_train.source';
16794             %include temp;
16795             filename temp;
16796             %em_tree_train;
16797         %end;
16798      
16799        %else
16800        %if %upcase(&EM_ACTION) = SCORE %then %do;
16801          filename temp catalog 'sashelp.emmodl.tree_score.source';
16802          %include temp;
16803          filename temp;
16804      
16805          %em_tree_score;
16806      
16807        %end;
16808      
16809        %else
16810        %if %upcase(&EM_ACTION) = REPORT %then %do;
16811      
16812             filename temp catalog 'sashelp.emmodl.tree_report.source';
16813             %include temp;
16814             filename temp;
16815      
16816             %em_tree_report;
16817         %end;
16818      
16819        %else
16820        %if %upcase(&EM_ACTION) = OPENINT %then %do;
16821      
16822             filename temp catalog 'sashelp.emmodl.tree_actions.source';
16823             %include temp;
16824             filename temp;
16825             %EM_TREE_OPENTREEVIEWER;
16826      
16827         %end;
16828      
16829        %else
16830        %if %upcase(&EM_ACTION) = CLOSEINT %then %do;
16831      
16832             filename temp catalog 'sashelp.emmodl.tree_actions.source';
16833             %include temp;
16834             filename temp;
16835             %EM_TREE_CLOSETREEVIEWER;
16836      
16837         %end;
16838      
16839      
16840         %doendm:
16841      %mend main;
16842      
16843      %main;
MPRINT(EM_DIAGRAM):    
MPRINT(EM_DIAGRAM):  ;
16844      
16845      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
16846      * End UPDATE: Tree2;
MPRINT(EM_DIAGRAM):   * End UPDATE: Tree2;
16847      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;

16848      %em_delMacro;
MPRINT(EM_DIAGRAM):   
MPRINT(EM_DIAGRAM):  ;

MPRINT(EM_DIAGRAM):    filename _emtool_ 'H:\746\Decision Tree test\Workspaces\EMWS1\Tree2\PROPERTIES.xml' encoding="UTF-8" NOBOM;
16850      %let _HPDMGRIDHOST=;
16851      %let _HPDMGRIDINSTALLLOC=;
16852      %let _HPDMGRIDDATASERVER=;
16853      %hpdm_gridSetOPtions;
MPRINT(EM_DIAGRAM):   
MPRINT(HPDM_GRIDSETOPTIONS):   data _null_;
MPRINT(HPDM_GRIDSETOPTIONS):   length optionString string $2000;
MPRINT(HPDM_GRIDSETOPTIONS):   optionString = reverse(getoption('SET'));
MPRINT(HPDM_GRIDSETOPTIONS):   index = index(optionString, reverse('GRIDHOST'));
MPRINT(HPDM_GRIDSETOPTIONS):   if index then do;
MPRINT(HPDM_GRIDSETOPTIONS):   string = reverse(substr(optionString, 1, index-4));
MPRINT(HPDM_GRIDSETOPTIONS):   host = '"'!!strip(tranwrd(scan(string, 1, ']'), '"', ''))!!'"';
MPRINT(HPDM_GRIDSETOPTIONS):   call symput('_HPDMGRIDHOST', strip(host));
MPRINT(HPDM_GRIDSETOPTIONS):   end;
MPRINT(HPDM_GRIDSETOPTIONS):   index = index(optionString, reverse('GRIDINSTALLLOC'));
MPRINT(HPDM_GRIDSETOPTIONS):   if index then do;
MPRINT(HPDM_GRIDSETOPTIONS):   string = reverse(substr(optionString, 1, index-4));
MPRINT(HPDM_GRIDSETOPTIONS):   install = '"'!!strip(tranwrd(scan(string, 1, ']'), '"', ''))!!'"';
MPRINT(HPDM_GRIDSETOPTIONS):   call symput('_HPDMGRIDINSTALLLOC', strip(install));
MPRINT(HPDM_GRIDSETOPTIONS):   end;
MPRINT(HPDM_GRIDSETOPTIONS):   index = index(optionString, reverse('GRIDDATASERVER'));
MPRINT(HPDM_GRIDSETOPTIONS):   if index then do;
MPRINT(HPDM_GRIDSETOPTIONS):   string = reverse(substr(optionString, 1, index-4));
MPRINT(HPDM_GRIDSETOPTIONS):   server = '"'!!strip(tranwrd(scan(string, 1, ']'), '"', ''))!!'"';
MPRINT(HPDM_GRIDSETOPTIONS):   call symput('_HPDMGRIDDATASERVER', strip(server));
MPRINT(HPDM_GRIDSETOPTIONS):   end;
MPRINT(HPDM_GRIDSETOPTIONS):   run;

NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(EM_DIAGRAM):  ;

*------------------------------------------------------------* 
* 
* Tree2 : End update 
* datetime : 16APR2021:13:01:36 
* 
*------------------------------------------------------------* 
16854      %em_getactionstatus(emlib =EMWS1, nodeid=Tree2);
MPRINT(EM_DIAGRAM):   
MPRINT(EM_GETACTIONSTATUS):   proc display c=sashelp.emutil.getactionstatus.scl;
MPRINT(EM_GETACTIONSTATUS):   run;

16855      %let em_filemodtime=;
16856      data _null_;
MPRINT(EM_GETACTIONSTATUS):   data _null_;
16857      format modate best.;
MPRINT(EM_GETACTIONSTATUS):   format modate best.;
16858      set sashelp.Vextfl;
MPRINT(EM_GETACTIONSTATUS):   set sashelp.Vextfl;
16859      where fileref eq "#LN00193";
MPRINT(EM_GETACTIONSTATUS):   where fileref eq "#LN00193";
16860      call symput('EM_FILEMODTIME', put(modate, best.));
MPRINT(EM_GETACTIONSTATUS):   call symput('EM_FILEMODTIME', put(modate, best.));
16861      run;
MPRINT(EM_GETACTIONSTATUS):   run;

NOTE: There were 1 observations read from the data set SASHELP.VEXTFL.
      WHERE fileref='#LN00193';
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

16862      %symdel em_filemodtime;
WARNING: Attempt to delete macro variable EM_FILEMODTIME failed. Variable not found.
16863      %let em_Train = N;
16864      %let em_Score = N;
16865      %let em_Report = N;
16866      %let em_Run = N;
NOTE: PROCEDURE DISPLAY used (Total process time):
      real time           0.06 seconds
      cpu time            0.03 seconds
      

MPRINT(EM_GETACTIONSTATUS):     
MPRINT(EM_DIAGRAM):  ;

Node "Tree2" has already run. 
Node "Tree2" succeeded. 
16867      data _null_;
MPRINT(EM_DIAGRAM):    data _null_;
16868      file emwipmsg;
MPRINT(EM_DIAGRAM):   file emwipmsg;
16869      put '<Node Id="Tree2" Event="Complete" Pid="2144" Gridid=""/>';
MPRINT(EM_DIAGRAM):   put '<Node Id="Tree2" Event="Complete" Pid="2144" Gridid=""/>';
16870      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: The file EMWIPMSG is:
      Local Host Name=C2-Complab-38,
      Local Host IP addr=10.21.104.163,
      Peer Hostname Name=C2-Complab-38.cencol.ca,
      Peer IP addr=127.0.0.1,Peer Name=N/A,
      Peer Portno=3478,Lrecl=32767,Recfm=Variable

NOTE: 1 record was written to the file EMWIPMSG.
      The minimum record length was 56.
      The maximum record length was 56.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

Traverser: WaitingNode "NEURAL" 
Traverser: WaitingNode "NEURAL4" 
Traverser: WaitingNode "NEURAL3" 
Traverser: WaitingNode "NEURAL2" 
Traverser: WaitingNode "REG" 
Traverser: WaitingNode "NEURAL11" 
Traverser: WaitingNode "NEURAL5" 
Traverser: WaitingNode "REG2" 
Traverser: WaitingNode "NEURAL6" 
Traverser: WaitingNode "NEURAL13" 
Traverser: WaitingNode "NEURAL8" 
Traverser: WaitingNode "REG3" 
Traverser: WaitingNode "NEURAL7" 
Traverser: WaitingNode "NEURAL14" 
Traverser: WaitingNode "NEURAL9" 
Traverser: WaitingNode "REPL" 
Traverser: WaitingNode "TRANS" 
Traverser: WaitingNode "REPL2" 
Traverser: WaitingNode "REG4" 
Traverser: WaitingNode "NEURAL10" 
Traverser: WaitingNode "MDLCOMP" 
traverser_readyNode_note 
traverser_readyNode_note 
traverser_readyNode_note 
16871      data _null_;
MPRINT(EM_DIAGRAM):    data _null_;
16872      file emwipmsg;
MPRINT(EM_DIAGRAM):   file emwipmsg;
16873      put '<Node Id="Impt" Event="Run" Pid="2144" Gridid=""/>';
MPRINT(EM_DIAGRAM):   put '<Node Id="Impt" Event="Run" Pid="2144" Gridid=""/>';
16874      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: The file EMWIPMSG is:
      Local Host Name=C2-Complab-38,
      Local Host IP addr=10.21.104.163,
      Peer Hostname Name=C2-Complab-38.cencol.ca,
      Peer IP addr=127.0.0.1,Peer Name=N/A,
      Peer Portno=3478,Lrecl=32767,Recfm=Variable

NOTE: 1 record was written to the file EMWIPMSG.
      The minimum record length was 50.
      The maximum record length was 50.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

16875      %let emloopmode =;
*------------------------------------------------------------* 
* 
* Impt : Beginning update before running 
* datetime : 16APR2021:13:01:37 
* 
*------------------------------------------------------------* 
MPRINT(EM_DIAGRAM):     data WORK.Impt_FILTERSET;
MPRINT(EM_DIAGRAM):   length PORT $32 USE $1;
MPRINT(EM_DIAGRAM):   DROP DELTACODE APPLYDELTA APPLYSCORE IMPORTPORT;
MPRINT(EM_DIAGRAM):   set EMWS1.Part_exportSet ;
MPRINT(EM_DIAGRAM):   PORT = '';
MPRINT(EM_DIAGRAM):   USE = '';
MPRINT(EM_DIAGRAM):   where role in( "RAW" "TRAIN" "VALIDATE" "TEST" ) and EXPORT = 'Y' ;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _emtool_ 'H:\746\Decision Tree test\Workspaces\EMWS1\Impt\PROPERTIES.xml' encoding="UTF-8" NOBOM;
16895      %let _HPDMGRIDHOST=;
16896      %let _HPDMGRIDINSTALLLOC=;
16897      %let _HPDMGRIDDATASERVER=;
16898      %hpdm_gridSetOPtions;
MPRINT(EM_DIAGRAM):   
MPRINT(HPDM_GRIDSETOPTIONS):   data _null_;
MPRINT(HPDM_GRIDSETOPTIONS):   length optionString string $2000;
MPRINT(HPDM_GRIDSETOPTIONS):   optionString = reverse(getoption('SET'));
MPRINT(HPDM_GRIDSETOPTIONS):   index = index(optionString, reverse('GRIDHOST'));
MPRINT(HPDM_GRIDSETOPTIONS):   if index then do;
MPRINT(HPDM_GRIDSETOPTIONS):   string = reverse(substr(optionString, 1, index-4));
MPRINT(HPDM_GRIDSETOPTIONS):   host = '"'!!strip(tranwrd(scan(string, 1, ']'), '"', ''))!!'"';
MPRINT(HPDM_GRIDSETOPTIONS):   call symput('_HPDMGRIDHOST', strip(host));
MPRINT(HPDM_GRIDSETOPTIONS):   end;
MPRINT(HPDM_GRIDSETOPTIONS):   index = index(optionString, reverse('GRIDINSTALLLOC'));
MPRINT(HPDM_GRIDSETOPTIONS):   if index then do;
MPRINT(HPDM_GRIDSETOPTIONS):   string = reverse(substr(optionString, 1, index-4));
MPRINT(HPDM_GRIDSETOPTIONS):   install = '"'!!strip(tranwrd(scan(string, 1, ']'), '"', ''))!!'"';
MPRINT(HPDM_GRIDSETOPTIONS):   call symput('_HPDMGRIDINSTALLLOC', strip(install));
MPRINT(HPDM_GRIDSETOPTIONS):   end;
MPRINT(HPDM_GRIDSETOPTIONS):   index = index(optionString, reverse('GRIDDATASERVER'));
MPRINT(HPDM_GRIDSETOPTIONS):   if index then do;
MPRINT(HPDM_GRIDSETOPTIONS):   string = reverse(substr(optionString, 1, index-4));
MPRINT(HPDM_GRIDSETOPTIONS):   server = '"'!!strip(tranwrd(scan(string, 1, ']'), '"', ''))!!'"';
MPRINT(HPDM_GRIDSETOPTIONS):   call symput('_HPDMGRIDDATASERVER', strip(server));
MPRINT(HPDM_GRIDSETOPTIONS):   end;
MPRINT(HPDM_GRIDSETOPTIONS):   run;

NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(EM_DIAGRAM):  ;

*------------------------------------------------------------* 
* 
* Impt : End update 
* datetime : 16APR2021:13:01:37 
* 
*------------------------------------------------------------* 
16899      %em_getactionstatus(emlib =EMWS1, nodeid=Impt);
MPRINT(EM_DIAGRAM):   
MPRINT(EM_GETACTIONSTATUS):   proc display c=sashelp.emutil.getactionstatus.scl;
MPRINT(EM_GETACTIONSTATUS):   run;

16900      %let em_Train = N;
16901      %let em_Score = N;
16902      %let em_Report = N;
16903      %let em_Run = N;
NOTE: PROCEDURE DISPLAY used (Total process time):
      real time           0.07 seconds
      cpu time            0.00 seconds
      

MPRINT(EM_GETACTIONSTATUS):   
MPRINT(EM_DIAGRAM):  ;

Node "Impt" has already run. 
Node "Impt" succeeded. 
16904      data _null_;
MPRINT(EM_DIAGRAM):    data _null_;
16905      file emwipmsg;
MPRINT(EM_DIAGRAM):   file emwipmsg;
16906      put '<Node Id="Impt" Event="Complete" Pid="2144" Gridid=""/>';
MPRINT(EM_DIAGRAM):   put '<Node Id="Impt" Event="Complete" Pid="2144" Gridid=""/>';
16907      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: The file EMWIPMSG is:
      Local Host Name=C2-Complab-38,
      Local Host IP addr=10.21.104.163,
      Peer Hostname Name=C2-Complab-38.cencol.ca,
      Peer IP addr=127.0.0.1,Peer Name=N/A,
      Peer Portno=3478,Lrecl=32767,Recfm=Variable

NOTE: 1 record was written to the file EMWIPMSG.
      The minimum record length was 55.
      The maximum record length was 55.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

Traverser: WaitingNode "NEURAL4" 
Traverser: WaitingNode "NEURAL3" 
Traverser: WaitingNode "NEURAL2" 
Traverser: WaitingNode "REG" 
Traverser: WaitingNode "NEURAL11" 
Traverser: WaitingNode "NEURAL5" 
Traverser: WaitingNode "REG2" 
Traverser: WaitingNode "NEURAL6" 
Traverser: WaitingNode "NEURAL13" 
Traverser: WaitingNode "NEURAL8" 
Traverser: WaitingNode "REG3" 
Traverser: WaitingNode "NEURAL7" 
Traverser: WaitingNode "NEURAL14" 
Traverser: WaitingNode "NEURAL9" 
Traverser: WaitingNode "TRANS" 
Traverser: WaitingNode "REPL2" 
Traverser: WaitingNode "REG4" 
Traverser: WaitingNode "NEURAL10" 
Traverser: WaitingNode "MDLCOMP" 
traverser_readyNode_note 
traverser_readyNode_note 
traverser_readyNode_note 
traverser_readyNode_note 
16908      data _null_;
MPRINT(EM_DIAGRAM):    data _null_;
16909      file emwipmsg;
MPRINT(EM_DIAGRAM):   file emwipmsg;
16910      put '<Node Id="Tree" Event="Run" Pid="2144" Gridid=""/>';
MPRINT(EM_DIAGRAM):   put '<Node Id="Tree" Event="Run" Pid="2144" Gridid=""/>';
16911      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: The file EMWIPMSG is:
      Local Host Name=C2-Complab-38,
      Local Host IP addr=10.21.104.163,
      Peer Hostname Name=C2-Complab-38.cencol.ca,
      Peer IP addr=127.0.0.1,Peer Name=N/A,
      Peer Portno=3478,Lrecl=32767,Recfm=Variable

NOTE: 1 record was written to the file EMWIPMSG.
      The minimum record length was 50.
      The maximum record length was 50.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

16912      %let emloopmode =;
*------------------------------------------------------------* 
* 
* Tree : Beginning update before running 
* datetime : 16APR2021:13:01:38 
* 
*------------------------------------------------------------* 
MPRINT(EM_DIAGRAM):     data WORK.Tree_FILTERSET;
MPRINT(EM_DIAGRAM):   length PORT $32 USE $1;
MPRINT(EM_DIAGRAM):   DROP DELTACODE APPLYDELTA APPLYSCORE IMPORTPORT;
MPRINT(EM_DIAGRAM):   set EMWS1.Part_exportSet ;
MPRINT(EM_DIAGRAM):   PORT = '';
MPRINT(EM_DIAGRAM):   USE = '';
MPRINT(EM_DIAGRAM):   where role in( "RAW" "TRAIN" "VALIDATE" "TEST" "SCORE" "TRANSACTION" "DOCUMENT" "RULES" "REPORTFIT" "RANK" "SCOREDIST" "ESTIMATE" "TREE" "CLUSSTAT" "CLUSMEAN" "VARMAP" ) and EXPORT = 'Y' ;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    proc datasets lib=work nolist;
MPRINT(EM_DIAGRAM):   modify Risk(type=PROFIT label= Risk);
MPRINT(EM_DIAGRAM):   label DECISION1= "1";
MPRINT(EM_DIAGRAM):   label DECISION2= "0";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   quit;
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Tree: Generation of macros and macro variables;
MPRINT(EM_DIAGRAM):   * To see the code generated, set the EM_DEBUG macro variable to SOURCE or _ALL_;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Tree: EM Macro Variables and Macros;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   * System Macro Variables;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   length string $2000;
MPRINT(EM_DIAGRAM):   string = 'Decision Tree test';
MPRINT(EM_DIAGRAM):   call symput('EM_PROJECTNAME', trim(string));
MPRINT(EM_DIAGRAM):   string = 'Decision Tree';
MPRINT(EM_DIAGRAM):   call symput('EM_WSNAME', trim(string));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   * Properties Macro Variables ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Files Macro Variables;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Import Macro Variables;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Export Macro Variables;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Decision Macro Variables;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   filename temp catalog 'sashelp.emutil.em_decdata.source';
MPRINT(EM_DIAGRAM):   filename temp;
MPRINT(EM_DECDATA):   proc display cat=sashelp.emutil.makedecdata.scl;
MPRINT(EM_DECDATA):   run;
MPRINT(EM_DECDATA):   *------------------------------------------------------------*;
MPRINT(EM_DECDATA):   * Tree: Create decision matrix;
MPRINT(EM_DECDATA):   *------------------------------------------------------------*;
MPRINT(EM_DECDATA):   data WORK.Risk;
MPRINT(EM_DECDATA):   length Risk $ 32 COUNT 8 DATAPRIOR 8 TRAINPRIOR 8 DECPRIOR 8 DECISION1 8 DECISION2 8 ;
MPRINT(EM_DECDATA):   label COUNT= "Level Counts" DATAPRIOR= "Data Proportions" TRAINPRIOR= "Training Proportions" DECPRIOR= "Decision Priors" DECISION1= "1" DECISION2= "0" ;
MPRINT(EM_DECDATA):   format COUNT 10. ;
MPRINT(EM_DECDATA):   Risk="1";
MPRINT(EM_DECDATA):   COUNT=54;
MPRINT(EM_DECDATA):   DATAPRIOR=0.55445544554455;
MPRINT(EM_DECDATA):   TRAINPRIOR=0.54;
MPRINT(EM_DECDATA):   DECPRIOR=.;
MPRINT(EM_DECDATA):   DECISION1=1;
MPRINT(EM_DECDATA):   DECISION2=0;
MPRINT(EM_DECDATA):   output;
MPRINT(EM_DECDATA):   Risk="0";
MPRINT(EM_DECDATA):   COUNT=46;
MPRINT(EM_DECDATA):   DATAPRIOR=0.44554455445544;
MPRINT(EM_DECDATA):   TRAINPRIOR=0.46;
MPRINT(EM_DECDATA):   DECPRIOR=.;
MPRINT(EM_DECDATA):   DECISION1=0;
MPRINT(EM_DECDATA):   DECISION2=1;
MPRINT(EM_DECDATA):   output;
MPRINT(EM_DECDATA):   ;
MPRINT(EM_DECDATA):   run;
MPRINT(EM_DECDATA):   proc datasets lib=work nolist;
MPRINT(EM_DECDATA):   modify Risk(type=PROFIT label= Risk);
MPRINT(EM_DECDATA):   label DECISION1= '1';
MPRINT(EM_DECDATA):   label DECISION2= '0';
MPRINT(EM_DECDATA):   run;
MPRINT(EM_DECDATA):   quit;
MPRINT(EM_DECDATA):   
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   proc datasets lib=work nolist;
MPRINT(EM_DIAGRAM):   modify Risk(type=PROFIT label= Risk);
MPRINT(EM_DIAGRAM):   label DECISION1= "1";
MPRINT(EM_DIAGRAM):   label DECISION2= "0";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   quit;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Statement Macro Variables;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   set EMWS1.FIMPORT_EMINFO;
MPRINT(EM_DIAGRAM):   where key in('HPDMSAMPLE', 'IDSTABLE');
MPRINT(EM_DIAGRAM):   if key = 'HPDMSAMPLE' then call symput('_ForceGrid', '1');
MPRINT(EM_DIAGRAM):   else call symput('_IDS_TABLE', DATA);
MPRINT(EM_DIAGRAM):   run;
MPRINT(HPDM_PERFORMANCE):  ;
PERFORMANCE  DETAILS
MPRINT(EM_DIAGRAM):  ;
17324      data EM_TARGETDECINFO;
MPRINT(EM_DIAGRAM):    data EM_TARGETDECINFO;
17325      length TARGET $32 DECDATA DECMETA $43;
MPRINT(EM_DIAGRAM):   length TARGET $32 DECDATA DECMETA $43;
17326      TARGET="Risk";
MPRINT(EM_DIAGRAM):   TARGET="Risk";
17327      DECDATA="EMWS1.Tree_Risk_DD";
MPRINT(EM_DIAGRAM):   DECDATA="EMWS1.Tree_Risk_DD";
17328      DECMETA="EMWS1.Tree_Risk_DM";
MPRINT(EM_DIAGRAM):   DECMETA="EMWS1.Tree_Risk_DM";
17329      output;
MPRINT(EM_DIAGRAM):   output;
17330      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: The data set WORK.EM_TARGETDECINFO has 1 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.02 seconds
      cpu time            0.00 seconds
      

17331      %let emexceptionString =;
17332      %let EMEXCEPTIONSTRING=;
17333      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
17334      * UPDATE: Tree;
MPRINT(EM_DIAGRAM):   * UPDATE: Tree;
17335      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
17336      %let EM_ACTION = UPDATE;
17337      %let syscc = 0;
17338      %macro main;
17339      
17340        %if %upcase(&EM_ACTION) = CREATE %then %do;
17341          filename temp catalog 'sashelp.emmodl.tree_create.source';
17342          %include temp;
17343          filename temp;
17344      
17345          %em_tree_create;
17346        %end;
17347      
17348         %else
17349         %if %upcase(&EM_ACTION) = TRAIN %then %do;
17350      
17351             filename temp catalog 'sashelp.emmodl.tree_train.source';
17352             %include temp;
17353             filename temp;
17354             %em_tree_train;
17355         %end;
17356      
17357        %else
17358        %if %upcase(&EM_ACTION) = SCORE %then %do;
17359          filename temp catalog 'sashelp.emmodl.tree_score.source';
17360          %include temp;
17361          filename temp;
17362      
17363          %em_tree_score;
17364      
17365        %end;
17366      
17367        %else
17368        %if %upcase(&EM_ACTION) = REPORT %then %do;
17369      
17370             filename temp catalog 'sashelp.emmodl.tree_report.source';
17371             %include temp;
17372             filename temp;
17373      
17374             %em_tree_report;
17375         %end;
17376      
17377        %else
17378        %if %upcase(&EM_ACTION) = OPENINT %then %do;
17379      
17380             filename temp catalog 'sashelp.emmodl.tree_actions.source';
17381             %include temp;
17382             filename temp;
17383             %EM_TREE_OPENTREEVIEWER;
17384      
17385         %end;
17386      
17387        %else
17388        %if %upcase(&EM_ACTION) = CLOSEINT %then %do;
17389      
17390             filename temp catalog 'sashelp.emmodl.tree_actions.source';
17391             %include temp;
17392             filename temp;
17393             %EM_TREE_CLOSETREEVIEWER;
17394      
17395         %end;
17396      
17397      
17398         %doendm:
17399      %mend main;
17400      
17401      %main;
MPRINT(EM_DIAGRAM):    
MPRINT(EM_DIAGRAM):  ;
17402      
17403      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
17404      * End UPDATE: Tree;
MPRINT(EM_DIAGRAM):   * End UPDATE: Tree;
17405      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;

17406      %em_delMacro;
MPRINT(EM_DIAGRAM):   
MPRINT(EM_DIAGRAM):  ;

MPRINT(EM_DIAGRAM):    filename _emtool_ 'H:\746\Decision Tree test\Workspaces\EMWS1\Tree\PROPERTIES.xml' encoding="UTF-8" NOBOM;
17408      %let _HPDMGRIDHOST=;
17409      %let _HPDMGRIDINSTALLLOC=;
17410      %let _HPDMGRIDDATASERVER=;
17411      %hpdm_gridSetOPtions;
MPRINT(EM_DIAGRAM):   
MPRINT(HPDM_GRIDSETOPTIONS):   data _null_;
MPRINT(HPDM_GRIDSETOPTIONS):   length optionString string $2000;
MPRINT(HPDM_GRIDSETOPTIONS):   optionString = reverse(getoption('SET'));
MPRINT(HPDM_GRIDSETOPTIONS):   index = index(optionString, reverse('GRIDHOST'));
MPRINT(HPDM_GRIDSETOPTIONS):   if index then do;
MPRINT(HPDM_GRIDSETOPTIONS):   string = reverse(substr(optionString, 1, index-4));
MPRINT(HPDM_GRIDSETOPTIONS):   host = '"'!!strip(tranwrd(scan(string, 1, ']'), '"', ''))!!'"';
MPRINT(HPDM_GRIDSETOPTIONS):   call symput('_HPDMGRIDHOST', strip(host));
MPRINT(HPDM_GRIDSETOPTIONS):   end;
MPRINT(HPDM_GRIDSETOPTIONS):   index = index(optionString, reverse('GRIDINSTALLLOC'));
MPRINT(HPDM_GRIDSETOPTIONS):   if index then do;
MPRINT(HPDM_GRIDSETOPTIONS):   string = reverse(substr(optionString, 1, index-4));
MPRINT(HPDM_GRIDSETOPTIONS):   install = '"'!!strip(tranwrd(scan(string, 1, ']'), '"', ''))!!'"';
MPRINT(HPDM_GRIDSETOPTIONS):   call symput('_HPDMGRIDINSTALLLOC', strip(install));
MPRINT(HPDM_GRIDSETOPTIONS):   end;
MPRINT(HPDM_GRIDSETOPTIONS):   index = index(optionString, reverse('GRIDDATASERVER'));
MPRINT(HPDM_GRIDSETOPTIONS):   if index then do;
MPRINT(HPDM_GRIDSETOPTIONS):   string = reverse(substr(optionString, 1, index-4));
MPRINT(HPDM_GRIDSETOPTIONS):   server = '"'!!strip(tranwrd(scan(string, 1, ']'), '"', ''))!!'"';
MPRINT(HPDM_GRIDSETOPTIONS):   call symput('_HPDMGRIDDATASERVER', strip(server));
MPRINT(HPDM_GRIDSETOPTIONS):   end;
MPRINT(HPDM_GRIDSETOPTIONS):   run;

NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(EM_DIAGRAM):  ;

*------------------------------------------------------------* 
* 
* Tree : End update 
* datetime : 16APR2021:13:01:42 
* 
*------------------------------------------------------------* 
17412      %em_getactionstatus(emlib =EMWS1, nodeid=Tree);
MPRINT(EM_DIAGRAM):   
MPRINT(EM_GETACTIONSTATUS):   proc display c=sashelp.emutil.getactionstatus.scl;
MPRINT(EM_GETACTIONSTATUS):   run;

17413      %let em_filemodtime=;
17414      data _null_;
MPRINT(EM_GETACTIONSTATUS):   data _null_;
17415      format modate best.;
MPRINT(EM_GETACTIONSTATUS):   format modate best.;
17416      set sashelp.Vextfl;
MPRINT(EM_GETACTIONSTATUS):   set sashelp.Vextfl;
17417      where fileref eq "#LN00243";
MPRINT(EM_GETACTIONSTATUS):   where fileref eq "#LN00243";
17418      call symput('EM_FILEMODTIME', put(modate, best.));
MPRINT(EM_GETACTIONSTATUS):   call symput('EM_FILEMODTIME', put(modate, best.));
17419      run;
MPRINT(EM_GETACTIONSTATUS):   run;

NOTE: There were 1 observations read from the data set SASHELP.VEXTFL.
      WHERE fileref='#LN00243';
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

17420      %symdel em_filemodtime;
WARNING: Attempt to delete macro variable EM_FILEMODTIME failed. Variable not found.
17421      %let em_Train = N;
17422      %let em_Score = N;
17423      %let em_Report = N;
17424      %let em_Run = N;
NOTE: PROCEDURE DISPLAY used (Total process time):
      real time           0.08 seconds
      cpu time            0.01 seconds
      

MPRINT(EM_GETACTIONSTATUS):     
MPRINT(EM_DIAGRAM):  ;

Node "Tree" has already run. 
Node "Tree" succeeded. 
17425      data _null_;
MPRINT(EM_DIAGRAM):    data _null_;
17426      file emwipmsg;
MPRINT(EM_DIAGRAM):   file emwipmsg;
17427      put '<Node Id="Tree" Event="Complete" Pid="2144" Gridid=""/>';
MPRINT(EM_DIAGRAM):   put '<Node Id="Tree" Event="Complete" Pid="2144" Gridid=""/>';
17428      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: The file EMWIPMSG is:
      Local Host Name=C2-Complab-38,
      Local Host IP addr=10.21.104.163,
      Peer Hostname Name=C2-Complab-38.cencol.ca,
      Peer IP addr=127.0.0.1,Peer Name=N/A,
      Peer Portno=3478,Lrecl=32767,Recfm=Variable

NOTE: 1 record was written to the file EMWIPMSG.
      The minimum record length was 55.
      The maximum record length was 55.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

Traverser: WaitingNode "NEURAL4" 
Traverser: WaitingNode "NEURAL3" 
Traverser: WaitingNode "NEURAL2" 
Traverser: WaitingNode "REG" 
Traverser: WaitingNode "NEURAL11" 
Traverser: WaitingNode "NEURAL5" 
Traverser: WaitingNode "REG2" 
Traverser: WaitingNode "NEURAL6" 
Traverser: WaitingNode "NEURAL13" 
Traverser: WaitingNode "NEURAL8" 
Traverser: WaitingNode "REG3" 
Traverser: WaitingNode "NEURAL7" 
Traverser: WaitingNode "NEURAL14" 
Traverser: WaitingNode "NEURAL9" 
Traverser: WaitingNode "TRANS" 
Traverser: WaitingNode "REPL2" 
Traverser: WaitingNode "REG4" 
Traverser: WaitingNode "NEURAL10" 
Traverser: WaitingNode "MDLCOMP" 
traverser_readyNode_note 
traverser_readyNode_note 
traverser_readyNode_note 
17429      data _null_;
MPRINT(EM_DIAGRAM):    data _null_;
17430      file emwipmsg;
MPRINT(EM_DIAGRAM):   file emwipmsg;
17431      put '<Node Id="Tree3" Event="Run" Pid="2144" Gridid=""/>';
MPRINT(EM_DIAGRAM):   put '<Node Id="Tree3" Event="Run" Pid="2144" Gridid=""/>';
17432      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: The file EMWIPMSG is:
      Local Host Name=C2-Complab-38,
      Local Host IP addr=10.21.104.163,
      Peer Hostname Name=C2-Complab-38.cencol.ca,
      Peer IP addr=127.0.0.1,Peer Name=N/A,
      Peer Portno=3478,Lrecl=32767,Recfm=Variable

NOTE: 1 record was written to the file EMWIPMSG.
      The minimum record length was 51.
      The maximum record length was 51.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

17433      %let emloopmode =;
*------------------------------------------------------------* 
* 
* Tree3 : Beginning update before running 
* datetime : 16APR2021:13:01:43 
* 
*------------------------------------------------------------* 
MPRINT(EM_DIAGRAM):     data WORK.Tree3_FILTERSET;
MPRINT(EM_DIAGRAM):   length PORT $32 USE $1;
MPRINT(EM_DIAGRAM):   DROP DELTACODE APPLYDELTA APPLYSCORE IMPORTPORT;
MPRINT(EM_DIAGRAM):   set EMWS1.Part_exportSet ;
MPRINT(EM_DIAGRAM):   PORT = '';
MPRINT(EM_DIAGRAM):   USE = '';
MPRINT(EM_DIAGRAM):   where role in( "RAW" "TRAIN" "VALIDATE" "TEST" "SCORE" "TRANSACTION" "DOCUMENT" "RULES" "REPORTFIT" "RANK" "SCOREDIST" "ESTIMATE" "TREE" "CLUSSTAT" "CLUSMEAN" "VARMAP" ) and EXPORT = 'Y' ;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    proc datasets lib=work nolist;
MPRINT(EM_DIAGRAM):   modify Risk(type=PROFIT label= Risk);
MPRINT(EM_DIAGRAM):   label DECISION1= "1";
MPRINT(EM_DIAGRAM):   label DECISION2= "0";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   quit;
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Tree3: Generation of macros and macro variables;
MPRINT(EM_DIAGRAM):   * To see the code generated, set the EM_DEBUG macro variable to SOURCE or _ALL_;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Tree3: EM Macro Variables and Macros;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   * System Macro Variables;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   length string $2000;
MPRINT(EM_DIAGRAM):   string = 'Decision Tree test';
MPRINT(EM_DIAGRAM):   call symput('EM_PROJECTNAME', trim(string));
MPRINT(EM_DIAGRAM):   string = 'Decision Tree';
MPRINT(EM_DIAGRAM):   call symput('EM_WSNAME', trim(string));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   * Properties Macro Variables ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Files Macro Variables;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Import Macro Variables;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Export Macro Variables;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Decision Macro Variables;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   filename temp catalog 'sashelp.emutil.em_decdata.source';
MPRINT(EM_DIAGRAM):   filename temp;
MPRINT(EM_DECDATA):   proc display cat=sashelp.emutil.makedecdata.scl;
MPRINT(EM_DECDATA):   run;
MPRINT(EM_DECDATA):   *------------------------------------------------------------*;
MPRINT(EM_DECDATA):   * Tree3: Create decision matrix;
MPRINT(EM_DECDATA):   *------------------------------------------------------------*;
MPRINT(EM_DECDATA):   data WORK.Risk;
MPRINT(EM_DECDATA):   length Risk $ 32 COUNT 8 DATAPRIOR 8 TRAINPRIOR 8 DECPRIOR 8 DECISION1 8 DECISION2 8 ;
MPRINT(EM_DECDATA):   label COUNT= "Level Counts" DATAPRIOR= "Data Proportions" TRAINPRIOR= "Training Proportions" DECPRIOR= "Decision Priors" DECISION1= "1" DECISION2= "0" ;
MPRINT(EM_DECDATA):   format COUNT 10. ;
MPRINT(EM_DECDATA):   Risk="1";
MPRINT(EM_DECDATA):   COUNT=54;
MPRINT(EM_DECDATA):   DATAPRIOR=0.55445544554455;
MPRINT(EM_DECDATA):   TRAINPRIOR=0.54;
MPRINT(EM_DECDATA):   DECPRIOR=.;
MPRINT(EM_DECDATA):   DECISION1=1;
MPRINT(EM_DECDATA):   DECISION2=0;
MPRINT(EM_DECDATA):   output;
MPRINT(EM_DECDATA):   Risk="0";
MPRINT(EM_DECDATA):   COUNT=46;
MPRINT(EM_DECDATA):   DATAPRIOR=0.44554455445544;
MPRINT(EM_DECDATA):   TRAINPRIOR=0.46;
MPRINT(EM_DECDATA):   DECPRIOR=.;
MPRINT(EM_DECDATA):   DECISION1=0;
MPRINT(EM_DECDATA):   DECISION2=1;
MPRINT(EM_DECDATA):   output;
MPRINT(EM_DECDATA):   ;
MPRINT(EM_DECDATA):   run;
MPRINT(EM_DECDATA):   proc datasets lib=work nolist;
MPRINT(EM_DECDATA):   modify Risk(type=PROFIT label= Risk);
MPRINT(EM_DECDATA):   label DECISION1= '1';
MPRINT(EM_DECDATA):   label DECISION2= '0';
MPRINT(EM_DECDATA):   run;
MPRINT(EM_DECDATA):   quit;
MPRINT(EM_DECDATA):   
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   proc datasets lib=work nolist;
MPRINT(EM_DIAGRAM):   modify Risk(type=PROFIT label= Risk);
MPRINT(EM_DIAGRAM):   label DECISION1= "1";
MPRINT(EM_DIAGRAM):   label DECISION2= "0";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   quit;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Statement Macro Variables;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   set EMWS1.FIMPORT_EMINFO;
MPRINT(EM_DIAGRAM):   where key in('HPDMSAMPLE', 'IDSTABLE');
MPRINT(EM_DIAGRAM):   if key = 'HPDMSAMPLE' then call symput('_ForceGrid', '1');
MPRINT(EM_DIAGRAM):   else call symput('_IDS_TABLE', DATA);
MPRINT(EM_DIAGRAM):   run;
MPRINT(HPDM_PERFORMANCE):  ;
PERFORMANCE  DETAILS
MPRINT(EM_DIAGRAM):  ;
17844      data EM_TARGETDECINFO;
MPRINT(EM_DIAGRAM):    data EM_TARGETDECINFO;
17845      length TARGET $32 DECDATA DECMETA $43;
MPRINT(EM_DIAGRAM):   length TARGET $32 DECDATA DECMETA $43;
17846      TARGET="Risk";
MPRINT(EM_DIAGRAM):   TARGET="Risk";
17847      DECDATA="EMWS1.Tree3_Risk_DD";
MPRINT(EM_DIAGRAM):   DECDATA="EMWS1.Tree3_Risk_DD";
17848      DECMETA="EMWS1.Tree3_Risk_DM";
MPRINT(EM_DIAGRAM):   DECMETA="EMWS1.Tree3_Risk_DM";
17849      output;
MPRINT(EM_DIAGRAM):   output;
17850      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: The data set WORK.EM_TARGETDECINFO has 1 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

17851      %let emexceptionString =;
17852      %let EMEXCEPTIONSTRING=;
17853      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
17854      * UPDATE: Tree3;
MPRINT(EM_DIAGRAM):   * UPDATE: Tree3;
17855      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
17856      %let EM_ACTION = UPDATE;
17857      %let syscc = 0;
17858      %macro main;
17859      
17860        %if %upcase(&EM_ACTION) = CREATE %then %do;
17861          filename temp catalog 'sashelp.emmodl.tree_create.source';
17862          %include temp;
17863          filename temp;
17864      
17865          %em_tree_create;
17866        %end;
17867      
17868         %else
17869         %if %upcase(&EM_ACTION) = TRAIN %then %do;
17870      
17871             filename temp catalog 'sashelp.emmodl.tree_train.source';
17872             %include temp;
17873             filename temp;
17874             %em_tree_train;
17875         %end;
17876      
17877        %else
17878        %if %upcase(&EM_ACTION) = SCORE %then %do;
17879          filename temp catalog 'sashelp.emmodl.tree_score.source';
17880          %include temp;
17881          filename temp;
17882      
17883          %em_tree_score;
17884      
17885        %end;
17886      
17887        %else
17888        %if %upcase(&EM_ACTION) = REPORT %then %do;
17889      
17890             filename temp catalog 'sashelp.emmodl.tree_report.source';
17891             %include temp;
17892             filename temp;
17893      
17894             %em_tree_report;
17895         %end;
17896      
17897        %else
17898        %if %upcase(&EM_ACTION) = OPENINT %then %do;
17899      
17900             filename temp catalog 'sashelp.emmodl.tree_actions.source';
17901             %include temp;
17902             filename temp;
17903             %EM_TREE_OPENTREEVIEWER;
17904      
17905         %end;
17906      
17907        %else
17908        %if %upcase(&EM_ACTION) = CLOSEINT %then %do;
17909      
17910             filename temp catalog 'sashelp.emmodl.tree_actions.source';
17911             %include temp;
17912             filename temp;
17913             %EM_TREE_CLOSETREEVIEWER;
17914      
17915         %end;
17916      
17917      
17918         %doendm:
17919      %mend main;
17920      
17921      %main;
MPRINT(EM_DIAGRAM):    
MPRINT(EM_DIAGRAM):  ;
17922      
17923      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
17924      * End UPDATE: Tree3;
MPRINT(EM_DIAGRAM):   * End UPDATE: Tree3;
17925      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;

17926      %em_delMacro;
MPRINT(EM_DIAGRAM):   
MPRINT(EM_DIAGRAM):  ;

MPRINT(EM_DIAGRAM):    filename _emtool_ 'H:\746\Decision Tree test\Workspaces\EMWS1\Tree3\PROPERTIES.xml' encoding="UTF-8" NOBOM;
17928      %let _HPDMGRIDHOST=;
17929      %let _HPDMGRIDINSTALLLOC=;
17930      %let _HPDMGRIDDATASERVER=;
17931      %hpdm_gridSetOPtions;
MPRINT(EM_DIAGRAM):   
MPRINT(HPDM_GRIDSETOPTIONS):   data _null_;
MPRINT(HPDM_GRIDSETOPTIONS):   length optionString string $2000;
MPRINT(HPDM_GRIDSETOPTIONS):   optionString = reverse(getoption('SET'));
MPRINT(HPDM_GRIDSETOPTIONS):   index = index(optionString, reverse('GRIDHOST'));
MPRINT(HPDM_GRIDSETOPTIONS):   if index then do;
MPRINT(HPDM_GRIDSETOPTIONS):   string = reverse(substr(optionString, 1, index-4));
MPRINT(HPDM_GRIDSETOPTIONS):   host = '"'!!strip(tranwrd(scan(string, 1, ']'), '"', ''))!!'"';
MPRINT(HPDM_GRIDSETOPTIONS):   call symput('_HPDMGRIDHOST', strip(host));
MPRINT(HPDM_GRIDSETOPTIONS):   end;
MPRINT(HPDM_GRIDSETOPTIONS):   index = index(optionString, reverse('GRIDINSTALLLOC'));
MPRINT(HPDM_GRIDSETOPTIONS):   if index then do;
MPRINT(HPDM_GRIDSETOPTIONS):   string = reverse(substr(optionString, 1, index-4));
MPRINT(HPDM_GRIDSETOPTIONS):   install = '"'!!strip(tranwrd(scan(string, 1, ']'), '"', ''))!!'"';
MPRINT(HPDM_GRIDSETOPTIONS):   call symput('_HPDMGRIDINSTALLLOC', strip(install));
MPRINT(HPDM_GRIDSETOPTIONS):   end;
MPRINT(HPDM_GRIDSETOPTIONS):   index = index(optionString, reverse('GRIDDATASERVER'));
MPRINT(HPDM_GRIDSETOPTIONS):   if index then do;
MPRINT(HPDM_GRIDSETOPTIONS):   string = reverse(substr(optionString, 1, index-4));
MPRINT(HPDM_GRIDSETOPTIONS):   server = '"'!!strip(tranwrd(scan(string, 1, ']'), '"', ''))!!'"';
MPRINT(HPDM_GRIDSETOPTIONS):   call symput('_HPDMGRIDDATASERVER', strip(server));
MPRINT(HPDM_GRIDSETOPTIONS):   end;
MPRINT(HPDM_GRIDSETOPTIONS):   run;

NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(EM_DIAGRAM):  ;

*------------------------------------------------------------* 
* 
* Tree3 : End update 
* datetime : 16APR2021:13:01:44 
* 
*------------------------------------------------------------* 
17932      %em_getactionstatus(emlib =EMWS1, nodeid=Tree3);
MPRINT(EM_DIAGRAM):   
MPRINT(EM_GETACTIONSTATUS):   proc display c=sashelp.emutil.getactionstatus.scl;
MPRINT(EM_GETACTIONSTATUS):   run;

17933      %let em_filemodtime=;
17934      data _null_;
MPRINT(EM_GETACTIONSTATUS):   data _null_;
17935      format modate best.;
MPRINT(EM_GETACTIONSTATUS):   format modate best.;
17936      set sashelp.Vextfl;
MPRINT(EM_GETACTIONSTATUS):   set sashelp.Vextfl;
17937      where fileref eq "#LN00271";
MPRINT(EM_GETACTIONSTATUS):   where fileref eq "#LN00271";
17938      call symput('EM_FILEMODTIME', put(modate, best.));
MPRINT(EM_GETACTIONSTATUS):   call symput('EM_FILEMODTIME', put(modate, best.));
17939      run;
MPRINT(EM_GETACTIONSTATUS):   run;

NOTE: There were 1 observations read from the data set SASHELP.VEXTFL.
      WHERE fileref='#LN00271';
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

17940      %symdel em_filemodtime;
WARNING: Attempt to delete macro variable EM_FILEMODTIME failed. Variable not found.
17941      %let em_Train = N;
17942      %let em_Score = N;
17943      %let em_Report = N;
17944      %let em_Run = N;
NOTE: PROCEDURE DISPLAY used (Total process time):
      real time           0.07 seconds
      cpu time            0.01 seconds
      

MPRINT(EM_GETACTIONSTATUS):     
MPRINT(EM_DIAGRAM):  ;

Node "Tree3" has already run. 
Node "Tree3" succeeded. 
17945      data _null_;
MPRINT(EM_DIAGRAM):    data _null_;
17946      file emwipmsg;
MPRINT(EM_DIAGRAM):   file emwipmsg;
17947      put '<Node Id="Tree3" Event="Complete" Pid="2144" Gridid=""/>';
MPRINT(EM_DIAGRAM):   put '<Node Id="Tree3" Event="Complete" Pid="2144" Gridid=""/>';
17948      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: The file EMWIPMSG is:
      Local Host Name=C2-Complab-38,
      Local Host IP addr=10.21.104.163,
      Peer Hostname Name=C2-Complab-38.cencol.ca,
      Peer IP addr=127.0.0.1,Peer Name=N/A,
      Peer Portno=3478,Lrecl=32767,Recfm=Variable

NOTE: 1 record was written to the file EMWIPMSG.
      The minimum record length was 56.
      The maximum record length was 56.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

Traverser: WaitingNode "NEURAL4" 
Traverser: WaitingNode "NEURAL3" 
Traverser: WaitingNode "NEURAL2" 
Traverser: WaitingNode "REG" 
Traverser: WaitingNode "NEURAL11" 
Traverser: WaitingNode "NEURAL5" 
Traverser: WaitingNode "REG2" 
Traverser: WaitingNode "NEURAL6" 
Traverser: WaitingNode "NEURAL13" 
Traverser: WaitingNode "NEURAL8" 
Traverser: WaitingNode "REG3" 
Traverser: WaitingNode "NEURAL7" 
Traverser: WaitingNode "NEURAL14" 
Traverser: WaitingNode "NEURAL9" 
Traverser: WaitingNode "TRANS" 
Traverser: WaitingNode "REPL2" 
Traverser: WaitingNode "REG4" 
Traverser: WaitingNode "NEURAL10" 
Traverser: WaitingNode "MDLCOMP" 
traverser_readyNode_note 
traverser_readyNode_note 
17949      data _null_;
MPRINT(EM_DIAGRAM):    data _null_;
17950      file emwipmsg;
MPRINT(EM_DIAGRAM):   file emwipmsg;
17951      put '<Node Id="Neural" Event="Run" Pid="2144" Gridid=""/>';
MPRINT(EM_DIAGRAM):   put '<Node Id="Neural" Event="Run" Pid="2144" Gridid=""/>';
17952      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: The file EMWIPMSG is:
      Local Host Name=C2-Complab-38,
      Local Host IP addr=10.21.104.163,
      Peer Hostname Name=C2-Complab-38.cencol.ca,
      Peer IP addr=127.0.0.1,Peer Name=N/A,
      Peer Portno=3478,Lrecl=32767,Recfm=Variable

NOTE: 1 record was written to the file EMWIPMSG.
      The minimum record length was 52.
      The maximum record length was 52.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

17953      %let emloopmode =;
*------------------------------------------------------------* 
* 
* Neural : Beginning update before running 
* datetime : 16APR2021:13:01:45 
* 
*------------------------------------------------------------* 
MPRINT(EM_DIAGRAM):     data WORK.Neural_FILTERSET;
MPRINT(EM_DIAGRAM):   length PORT $32 USE $1;
MPRINT(EM_DIAGRAM):   DROP DELTACODE APPLYDELTA APPLYSCORE IMPORTPORT;
MPRINT(EM_DIAGRAM):   set EMWS1.Impt_exportSet ;
MPRINT(EM_DIAGRAM):   PORT = '';
MPRINT(EM_DIAGRAM):   USE = '';
MPRINT(EM_DIAGRAM):   where role in( "RAW" "TRAIN" "VALIDATE" "TEST" ) and EXPORT = 'Y' ;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _emtool_ 'H:\746\Decision Tree test\Workspaces\EMWS1\Neural\PROPERTIES.xml' encoding="UTF-8" NOBOM;
17973      %let _HPDMGRIDHOST=;
17974      %let _HPDMGRIDINSTALLLOC=;
17975      %let _HPDMGRIDDATASERVER=;
17976      %hpdm_gridSetOPtions;
MPRINT(EM_DIAGRAM):   
MPRINT(HPDM_GRIDSETOPTIONS):   data _null_;
MPRINT(HPDM_GRIDSETOPTIONS):   length optionString string $2000;
MPRINT(HPDM_GRIDSETOPTIONS):   optionString = reverse(getoption('SET'));
MPRINT(HPDM_GRIDSETOPTIONS):   index = index(optionString, reverse('GRIDHOST'));
MPRINT(HPDM_GRIDSETOPTIONS):   if index then do;
MPRINT(HPDM_GRIDSETOPTIONS):   string = reverse(substr(optionString, 1, index-4));
MPRINT(HPDM_GRIDSETOPTIONS):   host = '"'!!strip(tranwrd(scan(string, 1, ']'), '"', ''))!!'"';
MPRINT(HPDM_GRIDSETOPTIONS):   call symput('_HPDMGRIDHOST', strip(host));
MPRINT(HPDM_GRIDSETOPTIONS):   end;
MPRINT(HPDM_GRIDSETOPTIONS):   index = index(optionString, reverse('GRIDINSTALLLOC'));
MPRINT(HPDM_GRIDSETOPTIONS):   if index then do;
MPRINT(HPDM_GRIDSETOPTIONS):   string = reverse(substr(optionString, 1, index-4));
MPRINT(HPDM_GRIDSETOPTIONS):   install = '"'!!strip(tranwrd(scan(string, 1, ']'), '"', ''))!!'"';
MPRINT(HPDM_GRIDSETOPTIONS):   call symput('_HPDMGRIDINSTALLLOC', strip(install));
MPRINT(HPDM_GRIDSETOPTIONS):   end;
MPRINT(HPDM_GRIDSETOPTIONS):   index = index(optionString, reverse('GRIDDATASERVER'));
MPRINT(HPDM_GRIDSETOPTIONS):   if index then do;
MPRINT(HPDM_GRIDSETOPTIONS):   string = reverse(substr(optionString, 1, index-4));
MPRINT(HPDM_GRIDSETOPTIONS):   server = '"'!!strip(tranwrd(scan(string, 1, ']'), '"', ''))!!'"';
MPRINT(HPDM_GRIDSETOPTIONS):   call symput('_HPDMGRIDDATASERVER', strip(server));
MPRINT(HPDM_GRIDSETOPTIONS):   end;
MPRINT(HPDM_GRIDSETOPTIONS):   run;

NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(EM_DIAGRAM):  ;

*------------------------------------------------------------* 
* 
* Neural : End update 
* datetime : 16APR2021:13:01:50 
* 
*------------------------------------------------------------* 
17977      %em_getactionstatus(emlib =EMWS1, nodeid=Neural);
MPRINT(EM_DIAGRAM):   
MPRINT(EM_GETACTIONSTATUS):   proc display c=sashelp.emutil.getactionstatus.scl;
MPRINT(EM_GETACTIONSTATUS):   run;

17978      %let em_Train = N;
17979      %let em_Score = N;
17980      %let em_Report = N;
17981      %let em_Run = N;
NOTE: PROCEDURE DISPLAY used (Total process time):
      real time           0.07 seconds
      cpu time            0.00 seconds
      

MPRINT(EM_GETACTIONSTATUS):   
MPRINT(EM_DIAGRAM):  ;

Node "Neural" has already run. 
Node "Neural" succeeded. 
17982      data _null_;
MPRINT(EM_DIAGRAM):    data _null_;
17983      file emwipmsg;
MPRINT(EM_DIAGRAM):   file emwipmsg;
17984      put '<Node Id="Neural" Event="Complete" Pid="2144" Gridid=""/>';
MPRINT(EM_DIAGRAM):   put '<Node Id="Neural" Event="Complete" Pid="2144" Gridid=""/>';
17985      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: The file EMWIPMSG is:
      Local Host Name=C2-Complab-38,
      Local Host IP addr=10.21.104.163,
      Peer Hostname Name=C2-Complab-38.cencol.ca,
      Peer IP addr=127.0.0.1,Peer Name=N/A,
      Peer Portno=3478,Lrecl=32767,Recfm=Variable

NOTE: 1 record was written to the file EMWIPMSG.
      The minimum record length was 57.
      The maximum record length was 57.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

Traverser: WaitingNode "NEURAL4" 
Traverser: WaitingNode "NEURAL3" 
Traverser: WaitingNode "NEURAL2" 
Traverser: WaitingNode "REG" 
Traverser: WaitingNode "NEURAL11" 
Traverser: WaitingNode "NEURAL5" 
Traverser: WaitingNode "REG2" 
Traverser: WaitingNode "NEURAL6" 
Traverser: WaitingNode "NEURAL13" 
Traverser: WaitingNode "NEURAL8" 
Traverser: WaitingNode "REG3" 
Traverser: WaitingNode "NEURAL7" 
Traverser: WaitingNode "NEURAL14" 
Traverser: WaitingNode "NEURAL9" 
Traverser: WaitingNode "TRANS" 
Traverser: WaitingNode "REPL2" 
Traverser: WaitingNode "REG4" 
Traverser: WaitingNode "NEURAL10" 
Traverser: WaitingNode "MDLCOMP" 
traverser_readyNode_note 
17986      data _null_;
MPRINT(EM_DIAGRAM):    data _null_;
17987      file emwipmsg;
MPRINT(EM_DIAGRAM):   file emwipmsg;
17988      put '<Node Id="Repl" Event="Run" Pid="2144" Gridid=""/>';
MPRINT(EM_DIAGRAM):   put '<Node Id="Repl" Event="Run" Pid="2144" Gridid=""/>';
17989      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: The file EMWIPMSG is:
      Local Host Name=C2-Complab-38,
      Local Host IP addr=10.21.104.163,
      Peer Hostname Name=C2-Complab-38.cencol.ca,
      Peer IP addr=127.0.0.1,Peer Name=N/A,
      Peer Portno=3478,Lrecl=32767,Recfm=Variable

NOTE: 1 record was written to the file EMWIPMSG.
      The minimum record length was 50.
      The maximum record length was 50.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
      

17990      %let emloopmode =;
*------------------------------------------------------------* 
* 
* Repl : Beginning update before running 
* datetime : 16APR2021:13:01:51 
* 
*------------------------------------------------------------* 
MPRINT(EM_DIAGRAM):     data WORK.Repl_FILTERSET;
MPRINT(EM_DIAGRAM):   length PORT $32 USE $1;
MPRINT(EM_DIAGRAM):   DROP DELTACODE APPLYDELTA APPLYSCORE IMPORTPORT;
MPRINT(EM_DIAGRAM):   set EMWS1.Impt_exportSet ;
MPRINT(EM_DIAGRAM):   PORT = '';
MPRINT(EM_DIAGRAM):   USE = '';
MPRINT(EM_DIAGRAM):   where role in( "RAW" "TRAIN" "VALIDATE" "TEST" "SCORE" "TRANSACTION" "DOCUMENT" "RULES" "REPORTFIT" "RANK" "SCOREDIST" "ESTIMATE" "TREE" "CLUSSTAT" "CLUSMEAN" "VARMAP" ) and EXPORT = 'Y' ;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Repl: Generation of macros and macro variables;
MPRINT(EM_DIAGRAM):   * To see the code generated, set the EM_DEBUG macro variable to SOURCE or _ALL_;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Repl: EM Macro Variables and Macros;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   * System Macro Variables;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   length string $2000;
MPRINT(EM_DIAGRAM):   string = 'Decision Tree test';
MPRINT(EM_DIAGRAM):   call symput('EM_PROJECTNAME', trim(string));
MPRINT(EM_DIAGRAM):   string = 'Decision Tree';
MPRINT(EM_DIAGRAM):   call symput('EM_WSNAME', trim(string));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   * Properties Macro Variables ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Files Macro Variables;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Import Macro Variables;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Export Macro Variables;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Decision Macro Variables;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Statement Macro Variables;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   set EMWS1.FIMPORT_EMINFO;
MPRINT(EM_DIAGRAM):   where key in('HPDMSAMPLE', 'IDSTABLE');
MPRINT(EM_DIAGRAM):   if key = 'HPDMSAMPLE' then call symput('_ForceGrid', '1');
MPRINT(EM_DIAGRAM):   else call symput('_IDS_TABLE', DATA);
MPRINT(EM_DIAGRAM):   run;
MPRINT(HPDM_PERFORMANCE):  ;
PERFORMANCE  DETAILS
MPRINT(EM_DIAGRAM):  ;
18226      %let emexceptionString =;
18227      %let EMEXCEPTIONSTRING=;
18228      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
18229      * UPDATE: Repl;
MPRINT(EM_DIAGRAM):   * UPDATE: Repl;
18230      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
18231      %let EM_ACTION = UPDATE;
18232      %let syscc = 0;
18233      filename x CATALOG 'SASHELP.EMUTIL.EM_VARMACRO.SOURCE';
MPRINT(EM_DIAGRAM):     filename x CATALOG 'SASHELP.EMUTIL.EM_VARMACRO.SOURCE';
18234      %inc x;
NOTE: %INCLUDE (level 1) file X is file SASHELP.EMUTIL.EM_VARMACRO.SOURCE.
18235     +
18236     +%macro em_varMacro(name=emMacro, metadata=, where=, key=NAME, nummacro=);
18237     +
18238     +   filename macFile catalog 'work.emutil.macro.source';
18239     +   %let _METAOBS = 0;
18240     +
18241     +   %if (%sysfunc(exist(&metadata))<1 and %sysfunc(exist(&metadata, VIEW))<1)
18242     +                   or (&metadata eq ) %then %do;
18243     +       %put * No metadata data set defined;
18244     +       %goto doend;
18245     +   %end;
18246     +
18247     +   data _null_;
18248     +      length _STRING_ $80;
18249     +      retain _STRING_;
18250     +      set &metadata end=eof;
18251     +      file macFile;
18252     +      %if %nrbquote(&where) ne %then %do;
18253     +          %let whereClause = where (%nrbquote(&where));
18254     +          %unquote(&whereClause);
18255     +      %end;
18256     +      if _N_=1 then do;
18257     +         string = "%"!!"macro &name;";
18258     +         put string;
18259     +      end;
18260     +      if (length(_STRING_) + length(trim(&key))+ 1 < 80) then do;
18261     +         _STRING_ = trim(_STRING_)!!' '!!trim(&key);
18262     +         if eof then do;
18263     +            put _STRING_;
18264     +            string = "%"!!"mend &name;";
18265     +            put string;
18266     +            %if (&nummacro ne ) %then %do;
18267     +                string = strip(put(_N_, best.));
18268     +                put "%" "global &nummacro;";
18269     +                put "%" "let &nummacro = " string ";";
18270     +                call symput('_METAOBS', string);
18271     +            %end;
18272     +         end;
18273     +      end;
18274     +      else do;
18275     +         put _STRING_;
18276     +         _string_ = TRIM(&key);
18277     +         if eof then do;
18278     +            put _STRING_;
18279     +            string = "%"!!"mend &name;";
18280     +            put string;
18281     +        end;
18282     +      end;
18283     +      if eof then do;
18284     +         string = strip(put(_N_, best.));
18285     +         call symput('_METAOBS', string);
18286     +         %if (&nummacro ne ) %then %do;
18287     +             put "%" "global &nummacro;";
18288     +             put "%" "let &nummacro = " string ";";
18289     +         %end;
18290     +      end;
18291     +   run;
18292     +
18293     +   %doend:
18294     +   %if ^&_METAOBS %then %do;
18295     +       data _null_;
18296     +          file macFile;
18297     +          put "%" "macro &name;";
18298     +          put "%" "mend &name;";
18299     +          %if (&nummacro ne ) %then %do;
18300     +              put "%" "global &nummacro;";
18301     +              put "%" "let &nummacro = 0;";
18302     +          %end;
18303     +      run;
18304     +   %end;
18305     +   %inc macFile;
18306     +   filename macFile;
18307     +%mend em_varMacro;
NOTE: %INCLUDE (level 1) ending.
18308      filename X;
MPRINT(EM_DIAGRAM):   filename X;
NOTE: Fileref X has been deassigned.
18309       %macro main;
18310      
18311         filename temp catalog 'sashelp.emmdfy.Replace_macros.source';
18312         %include temp;
18313         filename temp;
18314      
18315         %if %upcase(&EM_ACTION) = CREATE %then %do;
18316      
18317             filename temp catalog 'sashelp.emmdfy.Replace_create.source';
18318             %include temp;
18319             filename temp;
18320             %create;
18321         %end;
18322         %else
18323         %if %upcase(&EM_ACTION) = TRAIN %then %do;
18324      
18325             filename temp catalog 'sashelp.emmdfy.Replace_train.source';
18326             %include temp;
18327             filename temp;
18328             %train;
18329         %end;
18330         %else
18331         %if %upcase(&EM_ACTION) = SCORE %then %do;
18332      
18333             filename temp catalog 'sashelp.emmdfy.Replace_score.source';
18334             %include temp;
18335             filename temp;
18336             %score;
18337         %end;
18338         %if %upcase(&EM_ACTION) = REPORT %then %do;
18339      
18340             filename temp catalog 'sashelp.emmdfy.Replace_report.source';
18341             %include temp;
18342             filename temp;
18343             %report;
18344         %end;
18345         %if %upcase(&EM_ACTION) = OPENOUTCLASSTABLE %then %do;
18346             filename temp catalog 'sashelp.emmdfy.replace_makeoutclass.source';
18347             %include temp;
18348             filename temp;
18349             %em_replace_openoutclass;
18350         %end;
18351         %if %upcase(&EM_ACTION) = CLOSEOUTCLASSTABLE %then %do;
18352             filename temp catalog 'sashelp.emmdfy.replace_makeoutclass.source';
18353             %include temp;
18354             filename temp;
18355             %em_replace_closeoutclass;
18356         %end;
18357      %mend main;
18358      
18359      %main;
MPRINT(MAIN):   filename temp catalog 'sashelp.emmdfy.Replace_macros.source';
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMMDFY.REPLACE_MACROS.SOURCE.
18360     +%macro SetProperties;
18361     +   %em_checkmacro(name=EM_PROPERTY_UNKNOWNLEVEL,    global=Y, value=MODE);
18362     +   %em_checkmacro(name=EM_PROPERTY_CALCMETHOD,      global=Y, value=NONE);
18363     +   %em_checkmacro(name=EM_PROPERTY_PERCENTSCUTOFF,  global=Y, value=0.5);
18364     +   %em_checkmacro(name=EM_PROPERTY_SPACINGSCUTOFF,  global=Y, value=9);
18365     +   %em_checkMacro(name=EM_PROPERTY_MADSCUTOFF,      global=Y, value=9);
18366     +   %em_checkMacro(name=EM_PROPERTY_STDDEVCUTOFF,    global=Y, value=3);
18367     +   %em_checkmacro(name=EM_PROPERTY_REPLACEMETHOD,   global=Y, value=COMPUTED);
18368     +   %em_checkmacro(name=EM_PROPERTY_HIDEVARIABLE,    global=Y, value=N);
18369     +   %em_checkmacro(name=EM_PROPERTY_INTERVALMETHOD,  global=Y, value=NONE);
18370     +   %em_checkmacro(name=EM_PROPERTY_REPORTCOUNT,     global=Y, value=Y);
18371     +
18372     +%mend SetProperties;
18373     +
NOTE: %INCLUDE (level 1) ending.
MPRINT(MAIN):   filename temp;
NOTE: Fileref TEMP has been deassigned.
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * End UPDATE: Repl;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
18374      
18375      *------------------------------------------------------------*;
18376      * End UPDATE: Repl;
18377      *------------------------------------------------------------*;

18378      %em_delMacro;
MPRINT(EM_DIAGRAM):   
MPRINT(EM_DIAGRAM):  ;

MPRINT(EM_DIAGRAM):    filename _emtool_ 'H:\746\Decision Tree test\Workspaces\EMWS1\Repl\PROPERTIES.xml' encoding="UTF-8" NOBOM;
18380      %let _HPDMGRIDHOST=;
18381      %let _HPDMGRIDINSTALLLOC=;
18382      %let _HPDMGRIDDATASERVER=;
18383      %hpdm_gridSetOPtions;
MPRINT(EM_DIAGRAM):   
MPRINT(HPDM_GRIDSETOPTIONS):   data _null_;
MPRINT(HPDM_GRIDSETOPTIONS):   length optionString string $2000;
MPRINT(HPDM_GRIDSETOPTIONS):   optionString = reverse(getoption('SET'));
MPRINT(HPDM_GRIDSETOPTIONS):   index = index(optionString, reverse('GRIDHOST'));
MPRINT(HPDM_GRIDSETOPTIONS):   if index then do;
MPRINT(HPDM_GRIDSETOPTIONS):   string = reverse(substr(optionString, 1, index-4));
MPRINT(HPDM_GRIDSETOPTIONS):   host = '"'!!strip(tranwrd(scan(string, 1, ']'), '"', ''))!!'"';
MPRINT(HPDM_GRIDSETOPTIONS):   call symput('_HPDMGRIDHOST', strip(host));
MPRINT(HPDM_GRIDSETOPTIONS):   end;
MPRINT(HPDM_GRIDSETOPTIONS):   index = index(optionString, reverse('GRIDINSTALLLOC'));
MPRINT(HPDM_GRIDSETOPTIONS):   if index then do;
MPRINT(HPDM_GRIDSETOPTIONS):   string = reverse(substr(optionString, 1, index-4));
MPRINT(HPDM_GRIDSETOPTIONS):   install = '"'!!strip(tranwrd(scan(string, 1, ']'), '"', ''))!!'"';
MPRINT(HPDM_GRIDSETOPTIONS):   call symput('_HPDMGRIDINSTALLLOC', strip(install));
MPRINT(HPDM_GRIDSETOPTIONS):   end;
MPRINT(HPDM_GRIDSETOPTIONS):   index = index(optionString, reverse('GRIDDATASERVER'));
MPRINT(HPDM_GRIDSETOPTIONS):   if index then do;
MPRINT(HPDM_GRIDSETOPTIONS):   string = reverse(substr(optionString, 1, index-4));
MPRINT(HPDM_GRIDSETOPTIONS):   server = '"'!!strip(tranwrd(scan(string, 1, ']'), '"', ''))!!'"';
MPRINT(HPDM_GRIDSETOPTIONS):   call symput('_HPDMGRIDDATASERVER', strip(server));
MPRINT(HPDM_GRIDSETOPTIONS):   end;
MPRINT(HPDM_GRIDSETOPTIONS):   run;

NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
      

MPRINT(EM_DIAGRAM):  ;

*------------------------------------------------------------* 
* 
* Repl : End update 
* datetime : 16APR2021:13:01:51 
* 
*------------------------------------------------------------* 
18384      %em_getactionstatus(emlib =EMWS1, nodeid=Repl);
MPRINT(EM_DIAGRAM):   
MPRINT(EM_GETACTIONSTATUS):   proc display c=sashelp.emutil.getactionstatus.scl;
MPRINT(EM_GETACTIONSTATUS):   run;

18385      %let em_filemodtime=;
18386      data _null_;
MPRINT(EM_GETACTIONSTATUS):   data _null_;
18387      format modate best.;
MPRINT(EM_GETACTIONSTATUS):   format modate best.;
18388      set sashelp.Vextfl;
MPRINT(EM_GETACTIONSTATUS):   set sashelp.Vextfl;
18389      where fileref eq "#LN00321";
MPRINT(EM_GETACTIONSTATUS):   where fileref eq "#LN00321";
18390      call symput('EM_FILEMODTIME', put(modate, best.));
MPRINT(EM_GETACTIONSTATUS):   call symput('EM_FILEMODTIME', put(modate, best.));
18391      run;
MPRINT(EM_GETACTIONSTATUS):   run;

NOTE: There were 1 observations read from the data set SASHELP.VEXTFL.
      WHERE fileref='#LN00321';
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

18392      %symdel em_filemodtime;
WARNING: Attempt to delete macro variable EM_FILEMODTIME failed. Variable not found.
NOTE: View EMWS1.REPL_NEWVALUES.VIEW used (Total process time):
      real time           0.04 seconds
      cpu time            0.03 seconds
      
18393      %let em_Train = N;
18394      %let em_Score = N;
18395      %let em_Report = N;
18396      %let em_Run = N;
NOTE: PROCEDURE DISPLAY used (Total process time):
      real time           0.14 seconds
      cpu time            0.04 seconds
      

MPRINT(EM_GETACTIONSTATUS):     
MPRINT(EM_DIAGRAM):  ;

Node "Repl" has already run. 
Node "Repl" succeeded. 
18397      data _null_;
MPRINT(EM_DIAGRAM):    data _null_;
18398      file emwipmsg;
MPRINT(EM_DIAGRAM):   file emwipmsg;
18399      put '<Node Id="Repl" Event="Complete" Pid="2144" Gridid=""/>';
MPRINT(EM_DIAGRAM):   put '<Node Id="Repl" Event="Complete" Pid="2144" Gridid=""/>';
18400      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: The file EMWIPMSG is:
      Local Host Name=C2-Complab-38,
      Local Host IP addr=10.21.104.163,
      Peer Hostname Name=C2-Complab-38.cencol.ca,
      Peer IP addr=127.0.0.1,Peer Name=N/A,
      Peer Portno=3478,Lrecl=32767,Recfm=Variable

NOTE: 1 record was written to the file EMWIPMSG.
      The minimum record length was 55.
      The maximum record length was 55.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

Traverser: WaitingNode "NEURAL4" 
Traverser: WaitingNode "NEURAL3" 
Traverser: WaitingNode "NEURAL2" 
Traverser: WaitingNode "REG" 
Traverser: WaitingNode "NEURAL11" 
Traverser: WaitingNode "NEURAL5" 
Traverser: WaitingNode "REG2" 
Traverser: WaitingNode "NEURAL6" 
Traverser: WaitingNode "NEURAL13" 
Traverser: WaitingNode "NEURAL8" 
Traverser: WaitingNode "REG3" 
Traverser: WaitingNode "NEURAL7" 
Traverser: WaitingNode "NEURAL14" 
Traverser: WaitingNode "NEURAL9" 
Traverser: WaitingNode "REPL2" 
Traverser: WaitingNode "REG4" 
Traverser: WaitingNode "NEURAL10" 
Traverser: WaitingNode "MDLCOMP" 
traverser_readyNode_note 
18401      data _null_;
MPRINT(EM_DIAGRAM):    data _null_;
18402      file emwipmsg;
MPRINT(EM_DIAGRAM):   file emwipmsg;
18403      put '<Node Id="Trans" Event="Run" Pid="2144" Gridid=""/>';
MPRINT(EM_DIAGRAM):   put '<Node Id="Trans" Event="Run" Pid="2144" Gridid=""/>';
18404      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: The file EMWIPMSG is:
      Local Host Name=C2-Complab-38,
      Local Host IP addr=10.21.104.163,
      Peer Hostname Name=C2-Complab-38.cencol.ca,
      Peer IP addr=127.0.0.1,Peer Name=N/A,
      Peer Portno=3478,Lrecl=32767,Recfm=Variable

NOTE: 1 record was written to the file EMWIPMSG.
      The minimum record length was 51.
      The maximum record length was 51.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
      

18405      %let emloopmode =;
*------------------------------------------------------------* 
* 
* Trans : Beginning update before running 
* datetime : 16APR2021:13:01:52 
* 
*------------------------------------------------------------* 
MPRINT(EM_DIAGRAM):     data WORK.Trans_FILTERSET;
MPRINT(EM_DIAGRAM):   length PORT $32 USE $1;
MPRINT(EM_DIAGRAM):   DROP DELTACODE APPLYDELTA APPLYSCORE IMPORTPORT;
MPRINT(EM_DIAGRAM):   set EMWS1.Repl_exportSet ;
MPRINT(EM_DIAGRAM):   PORT = '';
MPRINT(EM_DIAGRAM):   USE = '';
MPRINT(EM_DIAGRAM):   where role in( "RAW" "TRAIN" "VALIDATE" "TEST" ) and EXPORT = 'Y' ;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _emtool_ 'H:\746\Decision Tree test\Workspaces\EMWS1\Trans\PROPERTIES.xml' encoding="UTF-8" NOBOM;
18425      %let _HPDMGRIDHOST=;
18426      %let _HPDMGRIDINSTALLLOC=;
18427      %let _HPDMGRIDDATASERVER=;
18428      %hpdm_gridSetOPtions;
MPRINT(EM_DIAGRAM):   
MPRINT(HPDM_GRIDSETOPTIONS):   data _null_;
MPRINT(HPDM_GRIDSETOPTIONS):   length optionString string $2000;
MPRINT(HPDM_GRIDSETOPTIONS):   optionString = reverse(getoption('SET'));
MPRINT(HPDM_GRIDSETOPTIONS):   index = index(optionString, reverse('GRIDHOST'));
MPRINT(HPDM_GRIDSETOPTIONS):   if index then do;
MPRINT(HPDM_GRIDSETOPTIONS):   string = reverse(substr(optionString, 1, index-4));
MPRINT(HPDM_GRIDSETOPTIONS):   host = '"'!!strip(tranwrd(scan(string, 1, ']'), '"', ''))!!'"';
MPRINT(HPDM_GRIDSETOPTIONS):   call symput('_HPDMGRIDHOST', strip(host));
MPRINT(HPDM_GRIDSETOPTIONS):   end;
MPRINT(HPDM_GRIDSETOPTIONS):   index = index(optionString, reverse('GRIDINSTALLLOC'));
MPRINT(HPDM_GRIDSETOPTIONS):   if index then do;
MPRINT(HPDM_GRIDSETOPTIONS):   string = reverse(substr(optionString, 1, index-4));
MPRINT(HPDM_GRIDSETOPTIONS):   install = '"'!!strip(tranwrd(scan(string, 1, ']'), '"', ''))!!'"';
MPRINT(HPDM_GRIDSETOPTIONS):   call symput('_HPDMGRIDINSTALLLOC', strip(install));
MPRINT(HPDM_GRIDSETOPTIONS):   end;
MPRINT(HPDM_GRIDSETOPTIONS):   index = index(optionString, reverse('GRIDDATASERVER'));
MPRINT(HPDM_GRIDSETOPTIONS):   if index then do;
MPRINT(HPDM_GRIDSETOPTIONS):   string = reverse(substr(optionString, 1, index-4));
MPRINT(HPDM_GRIDSETOPTIONS):   server = '"'!!strip(tranwrd(scan(string, 1, ']'), '"', ''))!!'"';
MPRINT(HPDM_GRIDSETOPTIONS):   call symput('_HPDMGRIDDATASERVER', strip(server));
MPRINT(HPDM_GRIDSETOPTIONS):   end;
MPRINT(HPDM_GRIDSETOPTIONS):   run;

NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
      

MPRINT(EM_DIAGRAM):  ;

*------------------------------------------------------------* 
* 
* Trans : End update 
* datetime : 16APR2021:13:01:52 
* 
*------------------------------------------------------------* 
18429      %em_getactionstatus(emlib =EMWS1, nodeid=Trans);
MPRINT(EM_DIAGRAM):   
MPRINT(EM_GETACTIONSTATUS):   proc display c=sashelp.emutil.getactionstatus.scl;
MPRINT(EM_GETACTIONSTATUS):   run;

18430      proc compare base=EMWS1.Trans_emtrainvariable compare=EMWS1.Trans_variableSet out=diffDS noprint outnoequal outbase outcomp outdiff;
MPRINT(EM_GETACTIONSTATUS):   proc compare base=EMWS1.Trans_emtrainvariable compare=EMWS1.Trans_variableSet out=diffDS noprint outnoequal outbase outcomp outdiff;
18431      run;
MPRINT(EM_GETACTIONSTATUS):   run;

NOTE: There were 45 observations read from the data set EMWS1.TRANS_EMTRAINVARIABLE.
NOTE: There were 45 observations read from the data set EMWS1.TRANS_VARIABLESET.
NOTE: The data set WORK.DIFFDS has 0 observations and 17 variables.
NOTE: PROCEDURE COMPARE used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
      

18432      %let diffVar = N;
18433      data _null_;
MPRINT(EM_GETACTIONSTATUS):   data _null_;
18434      set diffDs end=eof;
MPRINT(EM_GETACTIONSTATUS):   set diffDs end=eof;
18435      if eof and _N_>0 then call symput('diffVar', 'Y');
MPRINT(EM_GETACTIONSTATUS):   if eof and _N_>0 then call symput('diffVar', 'Y');
18436      run;
MPRINT(EM_GETACTIONSTATUS):   run;

NOTE: There were 0 observations read from the data set WORK.DIFFDS.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

18437      %let em_filemodtime=;
18438      data _null_;
MPRINT(EM_GETACTIONSTATUS):    data _null_;
18439      format modate best.;
MPRINT(EM_GETACTIONSTATUS):   format modate best.;
18440      set sashelp.Vextfl;
MPRINT(EM_GETACTIONSTATUS):   set sashelp.Vextfl;
18441      where fileref eq "#LN00344";
MPRINT(EM_GETACTIONSTATUS):   where fileref eq "#LN00344";
18442      call symput('EM_FILEMODTIME', put(modate, best.));
MPRINT(EM_GETACTIONSTATUS):   call symput('EM_FILEMODTIME', put(modate, best.));
18443      run;
MPRINT(EM_GETACTIONSTATUS):   run;

NOTE: There were 1 observations read from the data set SASHELP.VEXTFL.
      WHERE fileref='#LN00344';
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

18444      %symdel em_filemodtime;
WARNING: Attempt to delete macro variable EM_FILEMODTIME failed. Variable not found.
18445      %let em_filemodtime=;
18446      data _null_;
MPRINT(EM_GETACTIONSTATUS):     data _null_;
18447      format modate best.;
MPRINT(EM_GETACTIONSTATUS):   format modate best.;
18448      set sashelp.Vextfl;
MPRINT(EM_GETACTIONSTATUS):   set sashelp.Vextfl;
18449      where fileref eq "#LN00345";
MPRINT(EM_GETACTIONSTATUS):   where fileref eq "#LN00345";
18450      call symput('EM_FILEMODTIME', put(modate, best.));
MPRINT(EM_GETACTIONSTATUS):   call symput('EM_FILEMODTIME', put(modate, best.));
18451      run;
MPRINT(EM_GETACTIONSTATUS):   run;

NOTE: There were 1 observations read from the data set SASHELP.VEXTFL.
      WHERE fileref='#LN00345';
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

18452      %symdel em_filemodtime;
WARNING: Attempt to delete macro variable EM_FILEMODTIME failed. Variable not found.
18453      %let em_filemodtime=;
18454      data _null_;
MPRINT(EM_GETACTIONSTATUS):     data _null_;
18455      format modate best.;
MPRINT(EM_GETACTIONSTATUS):   format modate best.;
18456      set sashelp.Vextfl;
MPRINT(EM_GETACTIONSTATUS):   set sashelp.Vextfl;
18457      where fileref eq "#LN00346";
MPRINT(EM_GETACTIONSTATUS):   where fileref eq "#LN00346";
18458      call symput('EM_FILEMODTIME', put(modate, best.));
MPRINT(EM_GETACTIONSTATUS):   call symput('EM_FILEMODTIME', put(modate, best.));
18459      run;
MPRINT(EM_GETACTIONSTATUS):   run;

NOTE: There were 1 observations read from the data set SASHELP.VEXTFL.
      WHERE fileref='#LN00346';
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

18460      %symdel em_filemodtime;
WARNING: Attempt to delete macro variable EM_FILEMODTIME failed. Variable not found.
18461      %let em_Train = N;
18462      %let em_Score = N;
18463      %let em_Report = N;
18464      %let em_Run = N;
NOTE: PROCEDURE DISPLAY used (Total process time):
      real time           0.14 seconds
      cpu time            0.04 seconds
      

MPRINT(EM_GETACTIONSTATUS):     
MPRINT(EM_DIAGRAM):  ;

Node "Trans" has already run. 
Node "Trans" succeeded. 
18465      data _null_;
MPRINT(EM_DIAGRAM):    data _null_;
18466      file emwipmsg;
MPRINT(EM_DIAGRAM):   file emwipmsg;
18467      put '<Node Id="Trans" Event="Complete" Pid="2144" Gridid=""/>';
MPRINT(EM_DIAGRAM):   put '<Node Id="Trans" Event="Complete" Pid="2144" Gridid=""/>';
18468      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: The file EMWIPMSG is:
      Local Host Name=C2-Complab-38,
      Local Host IP addr=10.21.104.163,
      Peer Hostname Name=C2-Complab-38.cencol.ca,
      Peer IP addr=127.0.0.1,Peer Name=N/A,
      Peer Portno=3478,Lrecl=32767,Recfm=Variable

NOTE: 1 record was written to the file EMWIPMSG.
      The minimum record length was 56.
      The maximum record length was 56.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

Traverser: WaitingNode "NEURAL4" 
Traverser: WaitingNode "NEURAL3" 
Traverser: WaitingNode "NEURAL2" 
Traverser: WaitingNode "REG" 
Traverser: WaitingNode "NEURAL11" 
Traverser: WaitingNode "NEURAL5" 
Traverser: WaitingNode "REG2" 
Traverser: WaitingNode "NEURAL6" 
Traverser: WaitingNode "NEURAL13" 
Traverser: WaitingNode "NEURAL8" 
Traverser: WaitingNode "REG3" 
Traverser: WaitingNode "NEURAL7" 
Traverser: WaitingNode "NEURAL14" 
Traverser: WaitingNode "NEURAL9" 
Traverser: WaitingNode "REG4" 
Traverser: WaitingNode "NEURAL10" 
Traverser: WaitingNode "MDLCOMP" 
traverser_readyNode_note 
18469      data _null_;
MPRINT(EM_DIAGRAM):    data _null_;
18470      file emwipmsg;
MPRINT(EM_DIAGRAM):   file emwipmsg;
18471      put '<Node Id="Repl2" Event="Run" Pid="2144" Gridid=""/>';
MPRINT(EM_DIAGRAM):   put '<Node Id="Repl2" Event="Run" Pid="2144" Gridid=""/>';
18472      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: The file EMWIPMSG is:
      Local Host Name=C2-Complab-38,
      Local Host IP addr=10.21.104.163,
      Peer Hostname Name=C2-Complab-38.cencol.ca,
      Peer IP addr=127.0.0.1,Peer Name=N/A,
      Peer Portno=3478,Lrecl=32767,Recfm=Variable

NOTE: 1 record was written to the file EMWIPMSG.
      The minimum record length was 51.
      The maximum record length was 51.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

18473      %let emloopmode =;
*------------------------------------------------------------* 
* 
* Repl2 : Beginning update before running 
* datetime : 16APR2021:13:01:53 
* 
*------------------------------------------------------------* 
MPRINT(EM_DIAGRAM):     data WORK.Repl2_FILTERSET;
MPRINT(EM_DIAGRAM):   length PORT $32 USE $1;
MPRINT(EM_DIAGRAM):   DROP DELTACODE APPLYDELTA APPLYSCORE IMPORTPORT;
MPRINT(EM_DIAGRAM):   set EMWS1.Trans_exportSet ;
MPRINT(EM_DIAGRAM):   PORT = '';
MPRINT(EM_DIAGRAM):   USE = '';
MPRINT(EM_DIAGRAM):   where role in( "RAW" "TRAIN" "VALIDATE" "TEST" "SCORE" "TRANSACTION" "DOCUMENT" "RULES" "REPORTFIT" "RANK" "SCOREDIST" "ESTIMATE" "TREE" "CLUSSTAT" "CLUSMEAN" "VARMAP" ) and EXPORT = 'Y' ;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Repl2: Generation of macros and macro variables;
MPRINT(EM_DIAGRAM):   * To see the code generated, set the EM_DEBUG macro variable to SOURCE or _ALL_;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Repl2: EM Macro Variables and Macros;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   * System Macro Variables;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   length string $2000;
MPRINT(EM_DIAGRAM):   string = 'Decision Tree test';
MPRINT(EM_DIAGRAM):   call symput('EM_PROJECTNAME', trim(string));
MPRINT(EM_DIAGRAM):   string = 'Decision Tree';
MPRINT(EM_DIAGRAM):   call symput('EM_WSNAME', trim(string));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   * Properties Macro Variables ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Files Macro Variables;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Import Macro Variables;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Export Macro Variables;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Decision Macro Variables;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Statement Macro Variables;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   set EMWS1.FIMPORT_EMINFO;
MPRINT(EM_DIAGRAM):   where key in('HPDMSAMPLE', 'IDSTABLE');
MPRINT(EM_DIAGRAM):   if key = 'HPDMSAMPLE' then call symput('_ForceGrid', '1');
MPRINT(EM_DIAGRAM):   else call symput('_IDS_TABLE', DATA);
MPRINT(EM_DIAGRAM):   run;
MPRINT(HPDM_PERFORMANCE):  ;
PERFORMANCE  DETAILS
MPRINT(EM_DIAGRAM):  ;
18709      %let emexceptionString =;
18710      %let EMEXCEPTIONSTRING=;
18711      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
18712      * UPDATE: Repl2;
MPRINT(EM_DIAGRAM):   * UPDATE: Repl2;
18713      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
18714      %let EM_ACTION = UPDATE;
18715      %let syscc = 0;
18716      filename x CATALOG 'SASHELP.EMUTIL.EM_VARMACRO.SOURCE';
MPRINT(EM_DIAGRAM):     filename x CATALOG 'SASHELP.EMUTIL.EM_VARMACRO.SOURCE';
18717      %inc x;
NOTE: %INCLUDE (level 1) file X is file SASHELP.EMUTIL.EM_VARMACRO.SOURCE.
18718     +
18719     +%macro em_varMacro(name=emMacro, metadata=, where=, key=NAME, nummacro=);
18720     +
18721     +   filename macFile catalog 'work.emutil.macro.source';
18722     +   %let _METAOBS = 0;
18723     +
18724     +   %if (%sysfunc(exist(&metadata))<1 and %sysfunc(exist(&metadata, VIEW))<1)
18725     +                   or (&metadata eq ) %then %do;
18726     +       %put * No metadata data set defined;
18727     +       %goto doend;
18728     +   %end;
18729     +
18730     +   data _null_;
18731     +      length _STRING_ $80;
18732     +      retain _STRING_;
18733     +      set &metadata end=eof;
18734     +      file macFile;
18735     +      %if %nrbquote(&where) ne %then %do;
18736     +          %let whereClause = where (%nrbquote(&where));
18737     +          %unquote(&whereClause);
18738     +      %end;
18739     +      if _N_=1 then do;
18740     +         string = "%"!!"macro &name;";
18741     +         put string;
18742     +      end;
18743     +      if (length(_STRING_) + length(trim(&key))+ 1 < 80) then do;
18744     +         _STRING_ = trim(_STRING_)!!' '!!trim(&key);
18745     +         if eof then do;
18746     +            put _STRING_;
18747     +            string = "%"!!"mend &name;";
18748     +            put string;
18749     +            %if (&nummacro ne ) %then %do;
18750     +                string = strip(put(_N_, best.));
18751     +                put "%" "global &nummacro;";
18752     +                put "%" "let &nummacro = " string ";";
18753     +                call symput('_METAOBS', string);
18754     +            %end;
18755     +         end;
18756     +      end;
18757     +      else do;
18758     +         put _STRING_;
18759     +         _string_ = TRIM(&key);
18760     +         if eof then do;
18761     +            put _STRING_;
18762     +            string = "%"!!"mend &name;";
18763     +            put string;
18764     +        end;
18765     +      end;
18766     +      if eof then do;
18767     +         string = strip(put(_N_, best.));
18768     +         call symput('_METAOBS', string);
18769     +         %if (&nummacro ne ) %then %do;
18770     +             put "%" "global &nummacro;";
18771     +             put "%" "let &nummacro = " string ";";
18772     +         %end;
18773     +      end;
18774     +   run;
18775     +
18776     +   %doend:
18777     +   %if ^&_METAOBS %then %do;
18778     +       data _null_;
18779     +          file macFile;
18780     +          put "%" "macro &name;";
18781     +          put "%" "mend &name;";
18782     +          %if (&nummacro ne ) %then %do;
18783     +              put "%" "global &nummacro;";
18784     +              put "%" "let &nummacro = 0;";
18785     +          %end;
18786     +      run;
18787     +   %end;
18788     +   %inc macFile;
18789     +   filename macFile;
18790     +%mend em_varMacro;
NOTE: %INCLUDE (level 1) ending.
18791      filename X;
MPRINT(EM_DIAGRAM):   filename X;
NOTE: Fileref X has been deassigned.
18792       %macro main;
18793      
18794         filename temp catalog 'sashelp.emmdfy.Replace_macros.source';
18795         %include temp;
18796         filename temp;
18797      
18798         %if %upcase(&EM_ACTION) = CREATE %then %do;
18799      
18800             filename temp catalog 'sashelp.emmdfy.Replace_create.source';
18801             %include temp;
18802             filename temp;
18803             %create;
18804         %end;
18805         %else
18806         %if %upcase(&EM_ACTION) = TRAIN %then %do;
18807      
18808             filename temp catalog 'sashelp.emmdfy.Replace_train.source';
18809             %include temp;
18810             filename temp;
18811             %train;
18812         %end;
18813         %else
18814         %if %upcase(&EM_ACTION) = SCORE %then %do;
18815      
18816             filename temp catalog 'sashelp.emmdfy.Replace_score.source';
18817             %include temp;
18818             filename temp;
18819             %score;
18820         %end;
18821         %if %upcase(&EM_ACTION) = REPORT %then %do;
18822      
18823             filename temp catalog 'sashelp.emmdfy.Replace_report.source';
18824             %include temp;
18825             filename temp;
18826             %report;
18827         %end;
18828         %if %upcase(&EM_ACTION) = OPENOUTCLASSTABLE %then %do;
18829             filename temp catalog 'sashelp.emmdfy.replace_makeoutclass.source';
18830             %include temp;
18831             filename temp;
18832             %em_replace_openoutclass;
18833         %end;
18834         %if %upcase(&EM_ACTION) = CLOSEOUTCLASSTABLE %then %do;
18835             filename temp catalog 'sashelp.emmdfy.replace_makeoutclass.source';
18836             %include temp;
18837             filename temp;
18838             %em_replace_closeoutclass;
18839         %end;
18840      %mend main;
18841      
18842      %main;
MPRINT(MAIN):   filename temp catalog 'sashelp.emmdfy.Replace_macros.source';
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMMDFY.REPLACE_MACROS.SOURCE.
18843     +%macro SetProperties;
18844     +   %em_checkmacro(name=EM_PROPERTY_UNKNOWNLEVEL,    global=Y, value=MODE);
18845     +   %em_checkmacro(name=EM_PROPERTY_CALCMETHOD,      global=Y, value=NONE);
18846     +   %em_checkmacro(name=EM_PROPERTY_PERCENTSCUTOFF,  global=Y, value=0.5);
18847     +   %em_checkmacro(name=EM_PROPERTY_SPACINGSCUTOFF,  global=Y, value=9);
18848     +   %em_checkMacro(name=EM_PROPERTY_MADSCUTOFF,      global=Y, value=9);
18849     +   %em_checkMacro(name=EM_PROPERTY_STDDEVCUTOFF,    global=Y, value=3);
18850     +   %em_checkmacro(name=EM_PROPERTY_REPLACEMETHOD,   global=Y, value=COMPUTED);
18851     +   %em_checkmacro(name=EM_PROPERTY_HIDEVARIABLE,    global=Y, value=N);
18852     +   %em_checkmacro(name=EM_PROPERTY_INTERVALMETHOD,  global=Y, value=NONE);
18853     +   %em_checkmacro(name=EM_PROPERTY_REPORTCOUNT,     global=Y, value=Y);
18854     +
18855     +%mend SetProperties;
18856     +
NOTE: %INCLUDE (level 1) ending.
MPRINT(MAIN):   filename temp;
NOTE: Fileref TEMP has been deassigned.
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * End UPDATE: Repl2;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
18857      
18858      *------------------------------------------------------------*;
18859      * End UPDATE: Repl2;
18860      *------------------------------------------------------------*;

18861      %em_delMacro;
MPRINT(EM_DIAGRAM):   
MPRINT(EM_DIAGRAM):  ;

MPRINT(EM_DIAGRAM):    filename _emtool_ 'H:\746\Decision Tree test\Workspaces\EMWS1\Repl2\PROPERTIES.xml' encoding="UTF-8" NOBOM;
18863      %let _HPDMGRIDHOST=;
18864      %let _HPDMGRIDINSTALLLOC=;
18865      %let _HPDMGRIDDATASERVER=;
18866      %hpdm_gridSetOPtions;
MPRINT(EM_DIAGRAM):   
MPRINT(HPDM_GRIDSETOPTIONS):   data _null_;
MPRINT(HPDM_GRIDSETOPTIONS):   length optionString string $2000;
MPRINT(HPDM_GRIDSETOPTIONS):   optionString = reverse(getoption('SET'));
MPRINT(HPDM_GRIDSETOPTIONS):   index = index(optionString, reverse('GRIDHOST'));
MPRINT(HPDM_GRIDSETOPTIONS):   if index then do;
MPRINT(HPDM_GRIDSETOPTIONS):   string = reverse(substr(optionString, 1, index-4));
MPRINT(HPDM_GRIDSETOPTIONS):   host = '"'!!strip(tranwrd(scan(string, 1, ']'), '"', ''))!!'"';
MPRINT(HPDM_GRIDSETOPTIONS):   call symput('_HPDMGRIDHOST', strip(host));
MPRINT(HPDM_GRIDSETOPTIONS):   end;
MPRINT(HPDM_GRIDSETOPTIONS):   index = index(optionString, reverse('GRIDINSTALLLOC'));
MPRINT(HPDM_GRIDSETOPTIONS):   if index then do;
MPRINT(HPDM_GRIDSETOPTIONS):   string = reverse(substr(optionString, 1, index-4));
MPRINT(HPDM_GRIDSETOPTIONS):   install = '"'!!strip(tranwrd(scan(string, 1, ']'), '"', ''))!!'"';
MPRINT(HPDM_GRIDSETOPTIONS):   call symput('_HPDMGRIDINSTALLLOC', strip(install));
MPRINT(HPDM_GRIDSETOPTIONS):   end;
MPRINT(HPDM_GRIDSETOPTIONS):   index = index(optionString, reverse('GRIDDATASERVER'));
MPRINT(HPDM_GRIDSETOPTIONS):   if index then do;
MPRINT(HPDM_GRIDSETOPTIONS):   string = reverse(substr(optionString, 1, index-4));
MPRINT(HPDM_GRIDSETOPTIONS):   server = '"'!!strip(tranwrd(scan(string, 1, ']'), '"', ''))!!'"';
MPRINT(HPDM_GRIDSETOPTIONS):   call symput('_HPDMGRIDDATASERVER', strip(server));
MPRINT(HPDM_GRIDSETOPTIONS):   end;
MPRINT(HPDM_GRIDSETOPTIONS):   run;

NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(EM_DIAGRAM):  ;

*------------------------------------------------------------* 
* 
* Repl2 : End update 
* datetime : 16APR2021:13:01:58 
* 
*------------------------------------------------------------* 
18867      %em_getactionstatus(emlib =EMWS1, nodeid=Repl2);
MPRINT(EM_DIAGRAM):   
MPRINT(EM_GETACTIONSTATUS):   proc display c=sashelp.emutil.getactionstatus.scl;
MPRINT(EM_GETACTIONSTATUS):   run;

18868      %let em_filemodtime=;
18869      data _null_;
MPRINT(EM_GETACTIONSTATUS):   data _null_;
18870      format modate best.;
MPRINT(EM_GETACTIONSTATUS):   format modate best.;
18871      set sashelp.Vextfl;
MPRINT(EM_GETACTIONSTATUS):   set sashelp.Vextfl;
18872      where fileref eq "#LN00374";
MPRINT(EM_GETACTIONSTATUS):   where fileref eq "#LN00374";
18873      call symput('EM_FILEMODTIME', put(modate, best.));
MPRINT(EM_GETACTIONSTATUS):   call symput('EM_FILEMODTIME', put(modate, best.));
18874      run;
MPRINT(EM_GETACTIONSTATUS):   run;

NOTE: There were 1 observations read from the data set SASHELP.VEXTFL.
      WHERE fileref='#LN00374';
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

18875      %symdel em_filemodtime;
WARNING: Attempt to delete macro variable EM_FILEMODTIME failed. Variable not found.
NOTE: View EMWS1.REPL2_NEWVALUES.VIEW used (Total process time):
      real time           0.04 seconds
      cpu time            0.04 seconds
      
18876      %let em_Train = N;
18877      %let em_Score = N;
18878      %let em_Report = N;
18879      %let em_Run = N;
NOTE: PROCEDURE DISPLAY used (Total process time):
      real time           0.14 seconds
      cpu time            0.06 seconds
      

MPRINT(EM_GETACTIONSTATUS):     
MPRINT(EM_DIAGRAM):  ;

Node "Repl2" has already run. 
Node "Repl2" succeeded. 
18880      data _null_;
MPRINT(EM_DIAGRAM):    data _null_;
18881      file emwipmsg;
MPRINT(EM_DIAGRAM):   file emwipmsg;
18882      put '<Node Id="Repl2" Event="Complete" Pid="2144" Gridid=""/>';
MPRINT(EM_DIAGRAM):   put '<Node Id="Repl2" Event="Complete" Pid="2144" Gridid=""/>';
18883      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: The file EMWIPMSG is:
      Local Host Name=C2-Complab-38,
      Local Host IP addr=10.21.104.163,
      Peer Hostname Name=C2-Complab-38.cencol.ca,
      Peer IP addr=127.0.0.1,Peer Name=N/A,
      Peer Portno=3478,Lrecl=32767,Recfm=Variable

NOTE: 1 record was written to the file EMWIPMSG.
      The minimum record length was 56.
      The maximum record length was 56.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

Traverser: WaitingNode "NEURAL11" 
Traverser: WaitingNode "NEURAL5" 
Traverser: WaitingNode "NEURAL6" 
Traverser: WaitingNode "NEURAL13" 
Traverser: WaitingNode "NEURAL8" 
Traverser: WaitingNode "NEURAL7" 
Traverser: WaitingNode "NEURAL14" 
Traverser: WaitingNode "NEURAL9" 
Traverser: WaitingNode "NEURAL10" 
Traverser: WaitingNode "MDLCOMP" 
traverser_readyNode_note 
traverser_readyNode_note 
traverser_readyNode_note 
traverser_readyNode_note 
traverser_readyNode_note 
traverser_readyNode_note 
traverser_readyNode_note 
18884      data _null_;
MPRINT(EM_DIAGRAM):    data _null_;
18885      file emwipmsg;
MPRINT(EM_DIAGRAM):   file emwipmsg;
18886      put '<Node Id="Neural4" Event="Run" Pid="2144" Gridid=""/>';
MPRINT(EM_DIAGRAM):   put '<Node Id="Neural4" Event="Run" Pid="2144" Gridid=""/>';
18887      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: The file EMWIPMSG is:
      Local Host Name=C2-Complab-38,
      Local Host IP addr=10.21.104.163,
      Peer Hostname Name=C2-Complab-38.cencol.ca,
      Peer IP addr=127.0.0.1,Peer Name=N/A,
      Peer Portno=3478,Lrecl=32767,Recfm=Variable

NOTE: 1 record was written to the file EMWIPMSG.
      The minimum record length was 53.
      The maximum record length was 53.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

18888      %let emloopmode =;
*------------------------------------------------------------* 
* 
* Neural4 : Beginning update before running 
* datetime : 16APR2021:13:01:58 
* 
*------------------------------------------------------------* 
MPRINT(EM_DIAGRAM):     data WORK.Neural4_FILTERSET;
MPRINT(EM_DIAGRAM):   length PORT $32 USE $1;
MPRINT(EM_DIAGRAM):   DROP DELTACODE APPLYDELTA APPLYSCORE IMPORTPORT;
MPRINT(EM_DIAGRAM):   set EMWS1.Repl2_exportSet ;
MPRINT(EM_DIAGRAM):   PORT = '';
MPRINT(EM_DIAGRAM):   USE = '';
MPRINT(EM_DIAGRAM):   where role in( "RAW" "TRAIN" "VALIDATE" "TEST" ) and EXPORT = 'Y' ;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _emtool_ 'H:\746\Decision Tree test\Workspaces\EMWS1\Neural4\PROPERTIES.xml' encoding="UTF-8" NOBOM;
18908      %let _HPDMGRIDHOST=;
18909      %let _HPDMGRIDINSTALLLOC=;
18910      %let _HPDMGRIDDATASERVER=;
18911      %hpdm_gridSetOPtions;
MPRINT(EM_DIAGRAM):   
MPRINT(HPDM_GRIDSETOPTIONS):   data _null_;
MPRINT(HPDM_GRIDSETOPTIONS):   length optionString string $2000;
MPRINT(HPDM_GRIDSETOPTIONS):   optionString = reverse(getoption('SET'));
MPRINT(HPDM_GRIDSETOPTIONS):   index = index(optionString, reverse('GRIDHOST'));
MPRINT(HPDM_GRIDSETOPTIONS):   if index then do;
MPRINT(HPDM_GRIDSETOPTIONS):   string = reverse(substr(optionString, 1, index-4));
MPRINT(HPDM_GRIDSETOPTIONS):   host = '"'!!strip(tranwrd(scan(string, 1, ']'), '"', ''))!!'"';
MPRINT(HPDM_GRIDSETOPTIONS):   call symput('_HPDMGRIDHOST', strip(host));
MPRINT(HPDM_GRIDSETOPTIONS):   end;
MPRINT(HPDM_GRIDSETOPTIONS):   index = index(optionString, reverse('GRIDINSTALLLOC'));
MPRINT(HPDM_GRIDSETOPTIONS):   if index then do;
MPRINT(HPDM_GRIDSETOPTIONS):   string = reverse(substr(optionString, 1, index-4));
MPRINT(HPDM_GRIDSETOPTIONS):   install = '"'!!strip(tranwrd(scan(string, 1, ']'), '"', ''))!!'"';
MPRINT(HPDM_GRIDSETOPTIONS):   call symput('_HPDMGRIDINSTALLLOC', strip(install));
MPRINT(HPDM_GRIDSETOPTIONS):   end;
MPRINT(HPDM_GRIDSETOPTIONS):   index = index(optionString, reverse('GRIDDATASERVER'));
MPRINT(HPDM_GRIDSETOPTIONS):   if index then do;
MPRINT(HPDM_GRIDSETOPTIONS):   string = reverse(substr(optionString, 1, index-4));
MPRINT(HPDM_GRIDSETOPTIONS):   server = '"'!!strip(tranwrd(scan(string, 1, ']'), '"', ''))!!'"';
MPRINT(HPDM_GRIDSETOPTIONS):   call symput('_HPDMGRIDDATASERVER', strip(server));
MPRINT(HPDM_GRIDSETOPTIONS):   end;
MPRINT(HPDM_GRIDSETOPTIONS):   run;

NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(EM_DIAGRAM):  ;

*------------------------------------------------------------* 
* 
* Neural4 : End update 
* datetime : 16APR2021:13:01:59 
* 
*------------------------------------------------------------* 
18912      %em_getactionstatus(emlib =EMWS1, nodeid=Neural4);
MPRINT(EM_DIAGRAM):   
MPRINT(EM_GETACTIONSTATUS):   proc display c=sashelp.emutil.getactionstatus.scl;
MPRINT(EM_GETACTIONSTATUS):   run;

18913      %let em_Train = N;
18914      %let em_Score = N;
18915      %let em_Report = N;
18916      %let em_Run = N;
NOTE: PROCEDURE DISPLAY used (Total process time):
      real time           0.06 seconds
      cpu time            0.00 seconds
      

MPRINT(EM_GETACTIONSTATUS):   
MPRINT(EM_DIAGRAM):  ;

Node "Neural4" has already run. 
Node "Neural4" succeeded. 
18917      data _null_;
MPRINT(EM_DIAGRAM):    data _null_;
18918      file emwipmsg;
MPRINT(EM_DIAGRAM):   file emwipmsg;
18919      put '<Node Id="Neural4" Event="Complete" Pid="2144" Gridid=""/>';
MPRINT(EM_DIAGRAM):   put '<Node Id="Neural4" Event="Complete" Pid="2144" Gridid=""/>';
18920      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: The file EMWIPMSG is:
      Local Host Name=C2-Complab-38,
      Local Host IP addr=10.21.104.163,
      Peer Hostname Name=C2-Complab-38.cencol.ca,
      Peer IP addr=127.0.0.1,Peer Name=N/A,
      Peer Portno=3478,Lrecl=32767,Recfm=Variable

NOTE: 1 record was written to the file EMWIPMSG.
      The minimum record length was 58.
      The maximum record length was 58.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

Traverser: WaitingNode "NEURAL11" 
Traverser: WaitingNode "NEURAL5" 
Traverser: WaitingNode "NEURAL6" 
Traverser: WaitingNode "NEURAL13" 
Traverser: WaitingNode "NEURAL8" 
Traverser: WaitingNode "NEURAL7" 
Traverser: WaitingNode "NEURAL14" 
Traverser: WaitingNode "NEURAL9" 
Traverser: WaitingNode "NEURAL10" 
Traverser: WaitingNode "MDLCOMP" 
traverser_readyNode_note 
traverser_readyNode_note 
traverser_readyNode_note 
traverser_readyNode_note 
traverser_readyNode_note 
traverser_readyNode_note 
18921      data _null_;
MPRINT(EM_DIAGRAM):    data _null_;
18922      file emwipmsg;
MPRINT(EM_DIAGRAM):   file emwipmsg;
18923      put '<Node Id="Neural3" Event="Run" Pid="2144" Gridid=""/>';
MPRINT(EM_DIAGRAM):   put '<Node Id="Neural3" Event="Run" Pid="2144" Gridid=""/>';
18924      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: The file EMWIPMSG is:
      Local Host Name=C2-Complab-38,
      Local Host IP addr=10.21.104.163,
      Peer Hostname Name=C2-Complab-38.cencol.ca,
      Peer IP addr=127.0.0.1,Peer Name=N/A,
      Peer Portno=3478,Lrecl=32767,Recfm=Variable

NOTE: 1 record was written to the file EMWIPMSG.
      The minimum record length was 53.
      The maximum record length was 53.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
      

18925      %let emloopmode =;
*------------------------------------------------------------* 
* 
* Neural3 : Beginning update before running 
* datetime : 16APR2021:13:02:00 
* 
*------------------------------------------------------------* 
MPRINT(EM_DIAGRAM):     data WORK.Neural3_FILTERSET;
MPRINT(EM_DIAGRAM):   length PORT $32 USE $1;
MPRINT(EM_DIAGRAM):   DROP DELTACODE APPLYDELTA APPLYSCORE IMPORTPORT;
MPRINT(EM_DIAGRAM):   set EMWS1.Repl2_exportSet ;
MPRINT(EM_DIAGRAM):   PORT = '';
MPRINT(EM_DIAGRAM):   USE = '';
MPRINT(EM_DIAGRAM):   where role in( "RAW" "TRAIN" "VALIDATE" "TEST" ) and EXPORT = 'Y' ;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _emtool_ 'H:\746\Decision Tree test\Workspaces\EMWS1\Neural3\PROPERTIES.xml' encoding="UTF-8" NOBOM;
18945      %let _HPDMGRIDHOST=;
18946      %let _HPDMGRIDINSTALLLOC=;
18947      %let _HPDMGRIDDATASERVER=;
18948      %hpdm_gridSetOPtions;
MPRINT(EM_DIAGRAM):   
MPRINT(HPDM_GRIDSETOPTIONS):   data _null_;
MPRINT(HPDM_GRIDSETOPTIONS):   length optionString string $2000;
MPRINT(HPDM_GRIDSETOPTIONS):   optionString = reverse(getoption('SET'));
MPRINT(HPDM_GRIDSETOPTIONS):   index = index(optionString, reverse('GRIDHOST'));
MPRINT(HPDM_GRIDSETOPTIONS):   if index then do;
MPRINT(HPDM_GRIDSETOPTIONS):   string = reverse(substr(optionString, 1, index-4));
MPRINT(HPDM_GRIDSETOPTIONS):   host = '"'!!strip(tranwrd(scan(string, 1, ']'), '"', ''))!!'"';
MPRINT(HPDM_GRIDSETOPTIONS):   call symput('_HPDMGRIDHOST', strip(host));
MPRINT(HPDM_GRIDSETOPTIONS):   end;
MPRINT(HPDM_GRIDSETOPTIONS):   index = index(optionString, reverse('GRIDINSTALLLOC'));
MPRINT(HPDM_GRIDSETOPTIONS):   if index then do;
MPRINT(HPDM_GRIDSETOPTIONS):   string = reverse(substr(optionString, 1, index-4));
MPRINT(HPDM_GRIDSETOPTIONS):   install = '"'!!strip(tranwrd(scan(string, 1, ']'), '"', ''))!!'"';
MPRINT(HPDM_GRIDSETOPTIONS):   call symput('_HPDMGRIDINSTALLLOC', strip(install));
MPRINT(HPDM_GRIDSETOPTIONS):   end;
MPRINT(HPDM_GRIDSETOPTIONS):   index = index(optionString, reverse('GRIDDATASERVER'));
MPRINT(HPDM_GRIDSETOPTIONS):   if index then do;
MPRINT(HPDM_GRIDSETOPTIONS):   string = reverse(substr(optionString, 1, index-4));
MPRINT(HPDM_GRIDSETOPTIONS):   server = '"'!!strip(tranwrd(scan(string, 1, ']'), '"', ''))!!'"';
MPRINT(HPDM_GRIDSETOPTIONS):   call symput('_HPDMGRIDDATASERVER', strip(server));
MPRINT(HPDM_GRIDSETOPTIONS):   end;
MPRINT(HPDM_GRIDSETOPTIONS):   run;

NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(EM_DIAGRAM):  ;

*------------------------------------------------------------* 
* 
* Neural3 : End update 
* datetime : 16APR2021:13:02:00 
* 
*------------------------------------------------------------* 
18949      %em_getactionstatus(emlib =EMWS1, nodeid=Neural3);
MPRINT(EM_DIAGRAM):   
MPRINT(EM_GETACTIONSTATUS):   proc display c=sashelp.emutil.getactionstatus.scl;
MPRINT(EM_GETACTIONSTATUS):   run;

18950      %let em_Train = N;
18951      %let em_Score = N;
18952      %let em_Report = N;
18953      %let em_Run = N;
NOTE: PROCEDURE DISPLAY used (Total process time):
      real time           0.07 seconds
      cpu time            0.01 seconds
      

MPRINT(EM_GETACTIONSTATUS):   
MPRINT(EM_DIAGRAM):  ;

Node "Neural3" has already run. 
Node "Neural3" succeeded. 
18954      data _null_;
MPRINT(EM_DIAGRAM):    data _null_;
18955      file emwipmsg;
MPRINT(EM_DIAGRAM):   file emwipmsg;
18956      put '<Node Id="Neural3" Event="Complete" Pid="2144" Gridid=""/>';
MPRINT(EM_DIAGRAM):   put '<Node Id="Neural3" Event="Complete" Pid="2144" Gridid=""/>';
18957      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: The file EMWIPMSG is:
      Local Host Name=C2-Complab-38,
      Local Host IP addr=10.21.104.163,
      Peer Hostname Name=C2-Complab-38.cencol.ca,
      Peer IP addr=127.0.0.1,Peer Name=N/A,
      Peer Portno=3478,Lrecl=32767,Recfm=Variable

NOTE: 1 record was written to the file EMWIPMSG.
      The minimum record length was 58.
      The maximum record length was 58.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

Traverser: WaitingNode "NEURAL11" 
Traverser: WaitingNode "NEURAL5" 
Traverser: WaitingNode "NEURAL6" 
Traverser: WaitingNode "NEURAL13" 
Traverser: WaitingNode "NEURAL8" 
Traverser: WaitingNode "NEURAL7" 
Traverser: WaitingNode "NEURAL14" 
Traverser: WaitingNode "NEURAL9" 
Traverser: WaitingNode "NEURAL10" 
Traverser: WaitingNode "MDLCOMP" 
traverser_readyNode_note 
traverser_readyNode_note 
traverser_readyNode_note 
traverser_readyNode_note 
traverser_readyNode_note 
18958      data _null_;
MPRINT(EM_DIAGRAM):    data _null_;
18959      file emwipmsg;
MPRINT(EM_DIAGRAM):   file emwipmsg;
18960      put '<Node Id="Neural2" Event="Run" Pid="2144" Gridid=""/>';
MPRINT(EM_DIAGRAM):   put '<Node Id="Neural2" Event="Run" Pid="2144" Gridid=""/>';
18961      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: The file EMWIPMSG is:
      Local Host Name=C2-Complab-38,
      Local Host IP addr=10.21.104.163,
      Peer Hostname Name=C2-Complab-38.cencol.ca,
      Peer IP addr=127.0.0.1,Peer Name=N/A,
      Peer Portno=3478,Lrecl=32767,Recfm=Variable

NOTE: 1 record was written to the file EMWIPMSG.
      The minimum record length was 53.
      The maximum record length was 53.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

18962      %let emloopmode =;
*------------------------------------------------------------* 
* 
* Neural2 : Beginning update before running 
* datetime : 16APR2021:13:02:05 
* 
*------------------------------------------------------------* 
MPRINT(EM_DIAGRAM):     data WORK.Neural2_FILTERSET;
MPRINT(EM_DIAGRAM):   length PORT $32 USE $1;
MPRINT(EM_DIAGRAM):   DROP DELTACODE APPLYDELTA APPLYSCORE IMPORTPORT;
MPRINT(EM_DIAGRAM):   set EMWS1.Repl2_exportSet ;
MPRINT(EM_DIAGRAM):   PORT = '';
MPRINT(EM_DIAGRAM):   USE = '';
MPRINT(EM_DIAGRAM):   where role in( "RAW" "TRAIN" "VALIDATE" "TEST" ) and EXPORT = 'Y' ;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _emtool_ 'H:\746\Decision Tree test\Workspaces\EMWS1\Neural2\PROPERTIES.xml' encoding="UTF-8" NOBOM;
18982      %let _HPDMGRIDHOST=;
18983      %let _HPDMGRIDINSTALLLOC=;
18984      %let _HPDMGRIDDATASERVER=;
18985      %hpdm_gridSetOPtions;
MPRINT(EM_DIAGRAM):   
MPRINT(HPDM_GRIDSETOPTIONS):   data _null_;
MPRINT(HPDM_GRIDSETOPTIONS):   length optionString string $2000;
MPRINT(HPDM_GRIDSETOPTIONS):   optionString = reverse(getoption('SET'));
MPRINT(HPDM_GRIDSETOPTIONS):   index = index(optionString, reverse('GRIDHOST'));
MPRINT(HPDM_GRIDSETOPTIONS):   if index then do;
MPRINT(HPDM_GRIDSETOPTIONS):   string = reverse(substr(optionString, 1, index-4));
MPRINT(HPDM_GRIDSETOPTIONS):   host = '"'!!strip(tranwrd(scan(string, 1, ']'), '"', ''))!!'"';
MPRINT(HPDM_GRIDSETOPTIONS):   call symput('_HPDMGRIDHOST', strip(host));
MPRINT(HPDM_GRIDSETOPTIONS):   end;
MPRINT(HPDM_GRIDSETOPTIONS):   index = index(optionString, reverse('GRIDINSTALLLOC'));
MPRINT(HPDM_GRIDSETOPTIONS):   if index then do;
MPRINT(HPDM_GRIDSETOPTIONS):   string = reverse(substr(optionString, 1, index-4));
MPRINT(HPDM_GRIDSETOPTIONS):   install = '"'!!strip(tranwrd(scan(string, 1, ']'), '"', ''))!!'"';
MPRINT(HPDM_GRIDSETOPTIONS):   call symput('_HPDMGRIDINSTALLLOC', strip(install));
MPRINT(HPDM_GRIDSETOPTIONS):   end;
MPRINT(HPDM_GRIDSETOPTIONS):   index = index(optionString, reverse('GRIDDATASERVER'));
MPRINT(HPDM_GRIDSETOPTIONS):   if index then do;
MPRINT(HPDM_GRIDSETOPTIONS):   string = reverse(substr(optionString, 1, index-4));
MPRINT(HPDM_GRIDSETOPTIONS):   server = '"'!!strip(tranwrd(scan(string, 1, ']'), '"', ''))!!'"';
MPRINT(HPDM_GRIDSETOPTIONS):   call symput('_HPDMGRIDDATASERVER', strip(server));
MPRINT(HPDM_GRIDSETOPTIONS):   end;
MPRINT(HPDM_GRIDSETOPTIONS):   run;

NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(EM_DIAGRAM):  ;

*------------------------------------------------------------* 
* 
* Neural2 : End update 
* datetime : 16APR2021:13:02:05 
* 
*------------------------------------------------------------* 
18986      %em_getactionstatus(emlib =EMWS1, nodeid=Neural2);
MPRINT(EM_DIAGRAM):   
MPRINT(EM_GETACTIONSTATUS):   proc display c=sashelp.emutil.getactionstatus.scl;
MPRINT(EM_GETACTIONSTATUS):   run;

18987      %let em_Train = N;
18988      %let em_Score = N;
18989      %let em_Report = N;
18990      %let em_Run = N;
NOTE: PROCEDURE DISPLAY used (Total process time):
      real time           0.07 seconds
      cpu time            0.01 seconds
      

MPRINT(EM_GETACTIONSTATUS):   
MPRINT(EM_DIAGRAM):  ;

Node "Neural2" has already run. 
Node "Neural2" succeeded. 
18991      data _null_;
MPRINT(EM_DIAGRAM):    data _null_;
18992      file emwipmsg;
MPRINT(EM_DIAGRAM):   file emwipmsg;
18993      put '<Node Id="Neural2" Event="Complete" Pid="2144" Gridid=""/>';
MPRINT(EM_DIAGRAM):   put '<Node Id="Neural2" Event="Complete" Pid="2144" Gridid=""/>';
18994      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: The file EMWIPMSG is:
      Local Host Name=C2-Complab-38,
      Local Host IP addr=10.21.104.163,
      Peer Hostname Name=C2-Complab-38.cencol.ca,
      Peer IP addr=127.0.0.1,Peer Name=N/A,
      Peer Portno=3478,Lrecl=32767,Recfm=Variable

NOTE: 1 record was written to the file EMWIPMSG.
      The minimum record length was 58.
      The maximum record length was 58.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
      

Traverser: WaitingNode "NEURAL11" 
Traverser: WaitingNode "NEURAL5" 
Traverser: WaitingNode "NEURAL6" 
Traverser: WaitingNode "NEURAL13" 
Traverser: WaitingNode "NEURAL8" 
Traverser: WaitingNode "NEURAL7" 
Traverser: WaitingNode "NEURAL14" 
Traverser: WaitingNode "NEURAL9" 
Traverser: WaitingNode "NEURAL10" 
Traverser: WaitingNode "MDLCOMP" 
traverser_readyNode_note 
traverser_readyNode_note 
traverser_readyNode_note 
traverser_readyNode_note 
18995      data _null_;
MPRINT(EM_DIAGRAM):    data _null_;
18996      file emwipmsg;
MPRINT(EM_DIAGRAM):   file emwipmsg;
18997      put '<Node Id="Reg4" Event="Run" Pid="2144" Gridid=""/>';
MPRINT(EM_DIAGRAM):   put '<Node Id="Reg4" Event="Run" Pid="2144" Gridid=""/>';
18998      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: The file EMWIPMSG is:
      Local Host Name=C2-Complab-38,
      Local Host IP addr=10.21.104.163,
      Peer Hostname Name=C2-Complab-38.cencol.ca,
      Peer IP addr=127.0.0.1,Peer Name=N/A,
      Peer Portno=3478,Lrecl=32767,Recfm=Variable

NOTE: 1 record was written to the file EMWIPMSG.
      The minimum record length was 50.
      The maximum record length was 50.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
      

18999      %let emloopmode =;
*------------------------------------------------------------* 
* 
* Reg4 : Beginning update before running 
* datetime : 16APR2021:13:02:06 
* 
*------------------------------------------------------------* 
MPRINT(EM_DIAGRAM):     data WORK.Reg4_FILTERSET;
MPRINT(EM_DIAGRAM):   length PORT $32 USE $1;
MPRINT(EM_DIAGRAM):   DROP DELTACODE APPLYDELTA APPLYSCORE IMPORTPORT;
MPRINT(EM_DIAGRAM):   set EMWS1.Repl2_exportSet ;
MPRINT(EM_DIAGRAM):   PORT = '';
MPRINT(EM_DIAGRAM):   USE = '';
MPRINT(EM_DIAGRAM):   where role in( "RAW" "TRAIN" "VALIDATE" "TEST" ) and EXPORT = 'Y' ;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _emtool_ 'H:\746\Decision Tree test\Workspaces\EMWS1\Reg4\PROPERTIES.xml' encoding="UTF-8" NOBOM;
19019      %let _HPDMGRIDHOST=;
19020      %let _HPDMGRIDINSTALLLOC=;
19021      %let _HPDMGRIDDATASERVER=;
19022      %hpdm_gridSetOPtions;
MPRINT(EM_DIAGRAM):   
MPRINT(HPDM_GRIDSETOPTIONS):   data _null_;
MPRINT(HPDM_GRIDSETOPTIONS):   length optionString string $2000;
MPRINT(HPDM_GRIDSETOPTIONS):   optionString = reverse(getoption('SET'));
MPRINT(HPDM_GRIDSETOPTIONS):   index = index(optionString, reverse('GRIDHOST'));
MPRINT(HPDM_GRIDSETOPTIONS):   if index then do;
MPRINT(HPDM_GRIDSETOPTIONS):   string = reverse(substr(optionString, 1, index-4));
MPRINT(HPDM_GRIDSETOPTIONS):   host = '"'!!strip(tranwrd(scan(string, 1, ']'), '"', ''))!!'"';
MPRINT(HPDM_GRIDSETOPTIONS):   call symput('_HPDMGRIDHOST', strip(host));
MPRINT(HPDM_GRIDSETOPTIONS):   end;
MPRINT(HPDM_GRIDSETOPTIONS):   index = index(optionString, reverse('GRIDINSTALLLOC'));
MPRINT(HPDM_GRIDSETOPTIONS):   if index then do;
MPRINT(HPDM_GRIDSETOPTIONS):   string = reverse(substr(optionString, 1, index-4));
MPRINT(HPDM_GRIDSETOPTIONS):   install = '"'!!strip(tranwrd(scan(string, 1, ']'), '"', ''))!!'"';
MPRINT(HPDM_GRIDSETOPTIONS):   call symput('_HPDMGRIDINSTALLLOC', strip(install));
MPRINT(HPDM_GRIDSETOPTIONS):   end;
MPRINT(HPDM_GRIDSETOPTIONS):   index = index(optionString, reverse('GRIDDATASERVER'));
MPRINT(HPDM_GRIDSETOPTIONS):   if index then do;
MPRINT(HPDM_GRIDSETOPTIONS):   string = reverse(substr(optionString, 1, index-4));
MPRINT(HPDM_GRIDSETOPTIONS):   server = '"'!!strip(tranwrd(scan(string, 1, ']'), '"', ''))!!'"';
MPRINT(HPDM_GRIDSETOPTIONS):   call symput('_HPDMGRIDDATASERVER', strip(server));
MPRINT(HPDM_GRIDSETOPTIONS):   end;
MPRINT(HPDM_GRIDSETOPTIONS):   run;

NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(EM_DIAGRAM):  ;

*------------------------------------------------------------* 
* 
* Reg4 : End update 
* datetime : 16APR2021:13:02:06 
* 
*------------------------------------------------------------* 
19023      %em_getactionstatus(emlib =EMWS1, nodeid=Reg4);
MPRINT(EM_DIAGRAM):   
MPRINT(EM_GETACTIONSTATUS):   proc display c=sashelp.emutil.getactionstatus.scl;
MPRINT(EM_GETACTIONSTATUS):   run;

19024      %let em_Train = N;
19025      %let em_Score = N;
19026      %let em_Report = N;
19027      %let em_Run = N;
NOTE: PROCEDURE DISPLAY used (Total process time):
      real time           0.07 seconds
      cpu time            0.01 seconds
      

MPRINT(EM_GETACTIONSTATUS):   
MPRINT(EM_DIAGRAM):  ;

Node "Reg4" has already run. 
Node "Reg4" succeeded. 
19028      data _null_;
MPRINT(EM_DIAGRAM):    data _null_;
19029      file emwipmsg;
MPRINT(EM_DIAGRAM):   file emwipmsg;
19030      put '<Node Id="Reg4" Event="Complete" Pid="2144" Gridid=""/>';
MPRINT(EM_DIAGRAM):   put '<Node Id="Reg4" Event="Complete" Pid="2144" Gridid=""/>';
19031      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: The file EMWIPMSG is:
      Local Host Name=C2-Complab-38,
      Local Host IP addr=10.21.104.163,
      Peer Hostname Name=C2-Complab-38.cencol.ca,
      Peer IP addr=127.0.0.1,Peer Name=N/A,
      Peer Portno=3478,Lrecl=32767,Recfm=Variable

NOTE: 1 record was written to the file EMWIPMSG.
      The minimum record length was 55.
      The maximum record length was 55.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

Traverser: WaitingNode "NEURAL11" 
Traverser: WaitingNode "NEURAL5" 
Traverser: WaitingNode "NEURAL6" 
Traverser: WaitingNode "NEURAL13" 
Traverser: WaitingNode "NEURAL8" 
Traverser: WaitingNode "NEURAL7" 
Traverser: WaitingNode "MDLCOMP" 
traverser_readyNode_note 
traverser_readyNode_note 
traverser_readyNode_note 
traverser_readyNode_note 
traverser_readyNode_note 
traverser_readyNode_note 
19032      data _null_;
MPRINT(EM_DIAGRAM):    data _null_;
19033      file emwipmsg;
MPRINT(EM_DIAGRAM):   file emwipmsg;
19034      put '<Node Id="Reg3" Event="Run" Pid="2144" Gridid=""/>';
MPRINT(EM_DIAGRAM):   put '<Node Id="Reg3" Event="Run" Pid="2144" Gridid=""/>';
19035      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: The file EMWIPMSG is:
      Local Host Name=C2-Complab-38,
      Local Host IP addr=10.21.104.163,
      Peer Hostname Name=C2-Complab-38.cencol.ca,
      Peer IP addr=127.0.0.1,Peer Name=N/A,
      Peer Portno=3478,Lrecl=32767,Recfm=Variable

NOTE: 1 record was written to the file EMWIPMSG.
      The minimum record length was 50.
      The maximum record length was 50.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

19036      %let emloopmode =;
*------------------------------------------------------------* 
* 
* Reg3 : Beginning update before running 
* datetime : 16APR2021:13:02:07 
* 
*------------------------------------------------------------* 
MPRINT(EM_DIAGRAM):     data WORK.Reg3_FILTERSET;
MPRINT(EM_DIAGRAM):   length PORT $32 USE $1;
MPRINT(EM_DIAGRAM):   DROP DELTACODE APPLYDELTA APPLYSCORE IMPORTPORT;
MPRINT(EM_DIAGRAM):   set EMWS1.Repl2_exportSet ;
MPRINT(EM_DIAGRAM):   PORT = '';
MPRINT(EM_DIAGRAM):   USE = '';
MPRINT(EM_DIAGRAM):   where role in( "RAW" "TRAIN" "VALIDATE" "TEST" ) and EXPORT = 'Y' ;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _emtool_ 'H:\746\Decision Tree test\Workspaces\EMWS1\Reg3\PROPERTIES.xml' encoding="UTF-8" NOBOM;
19056      %let _HPDMGRIDHOST=;
19057      %let _HPDMGRIDINSTALLLOC=;
19058      %let _HPDMGRIDDATASERVER=;
19059      %hpdm_gridSetOPtions;
MPRINT(EM_DIAGRAM):   
MPRINT(HPDM_GRIDSETOPTIONS):   data _null_;
MPRINT(HPDM_GRIDSETOPTIONS):   length optionString string $2000;
MPRINT(HPDM_GRIDSETOPTIONS):   optionString = reverse(getoption('SET'));
MPRINT(HPDM_GRIDSETOPTIONS):   index = index(optionString, reverse('GRIDHOST'));
MPRINT(HPDM_GRIDSETOPTIONS):   if index then do;
MPRINT(HPDM_GRIDSETOPTIONS):   string = reverse(substr(optionString, 1, index-4));
MPRINT(HPDM_GRIDSETOPTIONS):   host = '"'!!strip(tranwrd(scan(string, 1, ']'), '"', ''))!!'"';
MPRINT(HPDM_GRIDSETOPTIONS):   call symput('_HPDMGRIDHOST', strip(host));
MPRINT(HPDM_GRIDSETOPTIONS):   end;
MPRINT(HPDM_GRIDSETOPTIONS):   index = index(optionString, reverse('GRIDINSTALLLOC'));
MPRINT(HPDM_GRIDSETOPTIONS):   if index then do;
MPRINT(HPDM_GRIDSETOPTIONS):   string = reverse(substr(optionString, 1, index-4));
MPRINT(HPDM_GRIDSETOPTIONS):   install = '"'!!strip(tranwrd(scan(string, 1, ']'), '"', ''))!!'"';
MPRINT(HPDM_GRIDSETOPTIONS):   call symput('_HPDMGRIDINSTALLLOC', strip(install));
MPRINT(HPDM_GRIDSETOPTIONS):   end;
MPRINT(HPDM_GRIDSETOPTIONS):   index = index(optionString, reverse('GRIDDATASERVER'));
MPRINT(HPDM_GRIDSETOPTIONS):   if index then do;
MPRINT(HPDM_GRIDSETOPTIONS):   string = reverse(substr(optionString, 1, index-4));
MPRINT(HPDM_GRIDSETOPTIONS):   server = '"'!!strip(tranwrd(scan(string, 1, ']'), '"', ''))!!'"';
MPRINT(HPDM_GRIDSETOPTIONS):   call symput('_HPDMGRIDDATASERVER', strip(server));
MPRINT(HPDM_GRIDSETOPTIONS):   end;
MPRINT(HPDM_GRIDSETOPTIONS):   run;

NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(EM_DIAGRAM):  ;

*------------------------------------------------------------* 
* 
* Reg3 : End update 
* datetime : 16APR2021:13:02:07 
* 
*------------------------------------------------------------* 
19060      %em_getactionstatus(emlib =EMWS1, nodeid=Reg3);
MPRINT(EM_DIAGRAM):   
MPRINT(EM_GETACTIONSTATUS):   proc display c=sashelp.emutil.getactionstatus.scl;
MPRINT(EM_GETACTIONSTATUS):   run;

19061      %let em_Train = N;
19062      %let em_Score = N;
19063      %let em_Report = N;
19064      %let em_Run = N;
NOTE: PROCEDURE DISPLAY used (Total process time):
      real time           0.07 seconds
      cpu time            0.04 seconds
      

MPRINT(EM_GETACTIONSTATUS):   
MPRINT(EM_DIAGRAM):  ;

Node "Reg3" has already run. 
Node "Reg3" succeeded. 
19065      data _null_;
MPRINT(EM_DIAGRAM):    data _null_;
19066      file emwipmsg;
MPRINT(EM_DIAGRAM):   file emwipmsg;
19067      put '<Node Id="Reg3" Event="Complete" Pid="2144" Gridid=""/>';
MPRINT(EM_DIAGRAM):   put '<Node Id="Reg3" Event="Complete" Pid="2144" Gridid=""/>';
19068      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: The file EMWIPMSG is:
      Local Host Name=C2-Complab-38,
      Local Host IP addr=10.21.104.163,
      Peer Hostname Name=C2-Complab-38.cencol.ca,
      Peer IP addr=127.0.0.1,Peer Name=N/A,
      Peer Portno=3478,Lrecl=32767,Recfm=Variable

NOTE: 1 record was written to the file EMWIPMSG.
      The minimum record length was 55.
      The maximum record length was 55.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

Traverser: WaitingNode "NEURAL11" 
Traverser: WaitingNode "NEURAL5" 
Traverser: WaitingNode "NEURAL6" 
Traverser: WaitingNode "MDLCOMP" 
traverser_readyNode_note 
traverser_readyNode_note 
traverser_readyNode_note 
traverser_readyNode_note 
traverser_readyNode_note 
traverser_readyNode_note 
traverser_readyNode_note 
traverser_readyNode_note 
19069      data _null_;
MPRINT(EM_DIAGRAM):    data _null_;
19070      file emwipmsg;
MPRINT(EM_DIAGRAM):   file emwipmsg;
19071      put '<Node Id="Reg2" Event="Run" Pid="2144" Gridid=""/>';
MPRINT(EM_DIAGRAM):   put '<Node Id="Reg2" Event="Run" Pid="2144" Gridid=""/>';
19072      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: The file EMWIPMSG is:
      Local Host Name=C2-Complab-38,
      Local Host IP addr=10.21.104.163,
      Peer Hostname Name=C2-Complab-38.cencol.ca,
      Peer IP addr=127.0.0.1,Peer Name=N/A,
      Peer Portno=3478,Lrecl=32767,Recfm=Variable

NOTE: 1 record was written to the file EMWIPMSG.
      The minimum record length was 50.
      The maximum record length was 50.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

19073      %let emloopmode =;
*------------------------------------------------------------* 
* 
* Reg2 : Beginning update before running 
* datetime : 16APR2021:13:02:08 
* 
*------------------------------------------------------------* 
MPRINT(EM_DIAGRAM):     data WORK.Reg2_FILTERSET;
MPRINT(EM_DIAGRAM):   length PORT $32 USE $1;
MPRINT(EM_DIAGRAM):   DROP DELTACODE APPLYDELTA APPLYSCORE IMPORTPORT;
MPRINT(EM_DIAGRAM):   set EMWS1.Repl2_exportSet ;
MPRINT(EM_DIAGRAM):   PORT = '';
MPRINT(EM_DIAGRAM):   USE = '';
MPRINT(EM_DIAGRAM):   where role in( "RAW" "TRAIN" "VALIDATE" "TEST" ) and EXPORT = 'Y' ;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _emtool_ 'H:\746\Decision Tree test\Workspaces\EMWS1\Reg2\PROPERTIES.xml' encoding="UTF-8" NOBOM;
19093      %let _HPDMGRIDHOST=;
19094      %let _HPDMGRIDINSTALLLOC=;
19095      %let _HPDMGRIDDATASERVER=;
19096      %hpdm_gridSetOPtions;
MPRINT(EM_DIAGRAM):   
MPRINT(HPDM_GRIDSETOPTIONS):   data _null_;
MPRINT(HPDM_GRIDSETOPTIONS):   length optionString string $2000;
MPRINT(HPDM_GRIDSETOPTIONS):   optionString = reverse(getoption('SET'));
MPRINT(HPDM_GRIDSETOPTIONS):   index = index(optionString, reverse('GRIDHOST'));
MPRINT(HPDM_GRIDSETOPTIONS):   if index then do;
MPRINT(HPDM_GRIDSETOPTIONS):   string = reverse(substr(optionString, 1, index-4));
MPRINT(HPDM_GRIDSETOPTIONS):   host = '"'!!strip(tranwrd(scan(string, 1, ']'), '"', ''))!!'"';
MPRINT(HPDM_GRIDSETOPTIONS):   call symput('_HPDMGRIDHOST', strip(host));
MPRINT(HPDM_GRIDSETOPTIONS):   end;
MPRINT(HPDM_GRIDSETOPTIONS):   index = index(optionString, reverse('GRIDINSTALLLOC'));
MPRINT(HPDM_GRIDSETOPTIONS):   if index then do;
MPRINT(HPDM_GRIDSETOPTIONS):   string = reverse(substr(optionString, 1, index-4));
MPRINT(HPDM_GRIDSETOPTIONS):   install = '"'!!strip(tranwrd(scan(string, 1, ']'), '"', ''))!!'"';
MPRINT(HPDM_GRIDSETOPTIONS):   call symput('_HPDMGRIDINSTALLLOC', strip(install));
MPRINT(HPDM_GRIDSETOPTIONS):   end;
MPRINT(HPDM_GRIDSETOPTIONS):   index = index(optionString, reverse('GRIDDATASERVER'));
MPRINT(HPDM_GRIDSETOPTIONS):   if index then do;
MPRINT(HPDM_GRIDSETOPTIONS):   string = reverse(substr(optionString, 1, index-4));
MPRINT(HPDM_GRIDSETOPTIONS):   server = '"'!!strip(tranwrd(scan(string, 1, ']'), '"', ''))!!'"';
MPRINT(HPDM_GRIDSETOPTIONS):   call symput('_HPDMGRIDDATASERVER', strip(server));
MPRINT(HPDM_GRIDSETOPTIONS):   end;
MPRINT(HPDM_GRIDSETOPTIONS):   run;

NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(EM_DIAGRAM):  ;

*------------------------------------------------------------* 
* 
* Reg2 : End update 
* datetime : 16APR2021:13:02:08 
* 
*------------------------------------------------------------* 
19097      %em_getactionstatus(emlib =EMWS1, nodeid=Reg2);
MPRINT(EM_DIAGRAM):   
MPRINT(EM_GETACTIONSTATUS):   proc display c=sashelp.emutil.getactionstatus.scl;
MPRINT(EM_GETACTIONSTATUS):   run;

19098      %let em_Train = N;
19099      %let em_Score = N;
19100      %let em_Report = N;
19101      %let em_Run = N;
NOTE: PROCEDURE DISPLAY used (Total process time):
      real time           0.08 seconds
      cpu time            0.00 seconds
      

MPRINT(EM_GETACTIONSTATUS):   
MPRINT(EM_DIAGRAM):  ;

Node "Reg2" has already run. 
Node "Reg2" succeeded. 
19102      data _null_;
MPRINT(EM_DIAGRAM):    data _null_;
19103      file emwipmsg;
MPRINT(EM_DIAGRAM):   file emwipmsg;
19104      put '<Node Id="Reg2" Event="Complete" Pid="2144" Gridid=""/>';
MPRINT(EM_DIAGRAM):   put '<Node Id="Reg2" Event="Complete" Pid="2144" Gridid=""/>';
19105      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: The file EMWIPMSG is:
      Local Host Name=C2-Complab-38,
      Local Host IP addr=10.21.104.163,
      Peer Hostname Name=C2-Complab-38.cencol.ca,
      Peer IP addr=127.0.0.1,Peer Name=N/A,
      Peer Portno=3478,Lrecl=32767,Recfm=Variable

NOTE: 1 record was written to the file EMWIPMSG.
      The minimum record length was 55.
      The maximum record length was 55.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

Traverser: WaitingNode "MDLCOMP" 
traverser_readyNode_note 
traverser_readyNode_note 
traverser_readyNode_note 
traverser_readyNode_note 
traverser_readyNode_note 
traverser_readyNode_note 
traverser_readyNode_note 
traverser_readyNode_note 
traverser_readyNode_note 
traverser_readyNode_note 
19106      data _null_;
MPRINT(EM_DIAGRAM):    data _null_;
19107      file emwipmsg;
MPRINT(EM_DIAGRAM):   file emwipmsg;
19108      put '<Node Id="Reg" Event="Run" Pid="2144" Gridid=""/>';
MPRINT(EM_DIAGRAM):   put '<Node Id="Reg" Event="Run" Pid="2144" Gridid=""/>';
19109      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: The file EMWIPMSG is:
      Local Host Name=C2-Complab-38,
      Local Host IP addr=10.21.104.163,
      Peer Hostname Name=C2-Complab-38.cencol.ca,
      Peer IP addr=127.0.0.1,Peer Name=N/A,
      Peer Portno=3478,Lrecl=32767,Recfm=Variable

NOTE: 1 record was written to the file EMWIPMSG.
      The minimum record length was 49.
      The maximum record length was 49.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

19110      %let emloopmode =;
*------------------------------------------------------------* 
* 
* Reg : Beginning update before running 
* datetime : 16APR2021:13:02:13 
* 
*------------------------------------------------------------* 
MPRINT(EM_DIAGRAM):     data WORK.Reg_FILTERSET;
MPRINT(EM_DIAGRAM):   length PORT $32 USE $1;
MPRINT(EM_DIAGRAM):   DROP DELTACODE APPLYDELTA APPLYSCORE IMPORTPORT;
MPRINT(EM_DIAGRAM):   set EMWS1.Repl2_exportSet ;
MPRINT(EM_DIAGRAM):   PORT = '';
MPRINT(EM_DIAGRAM):   USE = '';
MPRINT(EM_DIAGRAM):   where role in( "RAW" "TRAIN" "VALIDATE" "TEST" ) and EXPORT = 'Y' ;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _emtool_ 'H:\746\Decision Tree test\Workspaces\EMWS1\Reg\PROPERTIES.xml' encoding="UTF-8" NOBOM;
19130      %let _HPDMGRIDHOST=;
19131      %let _HPDMGRIDINSTALLLOC=;
19132      %let _HPDMGRIDDATASERVER=;
19133      %hpdm_gridSetOPtions;
MPRINT(EM_DIAGRAM):   
MPRINT(HPDM_GRIDSETOPTIONS):   data _null_;
MPRINT(HPDM_GRIDSETOPTIONS):   length optionString string $2000;
MPRINT(HPDM_GRIDSETOPTIONS):   optionString = reverse(getoption('SET'));
MPRINT(HPDM_GRIDSETOPTIONS):   index = index(optionString, reverse('GRIDHOST'));
MPRINT(HPDM_GRIDSETOPTIONS):   if index then do;
MPRINT(HPDM_GRIDSETOPTIONS):   string = reverse(substr(optionString, 1, index-4));
MPRINT(HPDM_GRIDSETOPTIONS):   host = '"'!!strip(tranwrd(scan(string, 1, ']'), '"', ''))!!'"';
MPRINT(HPDM_GRIDSETOPTIONS):   call symput('_HPDMGRIDHOST', strip(host));
MPRINT(HPDM_GRIDSETOPTIONS):   end;
MPRINT(HPDM_GRIDSETOPTIONS):   index = index(optionString, reverse('GRIDINSTALLLOC'));
MPRINT(HPDM_GRIDSETOPTIONS):   if index then do;
MPRINT(HPDM_GRIDSETOPTIONS):   string = reverse(substr(optionString, 1, index-4));
MPRINT(HPDM_GRIDSETOPTIONS):   install = '"'!!strip(tranwrd(scan(string, 1, ']'), '"', ''))!!'"';
MPRINT(HPDM_GRIDSETOPTIONS):   call symput('_HPDMGRIDINSTALLLOC', strip(install));
MPRINT(HPDM_GRIDSETOPTIONS):   end;
MPRINT(HPDM_GRIDSETOPTIONS):   index = index(optionString, reverse('GRIDDATASERVER'));
MPRINT(HPDM_GRIDSETOPTIONS):   if index then do;
MPRINT(HPDM_GRIDSETOPTIONS):   string = reverse(substr(optionString, 1, index-4));
MPRINT(HPDM_GRIDSETOPTIONS):   server = '"'!!strip(tranwrd(scan(string, 1, ']'), '"', ''))!!'"';
MPRINT(HPDM_GRIDSETOPTIONS):   call symput('_HPDMGRIDDATASERVER', strip(server));
MPRINT(HPDM_GRIDSETOPTIONS):   end;
MPRINT(HPDM_GRIDSETOPTIONS):   run;

NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(EM_DIAGRAM):  ;

*------------------------------------------------------------* 
* 
* Reg : End update 
* datetime : 16APR2021:13:02:13 
* 
*------------------------------------------------------------* 
19134      %em_getactionstatus(emlib =EMWS1, nodeid=Reg);
MPRINT(EM_DIAGRAM):   
MPRINT(EM_GETACTIONSTATUS):   proc display c=sashelp.emutil.getactionstatus.scl;
MPRINT(EM_GETACTIONSTATUS):   run;

19135      %let em_Train = N;
19136      %let em_Score = N;
19137      %let em_Report = N;
19138      %let em_Run = N;
NOTE: PROCEDURE DISPLAY used (Total process time):
      real time           0.06 seconds
      cpu time            0.03 seconds
      

MPRINT(EM_GETACTIONSTATUS):   
MPRINT(EM_DIAGRAM):  ;

Node "Reg" has already run. 
Node "Reg" succeeded. 
19139      data _null_;
MPRINT(EM_DIAGRAM):    data _null_;
19140      file emwipmsg;
MPRINT(EM_DIAGRAM):   file emwipmsg;
19141      put '<Node Id="Reg" Event="Complete" Pid="2144" Gridid=""/>';
MPRINT(EM_DIAGRAM):   put '<Node Id="Reg" Event="Complete" Pid="2144" Gridid=""/>';
19142      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: The file EMWIPMSG is:
      Local Host Name=C2-Complab-38,
      Local Host IP addr=10.21.104.163,
      Peer Hostname Name=C2-Complab-38.cencol.ca,
      Peer IP addr=127.0.0.1,Peer Name=N/A,
      Peer Portno=3478,Lrecl=32767,Recfm=Variable

NOTE: 1 record was written to the file EMWIPMSG.
      The minimum record length was 54.
      The maximum record length was 54.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
      

Traverser: WaitingNode "MDLCOMP" 
traverser_readyNode_note 
traverser_readyNode_note 
traverser_readyNode_note 
traverser_readyNode_note 
traverser_readyNode_note 
traverser_readyNode_note 
traverser_readyNode_note 
traverser_readyNode_note 
traverser_readyNode_note 
19143      data _null_;
MPRINT(EM_DIAGRAM):    data _null_;
19144      file emwipmsg;
MPRINT(EM_DIAGRAM):   file emwipmsg;
19145      put '<Node Id="Neural14" Event="Run" Pid="2144" Gridid=""/>';
MPRINT(EM_DIAGRAM):   put '<Node Id="Neural14" Event="Run" Pid="2144" Gridid=""/>';
19146      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: The file EMWIPMSG is:
      Local Host Name=C2-Complab-38,
      Local Host IP addr=10.21.104.163,
      Peer Hostname Name=C2-Complab-38.cencol.ca,
      Peer IP addr=127.0.0.1,Peer Name=N/A,
      Peer Portno=3478,Lrecl=32767,Recfm=Variable

NOTE: 1 record was written to the file EMWIPMSG.
      The minimum record length was 54.
      The maximum record length was 54.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

19147      %let emloopmode =;
*------------------------------------------------------------* 
* 
* Neural14 : Beginning update before running 
* datetime : 16APR2021:13:02:14 
* 
*------------------------------------------------------------* 
MPRINT(EM_DIAGRAM):     data WORK.Neural14_FILTERSET;
MPRINT(EM_DIAGRAM):   length PORT $32 USE $1;
MPRINT(EM_DIAGRAM):   DROP DELTACODE APPLYDELTA APPLYSCORE IMPORTPORT;
MPRINT(EM_DIAGRAM):   set EMWS1.Reg4_exportSet ;
MPRINT(EM_DIAGRAM):   PORT = '';
MPRINT(EM_DIAGRAM):   USE = '';
MPRINT(EM_DIAGRAM):   where role in( "RAW" "TRAIN" "VALIDATE" "TEST" ) and EXPORT = 'Y' ;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _emtool_ 'H:\746\Decision Tree test\Workspaces\EMWS1\Neural14\PROPERTIES.xml' encoding="UTF-8" NOBOM;
19167      %let _HPDMGRIDHOST=;
19168      %let _HPDMGRIDINSTALLLOC=;
19169      %let _HPDMGRIDDATASERVER=;
19170      %hpdm_gridSetOPtions;
MPRINT(EM_DIAGRAM):   
MPRINT(HPDM_GRIDSETOPTIONS):   data _null_;
MPRINT(HPDM_GRIDSETOPTIONS):   length optionString string $2000;
MPRINT(HPDM_GRIDSETOPTIONS):   optionString = reverse(getoption('SET'));
MPRINT(HPDM_GRIDSETOPTIONS):   index = index(optionString, reverse('GRIDHOST'));
MPRINT(HPDM_GRIDSETOPTIONS):   if index then do;
MPRINT(HPDM_GRIDSETOPTIONS):   string = reverse(substr(optionString, 1, index-4));
MPRINT(HPDM_GRIDSETOPTIONS):   host = '"'!!strip(tranwrd(scan(string, 1, ']'), '"', ''))!!'"';
MPRINT(HPDM_GRIDSETOPTIONS):   call symput('_HPDMGRIDHOST', strip(host));
MPRINT(HPDM_GRIDSETOPTIONS):   end;
MPRINT(HPDM_GRIDSETOPTIONS):   index = index(optionString, reverse('GRIDINSTALLLOC'));
MPRINT(HPDM_GRIDSETOPTIONS):   if index then do;
MPRINT(HPDM_GRIDSETOPTIONS):   string = reverse(substr(optionString, 1, index-4));
MPRINT(HPDM_GRIDSETOPTIONS):   install = '"'!!strip(tranwrd(scan(string, 1, ']'), '"', ''))!!'"';
MPRINT(HPDM_GRIDSETOPTIONS):   call symput('_HPDMGRIDINSTALLLOC', strip(install));
MPRINT(HPDM_GRIDSETOPTIONS):   end;
MPRINT(HPDM_GRIDSETOPTIONS):   index = index(optionString, reverse('GRIDDATASERVER'));
MPRINT(HPDM_GRIDSETOPTIONS):   if index then do;
MPRINT(HPDM_GRIDSETOPTIONS):   string = reverse(substr(optionString, 1, index-4));
MPRINT(HPDM_GRIDSETOPTIONS):   server = '"'!!strip(tranwrd(scan(string, 1, ']'), '"', ''))!!'"';
MPRINT(HPDM_GRIDSETOPTIONS):   call symput('_HPDMGRIDDATASERVER', strip(server));
MPRINT(HPDM_GRIDSETOPTIONS):   end;
MPRINT(HPDM_GRIDSETOPTIONS):   run;

NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
      

MPRINT(EM_DIAGRAM):  ;

*------------------------------------------------------------* 
* 
* Neural14 : End update 
* datetime : 16APR2021:13:02:14 
* 
*------------------------------------------------------------* 
19171      %em_getactionstatus(emlib =EMWS1, nodeid=Neural14);
MPRINT(EM_DIAGRAM):   
MPRINT(EM_GETACTIONSTATUS):   proc display c=sashelp.emutil.getactionstatus.scl;
MPRINT(EM_GETACTIONSTATUS):   run;

19172      %let em_Train = N;
19173      %let em_Score = N;
19174      %let em_Report = N;
19175      %let em_Run = N;
NOTE: PROCEDURE DISPLAY used (Total process time):
      real time           0.06 seconds
      cpu time            0.00 seconds
      

MPRINT(EM_GETACTIONSTATUS):   
MPRINT(EM_DIAGRAM):  ;

Node "Neural14" has already run. 
Node "Neural14" succeeded. 
19176      data _null_;
MPRINT(EM_DIAGRAM):    data _null_;
19177      file emwipmsg;
MPRINT(EM_DIAGRAM):   file emwipmsg;
19178      put '<Node Id="Neural14" Event="Complete" Pid="2144" Gridid=""/>';
MPRINT(EM_DIAGRAM):   put '<Node Id="Neural14" Event="Complete" Pid="2144" Gridid=""/>';
19179      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: The file EMWIPMSG is:
      Local Host Name=C2-Complab-38,
      Local Host IP addr=10.21.104.163,
      Peer Hostname Name=C2-Complab-38.cencol.ca,
      Peer IP addr=127.0.0.1,Peer Name=N/A,
      Peer Portno=3478,Lrecl=32767,Recfm=Variable

NOTE: 1 record was written to the file EMWIPMSG.
      The minimum record length was 59.
      The maximum record length was 59.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
      

Traverser: WaitingNode "MDLCOMP" 
traverser_readyNode_note 
traverser_readyNode_note 
traverser_readyNode_note 
traverser_readyNode_note 
traverser_readyNode_note 
traverser_readyNode_note 
traverser_readyNode_note 
traverser_readyNode_note 
19180      data _null_;
MPRINT(EM_DIAGRAM):    data _null_;
19181      file emwipmsg;
MPRINT(EM_DIAGRAM):   file emwipmsg;
19182      put '<Node Id="Neural9" Event="Run" Pid="2144" Gridid=""/>';
MPRINT(EM_DIAGRAM):   put '<Node Id="Neural9" Event="Run" Pid="2144" Gridid=""/>';
19183      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: The file EMWIPMSG is:
      Local Host Name=C2-Complab-38,
      Local Host IP addr=10.21.104.163,
      Peer Hostname Name=C2-Complab-38.cencol.ca,
      Peer IP addr=127.0.0.1,Peer Name=N/A,
      Peer Portno=3478,Lrecl=32767,Recfm=Variable

NOTE: 1 record was written to the file EMWIPMSG.
      The minimum record length was 53.
      The maximum record length was 53.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
      

19184      %let emloopmode =;
*------------------------------------------------------------* 
* 
* Neural9 : Beginning update before running 
* datetime : 16APR2021:13:02:15 
* 
*------------------------------------------------------------* 
MPRINT(EM_DIAGRAM):     data WORK.Neural9_FILTERSET;
MPRINT(EM_DIAGRAM):   length PORT $32 USE $1;
MPRINT(EM_DIAGRAM):   DROP DELTACODE APPLYDELTA APPLYSCORE IMPORTPORT;
MPRINT(EM_DIAGRAM):   set EMWS1.Reg4_exportSet ;
MPRINT(EM_DIAGRAM):   PORT = '';
MPRINT(EM_DIAGRAM):   USE = '';
MPRINT(EM_DIAGRAM):   where role in( "RAW" "TRAIN" "VALIDATE" "TEST" ) and EXPORT = 'Y' ;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _emtool_ 'H:\746\Decision Tree test\Workspaces\EMWS1\Neural9\PROPERTIES.xml' encoding="UTF-8" NOBOM;
19204      %let _HPDMGRIDHOST=;
19205      %let _HPDMGRIDINSTALLLOC=;
19206      %let _HPDMGRIDDATASERVER=;
19207      %hpdm_gridSetOPtions;
MPRINT(EM_DIAGRAM):   
MPRINT(HPDM_GRIDSETOPTIONS):   data _null_;
MPRINT(HPDM_GRIDSETOPTIONS):   length optionString string $2000;
MPRINT(HPDM_GRIDSETOPTIONS):   optionString = reverse(getoption('SET'));
MPRINT(HPDM_GRIDSETOPTIONS):   index = index(optionString, reverse('GRIDHOST'));
MPRINT(HPDM_GRIDSETOPTIONS):   if index then do;
MPRINT(HPDM_GRIDSETOPTIONS):   string = reverse(substr(optionString, 1, index-4));
MPRINT(HPDM_GRIDSETOPTIONS):   host = '"'!!strip(tranwrd(scan(string, 1, ']'), '"', ''))!!'"';
MPRINT(HPDM_GRIDSETOPTIONS):   call symput('_HPDMGRIDHOST', strip(host));
MPRINT(HPDM_GRIDSETOPTIONS):   end;
MPRINT(HPDM_GRIDSETOPTIONS):   index = index(optionString, reverse('GRIDINSTALLLOC'));
MPRINT(HPDM_GRIDSETOPTIONS):   if index then do;
MPRINT(HPDM_GRIDSETOPTIONS):   string = reverse(substr(optionString, 1, index-4));
MPRINT(HPDM_GRIDSETOPTIONS):   install = '"'!!strip(tranwrd(scan(string, 1, ']'), '"', ''))!!'"';
MPRINT(HPDM_GRIDSETOPTIONS):   call symput('_HPDMGRIDINSTALLLOC', strip(install));
MPRINT(HPDM_GRIDSETOPTIONS):   end;
MPRINT(HPDM_GRIDSETOPTIONS):   index = index(optionString, reverse('GRIDDATASERVER'));
MPRINT(HPDM_GRIDSETOPTIONS):   if index then do;
MPRINT(HPDM_GRIDSETOPTIONS):   string = reverse(substr(optionString, 1, index-4));
MPRINT(HPDM_GRIDSETOPTIONS):   server = '"'!!strip(tranwrd(scan(string, 1, ']'), '"', ''))!!'"';
MPRINT(HPDM_GRIDSETOPTIONS):   call symput('_HPDMGRIDDATASERVER', strip(server));
MPRINT(HPDM_GRIDSETOPTIONS):   end;
MPRINT(HPDM_GRIDSETOPTIONS):   run;

NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(EM_DIAGRAM):  ;

*------------------------------------------------------------* 
* 
* Neural9 : End update 
* datetime : 16APR2021:13:02:15 
* 
*------------------------------------------------------------* 
19208      %em_getactionstatus(emlib =EMWS1, nodeid=Neural9);
MPRINT(EM_DIAGRAM):   
MPRINT(EM_GETACTIONSTATUS):   proc display c=sashelp.emutil.getactionstatus.scl;
MPRINT(EM_GETACTIONSTATUS):   run;

19209      %let em_Train = N;
19210      %let em_Score = N;
19211      %let em_Report = N;
19212      %let em_Run = N;
NOTE: PROCEDURE DISPLAY used (Total process time):
      real time           0.06 seconds
      cpu time            0.03 seconds
      

MPRINT(EM_GETACTIONSTATUS):   
MPRINT(EM_DIAGRAM):  ;

Node "Neural9" has already run. 
Node "Neural9" succeeded. 
19213      data _null_;
MPRINT(EM_DIAGRAM):    data _null_;
19214      file emwipmsg;
MPRINT(EM_DIAGRAM):   file emwipmsg;
19215      put '<Node Id="Neural9" Event="Complete" Pid="2144" Gridid=""/>';
MPRINT(EM_DIAGRAM):   put '<Node Id="Neural9" Event="Complete" Pid="2144" Gridid=""/>';
19216      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: The file EMWIPMSG is:
      Local Host Name=C2-Complab-38,
      Local Host IP addr=10.21.104.163,
      Peer Hostname Name=C2-Complab-38.cencol.ca,
      Peer IP addr=127.0.0.1,Peer Name=N/A,
      Peer Portno=3478,Lrecl=32767,Recfm=Variable

NOTE: 1 record was written to the file EMWIPMSG.
      The minimum record length was 58.
      The maximum record length was 58.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

Traverser: WaitingNode "MDLCOMP" 
traverser_readyNode_note 
traverser_readyNode_note 
traverser_readyNode_note 
traverser_readyNode_note 
traverser_readyNode_note 
traverser_readyNode_note 
traverser_readyNode_note 
19217      data _null_;
MPRINT(EM_DIAGRAM):    data _null_;
19218      file emwipmsg;
MPRINT(EM_DIAGRAM):   file emwipmsg;
19219      put '<Node Id="Neural10" Event="Run" Pid="2144" Gridid=""/>';
MPRINT(EM_DIAGRAM):   put '<Node Id="Neural10" Event="Run" Pid="2144" Gridid=""/>';
19220      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: The file EMWIPMSG is:
      Local Host Name=C2-Complab-38,
      Local Host IP addr=10.21.104.163,
      Peer Hostname Name=C2-Complab-38.cencol.ca,
      Peer IP addr=127.0.0.1,Peer Name=N/A,
      Peer Portno=3478,Lrecl=32767,Recfm=Variable

NOTE: 1 record was written to the file EMWIPMSG.
      The minimum record length was 54.
      The maximum record length was 54.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

19221      %let emloopmode =;
*------------------------------------------------------------* 
* 
* Neural10 : Beginning update before running 
* datetime : 16APR2021:13:02:19 
* 
*------------------------------------------------------------* 
MPRINT(EM_DIAGRAM):     data WORK.Neural10_FILTERSET;
MPRINT(EM_DIAGRAM):   length PORT $32 USE $1;
MPRINT(EM_DIAGRAM):   DROP DELTACODE APPLYDELTA APPLYSCORE IMPORTPORT;
MPRINT(EM_DIAGRAM):   set EMWS1.Reg4_exportSet ;
MPRINT(EM_DIAGRAM):   PORT = '';
MPRINT(EM_DIAGRAM):   USE = '';
MPRINT(EM_DIAGRAM):   where role in( "RAW" "TRAIN" "VALIDATE" "TEST" ) and EXPORT = 'Y' ;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _emtool_ 'H:\746\Decision Tree test\Workspaces\EMWS1\Neural10\PROPERTIES.xml' encoding="UTF-8" NOBOM;
19241      %let _HPDMGRIDHOST=;
19242      %let _HPDMGRIDINSTALLLOC=;
19243      %let _HPDMGRIDDATASERVER=;
19244      %hpdm_gridSetOPtions;
MPRINT(EM_DIAGRAM):   
MPRINT(HPDM_GRIDSETOPTIONS):   data _null_;
MPRINT(HPDM_GRIDSETOPTIONS):   length optionString string $2000;
MPRINT(HPDM_GRIDSETOPTIONS):   optionString = reverse(getoption('SET'));
MPRINT(HPDM_GRIDSETOPTIONS):   index = index(optionString, reverse('GRIDHOST'));
MPRINT(HPDM_GRIDSETOPTIONS):   if index then do;
MPRINT(HPDM_GRIDSETOPTIONS):   string = reverse(substr(optionString, 1, index-4));
MPRINT(HPDM_GRIDSETOPTIONS):   host = '"'!!strip(tranwrd(scan(string, 1, ']'), '"', ''))!!'"';
MPRINT(HPDM_GRIDSETOPTIONS):   call symput('_HPDMGRIDHOST', strip(host));
MPRINT(HPDM_GRIDSETOPTIONS):   end;
MPRINT(HPDM_GRIDSETOPTIONS):   index = index(optionString, reverse('GRIDINSTALLLOC'));
MPRINT(HPDM_GRIDSETOPTIONS):   if index then do;
MPRINT(HPDM_GRIDSETOPTIONS):   string = reverse(substr(optionString, 1, index-4));
MPRINT(HPDM_GRIDSETOPTIONS):   install = '"'!!strip(tranwrd(scan(string, 1, ']'), '"', ''))!!'"';
MPRINT(HPDM_GRIDSETOPTIONS):   call symput('_HPDMGRIDINSTALLLOC', strip(install));
MPRINT(HPDM_GRIDSETOPTIONS):   end;
MPRINT(HPDM_GRIDSETOPTIONS):   index = index(optionString, reverse('GRIDDATASERVER'));
MPRINT(HPDM_GRIDSETOPTIONS):   if index then do;
MPRINT(HPDM_GRIDSETOPTIONS):   string = reverse(substr(optionString, 1, index-4));
MPRINT(HPDM_GRIDSETOPTIONS):   server = '"'!!strip(tranwrd(scan(string, 1, ']'), '"', ''))!!'"';
MPRINT(HPDM_GRIDSETOPTIONS):   call symput('_HPDMGRIDDATASERVER', strip(server));
MPRINT(HPDM_GRIDSETOPTIONS):   end;
MPRINT(HPDM_GRIDSETOPTIONS):   run;

NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(EM_DIAGRAM):  ;

*------------------------------------------------------------* 
* 
* Neural10 : End update 
* datetime : 16APR2021:13:02:19 
* 
*------------------------------------------------------------* 
19245      %em_getactionstatus(emlib =EMWS1, nodeid=Neural10);
MPRINT(EM_DIAGRAM):   
MPRINT(EM_GETACTIONSTATUS):   proc display c=sashelp.emutil.getactionstatus.scl;
MPRINT(EM_GETACTIONSTATUS):   run;

19246      %let em_Train = N;
19247      %let em_Score = N;
19248      %let em_Report = N;
19249      %let em_Run = N;
NOTE: PROCEDURE DISPLAY used (Total process time):
      real time           0.05 seconds
      cpu time            0.00 seconds
      

MPRINT(EM_GETACTIONSTATUS):   
MPRINT(EM_DIAGRAM):  ;

Node "Neural10" has already run. 
Node "Neural10" succeeded. 
19250      data _null_;
MPRINT(EM_DIAGRAM):    data _null_;
19251      file emwipmsg;
MPRINT(EM_DIAGRAM):   file emwipmsg;
19252      put '<Node Id="Neural10" Event="Complete" Pid="2144" Gridid=""/>';
MPRINT(EM_DIAGRAM):   put '<Node Id="Neural10" Event="Complete" Pid="2144" Gridid=""/>';
19253      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: The file EMWIPMSG is:
      Local Host Name=C2-Complab-38,
      Local Host IP addr=10.21.104.163,
      Peer Hostname Name=C2-Complab-38.cencol.ca,
      Peer IP addr=127.0.0.1,Peer Name=N/A,
      Peer Portno=3478,Lrecl=32767,Recfm=Variable

NOTE: 1 record was written to the file EMWIPMSG.
      The minimum record length was 59.
      The maximum record length was 59.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

Traverser: WaitingNode "MDLCOMP" 
traverser_readyNode_note 
traverser_readyNode_note 
traverser_readyNode_note 
traverser_readyNode_note 
traverser_readyNode_note 
traverser_readyNode_note 
19254      data _null_;
MPRINT(EM_DIAGRAM):    data _null_;
19255      file emwipmsg;
MPRINT(EM_DIAGRAM):   file emwipmsg;
19256      put '<Node Id="Neural13" Event="Run" Pid="2144" Gridid=""/>';
MPRINT(EM_DIAGRAM):   put '<Node Id="Neural13" Event="Run" Pid="2144" Gridid=""/>';
19257      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: The file EMWIPMSG is:
      Local Host Name=C2-Complab-38,
      Local Host IP addr=10.21.104.163,
      Peer Hostname Name=C2-Complab-38.cencol.ca,
      Peer IP addr=127.0.0.1,Peer Name=N/A,
      Peer Portno=3478,Lrecl=32767,Recfm=Variable

NOTE: 1 record was written to the file EMWIPMSG.
      The minimum record length was 54.
      The maximum record length was 54.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

19258      %let emloopmode =;
*------------------------------------------------------------* 
* 
* Neural13 : Beginning update before running 
* datetime : 16APR2021:13:02:20 
* 
*------------------------------------------------------------* 
MPRINT(EM_DIAGRAM):     data WORK.Neural13_FILTERSET;
MPRINT(EM_DIAGRAM):   length PORT $32 USE $1;
MPRINT(EM_DIAGRAM):   DROP DELTACODE APPLYDELTA APPLYSCORE IMPORTPORT;
MPRINT(EM_DIAGRAM):   set EMWS1.Reg3_exportSet ;
MPRINT(EM_DIAGRAM):   PORT = '';
MPRINT(EM_DIAGRAM):   USE = '';
MPRINT(EM_DIAGRAM):   where role in( "RAW" "TRAIN" "VALIDATE" "TEST" ) and EXPORT = 'Y' ;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _emtool_ 'H:\746\Decision Tree test\Workspaces\EMWS1\Neural13\PROPERTIES.xml' encoding="UTF-8" NOBOM;
19278      %let _HPDMGRIDHOST=;
19279      %let _HPDMGRIDINSTALLLOC=;
19280      %let _HPDMGRIDDATASERVER=;
19281      %hpdm_gridSetOPtions;
MPRINT(EM_DIAGRAM):   
MPRINT(HPDM_GRIDSETOPTIONS):   data _null_;
MPRINT(HPDM_GRIDSETOPTIONS):   length optionString string $2000;
MPRINT(HPDM_GRIDSETOPTIONS):   optionString = reverse(getoption('SET'));
MPRINT(HPDM_GRIDSETOPTIONS):   index = index(optionString, reverse('GRIDHOST'));
MPRINT(HPDM_GRIDSETOPTIONS):   if index then do;
MPRINT(HPDM_GRIDSETOPTIONS):   string = reverse(substr(optionString, 1, index-4));
MPRINT(HPDM_GRIDSETOPTIONS):   host = '"'!!strip(tranwrd(scan(string, 1, ']'), '"', ''))!!'"';
MPRINT(HPDM_GRIDSETOPTIONS):   call symput('_HPDMGRIDHOST', strip(host));
MPRINT(HPDM_GRIDSETOPTIONS):   end;
MPRINT(HPDM_GRIDSETOPTIONS):   index = index(optionString, reverse('GRIDINSTALLLOC'));
MPRINT(HPDM_GRIDSETOPTIONS):   if index then do;
MPRINT(HPDM_GRIDSETOPTIONS):   string = reverse(substr(optionString, 1, index-4));
MPRINT(HPDM_GRIDSETOPTIONS):   install = '"'!!strip(tranwrd(scan(string, 1, ']'), '"', ''))!!'"';
MPRINT(HPDM_GRIDSETOPTIONS):   call symput('_HPDMGRIDINSTALLLOC', strip(install));
MPRINT(HPDM_GRIDSETOPTIONS):   end;
MPRINT(HPDM_GRIDSETOPTIONS):   index = index(optionString, reverse('GRIDDATASERVER'));
MPRINT(HPDM_GRIDSETOPTIONS):   if index then do;
MPRINT(HPDM_GRIDSETOPTIONS):   string = reverse(substr(optionString, 1, index-4));
MPRINT(HPDM_GRIDSETOPTIONS):   server = '"'!!strip(tranwrd(scan(string, 1, ']'), '"', ''))!!'"';
MPRINT(HPDM_GRIDSETOPTIONS):   call symput('_HPDMGRIDDATASERVER', strip(server));
MPRINT(HPDM_GRIDSETOPTIONS):   end;
MPRINT(HPDM_GRIDSETOPTIONS):   run;

NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
      

MPRINT(EM_DIAGRAM):  ;

*------------------------------------------------------------* 
* 
* Neural13 : End update 
* datetime : 16APR2021:13:02:20 
* 
*------------------------------------------------------------* 
19282      %em_getactionstatus(emlib =EMWS1, nodeid=Neural13);
MPRINT(EM_DIAGRAM):   
MPRINT(EM_GETACTIONSTATUS):   proc display c=sashelp.emutil.getactionstatus.scl;
MPRINT(EM_GETACTIONSTATUS):   run;

19283      %let em_Train = N;
19284      %let em_Score = N;
19285      %let em_Report = N;
19286      %let em_Run = N;
NOTE: PROCEDURE DISPLAY used (Total process time):
      real time           0.07 seconds
      cpu time            0.04 seconds
      

MPRINT(EM_GETACTIONSTATUS):   
MPRINT(EM_DIAGRAM):  ;

Node "Neural13" has already run. 
Node "Neural13" succeeded. 
19287      data _null_;
MPRINT(EM_DIAGRAM):    data _null_;
19288      file emwipmsg;
MPRINT(EM_DIAGRAM):   file emwipmsg;
19289      put '<Node Id="Neural13" Event="Complete" Pid="2144" Gridid=""/>';
MPRINT(EM_DIAGRAM):   put '<Node Id="Neural13" Event="Complete" Pid="2144" Gridid=""/>';
19290      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: The file EMWIPMSG is:
      Local Host Name=C2-Complab-38,
      Local Host IP addr=10.21.104.163,
      Peer Hostname Name=C2-Complab-38.cencol.ca,
      Peer IP addr=127.0.0.1,Peer Name=N/A,
      Peer Portno=3478,Lrecl=32767,Recfm=Variable

NOTE: 1 record was written to the file EMWIPMSG.
      The minimum record length was 59.
      The maximum record length was 59.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

Traverser: WaitingNode "MDLCOMP" 
traverser_readyNode_note 
traverser_readyNode_note 
traverser_readyNode_note 
traverser_readyNode_note 
traverser_readyNode_note 
19291      data _null_;
MPRINT(EM_DIAGRAM):    data _null_;
19292      file emwipmsg;
MPRINT(EM_DIAGRAM):   file emwipmsg;
19293      put '<Node Id="Neural8" Event="Run" Pid="2144" Gridid=""/>';
MPRINT(EM_DIAGRAM):   put '<Node Id="Neural8" Event="Run" Pid="2144" Gridid=""/>';
19294      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: The file EMWIPMSG is:
      Local Host Name=C2-Complab-38,
      Local Host IP addr=10.21.104.163,
      Peer Hostname Name=C2-Complab-38.cencol.ca,
      Peer IP addr=127.0.0.1,Peer Name=N/A,
      Peer Portno=3478,Lrecl=32767,Recfm=Variable

NOTE: 1 record was written to the file EMWIPMSG.
      The minimum record length was 53.
      The maximum record length was 53.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

19295      %let emloopmode =;
*------------------------------------------------------------* 
* 
* Neural8 : Beginning update before running 
* datetime : 16APR2021:13:02:21 
* 
*------------------------------------------------------------* 
MPRINT(EM_DIAGRAM):     data WORK.Neural8_FILTERSET;
MPRINT(EM_DIAGRAM):   length PORT $32 USE $1;
MPRINT(EM_DIAGRAM):   DROP DELTACODE APPLYDELTA APPLYSCORE IMPORTPORT;
MPRINT(EM_DIAGRAM):   set EMWS1.Reg3_exportSet ;
MPRINT(EM_DIAGRAM):   PORT = '';
MPRINT(EM_DIAGRAM):   USE = '';
MPRINT(EM_DIAGRAM):   where role in( "RAW" "TRAIN" "VALIDATE" "TEST" ) and EXPORT = 'Y' ;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _emtool_ 'H:\746\Decision Tree test\Workspaces\EMWS1\Neural8\PROPERTIES.xml' encoding="UTF-8" NOBOM;
19315      %let _HPDMGRIDHOST=;
19316      %let _HPDMGRIDINSTALLLOC=;
19317      %let _HPDMGRIDDATASERVER=;
19318      %hpdm_gridSetOPtions;
MPRINT(EM_DIAGRAM):   
MPRINT(HPDM_GRIDSETOPTIONS):   data _null_;
MPRINT(HPDM_GRIDSETOPTIONS):   length optionString string $2000;
MPRINT(HPDM_GRIDSETOPTIONS):   optionString = reverse(getoption('SET'));
MPRINT(HPDM_GRIDSETOPTIONS):   index = index(optionString, reverse('GRIDHOST'));
MPRINT(HPDM_GRIDSETOPTIONS):   if index then do;
MPRINT(HPDM_GRIDSETOPTIONS):   string = reverse(substr(optionString, 1, index-4));
MPRINT(HPDM_GRIDSETOPTIONS):   host = '"'!!strip(tranwrd(scan(string, 1, ']'), '"', ''))!!'"';
MPRINT(HPDM_GRIDSETOPTIONS):   call symput('_HPDMGRIDHOST', strip(host));
MPRINT(HPDM_GRIDSETOPTIONS):   end;
MPRINT(HPDM_GRIDSETOPTIONS):   index = index(optionString, reverse('GRIDINSTALLLOC'));
MPRINT(HPDM_GRIDSETOPTIONS):   if index then do;
MPRINT(HPDM_GRIDSETOPTIONS):   string = reverse(substr(optionString, 1, index-4));
MPRINT(HPDM_GRIDSETOPTIONS):   install = '"'!!strip(tranwrd(scan(string, 1, ']'), '"', ''))!!'"';
MPRINT(HPDM_GRIDSETOPTIONS):   call symput('_HPDMGRIDINSTALLLOC', strip(install));
MPRINT(HPDM_GRIDSETOPTIONS):   end;
MPRINT(HPDM_GRIDSETOPTIONS):   index = index(optionString, reverse('GRIDDATASERVER'));
MPRINT(HPDM_GRIDSETOPTIONS):   if index then do;
MPRINT(HPDM_GRIDSETOPTIONS):   string = reverse(substr(optionString, 1, index-4));
MPRINT(HPDM_GRIDSETOPTIONS):   server = '"'!!strip(tranwrd(scan(string, 1, ']'), '"', ''))!!'"';
MPRINT(HPDM_GRIDSETOPTIONS):   call symput('_HPDMGRIDDATASERVER', strip(server));
MPRINT(HPDM_GRIDSETOPTIONS):   end;
MPRINT(HPDM_GRIDSETOPTIONS):   run;

NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(EM_DIAGRAM):  ;

*------------------------------------------------------------* 
* 
* Neural8 : End update 
* datetime : 16APR2021:13:02:21 
* 
*------------------------------------------------------------* 
19319      %em_getactionstatus(emlib =EMWS1, nodeid=Neural8);
MPRINT(EM_DIAGRAM):   
MPRINT(EM_GETACTIONSTATUS):   proc display c=sashelp.emutil.getactionstatus.scl;
MPRINT(EM_GETACTIONSTATUS):   run;

19320      %let em_Train = N;
19321      %let em_Score = N;
19322      %let em_Report = N;
19323      %let em_Run = N;
NOTE: PROCEDURE DISPLAY used (Total process time):
      real time           0.05 seconds
      cpu time            0.01 seconds
      

MPRINT(EM_GETACTIONSTATUS):   
MPRINT(EM_DIAGRAM):  ;

Node "Neural8" has already run. 
Node "Neural8" succeeded. 
19324      data _null_;
MPRINT(EM_DIAGRAM):    data _null_;
19325      file emwipmsg;
MPRINT(EM_DIAGRAM):   file emwipmsg;
19326      put '<Node Id="Neural8" Event="Complete" Pid="2144" Gridid=""/>';
MPRINT(EM_DIAGRAM):   put '<Node Id="Neural8" Event="Complete" Pid="2144" Gridid=""/>';
19327      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: The file EMWIPMSG is:
      Local Host Name=C2-Complab-38,
      Local Host IP addr=10.21.104.163,
      Peer Hostname Name=C2-Complab-38.cencol.ca,
      Peer IP addr=127.0.0.1,Peer Name=N/A,
      Peer Portno=3478,Lrecl=32767,Recfm=Variable

NOTE: 1 record was written to the file EMWIPMSG.
      The minimum record length was 58.
      The maximum record length was 58.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
      

Traverser: WaitingNode "MDLCOMP" 
traverser_readyNode_note 
traverser_readyNode_note 
traverser_readyNode_note 
traverser_readyNode_note 
19328      data _null_;
MPRINT(EM_DIAGRAM):    data _null_;
19329      file emwipmsg;
MPRINT(EM_DIAGRAM):   file emwipmsg;
19330      put '<Node Id="Neural7" Event="Run" Pid="2144" Gridid=""/>';
MPRINT(EM_DIAGRAM):   put '<Node Id="Neural7" Event="Run" Pid="2144" Gridid=""/>';
19331      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: The file EMWIPMSG is:
      Local Host Name=C2-Complab-38,
      Local Host IP addr=10.21.104.163,
      Peer Hostname Name=C2-Complab-38.cencol.ca,
      Peer IP addr=127.0.0.1,Peer Name=N/A,
      Peer Portno=3478,Lrecl=32767,Recfm=Variable

NOTE: 1 record was written to the file EMWIPMSG.
      The minimum record length was 53.
      The maximum record length was 53.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
      

19332      %let emloopmode =;
*------------------------------------------------------------* 
* 
* Neural7 : Beginning update before running 
* datetime : 16APR2021:13:02:22 
* 
*------------------------------------------------------------* 
MPRINT(EM_DIAGRAM):     data WORK.Neural7_FILTERSET;
MPRINT(EM_DIAGRAM):   length PORT $32 USE $1;
MPRINT(EM_DIAGRAM):   DROP DELTACODE APPLYDELTA APPLYSCORE IMPORTPORT;
MPRINT(EM_DIAGRAM):   set EMWS1.Reg3_exportSet ;
MPRINT(EM_DIAGRAM):   PORT = '';
MPRINT(EM_DIAGRAM):   USE = '';
MPRINT(EM_DIAGRAM):   where role in( "RAW" "TRAIN" "VALIDATE" "TEST" ) and EXPORT = 'Y' ;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _emtool_ 'H:\746\Decision Tree test\Workspaces\EMWS1\Neural7\PROPERTIES.xml' encoding="UTF-8" NOBOM;
19352      %let _HPDMGRIDHOST=;
19353      %let _HPDMGRIDINSTALLLOC=;
19354      %let _HPDMGRIDDATASERVER=;
19355      %hpdm_gridSetOPtions;
MPRINT(EM_DIAGRAM):   
MPRINT(HPDM_GRIDSETOPTIONS):   data _null_;
MPRINT(HPDM_GRIDSETOPTIONS):   length optionString string $2000;
MPRINT(HPDM_GRIDSETOPTIONS):   optionString = reverse(getoption('SET'));
MPRINT(HPDM_GRIDSETOPTIONS):   index = index(optionString, reverse('GRIDHOST'));
MPRINT(HPDM_GRIDSETOPTIONS):   if index then do;
MPRINT(HPDM_GRIDSETOPTIONS):   string = reverse(substr(optionString, 1, index-4));
MPRINT(HPDM_GRIDSETOPTIONS):   host = '"'!!strip(tranwrd(scan(string, 1, ']'), '"', ''))!!'"';
MPRINT(HPDM_GRIDSETOPTIONS):   call symput('_HPDMGRIDHOST', strip(host));
MPRINT(HPDM_GRIDSETOPTIONS):   end;
MPRINT(HPDM_GRIDSETOPTIONS):   index = index(optionString, reverse('GRIDINSTALLLOC'));
MPRINT(HPDM_GRIDSETOPTIONS):   if index then do;
MPRINT(HPDM_GRIDSETOPTIONS):   string = reverse(substr(optionString, 1, index-4));
MPRINT(HPDM_GRIDSETOPTIONS):   install = '"'!!strip(tranwrd(scan(string, 1, ']'), '"', ''))!!'"';
MPRINT(HPDM_GRIDSETOPTIONS):   call symput('_HPDMGRIDINSTALLLOC', strip(install));
MPRINT(HPDM_GRIDSETOPTIONS):   end;
MPRINT(HPDM_GRIDSETOPTIONS):   index = index(optionString, reverse('GRIDDATASERVER'));
MPRINT(HPDM_GRIDSETOPTIONS):   if index then do;
MPRINT(HPDM_GRIDSETOPTIONS):   string = reverse(substr(optionString, 1, index-4));
MPRINT(HPDM_GRIDSETOPTIONS):   server = '"'!!strip(tranwrd(scan(string, 1, ']'), '"', ''))!!'"';
MPRINT(HPDM_GRIDSETOPTIONS):   call symput('_HPDMGRIDDATASERVER', strip(server));
MPRINT(HPDM_GRIDSETOPTIONS):   end;
MPRINT(HPDM_GRIDSETOPTIONS):   run;

NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(EM_DIAGRAM):  ;

*------------------------------------------------------------* 
* 
* Neural7 : End update 
* datetime : 16APR2021:13:02:22 
* 
*------------------------------------------------------------* 
19356      %em_getactionstatus(emlib =EMWS1, nodeid=Neural7);
MPRINT(EM_DIAGRAM):   
MPRINT(EM_GETACTIONSTATUS):   proc display c=sashelp.emutil.getactionstatus.scl;
MPRINT(EM_GETACTIONSTATUS):   run;

19357      %let em_Train = N;
19358      %let em_Score = N;
19359      %let em_Report = N;
19360      %let em_Run = N;
NOTE: PROCEDURE DISPLAY used (Total process time):
      real time           0.22 seconds
      cpu time            0.01 seconds
      

MPRINT(EM_GETACTIONSTATUS):   
MPRINT(EM_DIAGRAM):  ;

Node "Neural7" has already run. 
Node "Neural7" succeeded. 
19361      data _null_;
MPRINT(EM_DIAGRAM):    data _null_;
19362      file emwipmsg;
MPRINT(EM_DIAGRAM):   file emwipmsg;
19363      put '<Node Id="Neural7" Event="Complete" Pid="2144" Gridid=""/>';
MPRINT(EM_DIAGRAM):   put '<Node Id="Neural7" Event="Complete" Pid="2144" Gridid=""/>';
19364      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: The file EMWIPMSG is:
      Local Host Name=C2-Complab-38,
      Local Host IP addr=10.21.104.163,
      Peer Hostname Name=C2-Complab-38.cencol.ca,
      Peer IP addr=127.0.0.1,Peer Name=N/A,
      Peer Portno=3478,Lrecl=32767,Recfm=Variable

NOTE: 1 record was written to the file EMWIPMSG.
      The minimum record length was 58.
      The maximum record length was 58.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

Traverser: WaitingNode "MDLCOMP" 
traverser_readyNode_note 
traverser_readyNode_note 
traverser_readyNode_note 
19365      data _null_;
MPRINT(EM_DIAGRAM):    data _null_;
19366      file emwipmsg;
MPRINT(EM_DIAGRAM):   file emwipmsg;
19367      put '<Node Id="Neural11" Event="Run" Pid="2144" Gridid=""/>';
MPRINT(EM_DIAGRAM):   put '<Node Id="Neural11" Event="Run" Pid="2144" Gridid=""/>';
19368      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: The file EMWIPMSG is:
      Local Host Name=C2-Complab-38,
      Local Host IP addr=10.21.104.163,
      Peer Hostname Name=C2-Complab-38.cencol.ca,
      Peer IP addr=127.0.0.1,Peer Name=N/A,
      Peer Portno=3478,Lrecl=32767,Recfm=Variable

NOTE: 1 record was written to the file EMWIPMSG.
      The minimum record length was 54.
      The maximum record length was 54.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

19369      %let emloopmode =;
*------------------------------------------------------------* 
* 
* Neural11 : Beginning update before running 
* datetime : 16APR2021:13:02:27 
* 
*------------------------------------------------------------* 
MPRINT(EM_DIAGRAM):     data WORK.Neural11_FILTERSET;
MPRINT(EM_DIAGRAM):   length PORT $32 USE $1;
MPRINT(EM_DIAGRAM):   DROP DELTACODE APPLYDELTA APPLYSCORE IMPORTPORT;
MPRINT(EM_DIAGRAM):   set EMWS1.Reg2_exportSet ;
MPRINT(EM_DIAGRAM):   PORT = '';
MPRINT(EM_DIAGRAM):   USE = '';
MPRINT(EM_DIAGRAM):   where role in( "RAW" "TRAIN" "VALIDATE" "TEST" ) and EXPORT = 'Y' ;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _emtool_ 'H:\746\Decision Tree test\Workspaces\EMWS1\Neural11\PROPERTIES.xml' encoding="UTF-8" NOBOM;
19389      %let _HPDMGRIDHOST=;
19390      %let _HPDMGRIDINSTALLLOC=;
19391      %let _HPDMGRIDDATASERVER=;
19392      %hpdm_gridSetOPtions;
MPRINT(EM_DIAGRAM):   
MPRINT(HPDM_GRIDSETOPTIONS):   data _null_;
MPRINT(HPDM_GRIDSETOPTIONS):   length optionString string $2000;
MPRINT(HPDM_GRIDSETOPTIONS):   optionString = reverse(getoption('SET'));
MPRINT(HPDM_GRIDSETOPTIONS):   index = index(optionString, reverse('GRIDHOST'));
MPRINT(HPDM_GRIDSETOPTIONS):   if index then do;
MPRINT(HPDM_GRIDSETOPTIONS):   string = reverse(substr(optionString, 1, index-4));
MPRINT(HPDM_GRIDSETOPTIONS):   host = '"'!!strip(tranwrd(scan(string, 1, ']'), '"', ''))!!'"';
MPRINT(HPDM_GRIDSETOPTIONS):   call symput('_HPDMGRIDHOST', strip(host));
MPRINT(HPDM_GRIDSETOPTIONS):   end;
MPRINT(HPDM_GRIDSETOPTIONS):   index = index(optionString, reverse('GRIDINSTALLLOC'));
MPRINT(HPDM_GRIDSETOPTIONS):   if index then do;
MPRINT(HPDM_GRIDSETOPTIONS):   string = reverse(substr(optionString, 1, index-4));
MPRINT(HPDM_GRIDSETOPTIONS):   install = '"'!!strip(tranwrd(scan(string, 1, ']'), '"', ''))!!'"';
MPRINT(HPDM_GRIDSETOPTIONS):   call symput('_HPDMGRIDINSTALLLOC', strip(install));
MPRINT(HPDM_GRIDSETOPTIONS):   end;
MPRINT(HPDM_GRIDSETOPTIONS):   index = index(optionString, reverse('GRIDDATASERVER'));
MPRINT(HPDM_GRIDSETOPTIONS):   if index then do;
MPRINT(HPDM_GRIDSETOPTIONS):   string = reverse(substr(optionString, 1, index-4));
MPRINT(HPDM_GRIDSETOPTIONS):   server = '"'!!strip(tranwrd(scan(string, 1, ']'), '"', ''))!!'"';
MPRINT(HPDM_GRIDSETOPTIONS):   call symput('_HPDMGRIDDATASERVER', strip(server));
MPRINT(HPDM_GRIDSETOPTIONS):   end;
MPRINT(HPDM_GRIDSETOPTIONS):   run;

NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(EM_DIAGRAM):  ;

*------------------------------------------------------------* 
* 
* Neural11 : End update 
* datetime : 16APR2021:13:02:27 
* 
*------------------------------------------------------------* 
19393      %em_getactionstatus(emlib =EMWS1, nodeid=Neural11);
MPRINT(EM_DIAGRAM):   
MPRINT(EM_GETACTIONSTATUS):   proc display c=sashelp.emutil.getactionstatus.scl;
MPRINT(EM_GETACTIONSTATUS):   run;

19394      %let em_Train = N;
19395      %let em_Score = N;
19396      %let em_Report = N;
19397      %let em_Run = N;
NOTE: PROCEDURE DISPLAY used (Total process time):
      real time           0.06 seconds
      cpu time            0.03 seconds
      

MPRINT(EM_GETACTIONSTATUS):   
MPRINT(EM_DIAGRAM):  ;

Node "Neural11" has already run. 
Node "Neural11" succeeded. 
19398      data _null_;
MPRINT(EM_DIAGRAM):    data _null_;
19399      file emwipmsg;
MPRINT(EM_DIAGRAM):   file emwipmsg;
19400      put '<Node Id="Neural11" Event="Complete" Pid="2144" Gridid=""/>';
MPRINT(EM_DIAGRAM):   put '<Node Id="Neural11" Event="Complete" Pid="2144" Gridid=""/>';
19401      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: The file EMWIPMSG is:
      Local Host Name=C2-Complab-38,
      Local Host IP addr=10.21.104.163,
      Peer Hostname Name=C2-Complab-38.cencol.ca,
      Peer IP addr=127.0.0.1,Peer Name=N/A,
      Peer Portno=3478,Lrecl=32767,Recfm=Variable

NOTE: 1 record was written to the file EMWIPMSG.
      The minimum record length was 59.
      The maximum record length was 59.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

Traverser: WaitingNode "MDLCOMP" 
traverser_readyNode_note 
traverser_readyNode_note 
19402      data _null_;
MPRINT(EM_DIAGRAM):    data _null_;
19403      file emwipmsg;
MPRINT(EM_DIAGRAM):   file emwipmsg;
19404      put '<Node Id="Neural5" Event="Run" Pid="2144" Gridid=""/>';
MPRINT(EM_DIAGRAM):   put '<Node Id="Neural5" Event="Run" Pid="2144" Gridid=""/>';
19405      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: The file EMWIPMSG is:
      Local Host Name=C2-Complab-38,
      Local Host IP addr=10.21.104.163,
      Peer Hostname Name=C2-Complab-38.cencol.ca,
      Peer IP addr=127.0.0.1,Peer Name=N/A,
      Peer Portno=3478,Lrecl=32767,Recfm=Variable

NOTE: 1 record was written to the file EMWIPMSG.
      The minimum record length was 53.
      The maximum record length was 53.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
      

19406      %let emloopmode =;
*------------------------------------------------------------* 
* 
* Neural5 : Beginning update before running 
* datetime : 16APR2021:13:02:28 
* 
*------------------------------------------------------------* 
MPRINT(EM_DIAGRAM):     data WORK.Neural5_FILTERSET;
MPRINT(EM_DIAGRAM):   length PORT $32 USE $1;
MPRINT(EM_DIAGRAM):   DROP DELTACODE APPLYDELTA APPLYSCORE IMPORTPORT;
MPRINT(EM_DIAGRAM):   set EMWS1.Reg2_exportSet ;
MPRINT(EM_DIAGRAM):   PORT = '';
MPRINT(EM_DIAGRAM):   USE = '';
MPRINT(EM_DIAGRAM):   where role in( "RAW" "TRAIN" "VALIDATE" "TEST" ) and EXPORT = 'Y' ;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _emtool_ 'H:\746\Decision Tree test\Workspaces\EMWS1\Neural5\PROPERTIES.xml' encoding="UTF-8" NOBOM;
19426      %let _HPDMGRIDHOST=;
19427      %let _HPDMGRIDINSTALLLOC=;
19428      %let _HPDMGRIDDATASERVER=;
19429      %hpdm_gridSetOPtions;
MPRINT(EM_DIAGRAM):   
MPRINT(HPDM_GRIDSETOPTIONS):   data _null_;
MPRINT(HPDM_GRIDSETOPTIONS):   length optionString string $2000;
MPRINT(HPDM_GRIDSETOPTIONS):   optionString = reverse(getoption('SET'));
MPRINT(HPDM_GRIDSETOPTIONS):   index = index(optionString, reverse('GRIDHOST'));
MPRINT(HPDM_GRIDSETOPTIONS):   if index then do;
MPRINT(HPDM_GRIDSETOPTIONS):   string = reverse(substr(optionString, 1, index-4));
MPRINT(HPDM_GRIDSETOPTIONS):   host = '"'!!strip(tranwrd(scan(string, 1, ']'), '"', ''))!!'"';
MPRINT(HPDM_GRIDSETOPTIONS):   call symput('_HPDMGRIDHOST', strip(host));
MPRINT(HPDM_GRIDSETOPTIONS):   end;
MPRINT(HPDM_GRIDSETOPTIONS):   index = index(optionString, reverse('GRIDINSTALLLOC'));
MPRINT(HPDM_GRIDSETOPTIONS):   if index then do;
MPRINT(HPDM_GRIDSETOPTIONS):   string = reverse(substr(optionString, 1, index-4));
MPRINT(HPDM_GRIDSETOPTIONS):   install = '"'!!strip(tranwrd(scan(string, 1, ']'), '"', ''))!!'"';
MPRINT(HPDM_GRIDSETOPTIONS):   call symput('_HPDMGRIDINSTALLLOC', strip(install));
MPRINT(HPDM_GRIDSETOPTIONS):   end;
MPRINT(HPDM_GRIDSETOPTIONS):   index = index(optionString, reverse('GRIDDATASERVER'));
MPRINT(HPDM_GRIDSETOPTIONS):   if index then do;
MPRINT(HPDM_GRIDSETOPTIONS):   string = reverse(substr(optionString, 1, index-4));
MPRINT(HPDM_GRIDSETOPTIONS):   server = '"'!!strip(tranwrd(scan(string, 1, ']'), '"', ''))!!'"';
MPRINT(HPDM_GRIDSETOPTIONS):   call symput('_HPDMGRIDDATASERVER', strip(server));
MPRINT(HPDM_GRIDSETOPTIONS):   end;
MPRINT(HPDM_GRIDSETOPTIONS):   run;

NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(EM_DIAGRAM):  ;

*------------------------------------------------------------* 
* 
* Neural5 : End update 
* datetime : 16APR2021:13:02:28 
* 
*------------------------------------------------------------* 
19430      %em_getactionstatus(emlib =EMWS1, nodeid=Neural5);
MPRINT(EM_DIAGRAM):   
MPRINT(EM_GETACTIONSTATUS):   proc display c=sashelp.emutil.getactionstatus.scl;
MPRINT(EM_GETACTIONSTATUS):   run;

19431      %let em_Train = N;
19432      %let em_Score = N;
19433      %let em_Report = N;
19434      %let em_Run = N;
NOTE: PROCEDURE DISPLAY used (Total process time):
      real time           0.07 seconds
      cpu time            0.01 seconds
      

MPRINT(EM_GETACTIONSTATUS):   
MPRINT(EM_DIAGRAM):  ;

Node "Neural5" has already run. 
Node "Neural5" succeeded. 
19435      data _null_;
MPRINT(EM_DIAGRAM):    data _null_;
19436      file emwipmsg;
MPRINT(EM_DIAGRAM):   file emwipmsg;
19437      put '<Node Id="Neural5" Event="Complete" Pid="2144" Gridid=""/>';
MPRINT(EM_DIAGRAM):   put '<Node Id="Neural5" Event="Complete" Pid="2144" Gridid=""/>';
19438      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: The file EMWIPMSG is:
      Local Host Name=C2-Complab-38,
      Local Host IP addr=10.21.104.163,
      Peer Hostname Name=C2-Complab-38.cencol.ca,
      Peer IP addr=127.0.0.1,Peer Name=N/A,
      Peer Portno=3478,Lrecl=32767,Recfm=Variable

NOTE: 1 record was written to the file EMWIPMSG.
      The minimum record length was 58.
      The maximum record length was 58.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
      

Traverser: WaitingNode "MDLCOMP" 
traverser_readyNode_note 
19439      data _null_;
MPRINT(EM_DIAGRAM):    data _null_;
19440      file emwipmsg;
MPRINT(EM_DIAGRAM):   file emwipmsg;
19441      put '<Node Id="Neural6" Event="Run" Pid="2144" Gridid=""/>';
MPRINT(EM_DIAGRAM):   put '<Node Id="Neural6" Event="Run" Pid="2144" Gridid=""/>';
19442      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: The file EMWIPMSG is:
      Local Host Name=C2-Complab-38,
      Local Host IP addr=10.21.104.163,
      Peer Hostname Name=C2-Complab-38.cencol.ca,
      Peer IP addr=127.0.0.1,Peer Name=N/A,
      Peer Portno=3478,Lrecl=32767,Recfm=Variable

NOTE: 1 record was written to the file EMWIPMSG.
      The minimum record length was 53.
      The maximum record length was 53.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
      

19443      %let emloopmode =;
*------------------------------------------------------------* 
* 
* Neural6 : Beginning update before running 
* datetime : 16APR2021:13:02:29 
* 
*------------------------------------------------------------* 
MPRINT(EM_DIAGRAM):     data WORK.Neural6_FILTERSET;
MPRINT(EM_DIAGRAM):   length PORT $32 USE $1;
MPRINT(EM_DIAGRAM):   DROP DELTACODE APPLYDELTA APPLYSCORE IMPORTPORT;
MPRINT(EM_DIAGRAM):   set EMWS1.Reg2_exportSet ;
MPRINT(EM_DIAGRAM):   PORT = '';
MPRINT(EM_DIAGRAM):   USE = '';
MPRINT(EM_DIAGRAM):   where role in( "RAW" "TRAIN" "VALIDATE" "TEST" ) and EXPORT = 'Y' ;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _emtool_ 'H:\746\Decision Tree test\Workspaces\EMWS1\Neural6\PROPERTIES.xml' encoding="UTF-8" NOBOM;
19463      %let _HPDMGRIDHOST=;
19464      %let _HPDMGRIDINSTALLLOC=;
19465      %let _HPDMGRIDDATASERVER=;
19466      %hpdm_gridSetOPtions;
MPRINT(EM_DIAGRAM):   
MPRINT(HPDM_GRIDSETOPTIONS):   data _null_;
MPRINT(HPDM_GRIDSETOPTIONS):   length optionString string $2000;
MPRINT(HPDM_GRIDSETOPTIONS):   optionString = reverse(getoption('SET'));
MPRINT(HPDM_GRIDSETOPTIONS):   index = index(optionString, reverse('GRIDHOST'));
MPRINT(HPDM_GRIDSETOPTIONS):   if index then do;
MPRINT(HPDM_GRIDSETOPTIONS):   string = reverse(substr(optionString, 1, index-4));
MPRINT(HPDM_GRIDSETOPTIONS):   host = '"'!!strip(tranwrd(scan(string, 1, ']'), '"', ''))!!'"';
MPRINT(HPDM_GRIDSETOPTIONS):   call symput('_HPDMGRIDHOST', strip(host));
MPRINT(HPDM_GRIDSETOPTIONS):   end;
MPRINT(HPDM_GRIDSETOPTIONS):   index = index(optionString, reverse('GRIDINSTALLLOC'));
MPRINT(HPDM_GRIDSETOPTIONS):   if index then do;
MPRINT(HPDM_GRIDSETOPTIONS):   string = reverse(substr(optionString, 1, index-4));
MPRINT(HPDM_GRIDSETOPTIONS):   install = '"'!!strip(tranwrd(scan(string, 1, ']'), '"', ''))!!'"';
MPRINT(HPDM_GRIDSETOPTIONS):   call symput('_HPDMGRIDINSTALLLOC', strip(install));
MPRINT(HPDM_GRIDSETOPTIONS):   end;
MPRINT(HPDM_GRIDSETOPTIONS):   index = index(optionString, reverse('GRIDDATASERVER'));
MPRINT(HPDM_GRIDSETOPTIONS):   if index then do;
MPRINT(HPDM_GRIDSETOPTIONS):   string = reverse(substr(optionString, 1, index-4));
MPRINT(HPDM_GRIDSETOPTIONS):   server = '"'!!strip(tranwrd(scan(string, 1, ']'), '"', ''))!!'"';
MPRINT(HPDM_GRIDSETOPTIONS):   call symput('_HPDMGRIDDATASERVER', strip(server));
MPRINT(HPDM_GRIDSETOPTIONS):   end;
MPRINT(HPDM_GRIDSETOPTIONS):   run;

NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(EM_DIAGRAM):  ;

*------------------------------------------------------------* 
* 
* Neural6 : End update 
* datetime : 16APR2021:13:02:29 
* 
*------------------------------------------------------------* 
19467      %em_getactionstatus(emlib =EMWS1, nodeid=Neural6);
MPRINT(EM_DIAGRAM):   
MPRINT(EM_GETACTIONSTATUS):   proc display c=sashelp.emutil.getactionstatus.scl;
MPRINT(EM_GETACTIONSTATUS):   run;

19468      %let em_Train = N;
19469      %let em_Score = N;
19470      %let em_Report = N;
19471      %let em_Run = N;
NOTE: PROCEDURE DISPLAY used (Total process time):
      real time           0.06 seconds
      cpu time            0.01 seconds
      

MPRINT(EM_GETACTIONSTATUS):   
MPRINT(EM_DIAGRAM):  ;

Node "Neural6" has already run. 
Node "Neural6" succeeded. 
19472      data _null_;
MPRINT(EM_DIAGRAM):    data _null_;
19473      file emwipmsg;
MPRINT(EM_DIAGRAM):   file emwipmsg;
19474      put '<Node Id="Neural6" Event="Complete" Pid="2144" Gridid=""/>';
MPRINT(EM_DIAGRAM):   put '<Node Id="Neural6" Event="Complete" Pid="2144" Gridid=""/>';
19475      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: The file EMWIPMSG is:
      Local Host Name=C2-Complab-38,
      Local Host IP addr=10.21.104.163,
      Peer Hostname Name=C2-Complab-38.cencol.ca,
      Peer IP addr=127.0.0.1,Peer Name=N/A,
      Peer Portno=3478,Lrecl=32767,Recfm=Variable

NOTE: 1 record was written to the file EMWIPMSG.
      The minimum record length was 58.
      The maximum record length was 58.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
      

traverser_readyNode_note 
19476      data _null_;
MPRINT(EM_DIAGRAM):    data _null_;
19477      file emwipmsg;
MPRINT(EM_DIAGRAM):   file emwipmsg;
19478      put '<Node Id="MdlComp" Event="Run" Pid="2144" Gridid=""/>';
MPRINT(EM_DIAGRAM):   put '<Node Id="MdlComp" Event="Run" Pid="2144" Gridid=""/>';
19479      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: The file EMWIPMSG is:
      Local Host Name=C2-Complab-38,
      Local Host IP addr=10.21.104.163,
      Peer Hostname Name=C2-Complab-38.cencol.ca,
      Peer IP addr=127.0.0.1,Peer Name=N/A,
      Peer Portno=3478,Lrecl=32767,Recfm=Variable

NOTE: 1 record was written to the file EMWIPMSG.
      The minimum record length was 53.
      The maximum record length was 53.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

19480      %let emloopmode =;
*------------------------------------------------------------* 
* 
* MdlComp : Beginning update before running 
* datetime : 16APR2021:13:02:33 
* 
*------------------------------------------------------------* 
MPRINT(EM_DIAGRAM):     data WORK.MdlComp_FILTERSET;
MPRINT(EM_DIAGRAM):   length PORT $32 USE $1;
MPRINT(EM_DIAGRAM):   DROP DELTACODE APPLYDELTA APPLYSCORE IMPORTPORT export needupdate;
MPRINT(EM_DIAGRAM):   set EMWS1.Tree2_exportSet EMWS1.Tree_exportSet EMWS1.Tree3_exportSet EMWS1.Neural_exportSet EMWS1.Neural4_exportSet EMWS1.Neural3_exportSet EMWS1.Neural2_exportSet EMWS1.Reg4_exportSet EMWS1.Reg3_exportSet EMWS1.Reg2_exportSet 
EMWS1.Reg_exportSet EMWS1.Neural11_exportSet EMWS1.Neural5_exportSet EMWS1.Neural6_exportSet EMWS1.Neural13_exportSet EMWS1.Neural8_exportSet EMWS1.Neural7_exportSet EMWS1.Neural14_exportSet EMWS1.Neural9_exportSet EMWS1.Neural10_exportSet ;
MPRINT(EM_DIAGRAM):   where EXPORT = 'Y' ;
MPRINT(EM_DIAGRAM):   drop export needupdate;
MPRINT(EM_DIAGRAM):   port = upcase(trim(NODELABEL)!!'_'!!left(NODEPORT));
MPRINT(EM_DIAGRAM):   if port = upcase("TREE_TRAIN") then USE="Y";
MPRINT(EM_DIAGRAM):   else if port = upcase("TREE_VALIDATE") then USE="Y";
MPRINT(EM_DIAGRAM):   else if port = upcase("TREE_TREE") then USE="Y";
MPRINT(EM_DIAGRAM):   else if port = upcase("TREE3_TRAIN") then USE="Y";
MPRINT(EM_DIAGRAM):   else if port = upcase("TREE3_VALIDATE") then USE="Y";
MPRINT(EM_DIAGRAM):   else if port = upcase("TREE3_TREE") then USE="Y";
MPRINT(EM_DIAGRAM):   else if port = upcase("NEURAL_TRAIN") then USE="Y";
MPRINT(EM_DIAGRAM):   else if port = upcase("NEURAL_VALIDATE") then USE="Y";
MPRINT(EM_DIAGRAM):   else if port = upcase("NEURAL_ESTIMATE") then USE="Y";
MPRINT(EM_DIAGRAM):   else if port = upcase("NEURAL4_TRAIN") then USE="Y";
MPRINT(EM_DIAGRAM):   else if port = upcase("NEURAL4_VALIDATE") then USE="Y";
MPRINT(EM_DIAGRAM):   else if port = upcase("NEURAL4_ESTIMATE") then USE="Y";
MPRINT(EM_DIAGRAM):   else if port = upcase("NEURAL3_TRAIN") then USE="Y";
MPRINT(EM_DIAGRAM):   else if port = upcase("NEURAL3_VALIDATE") then USE="Y";
MPRINT(EM_DIAGRAM):   else if port = upcase("NEURAL3_ESTIMATE") then USE="Y";
MPRINT(EM_DIAGRAM):   else if port = upcase("NEURAL2_TRAIN") then USE="Y";
MPRINT(EM_DIAGRAM):   else if port = upcase("NEURAL2_VALIDATE") then USE="Y";
MPRINT(EM_DIAGRAM):   else if port = upcase("NEURAL2_ESTIMATE") then USE="Y";
MPRINT(EM_DIAGRAM):   else if port = upcase("REG4_TRAIN") then USE="Y";
MPRINT(EM_DIAGRAM):   else if port = upcase("REG4_VALIDATE") then USE="Y";
MPRINT(EM_DIAGRAM):   else if port = upcase("REG4_ESTIMATE") then USE="Y";
MPRINT(EM_DIAGRAM):   else if port = upcase("REG3_TRAIN") then USE="Y";
MPRINT(EM_DIAGRAM):   else if port = upcase("REG3_VALIDATE") then USE="Y";
MPRINT(EM_DIAGRAM):   else if port = upcase("REG3_ESTIMATE") then USE="Y";
MPRINT(EM_DIAGRAM):   else if port = upcase("REG2_TRAIN") then USE="Y";
MPRINT(EM_DIAGRAM):   else if port = upcase("REG2_VALIDATE") then USE="Y";
MPRINT(EM_DIAGRAM):   else if port = upcase("REG2_ESTIMATE") then USE="Y";
MPRINT(EM_DIAGRAM):   else if port = upcase("REG_TRAIN") then USE="Y";
MPRINT(EM_DIAGRAM):   else if port = upcase("REG_VALIDATE") then USE="Y";
MPRINT(EM_DIAGRAM):   else if port = upcase("REG_ESTIMATE") then USE="Y";
MPRINT(EM_DIAGRAM):   else if port = upcase("NEURAL11_TRAIN") then USE="Y";
MPRINT(EM_DIAGRAM):   else if port = upcase("NEURAL11_VALIDATE") then USE="Y";
MPRINT(EM_DIAGRAM):   else if port = upcase("NEURAL11_ESTIMATE") then USE="Y";
MPRINT(EM_DIAGRAM):   else if port = upcase("NEURAL5_TRAIN") then USE="Y";
MPRINT(EM_DIAGRAM):   else if port = upcase("NEURAL5_VALIDATE") then USE="Y";
MPRINT(EM_DIAGRAM):   else if port = upcase("NEURAL5_ESTIMATE") then USE="Y";
MPRINT(EM_DIAGRAM):   else if port = upcase("NEURAL6_TRAIN") then USE="Y";
MPRINT(EM_DIAGRAM):   else if port = upcase("NEURAL6_VALIDATE") then USE="Y";
MPRINT(EM_DIAGRAM):   else if port = upcase("NEURAL6_ESTIMATE") then USE="Y";
MPRINT(EM_DIAGRAM):   else if port = upcase("NEURAL13_TRAIN") then USE="Y";
MPRINT(EM_DIAGRAM):   else if port = upcase("NEURAL13_VALIDATE") then USE="Y";
MPRINT(EM_DIAGRAM):   else if port = upcase("NEURAL13_ESTIMATE") then USE="Y";
MPRINT(EM_DIAGRAM):   else if port = upcase("NEURAL8_TRAIN") then USE="Y";
MPRINT(EM_DIAGRAM):   else if port = upcase("NEURAL8_VALIDATE") then USE="Y";
MPRINT(EM_DIAGRAM):   else if port = upcase("NEURAL8_ESTIMATE") then USE="Y";
MPRINT(EM_DIAGRAM):   else if port = upcase("NEURAL7_TRAIN") then USE="Y";
MPRINT(EM_DIAGRAM):   else if port = upcase("NEURAL7_VALIDATE") then USE="Y";
MPRINT(EM_DIAGRAM):   else if port = upcase("NEURAL7_ESTIMATE") then USE="Y";
MPRINT(EM_DIAGRAM):   else if port = upcase("NEURAL15_TRAIN") then USE="Y";
MPRINT(EM_DIAGRAM):   else if port = upcase("NEURAL15_VALIDATE") then USE="Y";
MPRINT(EM_DIAGRAM):   else if port = upcase("NEURAL15_ESTIMATE") then USE="Y";
MPRINT(EM_DIAGRAM):   else if port = upcase("NEURAL14_TRAIN") then USE="Y";
MPRINT(EM_DIAGRAM):   else if port = upcase("NEURAL14_VALIDATE") then USE="Y";
MPRINT(EM_DIAGRAM):   else if port = upcase("NEURAL14_ESTIMATE") then USE="Y";
MPRINT(EM_DIAGRAM):   else if port = upcase("NEURAL9_TRAIN") then USE="Y";
MPRINT(EM_DIAGRAM):   else if port = upcase("NEURAL9_VALIDATE") then USE="Y";
MPRINT(EM_DIAGRAM):   else if port = upcase("NEURAL9_ESTIMATE") then USE="Y";
MPRINT(EM_DIAGRAM):   else if port = upcase("NEURAL10_TRAIN") then USE="Y";
MPRINT(EM_DIAGRAM):   else if port = upcase("NEURAL10_VALIDATE") then USE="Y";
MPRINT(EM_DIAGRAM):   else if port = upcase("NEURAL10_ESTIMATE") then USE="Y";
MPRINT(EM_DIAGRAM):   else if port = upcase("TREE2_TRAIN") then USE="Y";
MPRINT(EM_DIAGRAM):   else if port = upcase("TREE2_VALIDATE") then USE="Y";
MPRINT(EM_DIAGRAM):   else if port = upcase("TREE2_TREE") then USE="Y";
MPRINT(EM_DIAGRAM):   else USE="Y";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    proc sql;
MPRINT(EM_DIAGRAM):   create view work._base1AD2F98 as select * from WORK.M23UV80O order by PORT;
MPRINT(EM_DIAGRAM):   create view work._comp1AD2F98 as select * from WORK.M2CVGD3R order by PORT;
MPRINT(EM_DIAGRAM):   quit;
MPRINT(EM_DIAGRAM):    proc compare data=work._base1AD2F98 compare=work._comp1AD2F98 out=WORK._DIFF3JN3Z88 noprint outnoequal outbase outcomp outdiff;
MPRINT(EM_DIAGRAM):   id PORT;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    proc sql;
MPRINT(EM_DIAGRAM):   create table WORK._TMP13I29NB2 as select * from WORK._DIFF3JN3Z88 where PORT in (select PORT from WORK._DIFF3JN3Z88 where _type_ = "DIF") order by PORT, _type_;
MPRINT(EM_DIAGRAM):   proc sql;
MPRINT(EM_DIAGRAM):   create table WORK.DELTAELEM34NW39T as select * from WORK._DIFF3JN3Z88 where _type_ = "COMPARE" and PORT not in (select PORT from WORK._DIFF3JN3Z88 where _type_ = "DIF");
MPRINT(EM_DIAGRAM):   create table WORK.DELTDELEM34NW39T as select * from WORK._DIFF3JN3Z88 where _type_ = "BASE" and PORT not in (select PORT from WORK._DIFF3JN3Z88 where _type_ = "DIF");
MPRINT(EM_DIAGRAM):   data WORK.DELTAELEM34NW39T;
MPRINT(EM_DIAGRAM):   set WORK.DELTAELEM34NW39T;
MPRINT(EM_DIAGRAM):   drop _obs_ _type_;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data WORK.DELTDELEM34NW39T;
MPRINT(EM_DIAGRAM):   set WORK.DELTDELEM34NW39T;
MPRINT(EM_DIAGRAM):   drop _obs_ _type_;
MPRINT(EM_DIAGRAM):   run;
NOTE: There were 60 observations read from the data set WORK.MDLCOMP_FILTERSET.
NOTE: The data set EMWS1.MDLCOMP_IMPORTSET has 60 observations and 14 variables.
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL _INIT >> 
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL SETMETADATA >> 
NOTE: There were 1 observations read from the data set EMWS1.TREE2_EMINFO.
      WHERE KEY='MODEL';
NOTE: The data set WORK.EMINFO43M8S8ZR has 1 observations and 3 variables.
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL numElements >> 
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL next >> 
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL _INIT >> 
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL SETMETADATA >> 
NOTE: There were 1 observations read from the data set EMWS1.TREE2_EMINFO.
      WHERE (TARGET='Risk') and (KEY='DECMETA');
NOTE: The data set WORK.EMINFO40LFA01Z has 1 observations and 3 variables.
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL numElements >> 
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL next >> 
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL _term >> 
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL next >> 
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL _term >> 
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL _INIT >> 
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL SETMETADATA >> 
NOTE: There were 1 observations read from the data set EMWS1.TREE_EMINFO.
      WHERE KEY='MODEL';
NOTE: The data set WORK.EMINFO407A2VZX has 1 observations and 3 variables.
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL numElements >> 
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL next >> 
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL _INIT >> 
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL SETMETADATA >> 
NOTE: There were 1 observations read from the data set EMWS1.TREE_EMINFO.
      WHERE (TARGET='Risk') and (KEY='DECMETA');
NOTE: The data set WORK.EMINFO42_CEQ07 has 1 observations and 3 variables.
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL numElements >> 
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL next >> 
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL _term >> 
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL next >> 
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL _term >> 
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL _INIT >> 
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL SETMETADATA >> 
NOTE: There were 1 observations read from the data set EMWS1.TREE3_EMINFO.
      WHERE KEY='MODEL';
NOTE: The data set WORK.EMINFO43J6WHL7 has 1 observations and 3 variables.
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL numElements >> 
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL next >> 
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL _INIT >> 
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL SETMETADATA >> 
NOTE: There were 1 observations read from the data set EMWS1.TREE3_EMINFO.
      WHERE (TARGET='Risk') and (KEY='DECMETA');
NOTE: The data set WORK.EMINFO42_6MLW0 has 1 observations and 3 variables.
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL numElements >> 
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL next >> 
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL _term >> 
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL next >> 
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL _term >> 
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL _INIT >> 
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL SETMETADATA >> 
NOTE: There were 1 observations read from the data set EMWS1.NEURAL_EMINFO.
      WHERE KEY='MODEL';
NOTE: The data set WORK.EMINFO416F0HJO has 1 observations and 3 variables.
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL numElements >> 
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL next >> 
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL _INIT >> 
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL SETMETADATA >> 
NOTE: There were 1 observations read from the data set EMWS1.NEURAL_EMINFO.
      WHERE (TARGET='Risk') and (KEY='DECMETA');
NOTE: The data set WORK.EMINFO41Z0LRIN has 1 observations and 3 variables.
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL numElements >> 
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL next >> 
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL _term >> 
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL next >> 
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL _term >> 
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL _INIT >> 
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL SETMETADATA >> 
NOTE: There were 1 observations read from the data set EMWS1.NEURAL4_EMINFO.
      WHERE KEY='MODEL';
NOTE: The data set WORK.EMINFO41KEKXHS has 1 observations and 3 variables.
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL numElements >> 
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL next >> 
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL _INIT >> 
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL SETMETADATA >> 
NOTE: There were 1 observations read from the data set EMWS1.NEURAL4_EMINFO.
      WHERE (TARGET='Risk') and (KEY='DECMETA');
NOTE: The data set WORK.EMINFO41KM7HNC has 1 observations and 3 variables.
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL numElements >> 
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL next >> 
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL _term >> 
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL next >> 
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL _term >> 
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL _INIT >> 
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL SETMETADATA >> 
NOTE: There were 1 observations read from the data set EMWS1.NEURAL3_EMINFO.
      WHERE KEY='MODEL';
NOTE: The data set WORK.EMINFO42HQSWSW has 1 observations and 3 variables.
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL numElements >> 
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL next >> 
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL _INIT >> 
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL SETMETADATA >> 
NOTE: There were 1 observations read from the data set EMWS1.NEURAL3_EMINFO.
      WHERE (TARGET='Risk') and (KEY='DECMETA');
NOTE: The data set WORK.EMINFO40KOQ_HR has 1 observations and 3 variables.
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL numElements >> 
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL next >> 
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL _term >> 
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL next >> 
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL _term >> 
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL _INIT >> 
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL SETMETADATA >> 
NOTE: There were 1 observations read from the data set EMWS1.NEURAL2_EMINFO.
      WHERE KEY='MODEL';
NOTE: The data set WORK.EMINFO41V4P3GG has 1 observations and 3 variables.
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL numElements >> 
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL next >> 
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL _INIT >> 
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL SETMETADATA >> 
NOTE: There were 1 observations read from the data set EMWS1.NEURAL2_EMINFO.
      WHERE (TARGET='Risk') and (KEY='DECMETA');
NOTE: The data set WORK.EMINFO415QKL1P has 1 observations and 3 variables.
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL numElements >> 
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL next >> 
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL _term >> 
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL next >> 
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL _term >> 
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL _INIT >> 
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL SETMETADATA >> 
NOTE: There were 1 observations read from the data set EMWS1.REG4_EMINFO.
      WHERE KEY='MODEL';
NOTE: The data set WORK.EMINFO43JFIBFO has 1 observations and 3 variables.
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL numElements >> 
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL next >> 
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL _INIT >> 
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL SETMETADATA >> 
NOTE: There were 1 observations read from the data set EMWS1.REG4_EMINFO.
      WHERE (TARGET='Risk') and (KEY='DECMETA');
NOTE: The data set WORK.EMINFO42A9J1OI has 1 observations and 3 variables.
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL numElements >> 
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL next >> 
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL _term >> 
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL next >> 
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL _term >> 
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL _INIT >> 
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL SETMETADATA >> 
NOTE: There were 1 observations read from the data set EMWS1.REG3_EMINFO.
      WHERE KEY='MODEL';
NOTE: The data set WORK.EMINFO4382XS6F has 1 observations and 3 variables.
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL numElements >> 
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL next >> 
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL _INIT >> 
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL SETMETADATA >> 
NOTE: There were 1 observations read from the data set EMWS1.REG3_EMINFO.
      WHERE (TARGET='Risk') and (KEY='DECMETA');
NOTE: The data set WORK.EMINFO41GJY963 has 1 observations and 3 variables.
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL numElements >> 
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL next >> 
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL _term >> 
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL next >> 
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL _term >> 
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL _INIT >> 
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL SETMETADATA >> 
NOTE: There were 1 observations read from the data set EMWS1.REG2_EMINFO.
      WHERE KEY='MODEL';
NOTE: The data set WORK.EMINFO41OK81FW has 1 observations and 3 variables.
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL numElements >> 
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL next >> 
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL _INIT >> 
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL SETMETADATA >> 
NOTE: There were 1 observations read from the data set EMWS1.REG2_EMINFO.
      WHERE (TARGET='Risk') and (KEY='DECMETA');
NOTE: The data set WORK.EMINFO43UY6H46 has 1 observations and 3 variables.
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL numElements >> 
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL next >> 
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL _term >> 
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL next >> 
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL _term >> 
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL _INIT >> 
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL SETMETADATA >> 
NOTE: There were 1 observations read from the data set EMWS1.REG_EMINFO.
      WHERE KEY='MODEL';
NOTE: The data set WORK.EMINFO41U_YVP7 has 1 observations and 3 variables.
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL numElements >> 
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL next >> 
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL _INIT >> 
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL SETMETADATA >> 
NOTE: There were 1 observations read from the data set EMWS1.REG_EMINFO.
      WHERE (TARGET='Risk') and (KEY='DECMETA');
NOTE: The data set WORK.EMINFO40K4MPM8 has 1 observations and 3 variables.
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL numElements >> 
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL next >> 
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL _term >> 
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL next >> 
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL _term >> 
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL _INIT >> 
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL SETMETADATA >> 
NOTE: There were 1 observations read from the data set EMWS1.NEURAL11_EMINFO.
      WHERE KEY='MODEL';
NOTE: The data set WORK.EMINFO4146F4HS has 1 observations and 3 variables.
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL numElements >> 
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL next >> 
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL _INIT >> 
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL SETMETADATA >> 
NOTE: There were 1 observations read from the data set EMWS1.NEURAL11_EMINFO.
      WHERE (TARGET='Risk') and (KEY='DECMETA');
NOTE: The data set WORK.EMINFO403LSBR0 has 1 observations and 3 variables.
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL numElements >> 
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL next >> 
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL _term >> 
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL next >> 
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL _term >> 
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL _INIT >> 
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL SETMETADATA >> 
NOTE: There were 1 observations read from the data set EMWS1.NEURAL5_EMINFO.
      WHERE KEY='MODEL';
NOTE: The data set WORK.EMINFO42N1H6NQ has 1 observations and 3 variables.
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL numElements >> 
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL next >> 
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL _INIT >> 
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL SETMETADATA >> 
NOTE: There were 1 observations read from the data set EMWS1.NEURAL5_EMINFO.
      WHERE (TARGET='Risk') and (KEY='DECMETA');
NOTE: The data set WORK.EMINFO423YKNEK has 1 observations and 3 variables.
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL numElements >> 
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL next >> 
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL _term >> 
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL next >> 
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL _term >> 
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL _INIT >> 
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL SETMETADATA >> 
NOTE: There were 1 observations read from the data set EMWS1.NEURAL6_EMINFO.
      WHERE KEY='MODEL';
NOTE: The data set WORK.EMINFO430O3141 has 1 observations and 3 variables.
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL numElements >> 
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL next >> 
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL _INIT >> 
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL SETMETADATA >> 
NOTE: There were 1 observations read from the data set EMWS1.NEURAL6_EMINFO.
      WHERE (TARGET='Risk') and (KEY='DECMETA');
NOTE: The data set WORK.EMINFO40DRNI1O has 1 observations and 3 variables.
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL numElements >> 
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL next >> 
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL _term >> 
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL next >> 
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL _term >> 
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL _INIT >> 
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL SETMETADATA >> 
NOTE: There were 1 observations read from the data set EMWS1.NEURAL13_EMINFO.
      WHERE KEY='MODEL';
NOTE: The data set WORK.EMINFO42WKBOTP has 1 observations and 3 variables.
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL numElements >> 
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL next >> 
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL _INIT >> 
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL SETMETADATA >> 
NOTE: There were 1 observations read from the data set EMWS1.NEURAL13_EMINFO.
      WHERE (TARGET='Risk') and (KEY='DECMETA');
NOTE: The data set WORK.EMINFO41O8MX22 has 1 observations and 3 variables.
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL numElements >> 
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL next >> 
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL _term >> 
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL next >> 
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL _term >> 
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL _INIT >> 
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL SETMETADATA >> 
NOTE: There were 1 observations read from the data set EMWS1.NEURAL8_EMINFO.
      WHERE KEY='MODEL';
NOTE: The data set WORK.EMINFO429VBCD4 has 1 observations and 3 variables.
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL numElements >> 
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL next >> 
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL _INIT >> 
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL SETMETADATA >> 
NOTE: There were 1 observations read from the data set EMWS1.NEURAL8_EMINFO.
      WHERE (TARGET='Risk') and (KEY='DECMETA');
NOTE: The data set WORK.EMINFO43VQF5V2 has 1 observations and 3 variables.
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL numElements >> 
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL next >> 
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL _term >> 
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL next >> 
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL _term >> 
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL _INIT >> 
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL SETMETADATA >> 
NOTE: There were 1 observations read from the data set EMWS1.NEURAL7_EMINFO.
      WHERE KEY='MODEL';
NOTE: The data set WORK.EMINFO411GWOU9 has 1 observations and 3 variables.
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL numElements >> 
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL next >> 
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL _INIT >> 
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL SETMETADATA >> 
NOTE: There were 1 observations read from the data set EMWS1.NEURAL7_EMINFO.
      WHERE (TARGET='Risk') and (KEY='DECMETA');
NOTE: The data set WORK.EMINFO43OHMI1J has 1 observations and 3 variables.
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL numElements >> 
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL next >> 
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL _term >> 
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL next >> 
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL _term >> 
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL _INIT >> 
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL SETMETADATA >> 
NOTE: There were 1 observations read from the data set EMWS1.NEURAL14_EMINFO.
      WHERE KEY='MODEL';
NOTE: The data set WORK.EMINFO416XHPZR has 1 observations and 3 variables.
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL numElements >> 
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL next >> 
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL _INIT >> 
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL SETMETADATA >> 
NOTE: There were 1 observations read from the data set EMWS1.NEURAL14_EMINFO.
      WHERE (TARGET='Risk') and (KEY='DECMETA');
NOTE: The data set WORK.EMINFO41LMV7JG has 1 observations and 3 variables.
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL numElements >> 
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL next >> 
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL _term >> 
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL next >> 
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL _term >> 
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL _INIT >> 
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL SETMETADATA >> 
NOTE: There were 1 observations read from the data set EMWS1.NEURAL9_EMINFO.
      WHERE KEY='MODEL';
NOTE: The data set WORK.EMINFO437KR8OO has 1 observations and 3 variables.
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL numElements >> 
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL next >> 
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL _INIT >> 
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL SETMETADATA >> 
NOTE: There were 1 observations read from the data set EMWS1.NEURAL9_EMINFO.
      WHERE (TARGET='Risk') and (KEY='DECMETA');
NOTE: The data set WORK.EMINFO416_04RF has 1 observations and 3 variables.
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL numElements >> 
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL next >> 
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL _term >> 
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL next >> 
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL _term >> 
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL _INIT >> 
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL SETMETADATA >> 
NOTE: There were 1 observations read from the data set EMWS1.NEURAL10_EMINFO.
      WHERE KEY='MODEL';
NOTE: The data set WORK.EMINFO433LJEAO has 1 observations and 3 variables.
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL numElements >> 
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL next >> 
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL _INIT >> 
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL SETMETADATA >> 
NOTE: There were 1 observations read from the data set EMWS1.NEURAL10_EMINFO.
      WHERE (TARGET='Risk') and (KEY='DECMETA');
NOTE: The data set WORK.EMINFO404CLR10 has 1 observations and 3 variables.
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL numElements >> 
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL next >> 
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL _term >> 
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL next >> 
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL _term >> 
19659      data EMWS1.MdlComp_VariableSet;
MPRINT(EM_DIAGRAM):    data EMWS1.MdlComp_VariableSet;
19660      length USE $1 NAME $32 ROLE $32 LEVEL $10 EVENT $32 LABEL $200;
MPRINT(EM_DIAGRAM):   length USE $1 NAME $32 ROLE $32 LEVEL $10 EVENT $32 LABEL $200;
19661      NAME = "Risk";
MPRINT(EM_DIAGRAM):   NAME = "Risk";
19662      ROLE="TARGET";
MPRINT(EM_DIAGRAM):   ROLE="TARGET";
19663      LEVEL = 'BINARY';
MPRINT(EM_DIAGRAM):   LEVEL = 'BINARY';
19664      EVENT = '1';
MPRINT(EM_DIAGRAM):   EVENT = '1';
19665      LABEL = '';
MPRINT(EM_DIAGRAM):   LABEL = '';
19666      output;
MPRINT(EM_DIAGRAM):   output;
19667      NAME = "Risk";
MPRINT(EM_DIAGRAM):   NAME = "Risk";
19668      ROLE="TARGET";
MPRINT(EM_DIAGRAM):   ROLE="TARGET";
19669      LEVEL = 'BINARY';
MPRINT(EM_DIAGRAM):   LEVEL = 'BINARY';
19670      EVENT = '1';
MPRINT(EM_DIAGRAM):   EVENT = '1';
19671      LABEL = '';
MPRINT(EM_DIAGRAM):   LABEL = '';
19672      output;
MPRINT(EM_DIAGRAM):   output;
19673      NAME = "Risk";
MPRINT(EM_DIAGRAM):   NAME = "Risk";
19674      ROLE="TARGET";
MPRINT(EM_DIAGRAM):   ROLE="TARGET";
19675      LEVEL = 'BINARY';
MPRINT(EM_DIAGRAM):   LEVEL = 'BINARY';
19676      EVENT = '1';
MPRINT(EM_DIAGRAM):   EVENT = '1';
19677      LABEL = '';
MPRINT(EM_DIAGRAM):   LABEL = '';
19678      output;
MPRINT(EM_DIAGRAM):   output;
19679      NAME = "Risk";
MPRINT(EM_DIAGRAM):   NAME = "Risk";
19680      ROLE="TARGET";
MPRINT(EM_DIAGRAM):   ROLE="TARGET";
19681      LEVEL = 'BINARY';
MPRINT(EM_DIAGRAM):   LEVEL = 'BINARY';
19682      EVENT = '1';
MPRINT(EM_DIAGRAM):   EVENT = '1';
19683      LABEL = '';
MPRINT(EM_DIAGRAM):   LABEL = '';
19684      output;
MPRINT(EM_DIAGRAM):   output;
19685      NAME = "Risk";
MPRINT(EM_DIAGRAM):   NAME = "Risk";
19686      ROLE="TARGET";
MPRINT(EM_DIAGRAM):   ROLE="TARGET";
19687      LEVEL = 'BINARY';
MPRINT(EM_DIAGRAM):   LEVEL = 'BINARY';
19688      EVENT = '1';
MPRINT(EM_DIAGRAM):   EVENT = '1';
19689      LABEL = '';
MPRINT(EM_DIAGRAM):   LABEL = '';
19690      output;
MPRINT(EM_DIAGRAM):   output;
19691      NAME = "Risk";
MPRINT(EM_DIAGRAM):   NAME = "Risk";
19692      ROLE="TARGET";
MPRINT(EM_DIAGRAM):   ROLE="TARGET";
19693      LEVEL = 'BINARY';
MPRINT(EM_DIAGRAM):   LEVEL = 'BINARY';
19694      EVENT = '1';
MPRINT(EM_DIAGRAM):   EVENT = '1';
19695      LABEL = '';
MPRINT(EM_DIAGRAM):   LABEL = '';
19696      output;
MPRINT(EM_DIAGRAM):   output;
19697      NAME = "Risk";
MPRINT(EM_DIAGRAM):   NAME = "Risk";
19698      ROLE="TARGET";
MPRINT(EM_DIAGRAM):   ROLE="TARGET";
19699      LEVEL = 'BINARY';
MPRINT(EM_DIAGRAM):   LEVEL = 'BINARY';
19700      EVENT = '1';
MPRINT(EM_DIAGRAM):   EVENT = '1';
19701      LABEL = '';
MPRINT(EM_DIAGRAM):   LABEL = '';
19702      output;
MPRINT(EM_DIAGRAM):   output;
19703      NAME = "Risk";
MPRINT(EM_DIAGRAM):   NAME = "Risk";
19704      ROLE="TARGET";
MPRINT(EM_DIAGRAM):   ROLE="TARGET";
19705      LEVEL = 'BINARY';
MPRINT(EM_DIAGRAM):   LEVEL = 'BINARY';
19706      EVENT = '1';
MPRINT(EM_DIAGRAM):   EVENT = '1';
19707      LABEL = '';
MPRINT(EM_DIAGRAM):   LABEL = '';
19708      output;
MPRINT(EM_DIAGRAM):   output;
19709      NAME = "Risk";
MPRINT(EM_DIAGRAM):   NAME = "Risk";
19710      ROLE="TARGET";
MPRINT(EM_DIAGRAM):   ROLE="TARGET";
19711      LEVEL = 'BINARY';
MPRINT(EM_DIAGRAM):   LEVEL = 'BINARY';
19712      EVENT = '1';
MPRINT(EM_DIAGRAM):   EVENT = '1';
19713      LABEL = '';
MPRINT(EM_DIAGRAM):   LABEL = '';
19714      output;
MPRINT(EM_DIAGRAM):   output;
19715      NAME = "Risk";
MPRINT(EM_DIAGRAM):   NAME = "Risk";
19716      ROLE="TARGET";
MPRINT(EM_DIAGRAM):   ROLE="TARGET";
19717      LEVEL = 'BINARY';
MPRINT(EM_DIAGRAM):   LEVEL = 'BINARY';
19718      EVENT = '1';
MPRINT(EM_DIAGRAM):   EVENT = '1';
19719      LABEL = '';
MPRINT(EM_DIAGRAM):   LABEL = '';
19720      output;
MPRINT(EM_DIAGRAM):   output;
19721      NAME = "Risk";
MPRINT(EM_DIAGRAM):   NAME = "Risk";
19722      ROLE="TARGET";
MPRINT(EM_DIAGRAM):   ROLE="TARGET";
19723      LEVEL = 'BINARY';
MPRINT(EM_DIAGRAM):   LEVEL = 'BINARY';
19724      EVENT = '1';
MPRINT(EM_DIAGRAM):   EVENT = '1';
19725      LABEL = '';
MPRINT(EM_DIAGRAM):   LABEL = '';
19726      output;
MPRINT(EM_DIAGRAM):   output;
19727      NAME = "Risk";
MPRINT(EM_DIAGRAM):   NAME = "Risk";
19728      ROLE="TARGET";
MPRINT(EM_DIAGRAM):   ROLE="TARGET";
19729      LEVEL = 'BINARY';
MPRINT(EM_DIAGRAM):   LEVEL = 'BINARY';
19730      EVENT = '1';
MPRINT(EM_DIAGRAM):   EVENT = '1';
19731      LABEL = '';
MPRINT(EM_DIAGRAM):   LABEL = '';
19732      output;
MPRINT(EM_DIAGRAM):   output;
19733      NAME = "Risk";
MPRINT(EM_DIAGRAM):   NAME = "Risk";
19734      ROLE="TARGET";
MPRINT(EM_DIAGRAM):   ROLE="TARGET";
19735      LEVEL = 'BINARY';
MPRINT(EM_DIAGRAM):   LEVEL = 'BINARY';
19736      EVENT = '1';
MPRINT(EM_DIAGRAM):   EVENT = '1';
19737      LABEL = '';
MPRINT(EM_DIAGRAM):   LABEL = '';
19738      output;
MPRINT(EM_DIAGRAM):   output;
19739      NAME = "Risk";
MPRINT(EM_DIAGRAM):   NAME = "Risk";
19740      ROLE="TARGET";
MPRINT(EM_DIAGRAM):   ROLE="TARGET";
19741      LEVEL = 'BINARY';
MPRINT(EM_DIAGRAM):   LEVEL = 'BINARY';
19742      EVENT = '1';
MPRINT(EM_DIAGRAM):   EVENT = '1';
19743      LABEL = '';
MPRINT(EM_DIAGRAM):   LABEL = '';
19744      output;
MPRINT(EM_DIAGRAM):   output;
19745      NAME = "Risk";
MPRINT(EM_DIAGRAM):   NAME = "Risk";
19746      ROLE="TARGET";
MPRINT(EM_DIAGRAM):   ROLE="TARGET";
19747      LEVEL = 'BINARY';
MPRINT(EM_DIAGRAM):   LEVEL = 'BINARY';
19748      EVENT = '1';
MPRINT(EM_DIAGRAM):   EVENT = '1';
19749      LABEL = '';
MPRINT(EM_DIAGRAM):   LABEL = '';
19750      output;
MPRINT(EM_DIAGRAM):   output;
19751      NAME = "Risk";
MPRINT(EM_DIAGRAM):   NAME = "Risk";
19752      ROLE="TARGET";
MPRINT(EM_DIAGRAM):   ROLE="TARGET";
19753      LEVEL = 'BINARY';
MPRINT(EM_DIAGRAM):   LEVEL = 'BINARY';
19754      EVENT = '1';
MPRINT(EM_DIAGRAM):   EVENT = '1';
19755      LABEL = '';
MPRINT(EM_DIAGRAM):   LABEL = '';
19756      output;
MPRINT(EM_DIAGRAM):   output;
19757      NAME = "Risk";
MPRINT(EM_DIAGRAM):   NAME = "Risk";
19758      ROLE="TARGET";
MPRINT(EM_DIAGRAM):   ROLE="TARGET";
19759      LEVEL = 'BINARY';
MPRINT(EM_DIAGRAM):   LEVEL = 'BINARY';
19760      EVENT = '1';
MPRINT(EM_DIAGRAM):   EVENT = '1';
19761      LABEL = '';
MPRINT(EM_DIAGRAM):   LABEL = '';
19762      output;
MPRINT(EM_DIAGRAM):   output;
19763      NAME = "Risk";
MPRINT(EM_DIAGRAM):   NAME = "Risk";
19764      ROLE="TARGET";
MPRINT(EM_DIAGRAM):   ROLE="TARGET";
19765      LEVEL = 'BINARY';
MPRINT(EM_DIAGRAM):   LEVEL = 'BINARY';
19766      EVENT = '1';
MPRINT(EM_DIAGRAM):   EVENT = '1';
19767      LABEL = '';
MPRINT(EM_DIAGRAM):   LABEL = '';
19768      output;
MPRINT(EM_DIAGRAM):   output;
19769      NAME = "Risk";
MPRINT(EM_DIAGRAM):   NAME = "Risk";
19770      ROLE="TARGET";
MPRINT(EM_DIAGRAM):   ROLE="TARGET";
19771      LEVEL = 'BINARY';
MPRINT(EM_DIAGRAM):   LEVEL = 'BINARY';
19772      EVENT = '1';
MPRINT(EM_DIAGRAM):   EVENT = '1';
19773      LABEL = '';
MPRINT(EM_DIAGRAM):   LABEL = '';
19774      output;
MPRINT(EM_DIAGRAM):   output;
19775      NAME = "Risk";
MPRINT(EM_DIAGRAM):   NAME = "Risk";
19776      ROLE="TARGET";
MPRINT(EM_DIAGRAM):   ROLE="TARGET";
19777      LEVEL = 'BINARY';
MPRINT(EM_DIAGRAM):   LEVEL = 'BINARY';
19778      EVENT = '1';
MPRINT(EM_DIAGRAM):   EVENT = '1';
19779      LABEL = '';
MPRINT(EM_DIAGRAM):   LABEL = '';
19780      output;
MPRINT(EM_DIAGRAM):   output;
19781      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: Variable USE is uninitialized.
NOTE: The data set EMWS1.MDLCOMP_VARIABLESET has 20 observations and 6 variables.
NOTE: DATA statement used (Total process time):
      real time           0.06 seconds
      cpu time            0.00 seconds
      

19782      proc sort data=EMWS1.MdlComp_VariableSet nodupkey NOTHREADS;
MPRINT(EM_DIAGRAM):   proc sort data=EMWS1.MdlComp_VariableSet nodupkey NOTHREADS;
19783      by NAME LEVEL;
MPRINT(EM_DIAGRAM):   by NAME LEVEL;
19784      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 20 observations read from the data set EMWS1.MDLCOMP_VARIABLESET.
NOTE: 19 observations with duplicate key values were deleted.
NOTE: The data set EMWS1.MDLCOMP_VARIABLESET has 1 observations and 6 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.07 seconds
      cpu time            0.01 seconds
      

19785      data EMWS1.MdlComp_VariableSet;
MPRINT(EM_DIAGRAM):   data EMWS1.MdlComp_VariableSet;
19786      set EMWS1.MdlComp_VariableSet;
MPRINT(EM_DIAGRAM):   set EMWS1.MdlComp_VariableSet;
19787      if NAME = "Risk" then USE="Y";
MPRINT(EM_DIAGRAM):   if NAME = "Risk" then USE="Y";
19788      else USE = "N";
MPRINT(EM_DIAGRAM):   else USE = "N";
19789      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 1 observations read from the data set EMWS1.MDLCOMP_VARIABLESET.
NOTE: The data set EMWS1.MDLCOMP_VARIABLESET has 1 observations and 6 variables.
NOTE: DATA statement used (Total process time):
      real time           0.07 seconds
      cpu time            0.00 seconds
      

MPRINT(EM_DIAGRAM):    filename _emtool_ 'H:\746\Decision Tree test\Workspaces\EMWS1\MdlComp\PROPERTIES.xml' encoding="UTF-8" NOBOM;
19791      %let _HPDMGRIDHOST=;
19792      %let _HPDMGRIDINSTALLLOC=;
19793      %let _HPDMGRIDDATASERVER=;
19794      %hpdm_gridSetOPtions;
MPRINT(EM_DIAGRAM):   
MPRINT(HPDM_GRIDSETOPTIONS):   data _null_;
MPRINT(HPDM_GRIDSETOPTIONS):   length optionString string $2000;
MPRINT(HPDM_GRIDSETOPTIONS):   optionString = reverse(getoption('SET'));
MPRINT(HPDM_GRIDSETOPTIONS):   index = index(optionString, reverse('GRIDHOST'));
MPRINT(HPDM_GRIDSETOPTIONS):   if index then do;
MPRINT(HPDM_GRIDSETOPTIONS):   string = reverse(substr(optionString, 1, index-4));
MPRINT(HPDM_GRIDSETOPTIONS):   host = '"'!!strip(tranwrd(scan(string, 1, ']'), '"', ''))!!'"';
MPRINT(HPDM_GRIDSETOPTIONS):   call symput('_HPDMGRIDHOST', strip(host));
MPRINT(HPDM_GRIDSETOPTIONS):   end;
MPRINT(HPDM_GRIDSETOPTIONS):   index = index(optionString, reverse('GRIDINSTALLLOC'));
MPRINT(HPDM_GRIDSETOPTIONS):   if index then do;
MPRINT(HPDM_GRIDSETOPTIONS):   string = reverse(substr(optionString, 1, index-4));
MPRINT(HPDM_GRIDSETOPTIONS):   install = '"'!!strip(tranwrd(scan(string, 1, ']'), '"', ''))!!'"';
MPRINT(HPDM_GRIDSETOPTIONS):   call symput('_HPDMGRIDINSTALLLOC', strip(install));
MPRINT(HPDM_GRIDSETOPTIONS):   end;
MPRINT(HPDM_GRIDSETOPTIONS):   index = index(optionString, reverse('GRIDDATASERVER'));
MPRINT(HPDM_GRIDSETOPTIONS):   if index then do;
MPRINT(HPDM_GRIDSETOPTIONS):   string = reverse(substr(optionString, 1, index-4));
MPRINT(HPDM_GRIDSETOPTIONS):   server = '"'!!strip(tranwrd(scan(string, 1, ']'), '"', ''))!!'"';
MPRINT(HPDM_GRIDSETOPTIONS):   call symput('_HPDMGRIDDATASERVER', strip(server));
MPRINT(HPDM_GRIDSETOPTIONS):   end;
MPRINT(HPDM_GRIDSETOPTIONS):   run;

NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(EM_DIAGRAM):  ;

*------------------------------------------------------------* 
* 
* MdlComp : End update 
* datetime : 16APR2021:13:02:41 
* 
*------------------------------------------------------------* 
19795      %em_getactionstatus(emlib =EMWS1, nodeid=MdlComp);
MPRINT(EM_DIAGRAM):   
MPRINT(EM_GETACTIONSTATUS):   proc display c=sashelp.emutil.getactionstatus.scl;
MPRINT(EM_GETACTIONSTATUS):   run;

19796      %let em_Train = Y;
19797      %let em_Report = Y;
19798      %let em_Score = Y;
19799      %let em_Run = Y;
NOTE: PROCEDURE DISPLAY used (Total process time):
      real time           0.04 seconds
      cpu time            0.00 seconds
      

MPRINT(EM_GETACTIONSTATUS):   
MPRINT(EM_DIAGRAM):  ;

19800      %let emloopmode =;
19801      %let emloopnumber =0;
19802      %let emloopId =MdlComp;
*------------------------------------------------------------* 
* 
* MdlComp : Running 
* datetime : 16APR2021:13:02:41 
* 
*------------------------------------------------------------* 
19803      %let SYSCC =0;
19804      %let EMGROUPMODE =;
19805      %let EMGROUPID =;
MPRINT(EM_DIAGRAM):      filename temp catalog 'sashelp.emutil.em_vardist.source';
MPRINT(EM_DIAGRAM):   filename temp;
MPRINT(EM_DIAGRAM):   filename temp catalog 'sashelp.emutil.em_classdist.source';
MPRINT(EM_DIAGRAM):   filename temp;
MPRINT(EM_DIAGRAM):   filename temp catalog 'sashelp.emutil.em_checksetinit.source';
MPRINT(EM_DIAGRAM):   filename temp;
MPRINT(EM_DIAGRAM):   filename temp catalog 'sashelp.emutil.em_checkerror.source';
MPRINT(EM_DIAGRAM):   filename temp;
MPRINT(EM_DIAGRAM):   filename temp catalog 'sashelp.emutil.em_odsliston.source';
MPRINT(EM_DIAGRAM):   filename temp;
MPRINT(EM_DIAGRAM):   filename temp catalog 'sashelp.emutil.em_odslistoff.source';
MPRINT(EM_DIAGRAM):   filename temp;
MPRINT(EM_DIAGRAM):   filename temp catalog 'sashelp.emutil.em_getvarname.source';
MPRINT(EM_DIAGRAM):   filename temp;
MPRINT(EM_DIAGRAM):   filename temp catalog 'sashelp.emassmt.em_assess.source';
MPRINT(EM_DIAGRAM):   filename temp;
MPRINT(EM_DIAGRAM):    filename L11B1K2L "H:\746\Decision Tree test\Workspaces\EMWS1\MdlComp\EMTRAIN.log" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):   proc printto log=L11B1K2L new;
MPRINT(EM_DIAGRAM):   run;
