MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   call symput('NLDATE', strip(put(date(), NLDATE.)));
MPRINT(EM_DIAGRAM):   call symput('NLTIME', strip(put(datetime(), NLTIME.)));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   nldate= sasmsg("sashelp.dmine", "log_date_note", 'N', "April 16, 2021" );
MPRINT(EM_DIAGRAM):   nltime= sasmsg("sashelp.dmine", "log_time_note", 'N', "11:31:08 o'clock" 
);
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "* Score Log";
MPRINT(EM_DIAGRAM):   put nldate;
MPRINT(EM_DIAGRAM):   put nltime;
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   run;
*------------------------------------------------------------*
* Score Log
Date:                April 16, 2021
Time:                11:31:08 o'clock
*------------------------------------------------------------*
MPRINT(EM_DIAGRAM):    filename O2T_9A5Y "H:\746\Decision Tree 
test\Workspaces\EMWS1\Neural3\EMSCORE.out" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):   proc printto print=O2T_9A5Y new;
MPRINT(EM_DIAGRAM):   run;
111696     data work.outkey;
MPRINT(EM_DIAGRAM):    data work.outkey;
111697     set EMWS1.Neural3_OUTKEY;
MPRINT(EM_DIAGRAM):   set EMWS1.Neural3_OUTKEY;
111698     if upcase(ROLE) = 'HIDDEN';
MPRINT(EM_DIAGRAM):   if upcase(ROLE) = 'HIDDEN';
111699     run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 48 observations read from the data set EMWS1.NEURAL3_OUTKEY.
NOTE: The data set WORK.OUTKEY has 2 observations and 8 variables.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.01 seconds
      

111700     filename emflow "H:\746\Decision Tree test\Workspaces\EMWS1\Neural3\EMFLOWSCORE.sas"
111700   ! ;
MPRINT(EM_DIAGRAM):    filename emflow "H:\746\Decision Tree 
test\Workspaces\EMWS1\Neural3\EMFLOWSCORE.sas";
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Neural3: Scoring DATA data;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
111701     *------------------------------------------------------------*;
111702     * Neural3: Scoring DATA data;
111703     *------------------------------------------------------------*;
111704     data EMWS1.Neural3_TRAIN
111705     / view=EMWS1.Neural3_TRAIN
111706     ;
MPRINT(EM_DIAGRAM):   data EMWS1.Neural3_TRAIN / view=EMWS1.Neural3_TRAIN ;
111707     set EMWS1.Repl2_TRAIN
111708     ;
MPRINT(EM_DIAGRAM):   set EMWS1.Repl2_TRAIN ;
111709     %inc emflow;
NOTE: %INCLUDE (level 1) file EMFLOW is file H:\746\Decision Tree 
      test\Workspaces\EMWS1\Neural3\EMFLOWSCORE.sas.
111710    +***********************************;
MPRINT(EM_DIAGRAM):   ***********************************;
111711    +*** Begin Scoring Code for Neural;
MPRINT(EM_DIAGRAM):   *** Begin Scoring Code for Neural;
111712    +***********************************;
MPRINT(EM_DIAGRAM):   ***********************************;
111713    +DROP _DM_BAD _EPS _NOCL_ _MAX_ _MAXP_ _SUM_ _NTRIALS;
MPRINT(EM_DIAGRAM):   DROP _DM_BAD _EPS _NOCL_ _MAX_ _MAXP_ _SUM_ _NTRIALS;
111714    + _DM_BAD = 0;
MPRINT(EM_DIAGRAM):   _DM_BAD = 0;
111715    + _NOCL_ = .;
MPRINT(EM_DIAGRAM):   _NOCL_ = .;
111716    + _MAX_ = .;
MPRINT(EM_DIAGRAM):   _MAX_ = .;
111717    + _MAXP_ = .;
MPRINT(EM_DIAGRAM):   _MAXP_ = .;
111718    + _SUM_ = .;
MPRINT(EM_DIAGRAM):   _SUM_ = .;
111719    + _NTRIALS = .;
MPRINT(EM_DIAGRAM):   _NTRIALS = .;
111720    + _EPS =                1E-10;
MPRINT(EM_DIAGRAM):   _EPS = 1E-10;
111721    +LENGTH _WARN_ $4
111722    +      F_Risk  $ 12
111723    +;
MPRINT(EM_DIAGRAM):   LENGTH _WARN_ $4 F_Risk $ 12 ;
111724    +      label S_LOG_REP_IMP_price = 'Standard: LOG_REP_IMP_price' ;
MPRINT(EM_DIAGRAM):   label S_LOG_REP_IMP_price = 'Standard: LOG_REP_IMP_price' ;
111725    +
111726    +      label S_LOG_REP_compression_ratio =
111727    +'Standard: LOG_REP_compression_ratio' ;
MPRINT(EM_DIAGRAM):   label S_LOG_REP_compression_ratio = 'Standard: 
LOG_REP_compression_ratio' ;
111728    +
111729    +      label S_LOG_REP_engine_size = 'Standard: LOG_REP_engine_size' ;
MPRINT(EM_DIAGRAM):   label S_LOG_REP_engine_size = 'Standard: LOG_REP_engine_size' ;
111730    +
111731    +      label S_REP_IMP_bore = 'Standard: REP_IMP_bore' ;
MPRINT(EM_DIAGRAM):   label S_REP_IMP_bore = 'Standard: REP_IMP_bore' ;
111732    +
111733    +      label S_REP_IMP_stroke = 'Standard: REP_IMP_stroke' ;
MPRINT(EM_DIAGRAM):   label S_REP_IMP_stroke = 'Standard: REP_IMP_stroke' ;
111734    +
111735    +      label S_REP_city_mpg = 'Standard: REP_city_mpg' ;
MPRINT(EM_DIAGRAM):   label S_REP_city_mpg = 'Standard: REP_city_mpg' ;
111736    +
111737    +      label S_REP_curb_weight = 'Standard: REP_curb_weight' ;
MPRINT(EM_DIAGRAM):   label S_REP_curb_weight = 'Standard: REP_curb_weight' ;
111738    +
111739    +      label S_REP_height = 'Standard: REP_height' ;
MPRINT(EM_DIAGRAM):   label S_REP_height = 'Standard: REP_height' ;
111740    +
111741    +      label S_REP_highway_mpg = 'Standard: REP_highway_mpg' ;
MPRINT(EM_DIAGRAM):   label S_REP_highway_mpg = 'Standard: REP_highway_mpg' ;
111742    +
111743    +      label S_REP_horsepower = 'Standard: REP_horsepower' ;
MPRINT(EM_DIAGRAM):   label S_REP_horsepower = 'Standard: REP_horsepower' ;
111744    +
111745    +      label S_REP_length = 'Standard: REP_length' ;
MPRINT(EM_DIAGRAM):   label S_REP_length = 'Standard: REP_length' ;
111746    +
111747    +      label S_REP_peak_rpm = 'Standard: REP_peak_rpm' ;
MPRINT(EM_DIAGRAM):   label S_REP_peak_rpm = 'Standard: REP_peak_rpm' ;
111748    +
111749    +      label S_REP_wheel_base = 'Standard: REP_wheel_base' ;
MPRINT(EM_DIAGRAM):   label S_REP_wheel_base = 'Standard: REP_wheel_base' ;
111750    +
111751    +      label S_REP_width = 'Standard: REP_width' ;
MPRINT(EM_DIAGRAM):   label S_REP_width = 'Standard: REP_width' ;
111752    +
111753    +      label M_bore0 = 'Dummy: M_bore=0' ;
MPRINT(EM_DIAGRAM):   label M_bore0 = 'Dummy: M_bore=0' ;
111754    +
111755    +      label M_num_of_doors0 = 'Dummy: M_num_of_doors=0' ;
MPRINT(EM_DIAGRAM):   label M_num_of_doors0 = 'Dummy: M_num_of_doors=0' ;
111756    +
111757    +      label M_price0 = 'Dummy: M_price=0' ;
MPRINT(EM_DIAGRAM):   label M_price0 = 'Dummy: M_price=0' ;
111758    +
111759    +      label M_stroke0 = 'Dummy: M_stroke=0' ;
MPRINT(EM_DIAGRAM):   label M_stroke0 = 'Dummy: M_stroke=0' ;
111760    +
111761    +      label IMP_num_of_doors2 = 'Dummy: IMP_num_of_doors=2' ;
MPRINT(EM_DIAGRAM):   label IMP_num_of_doors2 = 'Dummy: IMP_num_of_doors=2' ;
111762    +
111763    +      label REP_aspirationS = 'Dummy: REP_aspiration=S' ;
MPRINT(EM_DIAGRAM):   label REP_aspirationS = 'Dummy: REP_aspiration=S' ;
111764    +
111765    +      label REP_body_styleC = 'Dummy: REP_body_style=C' ;
MPRINT(EM_DIAGRAM):   label REP_body_styleC = 'Dummy: REP_body_style=C' ;
111766    +
111767    +      label REP_body_styleH = 'Dummy: REP_body_style=H' ;
MPRINT(EM_DIAGRAM):   label REP_body_styleH = 'Dummy: REP_body_style=H' ;
111768    +
111769    +      label REP_body_styleS = 'Dummy: REP_body_style=S' ;
MPRINT(EM_DIAGRAM):   label REP_body_styleS = 'Dummy: REP_body_style=S' ;
111770    +
111771    +      label REP_drive_wheels4 = 'Dummy: REP_drive_wheels=4' ;
MPRINT(EM_DIAGRAM):   label REP_drive_wheels4 = 'Dummy: REP_drive_wheels=4' ;
111772    +
111773    +      label REP_drive_wheelsF = 'Dummy: REP_drive_wheels=F' ;
MPRINT(EM_DIAGRAM):   label REP_drive_wheelsF = 'Dummy: REP_drive_wheels=F' ;
111774    +
111775    +      label REP_engine_locationF = 'Dummy: REP_engine_location=F' ;
MPRINT(EM_DIAGRAM):   label REP_engine_locationF = 'Dummy: REP_engine_location=F' ;
111776    +
111777    +      label REP_fuel_systemnon_spdi = 'Dummy: REP_fuel_system=non-spdi' ;
MPRINT(EM_DIAGRAM):   label REP_fuel_systemnon_spdi = 'Dummy: REP_fuel_system=non-spdi' ;
111778    +
111779    +      label REP_fuel_typeD = 'Dummy: REP_fuel_type=D' ;
MPRINT(EM_DIAGRAM):   label REP_fuel_typeD = 'Dummy: REP_fuel_type=D' ;
111780    +
111781    +      label REP_num_of_cylinders__4 = 'Dummy: REP_num_of_cylinders=<=4' ;
MPRINT(EM_DIAGRAM):   label REP_num_of_cylinders__4 = 'Dummy: REP_num_of_cylinders=<=4' ;
111782    +
111783    +      label engine_typedohc = 'Dummy: engine_type=dohc' ;
MPRINT(EM_DIAGRAM):   label engine_typedohc = 'Dummy: engine_type=dohc' ;
111784    +
111785    +      label engine_typel = 'Dummy: engine_type=l' ;
MPRINT(EM_DIAGRAM):   label engine_typel = 'Dummy: engine_type=l' ;
111786    +
111787    +      label engine_typeohc = 'Dummy: engine_type=ohc' ;
MPRINT(EM_DIAGRAM):   label engine_typeohc = 'Dummy: engine_type=ohc' ;
111788    +
111789    +      label engine_typeohcf = 'Dummy: engine_type=ohcf' ;
MPRINT(EM_DIAGRAM):   label engine_typeohcf = 'Dummy: engine_type=ohcf' ;
111790    +
111791    +      label engine_typeohcv = 'Dummy: engine_type=ohcv' ;
MPRINT(EM_DIAGRAM):   label engine_typeohcv = 'Dummy: engine_type=ohcv' ;
111792    +
111793    +      label H11 = 'Hidden: H1=1' ;
MPRINT(EM_DIAGRAM):   label H11 = 'Hidden: H1=1' ;
111794    +
111795    +      label H12 = 'Hidden: H1=2' ;
MPRINT(EM_DIAGRAM):   label H12 = 'Hidden: H1=2' ;
111796    +
111797    +      label I_Risk = 'Into: Risk' ;
MPRINT(EM_DIAGRAM):   label I_Risk = 'Into: Risk' ;
111798    +
111799    +      label F_Risk = 'From: Risk' ;
MPRINT(EM_DIAGRAM):   label F_Risk = 'From: Risk' ;
111800    +
111801    +      label U_Risk = 'Unnormalized Into: Risk' ;
MPRINT(EM_DIAGRAM):   label U_Risk = 'Unnormalized Into: Risk' ;
111802    +
111803    +      label P_Risk1 = 'Predicted: Risk=1' ;
MPRINT(EM_DIAGRAM):   label P_Risk1 = 'Predicted: Risk=1' ;
111804    +
111805    +      label R_Risk1 = 'Residual: Risk=1' ;
MPRINT(EM_DIAGRAM):   label R_Risk1 = 'Residual: Risk=1' ;
111806    +
111807    +      label P_Risk0 = 'Predicted: Risk=0' ;
MPRINT(EM_DIAGRAM):   label P_Risk0 = 'Predicted: Risk=0' ;
111808    +
111809    +      label R_Risk0 = 'Residual: Risk=0' ;
MPRINT(EM_DIAGRAM):   label R_Risk0 = 'Residual: Risk=0' ;
111810    +
111811    +      label  _WARN_ = "Warnings";
MPRINT(EM_DIAGRAM):   label _WARN_ = "Warnings";
111812    +
111813    +*** Generate dummy variables for M_bore ;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for M_bore ;
111814    +drop M_bore0 ;
MPRINT(EM_DIAGRAM):   drop M_bore0 ;
111815    +if missing( M_bore ) then do;
MPRINT(EM_DIAGRAM):   if missing( M_bore ) then do;
111816    +   M_bore0 = .;
MPRINT(EM_DIAGRAM):   M_bore0 = .;
111817    +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
111818    +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
111819    +end;
MPRINT(EM_DIAGRAM):   end;
111820    +else do;
MPRINT(EM_DIAGRAM):   else do;
111821    +   length _dm12 $ 12; drop _dm12 ;
MPRINT(EM_DIAGRAM):   length _dm12 $ 12;
MPRINT(EM_DIAGRAM):   drop _dm12 ;
111822    +   _dm12 = put( M_bore , BEST12. );
MPRINT(EM_DIAGRAM):   _dm12 = put( M_bore , BEST12. );
111823    +   %DMNORMIP( _dm12 )
MPRINT(DMNORMIP):   call dmnorm(_dm12,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
111824    +   if _dm12 = '0'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 = '0' then do;
111825    +      M_bore0 = 1;
MPRINT(EM_DIAGRAM):   M_bore0 = 1;
111826    +   end;
MPRINT(EM_DIAGRAM):   end;
111827    +   else if _dm12 = '1'  then do;
MPRINT(EM_DIAGRAM):   else if _dm12 = '1' then do;
111828    +      M_bore0 = -1;
MPRINT(EM_DIAGRAM):   M_bore0 = -1;
111829    +   end;
MPRINT(EM_DIAGRAM):   end;
111830    +   else do;
MPRINT(EM_DIAGRAM):   else do;
111831    +      M_bore0 = .;
MPRINT(EM_DIAGRAM):   M_bore0 = .;
111832    +      substr(_warn_,2,1) = 'U';
MPRINT(EM_DIAGRAM):   substr(_warn_,2,1) = 'U';
111833    +      _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
111834    +   end;
MPRINT(EM_DIAGRAM):   end;
111835    +end;
MPRINT(EM_DIAGRAM):   end;
111836    +
111837    +*** Generate dummy variables for M_num_of_doors ;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for M_num_of_doors ;
111838    +drop M_num_of_doors0 ;
MPRINT(EM_DIAGRAM):   drop M_num_of_doors0 ;
111839    +if missing( M_num_of_doors ) then do;
MPRINT(EM_DIAGRAM):   if missing( M_num_of_doors ) then do;
111840    +   M_num_of_doors0 = .;
MPRINT(EM_DIAGRAM):   M_num_of_doors0 = .;
111841    +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
111842    +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
111843    +end;
MPRINT(EM_DIAGRAM):   end;
111844    +else do;
MPRINT(EM_DIAGRAM):   else do;
111845    +   length _dm12 $ 12; drop _dm12 ;
MPRINT(EM_DIAGRAM):   length _dm12 $ 12;
MPRINT(EM_DIAGRAM):   drop _dm12 ;
111846    +   _dm12 = put( M_num_of_doors , BEST12. );
MPRINT(EM_DIAGRAM):   _dm12 = put( M_num_of_doors , BEST12. );
111847    +   %DMNORMIP( _dm12 )
MPRINT(DMNORMIP):   call dmnorm(_dm12,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
111848    +   if _dm12 = '0'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 = '0' then do;
111849    +      M_num_of_doors0 = 1;
MPRINT(EM_DIAGRAM):   M_num_of_doors0 = 1;
111850    +   end;
MPRINT(EM_DIAGRAM):   end;
111851    +   else if _dm12 = '1'  then do;
MPRINT(EM_DIAGRAM):   else if _dm12 = '1' then do;
111852    +      M_num_of_doors0 = -1;
MPRINT(EM_DIAGRAM):   M_num_of_doors0 = -1;
111853    +   end;
MPRINT(EM_DIAGRAM):   end;
111854    +   else do;
MPRINT(EM_DIAGRAM):   else do;
111855    +      M_num_of_doors0 = .;
MPRINT(EM_DIAGRAM):   M_num_of_doors0 = .;
111856    +      substr(_warn_,2,1) = 'U';
MPRINT(EM_DIAGRAM):   substr(_warn_,2,1) = 'U';
111857    +      _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
111858    +   end;
MPRINT(EM_DIAGRAM):   end;
111859    +end;
MPRINT(EM_DIAGRAM):   end;
111860    +
111861    +*** Generate dummy variables for M_price ;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for M_price ;
111862    +drop M_price0 ;
MPRINT(EM_DIAGRAM):   drop M_price0 ;
111863    +if missing( M_price ) then do;
MPRINT(EM_DIAGRAM):   if missing( M_price ) then do;
111864    +   M_price0 = .;
MPRINT(EM_DIAGRAM):   M_price0 = .;
111865    +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
111866    +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
111867    +end;
MPRINT(EM_DIAGRAM):   end;
111868    +else do;
MPRINT(EM_DIAGRAM):   else do;
111869    +   length _dm12 $ 12; drop _dm12 ;
MPRINT(EM_DIAGRAM):   length _dm12 $ 12;
MPRINT(EM_DIAGRAM):   drop _dm12 ;
111870    +   _dm12 = put( M_price , BEST12. );
MPRINT(EM_DIAGRAM):   _dm12 = put( M_price , BEST12. );
111871    +   %DMNORMIP( _dm12 )
MPRINT(DMNORMIP):   call dmnorm(_dm12,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
111872    +   if _dm12 = '0'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 = '0' then do;
111873    +      M_price0 = 1;
MPRINT(EM_DIAGRAM):   M_price0 = 1;
111874    +   end;
MPRINT(EM_DIAGRAM):   end;
111875    +   else if _dm12 = '1'  then do;
MPRINT(EM_DIAGRAM):   else if _dm12 = '1' then do;
111876    +      M_price0 = -1;
MPRINT(EM_DIAGRAM):   M_price0 = -1;
111877    +   end;
MPRINT(EM_DIAGRAM):   end;
111878    +   else do;
MPRINT(EM_DIAGRAM):   else do;
111879    +      M_price0 = .;
MPRINT(EM_DIAGRAM):   M_price0 = .;
111880    +      substr(_warn_,2,1) = 'U';
MPRINT(EM_DIAGRAM):   substr(_warn_,2,1) = 'U';
111881    +      _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
111882    +   end;
MPRINT(EM_DIAGRAM):   end;
111883    +end;
MPRINT(EM_DIAGRAM):   end;
111884    +
111885    +*** Generate dummy variables for M_stroke ;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for M_stroke ;
111886    +drop M_stroke0 ;
MPRINT(EM_DIAGRAM):   drop M_stroke0 ;
111887    +if missing( M_stroke ) then do;
MPRINT(EM_DIAGRAM):   if missing( M_stroke ) then do;
111888    +   M_stroke0 = .;
MPRINT(EM_DIAGRAM):   M_stroke0 = .;
111889    +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
111890    +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
111891    +end;
MPRINT(EM_DIAGRAM):   end;
111892    +else do;
MPRINT(EM_DIAGRAM):   else do;
111893    +   length _dm12 $ 12; drop _dm12 ;
MPRINT(EM_DIAGRAM):   length _dm12 $ 12;
MPRINT(EM_DIAGRAM):   drop _dm12 ;
111894    +   _dm12 = put( M_stroke , BEST12. );
MPRINT(EM_DIAGRAM):   _dm12 = put( M_stroke , BEST12. );
111895    +   %DMNORMIP( _dm12 )
MPRINT(DMNORMIP):   call dmnorm(_dm12,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
111896    +   if _dm12 = '0'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 = '0' then do;
111897    +      M_stroke0 = 1;
MPRINT(EM_DIAGRAM):   M_stroke0 = 1;
111898    +   end;
MPRINT(EM_DIAGRAM):   end;
111899    +   else if _dm12 = '1'  then do;
MPRINT(EM_DIAGRAM):   else if _dm12 = '1' then do;
111900    +      M_stroke0 = -1;
MPRINT(EM_DIAGRAM):   M_stroke0 = -1;
111901    +   end;
MPRINT(EM_DIAGRAM):   end;
111902    +   else do;
MPRINT(EM_DIAGRAM):   else do;
111903    +      M_stroke0 = .;
MPRINT(EM_DIAGRAM):   M_stroke0 = .;
111904    +      substr(_warn_,2,1) = 'U';
MPRINT(EM_DIAGRAM):   substr(_warn_,2,1) = 'U';
111905    +      _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
111906    +   end;
MPRINT(EM_DIAGRAM):   end;
111907    +end;
MPRINT(EM_DIAGRAM):   end;
111908    +
111909    +*** Generate dummy variables for IMP_num_of_doors ;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for IMP_num_of_doors ;
111910    +drop IMP_num_of_doors2 ;
MPRINT(EM_DIAGRAM):   drop IMP_num_of_doors2 ;
111911    +if missing( IMP_num_of_doors ) then do;
MPRINT(EM_DIAGRAM):   if missing( IMP_num_of_doors ) then do;
111912    +   IMP_num_of_doors2 = .;
MPRINT(EM_DIAGRAM):   IMP_num_of_doors2 = .;
111913    +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
111914    +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
111915    +end;
MPRINT(EM_DIAGRAM):   end;
111916    +else do;
MPRINT(EM_DIAGRAM):   else do;
111917    +   length _dm12 $ 12; drop _dm12 ;
MPRINT(EM_DIAGRAM):   length _dm12 $ 12;
MPRINT(EM_DIAGRAM):   drop _dm12 ;
111918    +   _dm12 = put( IMP_num_of_doors , BEST12. );
MPRINT(EM_DIAGRAM):   _dm12 = put( IMP_num_of_doors , BEST12. );
111919    +   %DMNORMIP( _dm12 )
MPRINT(DMNORMIP):   call dmnorm(_dm12,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
111920    +   if _dm12 = '4'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 = '4' then do;
111921    +      IMP_num_of_doors2 = -1;
MPRINT(EM_DIAGRAM):   IMP_num_of_doors2 = -1;
111922    +   end;
MPRINT(EM_DIAGRAM):   end;
111923    +   else if _dm12 = '2'  then do;
MPRINT(EM_DIAGRAM):   else if _dm12 = '2' then do;
111924    +      IMP_num_of_doors2 = 1;
MPRINT(EM_DIAGRAM):   IMP_num_of_doors2 = 1;
111925    +   end;
MPRINT(EM_DIAGRAM):   end;
111926    +   else do;
MPRINT(EM_DIAGRAM):   else do;
111927    +      IMP_num_of_doors2 = .;
MPRINT(EM_DIAGRAM):   IMP_num_of_doors2 = .;
111928    +      substr(_warn_,2,1) = 'U';
MPRINT(EM_DIAGRAM):   substr(_warn_,2,1) = 'U';
111929    +      _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
111930    +   end;
MPRINT(EM_DIAGRAM):   end;
111931    +end;
MPRINT(EM_DIAGRAM):   end;
111932    +
111933    +*** Generate dummy variables for REP_aspiration ;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for REP_aspiration ;
111934    +drop REP_aspirationS ;
MPRINT(EM_DIAGRAM):   drop REP_aspirationS ;
111935    +if missing( REP_aspiration ) then do;
MPRINT(EM_DIAGRAM):   if missing( REP_aspiration ) then do;
111936    +   REP_aspirationS = .;
MPRINT(EM_DIAGRAM):   REP_aspirationS = .;
111937    +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
111938    +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
111939    +end;
MPRINT(EM_DIAGRAM):   end;
111940    +else do;
MPRINT(EM_DIAGRAM):   else do;
111941    +   length _dm5 $ 5; drop _dm5 ;
MPRINT(EM_DIAGRAM):   length _dm5 $ 5;
MPRINT(EM_DIAGRAM):   drop _dm5 ;
111942    +   _dm5 = put( REP_aspiration , $5. );
MPRINT(EM_DIAGRAM):   _dm5 = put( REP_aspiration , $5. );
111943    +   %DMNORMIP( _dm5 )
MPRINT(DMNORMIP):   call dmnorm(_dm5,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
111944    +   if _dm5 = 'S'  then do;
MPRINT(EM_DIAGRAM):   if _dm5 = 'S' then do;
111945    +      REP_aspirationS = 1;
MPRINT(EM_DIAGRAM):   REP_aspirationS = 1;
111946    +   end;
MPRINT(EM_DIAGRAM):   end;
111947    +   else if _dm5 = 'T'  then do;
MPRINT(EM_DIAGRAM):   else if _dm5 = 'T' then do;
111948    +      REP_aspirationS = -1;
MPRINT(EM_DIAGRAM):   REP_aspirationS = -1;
111949    +   end;
MPRINT(EM_DIAGRAM):   end;
111950    +   else do;
MPRINT(EM_DIAGRAM):   else do;
111951    +      REP_aspirationS = .;
MPRINT(EM_DIAGRAM):   REP_aspirationS = .;
111952    +      substr(_warn_,2,1) = 'U';
MPRINT(EM_DIAGRAM):   substr(_warn_,2,1) = 'U';
111953    +      _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
111954    +   end;
MPRINT(EM_DIAGRAM):   end;
111955    +end;
MPRINT(EM_DIAGRAM):   end;
111956    +
111957    +*** Generate dummy variables for REP_body_style ;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for REP_body_style ;
111958    +drop REP_body_styleC REP_body_styleH REP_body_styleS ;
MPRINT(EM_DIAGRAM):   drop REP_body_styleC REP_body_styleH REP_body_styleS ;
111959    +if missing( REP_body_style ) then do;
MPRINT(EM_DIAGRAM):   if missing( REP_body_style ) then do;
111960    +   REP_body_styleC = .;
MPRINT(EM_DIAGRAM):   REP_body_styleC = .;
111961    +   REP_body_styleH = .;
MPRINT(EM_DIAGRAM):   REP_body_styleH = .;
111962    +   REP_body_styleS = .;
MPRINT(EM_DIAGRAM):   REP_body_styleS = .;
111963    +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
111964    +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
111965    +end;
MPRINT(EM_DIAGRAM):   end;
111966    +else do;
MPRINT(EM_DIAGRAM):   else do;
111967    +   length _dm11 $ 11; drop _dm11 ;
MPRINT(EM_DIAGRAM):   length _dm11 $ 11;
MPRINT(EM_DIAGRAM):   drop _dm11 ;
111968    +   %DMNORMCP( REP_body_style , _dm11 )
MPRINT(DMNORMCP):   _dm11=dmnorm(REP_body_style,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMCP):  );
111969    +   if _dm11 = 'S'  then do;
MPRINT(EM_DIAGRAM):   if _dm11 = 'S' then do;
111970    +      REP_body_styleC = 0;
MPRINT(EM_DIAGRAM):   REP_body_styleC = 0;
111971    +      REP_body_styleH = 0;
MPRINT(EM_DIAGRAM):   REP_body_styleH = 0;
111972    +      REP_body_styleS = 1;
MPRINT(EM_DIAGRAM):   REP_body_styleS = 1;
111973    +   end;
MPRINT(EM_DIAGRAM):   end;
111974    +   else if _dm11 = 'H'  then do;
MPRINT(EM_DIAGRAM):   else if _dm11 = 'H' then do;
111975    +      REP_body_styleC = 0;
MPRINT(EM_DIAGRAM):   REP_body_styleC = 0;
111976    +      REP_body_styleH = 1;
MPRINT(EM_DIAGRAM):   REP_body_styleH = 1;
111977    +      REP_body_styleS = 0;
MPRINT(EM_DIAGRAM):   REP_body_styleS = 0;
111978    +   end;
MPRINT(EM_DIAGRAM):   end;
111979    +   else if _dm11 = 'W'  then do;
MPRINT(EM_DIAGRAM):   else if _dm11 = 'W' then do;
111980    +      REP_body_styleC = -1;
MPRINT(EM_DIAGRAM):   REP_body_styleC = -1;
111981    +      REP_body_styleH = -1;
MPRINT(EM_DIAGRAM):   REP_body_styleH = -1;
111982    +      REP_body_styleS = -1;
MPRINT(EM_DIAGRAM):   REP_body_styleS = -1;
111983    +   end;
MPRINT(EM_DIAGRAM):   end;
111984    +   else if _dm11 = 'C'  then do;
MPRINT(EM_DIAGRAM):   else if _dm11 = 'C' then do;
111985    +      REP_body_styleC = 1;
MPRINT(EM_DIAGRAM):   REP_body_styleC = 1;
111986    +      REP_body_styleH = 0;
MPRINT(EM_DIAGRAM):   REP_body_styleH = 0;
111987    +      REP_body_styleS = 0;
MPRINT(EM_DIAGRAM):   REP_body_styleS = 0;
111988    +   end;
MPRINT(EM_DIAGRAM):   end;
111989    +   else do;
MPRINT(EM_DIAGRAM):   else do;
111990    +      REP_body_styleC = .;
MPRINT(EM_DIAGRAM):   REP_body_styleC = .;
111991    +      REP_body_styleH = .;
MPRINT(EM_DIAGRAM):   REP_body_styleH = .;
111992    +      REP_body_styleS = .;
MPRINT(EM_DIAGRAM):   REP_body_styleS = .;
111993    +      substr(_warn_,2,1) = 'U';
MPRINT(EM_DIAGRAM):   substr(_warn_,2,1) = 'U';
111994    +      _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
111995    +   end;
MPRINT(EM_DIAGRAM):   end;
111996    +end;
MPRINT(EM_DIAGRAM):   end;
111997    +
111998    +*** Generate dummy variables for REP_drive_wheels ;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for REP_drive_wheels ;
111999    +drop REP_drive_wheels4 REP_drive_wheelsF ;
MPRINT(EM_DIAGRAM):   drop REP_drive_wheels4 REP_drive_wheelsF ;
112000    +if missing( REP_drive_wheels ) then do;
MPRINT(EM_DIAGRAM):   if missing( REP_drive_wheels ) then do;
112001    +   REP_drive_wheels4 = .;
MPRINT(EM_DIAGRAM):   REP_drive_wheels4 = .;
112002    +   REP_drive_wheelsF = .;
MPRINT(EM_DIAGRAM):   REP_drive_wheelsF = .;
112003    +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
112004    +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
112005    +end;
MPRINT(EM_DIAGRAM):   end;
112006    +else do;
MPRINT(EM_DIAGRAM):   else do;
112007    +   length _dm3 $ 3; drop _dm3 ;
MPRINT(EM_DIAGRAM):   length _dm3 $ 3;
MPRINT(EM_DIAGRAM):   drop _dm3 ;
112008    +   %DMNORMCP( REP_drive_wheels , _dm3 )
MPRINT(DMNORMCP):   _dm3=dmnorm(REP_drive_wheels,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMCP):  );
112009    +   if _dm3 = 'F'  then do;
MPRINT(EM_DIAGRAM):   if _dm3 = 'F' then do;
112010    +      REP_drive_wheels4 = 0;
MPRINT(EM_DIAGRAM):   REP_drive_wheels4 = 0;
112011    +      REP_drive_wheelsF = 1;
MPRINT(EM_DIAGRAM):   REP_drive_wheelsF = 1;
112012    +   end;
MPRINT(EM_DIAGRAM):   end;
112013    +   else if _dm3 = 'R'  then do;
MPRINT(EM_DIAGRAM):   else if _dm3 = 'R' then do;
112014    +      REP_drive_wheels4 = -1;
MPRINT(EM_DIAGRAM):   REP_drive_wheels4 = -1;
112015    +      REP_drive_wheelsF = -1;
MPRINT(EM_DIAGRAM):   REP_drive_wheelsF = -1;
112016    +   end;
MPRINT(EM_DIAGRAM):   end;
112017    +   else if _dm3 = '4'  then do;
MPRINT(EM_DIAGRAM):   else if _dm3 = '4' then do;
112018    +      REP_drive_wheels4 = 1;
MPRINT(EM_DIAGRAM):   REP_drive_wheels4 = 1;
112019    +      REP_drive_wheelsF = 0;
MPRINT(EM_DIAGRAM):   REP_drive_wheelsF = 0;
112020    +   end;
MPRINT(EM_DIAGRAM):   end;
112021    +   else do;
MPRINT(EM_DIAGRAM):   else do;
112022    +      REP_drive_wheels4 = .;
MPRINT(EM_DIAGRAM):   REP_drive_wheels4 = .;
112023    +      REP_drive_wheelsF = .;
MPRINT(EM_DIAGRAM):   REP_drive_wheelsF = .;
112024    +      substr(_warn_,2,1) = 'U';
MPRINT(EM_DIAGRAM):   substr(_warn_,2,1) = 'U';
112025    +      _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
112026    +   end;
MPRINT(EM_DIAGRAM):   end;
112027    +end;
MPRINT(EM_DIAGRAM):   end;
112028    +
112029    +*** Generate dummy variables for REP_engine_location ;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for REP_engine_location ;
112030    +drop REP_engine_locationF ;
MPRINT(EM_DIAGRAM):   drop REP_engine_locationF ;
112031    +if missing( REP_engine_location ) then do;
MPRINT(EM_DIAGRAM):   if missing( REP_engine_location ) then do;
112032    +   REP_engine_locationF = .;
MPRINT(EM_DIAGRAM):   REP_engine_locationF = .;
112033    +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
112034    +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
112035    +end;
MPRINT(EM_DIAGRAM):   end;
112036    +else do;
MPRINT(EM_DIAGRAM):   else do;
112037    +   length _dm5 $ 5; drop _dm5 ;
MPRINT(EM_DIAGRAM):   length _dm5 $ 5;
MPRINT(EM_DIAGRAM):   drop _dm5 ;
112038    +   %DMNORMCP( REP_engine_location , _dm5 )
MPRINT(DMNORMCP):   _dm5=dmnorm(REP_engine_location,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMCP):  );
112039    +   if _dm5 = 'F'  then do;
MPRINT(EM_DIAGRAM):   if _dm5 = 'F' then do;
112040    +      REP_engine_locationF = 1;
MPRINT(EM_DIAGRAM):   REP_engine_locationF = 1;
112041    +   end;
MPRINT(EM_DIAGRAM):   end;
112042    +   else if _dm5 = 'R'  then do;
MPRINT(EM_DIAGRAM):   else if _dm5 = 'R' then do;
112043    +      REP_engine_locationF = -1;
MPRINT(EM_DIAGRAM):   REP_engine_locationF = -1;
112044    +   end;
MPRINT(EM_DIAGRAM):   end;
112045    +   else do;
MPRINT(EM_DIAGRAM):   else do;
112046    +      REP_engine_locationF = .;
MPRINT(EM_DIAGRAM):   REP_engine_locationF = .;
112047    +      substr(_warn_,2,1) = 'U';
MPRINT(EM_DIAGRAM):   substr(_warn_,2,1) = 'U';
112048    +      _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
112049    +   end;
MPRINT(EM_DIAGRAM):   end;
112050    +end;
MPRINT(EM_DIAGRAM):   end;
112051    +
112052    +*** Generate dummy variables for REP_fuel_system ;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for REP_fuel_system ;
112053    +drop REP_fuel_systemnon_spdi ;
MPRINT(EM_DIAGRAM):   drop REP_fuel_systemnon_spdi ;
112054    +if missing( REP_fuel_system ) then do;
MPRINT(EM_DIAGRAM):   if missing( REP_fuel_system ) then do;
112055    +   REP_fuel_systemnon_spdi = .;
MPRINT(EM_DIAGRAM):   REP_fuel_systemnon_spdi = .;
112056    +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
112057    +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
112058    +end;
MPRINT(EM_DIAGRAM):   end;
112059    +else do;
MPRINT(EM_DIAGRAM):   else do;
112060    +   length _dm8 $ 8; drop _dm8 ;
MPRINT(EM_DIAGRAM):   length _dm8 $ 8;
MPRINT(EM_DIAGRAM):   drop _dm8 ;
112061    +   %DMNORMCP( REP_fuel_system , _dm8 )
MPRINT(DMNORMCP):   _dm8=dmnorm(REP_fuel_system,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMCP):  );
112062    +   if _dm8 = 'NON-SPDI'  then do;
MPRINT(EM_DIAGRAM):   if _dm8 = 'NON-SPDI' then do;
112063    +      REP_fuel_systemnon_spdi = 1;
MPRINT(EM_DIAGRAM):   REP_fuel_systemnon_spdi = 1;
112064    +   end;
MPRINT(EM_DIAGRAM):   end;
112065    +   else if _dm8 = 'SPDI'  then do;
MPRINT(EM_DIAGRAM):   else if _dm8 = 'SPDI' then do;
112066    +      REP_fuel_systemnon_spdi = -1;
MPRINT(EM_DIAGRAM):   REP_fuel_systemnon_spdi = -1;
112067    +   end;
MPRINT(EM_DIAGRAM):   end;
112068    +   else do;
MPRINT(EM_DIAGRAM):   else do;
112069    +      REP_fuel_systemnon_spdi = .;
MPRINT(EM_DIAGRAM):   REP_fuel_systemnon_spdi = .;
112070    +      substr(_warn_,2,1) = 'U';
MPRINT(EM_DIAGRAM):   substr(_warn_,2,1) = 'U';
112071    +      _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
112072    +   end;
MPRINT(EM_DIAGRAM):   end;
112073    +end;
MPRINT(EM_DIAGRAM):   end;
112074    +
112075    +*** Generate dummy variables for REP_fuel_type ;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for REP_fuel_type ;
112076    +drop REP_fuel_typeD ;
MPRINT(EM_DIAGRAM):   drop REP_fuel_typeD ;
112077    +if missing( REP_fuel_type ) then do;
MPRINT(EM_DIAGRAM):   if missing( REP_fuel_type ) then do;
112078    +   REP_fuel_typeD = .;
MPRINT(EM_DIAGRAM):   REP_fuel_typeD = .;
112079    +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
112080    +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
112081    +end;
MPRINT(EM_DIAGRAM):   end;
112082    +else do;
MPRINT(EM_DIAGRAM):   else do;
112083    +   length _dm6 $ 6; drop _dm6 ;
MPRINT(EM_DIAGRAM):   length _dm6 $ 6;
MPRINT(EM_DIAGRAM):   drop _dm6 ;
112084    +   %DMNORMCP( REP_fuel_type , _dm6 )
MPRINT(DMNORMCP):   _dm6=dmnorm(REP_fuel_type,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMCP):  );
112085    +   if _dm6 = 'G'  then do;
MPRINT(EM_DIAGRAM):   if _dm6 = 'G' then do;
112086    +      REP_fuel_typeD = -1;
MPRINT(EM_DIAGRAM):   REP_fuel_typeD = -1;
112087    +   end;
MPRINT(EM_DIAGRAM):   end;
112088    +   else if _dm6 = 'D'  then do;
MPRINT(EM_DIAGRAM):   else if _dm6 = 'D' then do;
112089    +      REP_fuel_typeD = 1;
MPRINT(EM_DIAGRAM):   REP_fuel_typeD = 1;
112090    +   end;
MPRINT(EM_DIAGRAM):   end;
112091    +   else do;
MPRINT(EM_DIAGRAM):   else do;
112092    +      REP_fuel_typeD = .;
MPRINT(EM_DIAGRAM):   REP_fuel_typeD = .;
112093    +      substr(_warn_,2,1) = 'U';
MPRINT(EM_DIAGRAM):   substr(_warn_,2,1) = 'U';
112094    +      _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
112095    +   end;
MPRINT(EM_DIAGRAM):   end;
112096    +end;
MPRINT(EM_DIAGRAM):   end;
112097    +
112098    +*** Generate dummy variables for REP_num_of_cylinders ;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for REP_num_of_cylinders ;
112099    +drop REP_num_of_cylinders__4 ;
MPRINT(EM_DIAGRAM):   drop REP_num_of_cylinders__4 ;
112100    +if missing( REP_num_of_cylinders ) then do;
MPRINT(EM_DIAGRAM):   if missing( REP_num_of_cylinders ) then do;
112101    +   REP_num_of_cylinders__4 = .;
MPRINT(EM_DIAGRAM):   REP_num_of_cylinders__4 = .;
112102    +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
112103    +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
112104    +end;
MPRINT(EM_DIAGRAM):   end;
112105    +else do;
MPRINT(EM_DIAGRAM):   else do;
112106    +   length _dm6 $ 6; drop _dm6 ;
MPRINT(EM_DIAGRAM):   length _dm6 $ 6;
MPRINT(EM_DIAGRAM):   drop _dm6 ;
112107    +   %DMNORMCP( REP_num_of_cylinders , _dm6 )
MPRINT(DMNORMCP):   _dm6=dmnorm(REP_num_of_cylinders,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMCP):  );
112108    +   if _dm6 = '<=4'  then do;
MPRINT(EM_DIAGRAM):   if _dm6 = '<=4' then do;
112109    +      REP_num_of_cylinders__4 = 1;
MPRINT(EM_DIAGRAM):   REP_num_of_cylinders__4 = 1;
112110    +   end;
MPRINT(EM_DIAGRAM):   end;
112111    +   else if _dm6 = '>4'  then do;
MPRINT(EM_DIAGRAM):   else if _dm6 = '>4' then do;
112112    +      REP_num_of_cylinders__4 = -1;
MPRINT(EM_DIAGRAM):   REP_num_of_cylinders__4 = -1;
112113    +   end;
MPRINT(EM_DIAGRAM):   end;
112114    +   else do;
MPRINT(EM_DIAGRAM):   else do;
112115    +      REP_num_of_cylinders__4 = .;
MPRINT(EM_DIAGRAM):   REP_num_of_cylinders__4 = .;
112116    +      substr(_warn_,2,1) = 'U';
MPRINT(EM_DIAGRAM):   substr(_warn_,2,1) = 'U';
112117    +      _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
112118    +   end;
MPRINT(EM_DIAGRAM):   end;
112119    +end;
MPRINT(EM_DIAGRAM):   end;
112120    +
112121    +*** Generate dummy variables for engine_type ;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for engine_type ;
112122    +drop engine_typedohc engine_typel engine_typeohc engine_typeohcf
112123    +        engine_typeohcv ;
MPRINT(EM_DIAGRAM):   drop engine_typedohc engine_typel engine_typeohc engine_typeohcf 
engine_typeohcv ;
112124    +*** encoding is sparse, initialize to zero;
MPRINT(EM_DIAGRAM):   *** encoding is sparse, initialize to zero;
112125    +engine_typedohc = 0;
MPRINT(EM_DIAGRAM):   engine_typedohc = 0;
112126    +engine_typel = 0;
MPRINT(EM_DIAGRAM):   engine_typel = 0;
112127    +engine_typeohc = 0;
MPRINT(EM_DIAGRAM):   engine_typeohc = 0;
112128    +engine_typeohcf = 0;
MPRINT(EM_DIAGRAM):   engine_typeohcf = 0;
112129    +engine_typeohcv = 0;
MPRINT(EM_DIAGRAM):   engine_typeohcv = 0;
112130    +if missing( engine_type ) then do;
MPRINT(EM_DIAGRAM):   if missing( engine_type ) then do;
112131    +   engine_typedohc = .;
MPRINT(EM_DIAGRAM):   engine_typedohc = .;
112132    +   engine_typel = .;
MPRINT(EM_DIAGRAM):   engine_typel = .;
112133    +   engine_typeohc = .;
MPRINT(EM_DIAGRAM):   engine_typeohc = .;
112134    +   engine_typeohcf = .;
MPRINT(EM_DIAGRAM):   engine_typeohcf = .;
112135    +   engine_typeohcv = .;
MPRINT(EM_DIAGRAM):   engine_typeohcv = .;
112136    +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
112137    +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
112138    +end;
MPRINT(EM_DIAGRAM):   end;
112139    +else do;
MPRINT(EM_DIAGRAM):   else do;
112140    +   length _dm5 $ 5; drop _dm5 ;
MPRINT(EM_DIAGRAM):   length _dm5 $ 5;
MPRINT(EM_DIAGRAM):   drop _dm5 ;
112141    +   %DMNORMCP( engine_type , _dm5 )
MPRINT(DMNORMCP):   _dm5=dmnorm(engine_type,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMCP):  );
112142    +   if _dm5 = 'OHC'  then do;
MPRINT(EM_DIAGRAM):   if _dm5 = 'OHC' then do;
112143    +      engine_typeohc = 1;
MPRINT(EM_DIAGRAM):   engine_typeohc = 1;
112144    +   end;
MPRINT(EM_DIAGRAM):   end;
112145    +   else if _dm5 = 'OHCF'  then do;
MPRINT(EM_DIAGRAM):   else if _dm5 = 'OHCF' then do;
112146    +      engine_typeohcf = 1;
MPRINT(EM_DIAGRAM):   engine_typeohcf = 1;
112147    +   end;
MPRINT(EM_DIAGRAM):   end;
112148    +   else if _dm5 = 'OHCV'  then do;
MPRINT(EM_DIAGRAM):   else if _dm5 = 'OHCV' then do;
112149    +      engine_typeohcv = 1;
MPRINT(EM_DIAGRAM):   engine_typeohcv = 1;
112150    +   end;
MPRINT(EM_DIAGRAM):   end;
112151    +   else if _dm5 = 'DOHC'  then do;
MPRINT(EM_DIAGRAM):   else if _dm5 = 'DOHC' then do;
112152    +      engine_typedohc = 1;
MPRINT(EM_DIAGRAM):   engine_typedohc = 1;
112153    +   end;
MPRINT(EM_DIAGRAM):   end;
112154    +   else if _dm5 = 'L'  then do;
MPRINT(EM_DIAGRAM):   else if _dm5 = 'L' then do;
112155    +      engine_typel = 1;
MPRINT(EM_DIAGRAM):   engine_typel = 1;
112156    +   end;
MPRINT(EM_DIAGRAM):   end;
112157    +   else if _dm5 = 'ROTOR'  then do;
MPRINT(EM_DIAGRAM):   else if _dm5 = 'ROTOR' then do;
112158    +      engine_typedohc = -1;
MPRINT(EM_DIAGRAM):   engine_typedohc = -1;
112159    +      engine_typel = -1;
MPRINT(EM_DIAGRAM):   engine_typel = -1;
112160    +      engine_typeohc = -1;
MPRINT(EM_DIAGRAM):   engine_typeohc = -1;
112161    +      engine_typeohcf = -1;
MPRINT(EM_DIAGRAM):   engine_typeohcf = -1;
112162    +      engine_typeohcv = -1;
MPRINT(EM_DIAGRAM):   engine_typeohcv = -1;
112163    +   end;
MPRINT(EM_DIAGRAM):   end;
112164    +   else do;
MPRINT(EM_DIAGRAM):   else do;
112165    +      engine_typedohc = .;
MPRINT(EM_DIAGRAM):   engine_typedohc = .;
112166    +      engine_typel = .;
MPRINT(EM_DIAGRAM):   engine_typel = .;
112167    +      engine_typeohc = .;
MPRINT(EM_DIAGRAM):   engine_typeohc = .;
112168    +      engine_typeohcf = .;
MPRINT(EM_DIAGRAM):   engine_typeohcf = .;
112169    +      engine_typeohcv = .;
MPRINT(EM_DIAGRAM):   engine_typeohcv = .;
112170    +      substr(_warn_,2,1) = 'U';
MPRINT(EM_DIAGRAM):   substr(_warn_,2,1) = 'U';
112171    +      _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
112172    +   end;
MPRINT(EM_DIAGRAM):   end;
112173    +end;
MPRINT(EM_DIAGRAM):   end;
112174    +
112175    +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
112176    +*** Checking missing input Interval
112177    +*** *************************;
MPRINT(EM_DIAGRAM):   *** Checking missing input Interval *** *************************;
112178    +
112179    +IF NMISS(
112180    +   LOG_REP_IMP_price ,
112181    +   LOG_REP_compression_ratio ,
112182    +   LOG_REP_engine_size ,
112183    +   REP_IMP_bore ,
112184    +   REP_IMP_stroke ,
112185    +   REP_city_mpg ,
112186    +   REP_curb_weight ,
112187    +   REP_height ,
112188    +   REP_highway_mpg ,
112189    +   REP_horsepower ,
112190    +   REP_length ,
112191    +   REP_peak_rpm ,
112192    +   REP_wheel_base ,
112193    +   REP_width   ) THEN DO;
MPRINT(EM_DIAGRAM):   IF NMISS( LOG_REP_IMP_price , LOG_REP_compression_ratio , 
LOG_REP_engine_size , REP_IMP_bore , REP_IMP_stroke , REP_city_mpg , REP_curb_weight , 
REP_height , REP_highway_mpg , REP_horsepower , REP_length , REP_peak_rpm , REP_wheel_base , 
REP_width ) THEN DO;
112194    +   SUBSTR(_WARN_, 1, 1) = 'M';
MPRINT(EM_DIAGRAM):   SUBSTR(_WARN_, 1, 1) = 'M';
112195    +
112196    +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
112197    +END;
MPRINT(EM_DIAGRAM):   END;
112198    +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
112199    +*** Writing the Node intvl ;
MPRINT(EM_DIAGRAM):   *** Writing the Node intvl ;
112200    +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
112201    +IF _DM_BAD EQ 0 THEN DO;
MPRINT(EM_DIAGRAM):   IF _DM_BAD EQ 0 THEN DO;
112202    +   S_LOG_REP_IMP_price  =    -20.2356185469493 +     2.16855745948401 *
112203    +        LOG_REP_IMP_price ;
MPRINT(EM_DIAGRAM):   S_LOG_REP_IMP_price = -20.2356185469493 + 2.16855745948401 * 
LOG_REP_IMP_price ;
112204    +   S_LOG_REP_compression_ratio
112205    +          =    -8.72649819321039 +     3.65742873950677 *
112206    +        LOG_REP_compression_ratio ;
MPRINT(EM_DIAGRAM):   S_LOG_REP_compression_ratio = -8.72649819321039 + 3.65742873950677 * 
LOG_REP_compression_ratio ;
112207    +   S_LOG_REP_engine_size  =    -19.3053254119757 +     4.02929302984948 *
112208    +        LOG_REP_engine_size ;
MPRINT(EM_DIAGRAM):   S_LOG_REP_engine_size = -19.3053254119757 + 4.02929302984948 * 
LOG_REP_engine_size ;
112209    +   S_REP_IMP_bore  =    -13.3604302656684 +     4.04536293034574 *
112210    +        REP_IMP_bore ;
MPRINT(EM_DIAGRAM):   S_REP_IMP_bore = -13.3604302656684 + 4.04536293034574 * REP_IMP_bore ;
112211    +   S_REP_IMP_stroke  =    -11.3205669287077 +     3.47855217496738 *
112212    +        REP_IMP_stroke ;
MPRINT(EM_DIAGRAM):   S_REP_IMP_stroke = -11.3205669287077 + 3.47855217496738 * REP_IMP_stroke 
;
112213    +   S_REP_city_mpg  =    -4.23279255832632 +     0.16535248553422 *
112214    +        REP_city_mpg ;
MPRINT(EM_DIAGRAM):   S_REP_city_mpg = -4.23279255832632 + 0.16535248553422 * REP_city_mpg ;
112215    +   S_REP_curb_weight  =    -5.35597047742979 +     0.00212869810672 *
112216    +        REP_curb_weight ;
MPRINT(EM_DIAGRAM):   S_REP_curb_weight = -5.35597047742979 + 0.00212869810672 * 
REP_curb_weight ;
112217    +   S_REP_height  =    -21.8926608140893 +     0.40589318675657 * REP_height ;
MPRINT(EM_DIAGRAM):   S_REP_height = -21.8926608140893 + 0.40589318675657 * REP_height ;
112218    +   S_REP_highway_mpg  =    -4.99166764925563 +     0.16020006928199 *
112219    +        REP_highway_mpg ;
MPRINT(EM_DIAGRAM):   S_REP_highway_mpg = -4.99166764925563 + 0.16020006928199 * 
REP_highway_mpg ;
112220    +   S_REP_horsepower  =    -2.74643097264309 +     0.02734944206973 *
112221    +        REP_horsepower ;
MPRINT(EM_DIAGRAM):   S_REP_horsepower = -2.74643097264309 + 0.02734944206973 * REP_horsepower 
;
112222    +   S_REP_length  =    -15.2378498365576 +     0.08781104037663 * REP_length ;
MPRINT(EM_DIAGRAM):   S_REP_length = -15.2378498365576 + 0.08781104037663 * REP_length ;
112223    +   S_REP_peak_rpm  =    -10.6885709541859 +     0.00208333904184 *
112224    +        REP_peak_rpm ;
MPRINT(EM_DIAGRAM):   S_REP_peak_rpm = -10.6885709541859 + 0.00208333904184 * REP_peak_rpm ;
112225    +   S_REP_wheel_base  =    -17.8009087180129 +     0.18059887504832 *
112226    +        REP_wheel_base ;
MPRINT(EM_DIAGRAM):   S_REP_wheel_base = -17.8009087180129 + 0.18059887504832 * REP_wheel_base 
;
112227    +   S_REP_width  =    -35.9167499004784 +     0.54673628301566 * REP_width ;
MPRINT(EM_DIAGRAM):   S_REP_width = -35.9167499004784 + 0.54673628301566 * REP_width ;
112228    +END;
MPRINT(EM_DIAGRAM):   END;
112229    +ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
112230    +   IF MISSING( LOG_REP_IMP_price ) THEN S_LOG_REP_IMP_price  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( LOG_REP_IMP_price ) THEN S_LOG_REP_IMP_price = . ;
112231    +   ELSE S_LOG_REP_IMP_price  =    -20.2356185469493 +     2.16855745948401 *
112232    +        LOG_REP_IMP_price ;
MPRINT(EM_DIAGRAM):   ELSE S_LOG_REP_IMP_price = -20.2356185469493 + 2.16855745948401 * 
LOG_REP_IMP_price ;
112233    +   IF MISSING( LOG_REP_compression_ratio ) THEN S_LOG_REP_compression_ratio
112234    +          = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( LOG_REP_compression_ratio ) THEN S_LOG_REP_compression_ratio 
= . ;
112235    +   ELSE S_LOG_REP_compression_ratio
112236    +          =    -8.72649819321039 +     3.65742873950677 *
112237    +        LOG_REP_compression_ratio ;
MPRINT(EM_DIAGRAM):   ELSE S_LOG_REP_compression_ratio = -8.72649819321039 + 3.65742873950677 
* LOG_REP_compression_ratio ;
112238    +   IF MISSING( LOG_REP_engine_size ) THEN S_LOG_REP_engine_size  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( LOG_REP_engine_size ) THEN S_LOG_REP_engine_size = . ;
112239    +   ELSE S_LOG_REP_engine_size
112240    +          =    -19.3053254119757 +     4.02929302984948 * LOG_REP_engine_size
112241    +         ;
MPRINT(EM_DIAGRAM):   ELSE S_LOG_REP_engine_size = -19.3053254119757 + 4.02929302984948 * 
LOG_REP_engine_size ;
112242    +   IF MISSING( REP_IMP_bore ) THEN S_REP_IMP_bore  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( REP_IMP_bore ) THEN S_REP_IMP_bore = . ;
112243    +   ELSE S_REP_IMP_bore  =    -13.3604302656684 +     4.04536293034574 *
112244    +        REP_IMP_bore ;
MPRINT(EM_DIAGRAM):   ELSE S_REP_IMP_bore = -13.3604302656684 + 4.04536293034574 * 
REP_IMP_bore ;
112245    +   IF MISSING( REP_IMP_stroke ) THEN S_REP_IMP_stroke  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( REP_IMP_stroke ) THEN S_REP_IMP_stroke = . ;
112246    +   ELSE S_REP_IMP_stroke  =    -11.3205669287077 +     3.47855217496738 *
112247    +        REP_IMP_stroke ;
MPRINT(EM_DIAGRAM):   ELSE S_REP_IMP_stroke = -11.3205669287077 + 3.47855217496738 * 
REP_IMP_stroke ;
112248    +   IF MISSING( REP_city_mpg ) THEN S_REP_city_mpg  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( REP_city_mpg ) THEN S_REP_city_mpg = . ;
112249    +   ELSE S_REP_city_mpg  =    -4.23279255832632 +     0.16535248553422 *
112250    +        REP_city_mpg ;
MPRINT(EM_DIAGRAM):   ELSE S_REP_city_mpg = -4.23279255832632 + 0.16535248553422 * 
REP_city_mpg ;
112251    +   IF MISSING( REP_curb_weight ) THEN S_REP_curb_weight  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( REP_curb_weight ) THEN S_REP_curb_weight = . ;
112252    +   ELSE S_REP_curb_weight  =    -5.35597047742979 +     0.00212869810672 *
112253    +        REP_curb_weight ;
MPRINT(EM_DIAGRAM):   ELSE S_REP_curb_weight = -5.35597047742979 + 0.00212869810672 * 
REP_curb_weight ;
112254    +   IF MISSING( REP_height ) THEN S_REP_height  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( REP_height ) THEN S_REP_height = . ;
112255    +   ELSE S_REP_height  =    -21.8926608140893 +     0.40589318675657 *
112256    +        REP_height ;
MPRINT(EM_DIAGRAM):   ELSE S_REP_height = -21.8926608140893 + 0.40589318675657 * REP_height ;
112257    +   IF MISSING( REP_highway_mpg ) THEN S_REP_highway_mpg  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( REP_highway_mpg ) THEN S_REP_highway_mpg = . ;
112258    +   ELSE S_REP_highway_mpg  =    -4.99166764925563 +     0.16020006928199 *
112259    +        REP_highway_mpg ;
MPRINT(EM_DIAGRAM):   ELSE S_REP_highway_mpg = -4.99166764925563 + 0.16020006928199 * 
REP_highway_mpg ;
112260    +   IF MISSING( REP_horsepower ) THEN S_REP_horsepower  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( REP_horsepower ) THEN S_REP_horsepower = . ;
112261    +   ELSE S_REP_horsepower  =    -2.74643097264309 +     0.02734944206973 *
112262    +        REP_horsepower ;
MPRINT(EM_DIAGRAM):   ELSE S_REP_horsepower = -2.74643097264309 + 0.02734944206973 * 
REP_horsepower ;
112263    +   IF MISSING( REP_length ) THEN S_REP_length  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( REP_length ) THEN S_REP_length = . ;
112264    +   ELSE S_REP_length  =    -15.2378498365576 +     0.08781104037663 *
112265    +        REP_length ;
MPRINT(EM_DIAGRAM):   ELSE S_REP_length = -15.2378498365576 + 0.08781104037663 * REP_length ;
112266    +   IF MISSING( REP_peak_rpm ) THEN S_REP_peak_rpm  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( REP_peak_rpm ) THEN S_REP_peak_rpm = . ;
112267    +   ELSE S_REP_peak_rpm  =    -10.6885709541859 +     0.00208333904184 *
112268    +        REP_peak_rpm ;
MPRINT(EM_DIAGRAM):   ELSE S_REP_peak_rpm = -10.6885709541859 + 0.00208333904184 * 
REP_peak_rpm ;
112269    +   IF MISSING( REP_wheel_base ) THEN S_REP_wheel_base  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( REP_wheel_base ) THEN S_REP_wheel_base = . ;
112270    +   ELSE S_REP_wheel_base  =    -17.8009087180129 +     0.18059887504832 *
112271    +        REP_wheel_base ;
MPRINT(EM_DIAGRAM):   ELSE S_REP_wheel_base = -17.8009087180129 + 0.18059887504832 * 
REP_wheel_base ;
112272    +   IF MISSING( REP_width ) THEN S_REP_width  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( REP_width ) THEN S_REP_width = . ;
112273    +   ELSE S_REP_width  =    -35.9167499004784 +     0.54673628301566 * REP_width
112274    +         ;
MPRINT(EM_DIAGRAM):   ELSE S_REP_width = -35.9167499004784 + 0.54673628301566 * REP_width ;
112275    +END;
MPRINT(EM_DIAGRAM):   END;
112276    +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
112277    +*** Writing the Node bin ;
MPRINT(EM_DIAGRAM):   *** Writing the Node bin ;
112278    +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
112279    +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
112280    +*** Writing the Node nom ;
MPRINT(EM_DIAGRAM):   *** Writing the Node nom ;
112281    +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
112282    +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
112283    +*** Writing the Node H1 ;
MPRINT(EM_DIAGRAM):   *** Writing the Node H1 ;
112284    +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
112285    +IF _DM_BAD EQ 0 THEN DO;
MPRINT(EM_DIAGRAM):   IF _DM_BAD EQ 0 THEN DO;
112286    +   H11  =    -0.05945014320178 * S_LOG_REP_IMP_price
112287    +          +     0.23028408042981 * S_LOG_REP_compression_ratio
112288    +          +    -0.55947033299445 * S_LOG_REP_engine_size
112289    +          +    -0.14523273532281 * S_REP_IMP_bore  +     0.33601025614724 *
112290    +        S_REP_IMP_stroke  +    -0.88654773082892 * S_REP_city_mpg
112291    +          +    -0.51801568326425 * S_REP_curb_weight
112292    +          +    -0.05802738940523 * S_REP_height  +    -0.03810113319956 *
112293    +        S_REP_highway_mpg  +     0.03924459552049 * S_REP_horsepower
112294    +          +     0.21002997468069 * S_REP_length  +     0.61749212318384 *
112295    +        S_REP_peak_rpm  +    -1.16690362615029 * S_REP_wheel_base
112296    +          +     0.56523113334313 * S_REP_width ;
MPRINT(EM_DIAGRAM):   H11 = -0.05945014320178 * S_LOG_REP_IMP_price + 0.23028408042981 * 
S_LOG_REP_compression_ratio + -0.55947033299445 * S_LOG_REP_engine_size + -0.14523273532281 * 
S_REP_IMP_bore + 0.33601025614724 * S_REP_IMP_stroke + -0.88654773082892 * S_REP_city_mpg + 
-0.51801568326425 * S_REP_curb_weight + -0.05802738940523 * S_REP_height + -0.03810113319956 * 
S_REP_highway_mpg + 0.03924459552049 * S_REP_horsepower + 0.21002997468069 * S_REP_length + 
0.61749212318384 * S_REP_peak_rpm + -1.16690362615029 * S_REP_wheel_base + 0.56523113334313 * 
S_REP_width ;
112297    +   H12  =    -0.04519390964671 * S_LOG_REP_IMP_price
112298    +          +     0.20636780304144 * S_LOG_REP_compression_ratio
112299    +          +     0.38610029587113 * S_LOG_REP_engine_size
112300    +          +     0.02122891644848 * S_REP_IMP_bore  +     0.72819142903819 *
112301    +        S_REP_IMP_stroke  +     0.45607954634849 * S_REP_city_mpg
112302    +          +     0.39788671190423 * S_REP_curb_weight
112303    +          +     0.58866221273788 * S_REP_height  +     -0.2991223373507 *
112304    +        S_REP_highway_mpg  +    -0.14997208033764 * S_REP_horsepower
112305    +          +     0.19770445044787 * S_REP_length  +     1.03487555197917 *
112306    +        S_REP_peak_rpm  +     0.37505053462771 * S_REP_wheel_base
112307    +          +    -0.36159431110716 * S_REP_width ;
MPRINT(EM_DIAGRAM):   H12 = -0.04519390964671 * S_LOG_REP_IMP_price + 0.20636780304144 * 
S_LOG_REP_compression_ratio + 0.38610029587113 * S_LOG_REP_engine_size + 0.02122891644848 * 
S_REP_IMP_bore + 0.72819142903819 * S_REP_IMP_stroke + 0.45607954634849 * S_REP_city_mpg + 
0.39788671190423 * S_REP_curb_weight + 0.58866221273788 * S_REP_height + -0.2991223373507 * 
S_REP_highway_mpg + -0.14997208033764 * S_REP_horsepower + 0.19770445044787 * S_REP_length + 
1.03487555197917 * S_REP_peak_rpm + 0.37505053462771 * S_REP_wheel_base + -0.36159431110716 * 
S_REP_width ;
112308    +   H11  = H11  +    -0.40247462393464 * M_bore0  +    -0.25246866470873 *
112309    +        M_num_of_doors0  +     0.29358262174114 * M_price0
112310    +          +    -0.35755285679311 * M_stroke0 ;
MPRINT(EM_DIAGRAM):   H11 = H11 + -0.40247462393464 * M_bore0 + -0.25246866470873 * 
M_num_of_doors0 + 0.29358262174114 * M_price0 + -0.35755285679311 * M_stroke0 ;
112311    +   H12  = H12  +     0.08024821292732 * M_bore0  +    -0.06359251950002 *
112312    +        M_num_of_doors0  +    -0.40464698886501 * M_price0
112313    +          +    -0.13913068986552 * M_stroke0 ;
MPRINT(EM_DIAGRAM):   H12 = H12 + 0.08024821292732 * M_bore0 + -0.06359251950002 * 
M_num_of_doors0 + -0.40464698886501 * M_price0 + -0.13913068986552 * M_stroke0 ;
112314    +   H11  = H11  +     1.06135788272891 * IMP_num_of_doors2
112315    +          +    -0.14271127694006 * REP_aspirationS  +     0.36486615758056 *
112316    +        REP_body_styleC  +     0.16638919064823 * REP_body_styleH
112317    +          +    -0.20034443648902 * REP_body_styleS  +     0.24076662872441 *
112318    +        REP_drive_wheels4  +     0.26823357856593 * REP_drive_wheelsF
112319    +          +     0.01216030599789 * REP_engine_locationF
112320    +          +    -0.20794679840242 * REP_fuel_systemnon_spdi
112321    +          +    -0.14424463363172 * REP_fuel_typeD  +     0.27719722840907 *
112322    +        REP_num_of_cylinders__4  +      0.4631346933705 * engine_typedohc
112323    +          +    -0.00348674456935 * engine_typel  +    -0.09101365786253 *
112324    +        engine_typeohc  +    -0.60243729714628 * engine_typeohcf
112325    +          +     0.00552330628134 * engine_typeohcv ;
MPRINT(EM_DIAGRAM):   H11 = H11 + 1.06135788272891 * IMP_num_of_doors2 + -0.14271127694006 * 
REP_aspirationS + 0.36486615758056 * REP_body_styleC + 0.16638919064823 * REP_body_styleH + 
-0.20034443648902 * REP_body_styleS + 0.24076662872441 * REP_drive_wheels4 + 0.26823357856593 
* REP_drive_wheelsF + 0.01216030599789 * REP_engine_locationF + -0.20794679840242 * 
REP_fuel_systemnon_spdi + -0.14424463363172 * REP_fuel_typeD + 0.27719722840907 * 
REP_num_of_cylinders__4 + 0.4631346933705 * engine_typedohc + -0.00348674456935 * engine_typel 
+ -0.09101365786253 * engine_typeohc + -0.60243729714628 * engine_typeohcf + 0.00552330628134 
* engine_typeohcv ;
112326    +   H12  = H12  +    -0.26520980153166 * IMP_num_of_doors2
112327    +          +    -0.23036271899934 * REP_aspirationS  +    -0.11289541849347 *
112328    +        REP_body_styleC  +     0.29085726156181 * REP_body_styleH
112329    +          +    -0.40563301302664 * REP_body_styleS  +    -0.15690978888542 *
112330    +        REP_drive_wheels4  +    -0.04649324093232 * REP_drive_wheelsF
112331    +          +     0.19888563265162 * REP_engine_locationF
112332    +          +     0.14250615398431 * REP_fuel_systemnon_spdi
112333    +          +     0.20472143332967 * REP_fuel_typeD  +     0.22871373636412 *
112334    +        REP_num_of_cylinders__4  +     0.09726112642423 * engine_typedohc
112335    +          +    -0.06367563895304 * engine_typel  +    -0.10610223785692 *
112336    +        engine_typeohc  +     0.31078965445942 * engine_typeohcf
112337    +          +     -0.0252088697624 * engine_typeohcv ;
MPRINT(EM_DIAGRAM):   H12 = H12 + -0.26520980153166 * IMP_num_of_doors2 + -0.23036271899934 * 
REP_aspirationS + -0.11289541849347 * REP_body_styleC + 0.29085726156181 * REP_body_styleH + 
-0.40563301302664 * REP_body_styleS + -0.15690978888542 * REP_drive_wheels4 + 
-0.04649324093232 * REP_drive_wheelsF + 0.19888563265162 * REP_engine_locationF + 
0.14250615398431 * REP_fuel_systemnon_spdi + 0.20472143332967 * REP_fuel_typeD + 
0.22871373636412 * REP_num_of_cylinders__4 + 0.09726112642423 * engine_typedohc + 
-0.06367563895304 * engine_typel + -0.10610223785692 * engine_typeohc + 0.31078965445942 * 
engine_typeohcf + -0.0252088697624 * engine_typeohcv ;
112338    +   H11  =     1.38027470319246 + H11 ;
MPRINT(EM_DIAGRAM):   H11 = 1.38027470319246 + H11 ;
112339    +   H12  =    -0.62757281657758 + H12 ;
MPRINT(EM_DIAGRAM):   H12 = -0.62757281657758 + H12 ;
112340    +   H11  = TANH(H11 );
MPRINT(EM_DIAGRAM):   H11 = TANH(H11 );
112341    +   H12  = TANH(H12 );
MPRINT(EM_DIAGRAM):   H12 = TANH(H12 );
112342    +END;
MPRINT(EM_DIAGRAM):   END;
112343    +ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
112344    +   H11  = .;
MPRINT(EM_DIAGRAM):   H11 = .;
112345    +   H12  = .;
MPRINT(EM_DIAGRAM):   H12 = .;
112346    +END;
MPRINT(EM_DIAGRAM):   END;
112347    +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
112348    +*** Writing the Node Risk ;
MPRINT(EM_DIAGRAM):   *** Writing the Node Risk ;
112349    +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
112350    +
112351    +*** Generate dummy variables for Risk ;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for Risk ;
112352    +drop Risk1 Risk0 ;
MPRINT(EM_DIAGRAM):   drop Risk1 Risk0 ;
112353    +label F_Risk = 'From: Risk' ;
MPRINT(EM_DIAGRAM):   label F_Risk = 'From: Risk' ;
112354    +length F_Risk $ 12;
MPRINT(EM_DIAGRAM):   length F_Risk $ 12;
112355    +F_Risk = put( Risk , BEST12. );
MPRINT(EM_DIAGRAM):   F_Risk = put( Risk , BEST12. );
112356    +%DMNORMIP( F_Risk )
MPRINT(DMNORMIP):   call dmnorm(F_Risk,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
112357    +if missing( Risk ) then do;
MPRINT(EM_DIAGRAM):   if missing( Risk ) then do;
112358    +   Risk1 = .;
MPRINT(EM_DIAGRAM):   Risk1 = .;
112359    +   Risk0 = .;
MPRINT(EM_DIAGRAM):   Risk0 = .;
112360    +end;
MPRINT(EM_DIAGRAM):   end;
112361    +else do;
MPRINT(EM_DIAGRAM):   else do;
112362    +   if F_Risk = '1'  then do;
MPRINT(EM_DIAGRAM):   if F_Risk = '1' then do;
112363    +      Risk1 = 1;
MPRINT(EM_DIAGRAM):   Risk1 = 1;
112364    +      Risk0 = 0;
MPRINT(EM_DIAGRAM):   Risk0 = 0;
112365    +   end;
MPRINT(EM_DIAGRAM):   end;
112366    +   else if F_Risk = '0'  then do;
MPRINT(EM_DIAGRAM):   else if F_Risk = '0' then do;
112367    +      Risk1 = 0;
MPRINT(EM_DIAGRAM):   Risk1 = 0;
112368    +      Risk0 = 1;
MPRINT(EM_DIAGRAM):   Risk0 = 1;
112369    +   end;
MPRINT(EM_DIAGRAM):   end;
112370    +   else do;
MPRINT(EM_DIAGRAM):   else do;
112371    +      Risk1 = .;
MPRINT(EM_DIAGRAM):   Risk1 = .;
112372    +      Risk0 = .;
MPRINT(EM_DIAGRAM):   Risk0 = .;
112373    +   end;
MPRINT(EM_DIAGRAM):   end;
112374    +end;
MPRINT(EM_DIAGRAM):   end;
112375    +IF _DM_BAD EQ 0 THEN DO;
MPRINT(EM_DIAGRAM):   IF _DM_BAD EQ 0 THEN DO;
112376    +   P_Risk1  =     2.97301617245243 * H11  +    -2.28437588370032 * H12 ;
MPRINT(EM_DIAGRAM):   P_Risk1 = 2.97301617245243 * H11 + -2.28437588370032 * H12 ;
112377    +   P_Risk1  =     -1.3124328498497 + P_Risk1 ;
MPRINT(EM_DIAGRAM):   P_Risk1 = -1.3124328498497 + P_Risk1 ;
112378    +   P_Risk0  = 0;
MPRINT(EM_DIAGRAM):   P_Risk0 = 0;
112379    +   _MAX_ = MAX (P_Risk1 , P_Risk0 );
MPRINT(EM_DIAGRAM):   _MAX_ = MAX (P_Risk1 , P_Risk0 );
112380    +   _SUM_ = 0.;
MPRINT(EM_DIAGRAM):   _SUM_ = 0.;
112381    +   P_Risk1  = EXP(P_Risk1  - _MAX_);
MPRINT(EM_DIAGRAM):   P_Risk1 = EXP(P_Risk1 - _MAX_);
112382    +   _SUM_ = _SUM_ + P_Risk1 ;
MPRINT(EM_DIAGRAM):   _SUM_ = _SUM_ + P_Risk1 ;
112383    +   P_Risk0  = EXP(P_Risk0  - _MAX_);
MPRINT(EM_DIAGRAM):   P_Risk0 = EXP(P_Risk0 - _MAX_);
112384    +   _SUM_ = _SUM_ + P_Risk0 ;
MPRINT(EM_DIAGRAM):   _SUM_ = _SUM_ + P_Risk0 ;
112385    +   P_Risk1  = P_Risk1  / _SUM_;
MPRINT(EM_DIAGRAM):   P_Risk1 = P_Risk1 / _SUM_;
112386    +   P_Risk0  = P_Risk0  / _SUM_;
MPRINT(EM_DIAGRAM):   P_Risk0 = P_Risk0 / _SUM_;
112387    +END;
MPRINT(EM_DIAGRAM):   END;
112388    +ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
112389    +   P_Risk1  = .;
MPRINT(EM_DIAGRAM):   P_Risk1 = .;
112390    +   P_Risk0  = .;
MPRINT(EM_DIAGRAM):   P_Risk0 = .;
112391    +END;
MPRINT(EM_DIAGRAM):   END;
112392    +IF _DM_BAD EQ 1 THEN DO;
MPRINT(EM_DIAGRAM):   IF _DM_BAD EQ 1 THEN DO;
112393    +   P_Risk1  =                 0.54;
MPRINT(EM_DIAGRAM):   P_Risk1 = 0.54;
112394    +   P_Risk0  =                 0.46;
MPRINT(EM_DIAGRAM):   P_Risk0 = 0.46;
112395    +END;
MPRINT(EM_DIAGRAM):   END;
112396    +*** *****************************;
MPRINT(EM_DIAGRAM):   *** *****************************;
112397    +*** Writing the Residuals  of the Node Risk ;
MPRINT(EM_DIAGRAM):   *** Writing the Residuals of the Node Risk ;
112398    +*** ******************************;
MPRINT(EM_DIAGRAM):   *** ******************************;
112399    +IF MISSING( Risk1 ) THEN R_Risk1  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( Risk1 ) THEN R_Risk1 = . ;
112400    +ELSE R_Risk1  = Risk1  - P_Risk1 ;
MPRINT(EM_DIAGRAM):   ELSE R_Risk1 = Risk1 - P_Risk1 ;
112401    +IF MISSING( Risk0 ) THEN R_Risk0  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( Risk0 ) THEN R_Risk0 = . ;
112402    +ELSE R_Risk0  = Risk0  - P_Risk0 ;
MPRINT(EM_DIAGRAM):   ELSE R_Risk0 = Risk0 - P_Risk0 ;
112403    +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
112404    +*** Writing the I_Risk  AND U_Risk ;
MPRINT(EM_DIAGRAM):   *** Writing the I_Risk AND U_Risk ;
112405    +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
112406    +_MAXP_ = P_Risk1 ;
MPRINT(EM_DIAGRAM):   _MAXP_ = P_Risk1 ;
112407    +I_Risk  = "1           " ;
MPRINT(EM_DIAGRAM):   I_Risk = "1           " ;
112408    +U_Risk  =                    1;
MPRINT(EM_DIAGRAM):   U_Risk = 1;
112409    +IF( _MAXP_ LT P_Risk0  ) THEN DO;
MPRINT(EM_DIAGRAM):   IF( _MAXP_ LT P_Risk0 ) THEN DO;
112410    +   _MAXP_ = P_Risk0 ;
MPRINT(EM_DIAGRAM):   _MAXP_ = P_Risk0 ;
112411    +   I_Risk  = "0           " ;
MPRINT(EM_DIAGRAM):   I_Risk = "0           " ;
112412    +   U_Risk  =                    0;
MPRINT(EM_DIAGRAM):   U_Risk = 0;
112413    +END;
MPRINT(EM_DIAGRAM):   END;
112414    +********************************;
MPRINT(EM_DIAGRAM):   ********************************;
112415    +*** End Scoring Code for Neural;
MPRINT(EM_DIAGRAM):   *** End Scoring Code for Neural;
112416    +********************************;
MPRINT(EM_DIAGRAM):   ********************************;
112417    +drop
112418    +H11
112419    +H12
112420    +;
MPRINT(EM_DIAGRAM):   drop H11 H12 ;
112421    +drop S_:;
MPRINT(EM_DIAGRAM):   drop S_:;
NOTE: %INCLUDE (level 1) ending.
MPRINT(EM_DIAGRAM):   run;
112422     run;

NOTE: DATA STEP view saved on file EMWS1.NEURAL3_TRAIN.
NOTE: A stored DATA STEP view cannot run under a different operating system.
NOTE: View EMWS1.REPL2_TRAIN.VIEW used (Total process time):
      real time           0.30 seconds
      cpu time            0.18 seconds
      
NOTE: DATA statement used (Total process time):
      real time           0.31 seconds
      cpu time            0.18 seconds
      

MPRINT(EM_DIAGRAM):   quit;
112423     quit;
112424     filename emflow;
MPRINT(EM_DIAGRAM):   filename emflow;
NOTE: Fileref EMFLOW has been deassigned.
112425     filename emflow "H:\746\Decision Tree test\Workspaces\EMWS1\Neural3\EMFLOWSCORE.sas"
112425   ! ;
MPRINT(EM_DIAGRAM):    filename emflow "H:\746\Decision Tree 
test\Workspaces\EMWS1\Neural3\EMFLOWSCORE.sas";
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Neural3: Scoring VALIDATE data;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
112426     *------------------------------------------------------------*;
112427     * Neural3: Scoring VALIDATE data;
112428     *------------------------------------------------------------*;
112429     data EMWS1.Neural3_VALIDATE
112430     / view=EMWS1.Neural3_VALIDATE
112431     ;
MPRINT(EM_DIAGRAM):   data EMWS1.Neural3_VALIDATE / view=EMWS1.Neural3_VALIDATE ;
112432     set EMWS1.Repl2_VALIDATE
112433     ;
MPRINT(EM_DIAGRAM):   set EMWS1.Repl2_VALIDATE ;
112434     %inc emflow;
NOTE: %INCLUDE (level 1) file EMFLOW is file H:\746\Decision Tree 
      test\Workspaces\EMWS1\Neural3\EMFLOWSCORE.sas.
112435    +***********************************;
MPRINT(EM_DIAGRAM):   ***********************************;
112436    +*** Begin Scoring Code for Neural;
MPRINT(EM_DIAGRAM):   *** Begin Scoring Code for Neural;
112437    +***********************************;
MPRINT(EM_DIAGRAM):   ***********************************;
112438    +DROP _DM_BAD _EPS _NOCL_ _MAX_ _MAXP_ _SUM_ _NTRIALS;
MPRINT(EM_DIAGRAM):   DROP _DM_BAD _EPS _NOCL_ _MAX_ _MAXP_ _SUM_ _NTRIALS;
112439    + _DM_BAD = 0;
MPRINT(EM_DIAGRAM):   _DM_BAD = 0;
112440    + _NOCL_ = .;
MPRINT(EM_DIAGRAM):   _NOCL_ = .;
112441    + _MAX_ = .;
MPRINT(EM_DIAGRAM):   _MAX_ = .;
112442    + _MAXP_ = .;
MPRINT(EM_DIAGRAM):   _MAXP_ = .;
112443    + _SUM_ = .;
MPRINT(EM_DIAGRAM):   _SUM_ = .;
112444    + _NTRIALS = .;
MPRINT(EM_DIAGRAM):   _NTRIALS = .;
112445    + _EPS =                1E-10;
MPRINT(EM_DIAGRAM):   _EPS = 1E-10;
112446    +LENGTH _WARN_ $4
112447    +      F_Risk  $ 12
112448    +;
MPRINT(EM_DIAGRAM):   LENGTH _WARN_ $4 F_Risk $ 12 ;
112449    +      label S_LOG_REP_IMP_price = 'Standard: LOG_REP_IMP_price' ;
MPRINT(EM_DIAGRAM):   label S_LOG_REP_IMP_price = 'Standard: LOG_REP_IMP_price' ;
112450    +
112451    +      label S_LOG_REP_compression_ratio =
112452    +'Standard: LOG_REP_compression_ratio' ;
MPRINT(EM_DIAGRAM):   label S_LOG_REP_compression_ratio = 'Standard: 
LOG_REP_compression_ratio' ;
112453    +
112454    +      label S_LOG_REP_engine_size = 'Standard: LOG_REP_engine_size' ;
MPRINT(EM_DIAGRAM):   label S_LOG_REP_engine_size = 'Standard: LOG_REP_engine_size' ;
112455    +
112456    +      label S_REP_IMP_bore = 'Standard: REP_IMP_bore' ;
MPRINT(EM_DIAGRAM):   label S_REP_IMP_bore = 'Standard: REP_IMP_bore' ;
112457    +
112458    +      label S_REP_IMP_stroke = 'Standard: REP_IMP_stroke' ;
MPRINT(EM_DIAGRAM):   label S_REP_IMP_stroke = 'Standard: REP_IMP_stroke' ;
112459    +
112460    +      label S_REP_city_mpg = 'Standard: REP_city_mpg' ;
MPRINT(EM_DIAGRAM):   label S_REP_city_mpg = 'Standard: REP_city_mpg' ;
112461    +
112462    +      label S_REP_curb_weight = 'Standard: REP_curb_weight' ;
MPRINT(EM_DIAGRAM):   label S_REP_curb_weight = 'Standard: REP_curb_weight' ;
112463    +
112464    +      label S_REP_height = 'Standard: REP_height' ;
MPRINT(EM_DIAGRAM):   label S_REP_height = 'Standard: REP_height' ;
112465    +
112466    +      label S_REP_highway_mpg = 'Standard: REP_highway_mpg' ;
MPRINT(EM_DIAGRAM):   label S_REP_highway_mpg = 'Standard: REP_highway_mpg' ;
112467    +
112468    +      label S_REP_horsepower = 'Standard: REP_horsepower' ;
MPRINT(EM_DIAGRAM):   label S_REP_horsepower = 'Standard: REP_horsepower' ;
112469    +
112470    +      label S_REP_length = 'Standard: REP_length' ;
MPRINT(EM_DIAGRAM):   label S_REP_length = 'Standard: REP_length' ;
112471    +
112472    +      label S_REP_peak_rpm = 'Standard: REP_peak_rpm' ;
MPRINT(EM_DIAGRAM):   label S_REP_peak_rpm = 'Standard: REP_peak_rpm' ;
112473    +
112474    +      label S_REP_wheel_base = 'Standard: REP_wheel_base' ;
MPRINT(EM_DIAGRAM):   label S_REP_wheel_base = 'Standard: REP_wheel_base' ;
112475    +
112476    +      label S_REP_width = 'Standard: REP_width' ;
MPRINT(EM_DIAGRAM):   label S_REP_width = 'Standard: REP_width' ;
112477    +
112478    +      label M_bore0 = 'Dummy: M_bore=0' ;
MPRINT(EM_DIAGRAM):   label M_bore0 = 'Dummy: M_bore=0' ;
112479    +
112480    +      label M_num_of_doors0 = 'Dummy: M_num_of_doors=0' ;
MPRINT(EM_DIAGRAM):   label M_num_of_doors0 = 'Dummy: M_num_of_doors=0' ;
112481    +
112482    +      label M_price0 = 'Dummy: M_price=0' ;
MPRINT(EM_DIAGRAM):   label M_price0 = 'Dummy: M_price=0' ;
112483    +
112484    +      label M_stroke0 = 'Dummy: M_stroke=0' ;
MPRINT(EM_DIAGRAM):   label M_stroke0 = 'Dummy: M_stroke=0' ;
112485    +
112486    +      label IMP_num_of_doors2 = 'Dummy: IMP_num_of_doors=2' ;
MPRINT(EM_DIAGRAM):   label IMP_num_of_doors2 = 'Dummy: IMP_num_of_doors=2' ;
112487    +
112488    +      label REP_aspirationS = 'Dummy: REP_aspiration=S' ;
MPRINT(EM_DIAGRAM):   label REP_aspirationS = 'Dummy: REP_aspiration=S' ;
112489    +
112490    +      label REP_body_styleC = 'Dummy: REP_body_style=C' ;
MPRINT(EM_DIAGRAM):   label REP_body_styleC = 'Dummy: REP_body_style=C' ;
112491    +
112492    +      label REP_body_styleH = 'Dummy: REP_body_style=H' ;
MPRINT(EM_DIAGRAM):   label REP_body_styleH = 'Dummy: REP_body_style=H' ;
112493    +
112494    +      label REP_body_styleS = 'Dummy: REP_body_style=S' ;
MPRINT(EM_DIAGRAM):   label REP_body_styleS = 'Dummy: REP_body_style=S' ;
112495    +
112496    +      label REP_drive_wheels4 = 'Dummy: REP_drive_wheels=4' ;
MPRINT(EM_DIAGRAM):   label REP_drive_wheels4 = 'Dummy: REP_drive_wheels=4' ;
112497    +
112498    +      label REP_drive_wheelsF = 'Dummy: REP_drive_wheels=F' ;
MPRINT(EM_DIAGRAM):   label REP_drive_wheelsF = 'Dummy: REP_drive_wheels=F' ;
112499    +
112500    +      label REP_engine_locationF = 'Dummy: REP_engine_location=F' ;
MPRINT(EM_DIAGRAM):   label REP_engine_locationF = 'Dummy: REP_engine_location=F' ;
112501    +
112502    +      label REP_fuel_systemnon_spdi = 'Dummy: REP_fuel_system=non-spdi' ;
MPRINT(EM_DIAGRAM):   label REP_fuel_systemnon_spdi = 'Dummy: REP_fuel_system=non-spdi' ;
112503    +
112504    +      label REP_fuel_typeD = 'Dummy: REP_fuel_type=D' ;
MPRINT(EM_DIAGRAM):   label REP_fuel_typeD = 'Dummy: REP_fuel_type=D' ;
112505    +
112506    +      label REP_num_of_cylinders__4 = 'Dummy: REP_num_of_cylinders=<=4' ;
MPRINT(EM_DIAGRAM):   label REP_num_of_cylinders__4 = 'Dummy: REP_num_of_cylinders=<=4' ;
112507    +
112508    +      label engine_typedohc = 'Dummy: engine_type=dohc' ;
MPRINT(EM_DIAGRAM):   label engine_typedohc = 'Dummy: engine_type=dohc' ;
112509    +
112510    +      label engine_typel = 'Dummy: engine_type=l' ;
MPRINT(EM_DIAGRAM):   label engine_typel = 'Dummy: engine_type=l' ;
112511    +
112512    +      label engine_typeohc = 'Dummy: engine_type=ohc' ;
MPRINT(EM_DIAGRAM):   label engine_typeohc = 'Dummy: engine_type=ohc' ;
112513    +
112514    +      label engine_typeohcf = 'Dummy: engine_type=ohcf' ;
MPRINT(EM_DIAGRAM):   label engine_typeohcf = 'Dummy: engine_type=ohcf' ;
112515    +
112516    +      label engine_typeohcv = 'Dummy: engine_type=ohcv' ;
MPRINT(EM_DIAGRAM):   label engine_typeohcv = 'Dummy: engine_type=ohcv' ;
112517    +
112518    +      label H11 = 'Hidden: H1=1' ;
MPRINT(EM_DIAGRAM):   label H11 = 'Hidden: H1=1' ;
112519    +
112520    +      label H12 = 'Hidden: H1=2' ;
MPRINT(EM_DIAGRAM):   label H12 = 'Hidden: H1=2' ;
112521    +
112522    +      label I_Risk = 'Into: Risk' ;
MPRINT(EM_DIAGRAM):   label I_Risk = 'Into: Risk' ;
112523    +
112524    +      label F_Risk = 'From: Risk' ;
MPRINT(EM_DIAGRAM):   label F_Risk = 'From: Risk' ;
112525    +
112526    +      label U_Risk = 'Unnormalized Into: Risk' ;
MPRINT(EM_DIAGRAM):   label U_Risk = 'Unnormalized Into: Risk' ;
112527    +
112528    +      label P_Risk1 = 'Predicted: Risk=1' ;
MPRINT(EM_DIAGRAM):   label P_Risk1 = 'Predicted: Risk=1' ;
112529    +
112530    +      label R_Risk1 = 'Residual: Risk=1' ;
MPRINT(EM_DIAGRAM):   label R_Risk1 = 'Residual: Risk=1' ;
112531    +
112532    +      label P_Risk0 = 'Predicted: Risk=0' ;
MPRINT(EM_DIAGRAM):   label P_Risk0 = 'Predicted: Risk=0' ;
112533    +
112534    +      label R_Risk0 = 'Residual: Risk=0' ;
MPRINT(EM_DIAGRAM):   label R_Risk0 = 'Residual: Risk=0' ;
112535    +
112536    +      label  _WARN_ = "Warnings";
MPRINT(EM_DIAGRAM):   label _WARN_ = "Warnings";
112537    +
112538    +*** Generate dummy variables for M_bore ;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for M_bore ;
112539    +drop M_bore0 ;
MPRINT(EM_DIAGRAM):   drop M_bore0 ;
112540    +if missing( M_bore ) then do;
MPRINT(EM_DIAGRAM):   if missing( M_bore ) then do;
112541    +   M_bore0 = .;
MPRINT(EM_DIAGRAM):   M_bore0 = .;
112542    +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
112543    +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
112544    +end;
MPRINT(EM_DIAGRAM):   end;
112545    +else do;
MPRINT(EM_DIAGRAM):   else do;
112546    +   length _dm12 $ 12; drop _dm12 ;
MPRINT(EM_DIAGRAM):   length _dm12 $ 12;
MPRINT(EM_DIAGRAM):   drop _dm12 ;
112547    +   _dm12 = put( M_bore , BEST12. );
MPRINT(EM_DIAGRAM):   _dm12 = put( M_bore , BEST12. );
112548    +   %DMNORMIP( _dm12 )
MPRINT(DMNORMIP):   call dmnorm(_dm12,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
112549    +   if _dm12 = '0'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 = '0' then do;
112550    +      M_bore0 = 1;
MPRINT(EM_DIAGRAM):   M_bore0 = 1;
112551    +   end;
MPRINT(EM_DIAGRAM):   end;
112552    +   else if _dm12 = '1'  then do;
MPRINT(EM_DIAGRAM):   else if _dm12 = '1' then do;
112553    +      M_bore0 = -1;
MPRINT(EM_DIAGRAM):   M_bore0 = -1;
112554    +   end;
MPRINT(EM_DIAGRAM):   end;
112555    +   else do;
MPRINT(EM_DIAGRAM):   else do;
112556    +      M_bore0 = .;
MPRINT(EM_DIAGRAM):   M_bore0 = .;
112557    +      substr(_warn_,2,1) = 'U';
MPRINT(EM_DIAGRAM):   substr(_warn_,2,1) = 'U';
112558    +      _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
112559    +   end;
MPRINT(EM_DIAGRAM):   end;
112560    +end;
MPRINT(EM_DIAGRAM):   end;
112561    +
112562    +*** Generate dummy variables for M_num_of_doors ;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for M_num_of_doors ;
112563    +drop M_num_of_doors0 ;
MPRINT(EM_DIAGRAM):   drop M_num_of_doors0 ;
112564    +if missing( M_num_of_doors ) then do;
MPRINT(EM_DIAGRAM):   if missing( M_num_of_doors ) then do;
112565    +   M_num_of_doors0 = .;
MPRINT(EM_DIAGRAM):   M_num_of_doors0 = .;
112566    +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
112567    +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
112568    +end;
MPRINT(EM_DIAGRAM):   end;
112569    +else do;
MPRINT(EM_DIAGRAM):   else do;
112570    +   length _dm12 $ 12; drop _dm12 ;
MPRINT(EM_DIAGRAM):   length _dm12 $ 12;
MPRINT(EM_DIAGRAM):   drop _dm12 ;
112571    +   _dm12 = put( M_num_of_doors , BEST12. );
MPRINT(EM_DIAGRAM):   _dm12 = put( M_num_of_doors , BEST12. );
112572    +   %DMNORMIP( _dm12 )
MPRINT(DMNORMIP):   call dmnorm(_dm12,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
112573    +   if _dm12 = '0'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 = '0' then do;
112574    +      M_num_of_doors0 = 1;
MPRINT(EM_DIAGRAM):   M_num_of_doors0 = 1;
112575    +   end;
MPRINT(EM_DIAGRAM):   end;
112576    +   else if _dm12 = '1'  then do;
MPRINT(EM_DIAGRAM):   else if _dm12 = '1' then do;
112577    +      M_num_of_doors0 = -1;
MPRINT(EM_DIAGRAM):   M_num_of_doors0 = -1;
112578    +   end;
MPRINT(EM_DIAGRAM):   end;
112579    +   else do;
MPRINT(EM_DIAGRAM):   else do;
112580    +      M_num_of_doors0 = .;
MPRINT(EM_DIAGRAM):   M_num_of_doors0 = .;
112581    +      substr(_warn_,2,1) = 'U';
MPRINT(EM_DIAGRAM):   substr(_warn_,2,1) = 'U';
112582    +      _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
112583    +   end;
MPRINT(EM_DIAGRAM):   end;
112584    +end;
MPRINT(EM_DIAGRAM):   end;
112585    +
112586    +*** Generate dummy variables for M_price ;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for M_price ;
112587    +drop M_price0 ;
MPRINT(EM_DIAGRAM):   drop M_price0 ;
112588    +if missing( M_price ) then do;
MPRINT(EM_DIAGRAM):   if missing( M_price ) then do;
112589    +   M_price0 = .;
MPRINT(EM_DIAGRAM):   M_price0 = .;
112590    +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
112591    +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
112592    +end;
MPRINT(EM_DIAGRAM):   end;
112593    +else do;
MPRINT(EM_DIAGRAM):   else do;
112594    +   length _dm12 $ 12; drop _dm12 ;
MPRINT(EM_DIAGRAM):   length _dm12 $ 12;
MPRINT(EM_DIAGRAM):   drop _dm12 ;
112595    +   _dm12 = put( M_price , BEST12. );
MPRINT(EM_DIAGRAM):   _dm12 = put( M_price , BEST12. );
112596    +   %DMNORMIP( _dm12 )
MPRINT(DMNORMIP):   call dmnorm(_dm12,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
112597    +   if _dm12 = '0'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 = '0' then do;
112598    +      M_price0 = 1;
MPRINT(EM_DIAGRAM):   M_price0 = 1;
112599    +   end;
MPRINT(EM_DIAGRAM):   end;
112600    +   else if _dm12 = '1'  then do;
MPRINT(EM_DIAGRAM):   else if _dm12 = '1' then do;
112601    +      M_price0 = -1;
MPRINT(EM_DIAGRAM):   M_price0 = -1;
112602    +   end;
MPRINT(EM_DIAGRAM):   end;
112603    +   else do;
MPRINT(EM_DIAGRAM):   else do;
112604    +      M_price0 = .;
MPRINT(EM_DIAGRAM):   M_price0 = .;
112605    +      substr(_warn_,2,1) = 'U';
MPRINT(EM_DIAGRAM):   substr(_warn_,2,1) = 'U';
112606    +      _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
112607    +   end;
MPRINT(EM_DIAGRAM):   end;
112608    +end;
MPRINT(EM_DIAGRAM):   end;
112609    +
112610    +*** Generate dummy variables for M_stroke ;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for M_stroke ;
112611    +drop M_stroke0 ;
MPRINT(EM_DIAGRAM):   drop M_stroke0 ;
112612    +if missing( M_stroke ) then do;
MPRINT(EM_DIAGRAM):   if missing( M_stroke ) then do;
112613    +   M_stroke0 = .;
MPRINT(EM_DIAGRAM):   M_stroke0 = .;
112614    +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
112615    +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
112616    +end;
MPRINT(EM_DIAGRAM):   end;
112617    +else do;
MPRINT(EM_DIAGRAM):   else do;
112618    +   length _dm12 $ 12; drop _dm12 ;
MPRINT(EM_DIAGRAM):   length _dm12 $ 12;
MPRINT(EM_DIAGRAM):   drop _dm12 ;
112619    +   _dm12 = put( M_stroke , BEST12. );
MPRINT(EM_DIAGRAM):   _dm12 = put( M_stroke , BEST12. );
112620    +   %DMNORMIP( _dm12 )
MPRINT(DMNORMIP):   call dmnorm(_dm12,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
112621    +   if _dm12 = '0'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 = '0' then do;
112622    +      M_stroke0 = 1;
MPRINT(EM_DIAGRAM):   M_stroke0 = 1;
112623    +   end;
MPRINT(EM_DIAGRAM):   end;
112624    +   else if _dm12 = '1'  then do;
MPRINT(EM_DIAGRAM):   else if _dm12 = '1' then do;
112625    +      M_stroke0 = -1;
MPRINT(EM_DIAGRAM):   M_stroke0 = -1;
112626    +   end;
MPRINT(EM_DIAGRAM):   end;
112627    +   else do;
MPRINT(EM_DIAGRAM):   else do;
112628    +      M_stroke0 = .;
MPRINT(EM_DIAGRAM):   M_stroke0 = .;
112629    +      substr(_warn_,2,1) = 'U';
MPRINT(EM_DIAGRAM):   substr(_warn_,2,1) = 'U';
112630    +      _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
112631    +   end;
MPRINT(EM_DIAGRAM):   end;
112632    +end;
MPRINT(EM_DIAGRAM):   end;
112633    +
112634    +*** Generate dummy variables for IMP_num_of_doors ;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for IMP_num_of_doors ;
112635    +drop IMP_num_of_doors2 ;
MPRINT(EM_DIAGRAM):   drop IMP_num_of_doors2 ;
112636    +if missing( IMP_num_of_doors ) then do;
MPRINT(EM_DIAGRAM):   if missing( IMP_num_of_doors ) then do;
112637    +   IMP_num_of_doors2 = .;
MPRINT(EM_DIAGRAM):   IMP_num_of_doors2 = .;
112638    +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
112639    +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
112640    +end;
MPRINT(EM_DIAGRAM):   end;
112641    +else do;
MPRINT(EM_DIAGRAM):   else do;
112642    +   length _dm12 $ 12; drop _dm12 ;
MPRINT(EM_DIAGRAM):   length _dm12 $ 12;
MPRINT(EM_DIAGRAM):   drop _dm12 ;
112643    +   _dm12 = put( IMP_num_of_doors , BEST12. );
MPRINT(EM_DIAGRAM):   _dm12 = put( IMP_num_of_doors , BEST12. );
112644    +   %DMNORMIP( _dm12 )
MPRINT(DMNORMIP):   call dmnorm(_dm12,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
112645    +   if _dm12 = '4'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 = '4' then do;
112646    +      IMP_num_of_doors2 = -1;
MPRINT(EM_DIAGRAM):   IMP_num_of_doors2 = -1;
112647    +   end;
MPRINT(EM_DIAGRAM):   end;
112648    +   else if _dm12 = '2'  then do;
MPRINT(EM_DIAGRAM):   else if _dm12 = '2' then do;
112649    +      IMP_num_of_doors2 = 1;
MPRINT(EM_DIAGRAM):   IMP_num_of_doors2 = 1;
112650    +   end;
MPRINT(EM_DIAGRAM):   end;
112651    +   else do;
MPRINT(EM_DIAGRAM):   else do;
112652    +      IMP_num_of_doors2 = .;
MPRINT(EM_DIAGRAM):   IMP_num_of_doors2 = .;
112653    +      substr(_warn_,2,1) = 'U';
MPRINT(EM_DIAGRAM):   substr(_warn_,2,1) = 'U';
112654    +      _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
112655    +   end;
MPRINT(EM_DIAGRAM):   end;
112656    +end;
MPRINT(EM_DIAGRAM):   end;
112657    +
112658    +*** Generate dummy variables for REP_aspiration ;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for REP_aspiration ;
112659    +drop REP_aspirationS ;
MPRINT(EM_DIAGRAM):   drop REP_aspirationS ;
112660    +if missing( REP_aspiration ) then do;
MPRINT(EM_DIAGRAM):   if missing( REP_aspiration ) then do;
112661    +   REP_aspirationS = .;
MPRINT(EM_DIAGRAM):   REP_aspirationS = .;
112662    +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
112663    +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
112664    +end;
MPRINT(EM_DIAGRAM):   end;
112665    +else do;
MPRINT(EM_DIAGRAM):   else do;
112666    +   length _dm5 $ 5; drop _dm5 ;
MPRINT(EM_DIAGRAM):   length _dm5 $ 5;
MPRINT(EM_DIAGRAM):   drop _dm5 ;
112667    +   _dm5 = put( REP_aspiration , $5. );
MPRINT(EM_DIAGRAM):   _dm5 = put( REP_aspiration , $5. );
112668    +   %DMNORMIP( _dm5 )
MPRINT(DMNORMIP):   call dmnorm(_dm5,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
112669    +   if _dm5 = 'S'  then do;
MPRINT(EM_DIAGRAM):   if _dm5 = 'S' then do;
112670    +      REP_aspirationS = 1;
MPRINT(EM_DIAGRAM):   REP_aspirationS = 1;
112671    +   end;
MPRINT(EM_DIAGRAM):   end;
112672    +   else if _dm5 = 'T'  then do;
MPRINT(EM_DIAGRAM):   else if _dm5 = 'T' then do;
112673    +      REP_aspirationS = -1;
MPRINT(EM_DIAGRAM):   REP_aspirationS = -1;
112674    +   end;
MPRINT(EM_DIAGRAM):   end;
112675    +   else do;
MPRINT(EM_DIAGRAM):   else do;
112676    +      REP_aspirationS = .;
MPRINT(EM_DIAGRAM):   REP_aspirationS = .;
112677    +      substr(_warn_,2,1) = 'U';
MPRINT(EM_DIAGRAM):   substr(_warn_,2,1) = 'U';
112678    +      _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
112679    +   end;
MPRINT(EM_DIAGRAM):   end;
112680    +end;
MPRINT(EM_DIAGRAM):   end;
112681    +
112682    +*** Generate dummy variables for REP_body_style ;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for REP_body_style ;
112683    +drop REP_body_styleC REP_body_styleH REP_body_styleS ;
MPRINT(EM_DIAGRAM):   drop REP_body_styleC REP_body_styleH REP_body_styleS ;
112684    +if missing( REP_body_style ) then do;
MPRINT(EM_DIAGRAM):   if missing( REP_body_style ) then do;
112685    +   REP_body_styleC = .;
MPRINT(EM_DIAGRAM):   REP_body_styleC = .;
112686    +   REP_body_styleH = .;
MPRINT(EM_DIAGRAM):   REP_body_styleH = .;
112687    +   REP_body_styleS = .;
MPRINT(EM_DIAGRAM):   REP_body_styleS = .;
112688    +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
112689    +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
112690    +end;
MPRINT(EM_DIAGRAM):   end;
112691    +else do;
MPRINT(EM_DIAGRAM):   else do;
112692    +   length _dm11 $ 11; drop _dm11 ;
MPRINT(EM_DIAGRAM):   length _dm11 $ 11;
MPRINT(EM_DIAGRAM):   drop _dm11 ;
112693    +   %DMNORMCP( REP_body_style , _dm11 )
MPRINT(DMNORMCP):   _dm11=dmnorm(REP_body_style,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMCP):  );
112694    +   if _dm11 = 'S'  then do;
MPRINT(EM_DIAGRAM):   if _dm11 = 'S' then do;
112695    +      REP_body_styleC = 0;
MPRINT(EM_DIAGRAM):   REP_body_styleC = 0;
112696    +      REP_body_styleH = 0;
MPRINT(EM_DIAGRAM):   REP_body_styleH = 0;
112697    +      REP_body_styleS = 1;
MPRINT(EM_DIAGRAM):   REP_body_styleS = 1;
112698    +   end;
MPRINT(EM_DIAGRAM):   end;
112699    +   else if _dm11 = 'H'  then do;
MPRINT(EM_DIAGRAM):   else if _dm11 = 'H' then do;
112700    +      REP_body_styleC = 0;
MPRINT(EM_DIAGRAM):   REP_body_styleC = 0;
112701    +      REP_body_styleH = 1;
MPRINT(EM_DIAGRAM):   REP_body_styleH = 1;
112702    +      REP_body_styleS = 0;
MPRINT(EM_DIAGRAM):   REP_body_styleS = 0;
112703    +   end;
MPRINT(EM_DIAGRAM):   end;
112704    +   else if _dm11 = 'W'  then do;
MPRINT(EM_DIAGRAM):   else if _dm11 = 'W' then do;
112705    +      REP_body_styleC = -1;
MPRINT(EM_DIAGRAM):   REP_body_styleC = -1;
112706    +      REP_body_styleH = -1;
MPRINT(EM_DIAGRAM):   REP_body_styleH = -1;
112707    +      REP_body_styleS = -1;
MPRINT(EM_DIAGRAM):   REP_body_styleS = -1;
112708    +   end;
MPRINT(EM_DIAGRAM):   end;
112709    +   else if _dm11 = 'C'  then do;
MPRINT(EM_DIAGRAM):   else if _dm11 = 'C' then do;
112710    +      REP_body_styleC = 1;
MPRINT(EM_DIAGRAM):   REP_body_styleC = 1;
112711    +      REP_body_styleH = 0;
MPRINT(EM_DIAGRAM):   REP_body_styleH = 0;
112712    +      REP_body_styleS = 0;
MPRINT(EM_DIAGRAM):   REP_body_styleS = 0;
112713    +   end;
MPRINT(EM_DIAGRAM):   end;
112714    +   else do;
MPRINT(EM_DIAGRAM):   else do;
112715    +      REP_body_styleC = .;
MPRINT(EM_DIAGRAM):   REP_body_styleC = .;
112716    +      REP_body_styleH = .;
MPRINT(EM_DIAGRAM):   REP_body_styleH = .;
112717    +      REP_body_styleS = .;
MPRINT(EM_DIAGRAM):   REP_body_styleS = .;
112718    +      substr(_warn_,2,1) = 'U';
MPRINT(EM_DIAGRAM):   substr(_warn_,2,1) = 'U';
112719    +      _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
112720    +   end;
MPRINT(EM_DIAGRAM):   end;
112721    +end;
MPRINT(EM_DIAGRAM):   end;
112722    +
112723    +*** Generate dummy variables for REP_drive_wheels ;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for REP_drive_wheels ;
112724    +drop REP_drive_wheels4 REP_drive_wheelsF ;
MPRINT(EM_DIAGRAM):   drop REP_drive_wheels4 REP_drive_wheelsF ;
112725    +if missing( REP_drive_wheels ) then do;
MPRINT(EM_DIAGRAM):   if missing( REP_drive_wheels ) then do;
112726    +   REP_drive_wheels4 = .;
MPRINT(EM_DIAGRAM):   REP_drive_wheels4 = .;
112727    +   REP_drive_wheelsF = .;
MPRINT(EM_DIAGRAM):   REP_drive_wheelsF = .;
112728    +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
112729    +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
112730    +end;
MPRINT(EM_DIAGRAM):   end;
112731    +else do;
MPRINT(EM_DIAGRAM):   else do;
112732    +   length _dm3 $ 3; drop _dm3 ;
MPRINT(EM_DIAGRAM):   length _dm3 $ 3;
MPRINT(EM_DIAGRAM):   drop _dm3 ;
112733    +   %DMNORMCP( REP_drive_wheels , _dm3 )
MPRINT(DMNORMCP):   _dm3=dmnorm(REP_drive_wheels,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMCP):  );
112734    +   if _dm3 = 'F'  then do;
MPRINT(EM_DIAGRAM):   if _dm3 = 'F' then do;
112735    +      REP_drive_wheels4 = 0;
MPRINT(EM_DIAGRAM):   REP_drive_wheels4 = 0;
112736    +      REP_drive_wheelsF = 1;
MPRINT(EM_DIAGRAM):   REP_drive_wheelsF = 1;
112737    +   end;
MPRINT(EM_DIAGRAM):   end;
112738    +   else if _dm3 = 'R'  then do;
MPRINT(EM_DIAGRAM):   else if _dm3 = 'R' then do;
112739    +      REP_drive_wheels4 = -1;
MPRINT(EM_DIAGRAM):   REP_drive_wheels4 = -1;
112740    +      REP_drive_wheelsF = -1;
MPRINT(EM_DIAGRAM):   REP_drive_wheelsF = -1;
112741    +   end;
MPRINT(EM_DIAGRAM):   end;
112742    +   else if _dm3 = '4'  then do;
MPRINT(EM_DIAGRAM):   else if _dm3 = '4' then do;
112743    +      REP_drive_wheels4 = 1;
MPRINT(EM_DIAGRAM):   REP_drive_wheels4 = 1;
112744    +      REP_drive_wheelsF = 0;
MPRINT(EM_DIAGRAM):   REP_drive_wheelsF = 0;
112745    +   end;
MPRINT(EM_DIAGRAM):   end;
112746    +   else do;
MPRINT(EM_DIAGRAM):   else do;
112747    +      REP_drive_wheels4 = .;
MPRINT(EM_DIAGRAM):   REP_drive_wheels4 = .;
112748    +      REP_drive_wheelsF = .;
MPRINT(EM_DIAGRAM):   REP_drive_wheelsF = .;
112749    +      substr(_warn_,2,1) = 'U';
MPRINT(EM_DIAGRAM):   substr(_warn_,2,1) = 'U';
112750    +      _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
112751    +   end;
MPRINT(EM_DIAGRAM):   end;
112752    +end;
MPRINT(EM_DIAGRAM):   end;
112753    +
112754    +*** Generate dummy variables for REP_engine_location ;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for REP_engine_location ;
112755    +drop REP_engine_locationF ;
MPRINT(EM_DIAGRAM):   drop REP_engine_locationF ;
112756    +if missing( REP_engine_location ) then do;
MPRINT(EM_DIAGRAM):   if missing( REP_engine_location ) then do;
112757    +   REP_engine_locationF = .;
MPRINT(EM_DIAGRAM):   REP_engine_locationF = .;
112758    +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
112759    +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
112760    +end;
MPRINT(EM_DIAGRAM):   end;
112761    +else do;
MPRINT(EM_DIAGRAM):   else do;
112762    +   length _dm5 $ 5; drop _dm5 ;
MPRINT(EM_DIAGRAM):   length _dm5 $ 5;
MPRINT(EM_DIAGRAM):   drop _dm5 ;
112763    +   %DMNORMCP( REP_engine_location , _dm5 )
MPRINT(DMNORMCP):   _dm5=dmnorm(REP_engine_location,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMCP):  );
112764    +   if _dm5 = 'F'  then do;
MPRINT(EM_DIAGRAM):   if _dm5 = 'F' then do;
112765    +      REP_engine_locationF = 1;
MPRINT(EM_DIAGRAM):   REP_engine_locationF = 1;
112766    +   end;
MPRINT(EM_DIAGRAM):   end;
112767    +   else if _dm5 = 'R'  then do;
MPRINT(EM_DIAGRAM):   else if _dm5 = 'R' then do;
112768    +      REP_engine_locationF = -1;
MPRINT(EM_DIAGRAM):   REP_engine_locationF = -1;
112769    +   end;
MPRINT(EM_DIAGRAM):   end;
112770    +   else do;
MPRINT(EM_DIAGRAM):   else do;
112771    +      REP_engine_locationF = .;
MPRINT(EM_DIAGRAM):   REP_engine_locationF = .;
112772    +      substr(_warn_,2,1) = 'U';
MPRINT(EM_DIAGRAM):   substr(_warn_,2,1) = 'U';
112773    +      _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
112774    +   end;
MPRINT(EM_DIAGRAM):   end;
112775    +end;
MPRINT(EM_DIAGRAM):   end;
112776    +
112777    +*** Generate dummy variables for REP_fuel_system ;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for REP_fuel_system ;
112778    +drop REP_fuel_systemnon_spdi ;
MPRINT(EM_DIAGRAM):   drop REP_fuel_systemnon_spdi ;
112779    +if missing( REP_fuel_system ) then do;
MPRINT(EM_DIAGRAM):   if missing( REP_fuel_system ) then do;
112780    +   REP_fuel_systemnon_spdi = .;
MPRINT(EM_DIAGRAM):   REP_fuel_systemnon_spdi = .;
112781    +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
112782    +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
112783    +end;
MPRINT(EM_DIAGRAM):   end;
112784    +else do;
MPRINT(EM_DIAGRAM):   else do;
112785    +   length _dm8 $ 8; drop _dm8 ;
MPRINT(EM_DIAGRAM):   length _dm8 $ 8;
MPRINT(EM_DIAGRAM):   drop _dm8 ;
112786    +   %DMNORMCP( REP_fuel_system , _dm8 )
MPRINT(DMNORMCP):   _dm8=dmnorm(REP_fuel_system,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMCP):  );
112787    +   if _dm8 = 'NON-SPDI'  then do;
MPRINT(EM_DIAGRAM):   if _dm8 = 'NON-SPDI' then do;
112788    +      REP_fuel_systemnon_spdi = 1;
MPRINT(EM_DIAGRAM):   REP_fuel_systemnon_spdi = 1;
112789    +   end;
MPRINT(EM_DIAGRAM):   end;
112790    +   else if _dm8 = 'SPDI'  then do;
MPRINT(EM_DIAGRAM):   else if _dm8 = 'SPDI' then do;
112791    +      REP_fuel_systemnon_spdi = -1;
MPRINT(EM_DIAGRAM):   REP_fuel_systemnon_spdi = -1;
112792    +   end;
MPRINT(EM_DIAGRAM):   end;
112793    +   else do;
MPRINT(EM_DIAGRAM):   else do;
112794    +      REP_fuel_systemnon_spdi = .;
MPRINT(EM_DIAGRAM):   REP_fuel_systemnon_spdi = .;
112795    +      substr(_warn_,2,1) = 'U';
MPRINT(EM_DIAGRAM):   substr(_warn_,2,1) = 'U';
112796    +      _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
112797    +   end;
MPRINT(EM_DIAGRAM):   end;
112798    +end;
MPRINT(EM_DIAGRAM):   end;
112799    +
112800    +*** Generate dummy variables for REP_fuel_type ;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for REP_fuel_type ;
112801    +drop REP_fuel_typeD ;
MPRINT(EM_DIAGRAM):   drop REP_fuel_typeD ;
112802    +if missing( REP_fuel_type ) then do;
MPRINT(EM_DIAGRAM):   if missing( REP_fuel_type ) then do;
112803    +   REP_fuel_typeD = .;
MPRINT(EM_DIAGRAM):   REP_fuel_typeD = .;
112804    +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
112805    +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
112806    +end;
MPRINT(EM_DIAGRAM):   end;
112807    +else do;
MPRINT(EM_DIAGRAM):   else do;
112808    +   length _dm6 $ 6; drop _dm6 ;
MPRINT(EM_DIAGRAM):   length _dm6 $ 6;
MPRINT(EM_DIAGRAM):   drop _dm6 ;
112809    +   %DMNORMCP( REP_fuel_type , _dm6 )
MPRINT(DMNORMCP):   _dm6=dmnorm(REP_fuel_type,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMCP):  );
112810    +   if _dm6 = 'G'  then do;
MPRINT(EM_DIAGRAM):   if _dm6 = 'G' then do;
112811    +      REP_fuel_typeD = -1;
MPRINT(EM_DIAGRAM):   REP_fuel_typeD = -1;
112812    +   end;
MPRINT(EM_DIAGRAM):   end;
112813    +   else if _dm6 = 'D'  then do;
MPRINT(EM_DIAGRAM):   else if _dm6 = 'D' then do;
112814    +      REP_fuel_typeD = 1;
MPRINT(EM_DIAGRAM):   REP_fuel_typeD = 1;
112815    +   end;
MPRINT(EM_DIAGRAM):   end;
112816    +   else do;
MPRINT(EM_DIAGRAM):   else do;
112817    +      REP_fuel_typeD = .;
MPRINT(EM_DIAGRAM):   REP_fuel_typeD = .;
112818    +      substr(_warn_,2,1) = 'U';
MPRINT(EM_DIAGRAM):   substr(_warn_,2,1) = 'U';
112819    +      _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
112820    +   end;
MPRINT(EM_DIAGRAM):   end;
112821    +end;
MPRINT(EM_DIAGRAM):   end;
112822    +
112823    +*** Generate dummy variables for REP_num_of_cylinders ;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for REP_num_of_cylinders ;
112824    +drop REP_num_of_cylinders__4 ;
MPRINT(EM_DIAGRAM):   drop REP_num_of_cylinders__4 ;
112825    +if missing( REP_num_of_cylinders ) then do;
MPRINT(EM_DIAGRAM):   if missing( REP_num_of_cylinders ) then do;
112826    +   REP_num_of_cylinders__4 = .;
MPRINT(EM_DIAGRAM):   REP_num_of_cylinders__4 = .;
112827    +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
112828    +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
112829    +end;
MPRINT(EM_DIAGRAM):   end;
112830    +else do;
MPRINT(EM_DIAGRAM):   else do;
112831    +   length _dm6 $ 6; drop _dm6 ;
MPRINT(EM_DIAGRAM):   length _dm6 $ 6;
MPRINT(EM_DIAGRAM):   drop _dm6 ;
112832    +   %DMNORMCP( REP_num_of_cylinders , _dm6 )
MPRINT(DMNORMCP):   _dm6=dmnorm(REP_num_of_cylinders,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMCP):  );
112833    +   if _dm6 = '<=4'  then do;
MPRINT(EM_DIAGRAM):   if _dm6 = '<=4' then do;
112834    +      REP_num_of_cylinders__4 = 1;
MPRINT(EM_DIAGRAM):   REP_num_of_cylinders__4 = 1;
112835    +   end;
MPRINT(EM_DIAGRAM):   end;
112836    +   else if _dm6 = '>4'  then do;
MPRINT(EM_DIAGRAM):   else if _dm6 = '>4' then do;
112837    +      REP_num_of_cylinders__4 = -1;
MPRINT(EM_DIAGRAM):   REP_num_of_cylinders__4 = -1;
112838    +   end;
MPRINT(EM_DIAGRAM):   end;
112839    +   else do;
MPRINT(EM_DIAGRAM):   else do;
112840    +      REP_num_of_cylinders__4 = .;
MPRINT(EM_DIAGRAM):   REP_num_of_cylinders__4 = .;
112841    +      substr(_warn_,2,1) = 'U';
MPRINT(EM_DIAGRAM):   substr(_warn_,2,1) = 'U';
112842    +      _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
112843    +   end;
MPRINT(EM_DIAGRAM):   end;
112844    +end;
MPRINT(EM_DIAGRAM):   end;
112845    +
112846    +*** Generate dummy variables for engine_type ;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for engine_type ;
112847    +drop engine_typedohc engine_typel engine_typeohc engine_typeohcf
112848    +        engine_typeohcv ;
MPRINT(EM_DIAGRAM):   drop engine_typedohc engine_typel engine_typeohc engine_typeohcf 
engine_typeohcv ;
112849    +*** encoding is sparse, initialize to zero;
MPRINT(EM_DIAGRAM):   *** encoding is sparse, initialize to zero;
112850    +engine_typedohc = 0;
MPRINT(EM_DIAGRAM):   engine_typedohc = 0;
112851    +engine_typel = 0;
MPRINT(EM_DIAGRAM):   engine_typel = 0;
112852    +engine_typeohc = 0;
MPRINT(EM_DIAGRAM):   engine_typeohc = 0;
112853    +engine_typeohcf = 0;
MPRINT(EM_DIAGRAM):   engine_typeohcf = 0;
112854    +engine_typeohcv = 0;
MPRINT(EM_DIAGRAM):   engine_typeohcv = 0;
112855    +if missing( engine_type ) then do;
MPRINT(EM_DIAGRAM):   if missing( engine_type ) then do;
112856    +   engine_typedohc = .;
MPRINT(EM_DIAGRAM):   engine_typedohc = .;
112857    +   engine_typel = .;
MPRINT(EM_DIAGRAM):   engine_typel = .;
112858    +   engine_typeohc = .;
MPRINT(EM_DIAGRAM):   engine_typeohc = .;
112859    +   engine_typeohcf = .;
MPRINT(EM_DIAGRAM):   engine_typeohcf = .;
112860    +   engine_typeohcv = .;
MPRINT(EM_DIAGRAM):   engine_typeohcv = .;
112861    +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
112862    +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
112863    +end;
MPRINT(EM_DIAGRAM):   end;
112864    +else do;
MPRINT(EM_DIAGRAM):   else do;
112865    +   length _dm5 $ 5; drop _dm5 ;
MPRINT(EM_DIAGRAM):   length _dm5 $ 5;
MPRINT(EM_DIAGRAM):   drop _dm5 ;
112866    +   %DMNORMCP( engine_type , _dm5 )
MPRINT(DMNORMCP):   _dm5=dmnorm(engine_type,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMCP):  );
112867    +   if _dm5 = 'OHC'  then do;
MPRINT(EM_DIAGRAM):   if _dm5 = 'OHC' then do;
112868    +      engine_typeohc = 1;
MPRINT(EM_DIAGRAM):   engine_typeohc = 1;
112869    +   end;
MPRINT(EM_DIAGRAM):   end;
112870    +   else if _dm5 = 'OHCF'  then do;
MPRINT(EM_DIAGRAM):   else if _dm5 = 'OHCF' then do;
112871    +      engine_typeohcf = 1;
MPRINT(EM_DIAGRAM):   engine_typeohcf = 1;
112872    +   end;
MPRINT(EM_DIAGRAM):   end;
112873    +   else if _dm5 = 'OHCV'  then do;
MPRINT(EM_DIAGRAM):   else if _dm5 = 'OHCV' then do;
112874    +      engine_typeohcv = 1;
MPRINT(EM_DIAGRAM):   engine_typeohcv = 1;
112875    +   end;
MPRINT(EM_DIAGRAM):   end;
112876    +   else if _dm5 = 'DOHC'  then do;
MPRINT(EM_DIAGRAM):   else if _dm5 = 'DOHC' then do;
112877    +      engine_typedohc = 1;
MPRINT(EM_DIAGRAM):   engine_typedohc = 1;
112878    +   end;
MPRINT(EM_DIAGRAM):   end;
112879    +   else if _dm5 = 'L'  then do;
MPRINT(EM_DIAGRAM):   else if _dm5 = 'L' then do;
112880    +      engine_typel = 1;
MPRINT(EM_DIAGRAM):   engine_typel = 1;
112881    +   end;
MPRINT(EM_DIAGRAM):   end;
112882    +   else if _dm5 = 'ROTOR'  then do;
MPRINT(EM_DIAGRAM):   else if _dm5 = 'ROTOR' then do;
112883    +      engine_typedohc = -1;
MPRINT(EM_DIAGRAM):   engine_typedohc = -1;
112884    +      engine_typel = -1;
MPRINT(EM_DIAGRAM):   engine_typel = -1;
112885    +      engine_typeohc = -1;
MPRINT(EM_DIAGRAM):   engine_typeohc = -1;
112886    +      engine_typeohcf = -1;
MPRINT(EM_DIAGRAM):   engine_typeohcf = -1;
112887    +      engine_typeohcv = -1;
MPRINT(EM_DIAGRAM):   engine_typeohcv = -1;
112888    +   end;
MPRINT(EM_DIAGRAM):   end;
112889    +   else do;
MPRINT(EM_DIAGRAM):   else do;
112890    +      engine_typedohc = .;
MPRINT(EM_DIAGRAM):   engine_typedohc = .;
112891    +      engine_typel = .;
MPRINT(EM_DIAGRAM):   engine_typel = .;
112892    +      engine_typeohc = .;
MPRINT(EM_DIAGRAM):   engine_typeohc = .;
112893    +      engine_typeohcf = .;
MPRINT(EM_DIAGRAM):   engine_typeohcf = .;
112894    +      engine_typeohcv = .;
MPRINT(EM_DIAGRAM):   engine_typeohcv = .;
112895    +      substr(_warn_,2,1) = 'U';
MPRINT(EM_DIAGRAM):   substr(_warn_,2,1) = 'U';
112896    +      _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
112897    +   end;
MPRINT(EM_DIAGRAM):   end;
112898    +end;
MPRINT(EM_DIAGRAM):   end;
112899    +
112900    +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
112901    +*** Checking missing input Interval
112902    +*** *************************;
MPRINT(EM_DIAGRAM):   *** Checking missing input Interval *** *************************;
112903    +
112904    +IF NMISS(
112905    +   LOG_REP_IMP_price ,
112906    +   LOG_REP_compression_ratio ,
112907    +   LOG_REP_engine_size ,
112908    +   REP_IMP_bore ,
112909    +   REP_IMP_stroke ,
112910    +   REP_city_mpg ,
112911    +   REP_curb_weight ,
112912    +   REP_height ,
112913    +   REP_highway_mpg ,
112914    +   REP_horsepower ,
112915    +   REP_length ,
112916    +   REP_peak_rpm ,
112917    +   REP_wheel_base ,
112918    +   REP_width   ) THEN DO;
MPRINT(EM_DIAGRAM):   IF NMISS( LOG_REP_IMP_price , LOG_REP_compression_ratio , 
LOG_REP_engine_size , REP_IMP_bore , REP_IMP_stroke , REP_city_mpg , REP_curb_weight , 
REP_height , REP_highway_mpg , REP_horsepower , REP_length , REP_peak_rpm , REP_wheel_base , 
REP_width ) THEN DO;
112919    +   SUBSTR(_WARN_, 1, 1) = 'M';
MPRINT(EM_DIAGRAM):   SUBSTR(_WARN_, 1, 1) = 'M';
112920    +
112921    +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
112922    +END;
MPRINT(EM_DIAGRAM):   END;
112923    +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
112924    +*** Writing the Node intvl ;
MPRINT(EM_DIAGRAM):   *** Writing the Node intvl ;
112925    +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
112926    +IF _DM_BAD EQ 0 THEN DO;
MPRINT(EM_DIAGRAM):   IF _DM_BAD EQ 0 THEN DO;
112927    +   S_LOG_REP_IMP_price  =    -20.2356185469493 +     2.16855745948401 *
112928    +        LOG_REP_IMP_price ;
MPRINT(EM_DIAGRAM):   S_LOG_REP_IMP_price = -20.2356185469493 + 2.16855745948401 * 
LOG_REP_IMP_price ;
112929    +   S_LOG_REP_compression_ratio
112930    +          =    -8.72649819321039 +     3.65742873950677 *
112931    +        LOG_REP_compression_ratio ;
MPRINT(EM_DIAGRAM):   S_LOG_REP_compression_ratio = -8.72649819321039 + 3.65742873950677 * 
LOG_REP_compression_ratio ;
112932    +   S_LOG_REP_engine_size  =    -19.3053254119757 +     4.02929302984948 *
112933    +        LOG_REP_engine_size ;
MPRINT(EM_DIAGRAM):   S_LOG_REP_engine_size = -19.3053254119757 + 4.02929302984948 * 
LOG_REP_engine_size ;
112934    +   S_REP_IMP_bore  =    -13.3604302656684 +     4.04536293034574 *
112935    +        REP_IMP_bore ;
MPRINT(EM_DIAGRAM):   S_REP_IMP_bore = -13.3604302656684 + 4.04536293034574 * REP_IMP_bore ;
112936    +   S_REP_IMP_stroke  =    -11.3205669287077 +     3.47855217496738 *
112937    +        REP_IMP_stroke ;
MPRINT(EM_DIAGRAM):   S_REP_IMP_stroke = -11.3205669287077 + 3.47855217496738 * REP_IMP_stroke 
;
112938    +   S_REP_city_mpg  =    -4.23279255832632 +     0.16535248553422 *
112939    +        REP_city_mpg ;
MPRINT(EM_DIAGRAM):   S_REP_city_mpg = -4.23279255832632 + 0.16535248553422 * REP_city_mpg ;
112940    +   S_REP_curb_weight  =    -5.35597047742979 +     0.00212869810672 *
112941    +        REP_curb_weight ;
MPRINT(EM_DIAGRAM):   S_REP_curb_weight = -5.35597047742979 + 0.00212869810672 * 
REP_curb_weight ;
112942    +   S_REP_height  =    -21.8926608140893 +     0.40589318675657 * REP_height ;
MPRINT(EM_DIAGRAM):   S_REP_height = -21.8926608140893 + 0.40589318675657 * REP_height ;
112943    +   S_REP_highway_mpg  =    -4.99166764925563 +     0.16020006928199 *
112944    +        REP_highway_mpg ;
MPRINT(EM_DIAGRAM):   S_REP_highway_mpg = -4.99166764925563 + 0.16020006928199 * 
REP_highway_mpg ;
112945    +   S_REP_horsepower  =    -2.74643097264309 +     0.02734944206973 *
112946    +        REP_horsepower ;
MPRINT(EM_DIAGRAM):   S_REP_horsepower = -2.74643097264309 + 0.02734944206973 * REP_horsepower 
;
112947    +   S_REP_length  =    -15.2378498365576 +     0.08781104037663 * REP_length ;
MPRINT(EM_DIAGRAM):   S_REP_length = -15.2378498365576 + 0.08781104037663 * REP_length ;
112948    +   S_REP_peak_rpm  =    -10.6885709541859 +     0.00208333904184 *
112949    +        REP_peak_rpm ;
MPRINT(EM_DIAGRAM):   S_REP_peak_rpm = -10.6885709541859 + 0.00208333904184 * REP_peak_rpm ;
112950    +   S_REP_wheel_base  =    -17.8009087180129 +     0.18059887504832 *
112951    +        REP_wheel_base ;
MPRINT(EM_DIAGRAM):   S_REP_wheel_base = -17.8009087180129 + 0.18059887504832 * REP_wheel_base 
;
112952    +   S_REP_width  =    -35.9167499004784 +     0.54673628301566 * REP_width ;
MPRINT(EM_DIAGRAM):   S_REP_width = -35.9167499004784 + 0.54673628301566 * REP_width ;
112953    +END;
MPRINT(EM_DIAGRAM):   END;
112954    +ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
112955    +   IF MISSING( LOG_REP_IMP_price ) THEN S_LOG_REP_IMP_price  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( LOG_REP_IMP_price ) THEN S_LOG_REP_IMP_price = . ;
112956    +   ELSE S_LOG_REP_IMP_price  =    -20.2356185469493 +     2.16855745948401 *
112957    +        LOG_REP_IMP_price ;
MPRINT(EM_DIAGRAM):   ELSE S_LOG_REP_IMP_price = -20.2356185469493 + 2.16855745948401 * 
LOG_REP_IMP_price ;
112958    +   IF MISSING( LOG_REP_compression_ratio ) THEN S_LOG_REP_compression_ratio
112959    +          = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( LOG_REP_compression_ratio ) THEN S_LOG_REP_compression_ratio 
= . ;
112960    +   ELSE S_LOG_REP_compression_ratio
112961    +          =    -8.72649819321039 +     3.65742873950677 *
112962    +        LOG_REP_compression_ratio ;
MPRINT(EM_DIAGRAM):   ELSE S_LOG_REP_compression_ratio = -8.72649819321039 + 3.65742873950677 
* LOG_REP_compression_ratio ;
112963    +   IF MISSING( LOG_REP_engine_size ) THEN S_LOG_REP_engine_size  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( LOG_REP_engine_size ) THEN S_LOG_REP_engine_size = . ;
112964    +   ELSE S_LOG_REP_engine_size
112965    +          =    -19.3053254119757 +     4.02929302984948 * LOG_REP_engine_size
112966    +         ;
MPRINT(EM_DIAGRAM):   ELSE S_LOG_REP_engine_size = -19.3053254119757 + 4.02929302984948 * 
LOG_REP_engine_size ;
112967    +   IF MISSING( REP_IMP_bore ) THEN S_REP_IMP_bore  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( REP_IMP_bore ) THEN S_REP_IMP_bore = . ;
112968    +   ELSE S_REP_IMP_bore  =    -13.3604302656684 +     4.04536293034574 *
112969    +        REP_IMP_bore ;
MPRINT(EM_DIAGRAM):   ELSE S_REP_IMP_bore = -13.3604302656684 + 4.04536293034574 * 
REP_IMP_bore ;
112970    +   IF MISSING( REP_IMP_stroke ) THEN S_REP_IMP_stroke  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( REP_IMP_stroke ) THEN S_REP_IMP_stroke = . ;
112971    +   ELSE S_REP_IMP_stroke  =    -11.3205669287077 +     3.47855217496738 *
112972    +        REP_IMP_stroke ;
MPRINT(EM_DIAGRAM):   ELSE S_REP_IMP_stroke = -11.3205669287077 + 3.47855217496738 * 
REP_IMP_stroke ;
112973    +   IF MISSING( REP_city_mpg ) THEN S_REP_city_mpg  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( REP_city_mpg ) THEN S_REP_city_mpg = . ;
112974    +   ELSE S_REP_city_mpg  =    -4.23279255832632 +     0.16535248553422 *
112975    +        REP_city_mpg ;
MPRINT(EM_DIAGRAM):   ELSE S_REP_city_mpg = -4.23279255832632 + 0.16535248553422 * 
REP_city_mpg ;
112976    +   IF MISSING( REP_curb_weight ) THEN S_REP_curb_weight  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( REP_curb_weight ) THEN S_REP_curb_weight = . ;
112977    +   ELSE S_REP_curb_weight  =    -5.35597047742979 +     0.00212869810672 *
112978    +        REP_curb_weight ;
MPRINT(EM_DIAGRAM):   ELSE S_REP_curb_weight = -5.35597047742979 + 0.00212869810672 * 
REP_curb_weight ;
112979    +   IF MISSING( REP_height ) THEN S_REP_height  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( REP_height ) THEN S_REP_height = . ;
112980    +   ELSE S_REP_height  =    -21.8926608140893 +     0.40589318675657 *
112981    +        REP_height ;
MPRINT(EM_DIAGRAM):   ELSE S_REP_height = -21.8926608140893 + 0.40589318675657 * REP_height ;
112982    +   IF MISSING( REP_highway_mpg ) THEN S_REP_highway_mpg  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( REP_highway_mpg ) THEN S_REP_highway_mpg = . ;
112983    +   ELSE S_REP_highway_mpg  =    -4.99166764925563 +     0.16020006928199 *
112984    +        REP_highway_mpg ;
MPRINT(EM_DIAGRAM):   ELSE S_REP_highway_mpg = -4.99166764925563 + 0.16020006928199 * 
REP_highway_mpg ;
112985    +   IF MISSING( REP_horsepower ) THEN S_REP_horsepower  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( REP_horsepower ) THEN S_REP_horsepower = . ;
112986    +   ELSE S_REP_horsepower  =    -2.74643097264309 +     0.02734944206973 *
112987    +        REP_horsepower ;
MPRINT(EM_DIAGRAM):   ELSE S_REP_horsepower = -2.74643097264309 + 0.02734944206973 * 
REP_horsepower ;
112988    +   IF MISSING( REP_length ) THEN S_REP_length  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( REP_length ) THEN S_REP_length = . ;
112989    +   ELSE S_REP_length  =    -15.2378498365576 +     0.08781104037663 *
112990    +        REP_length ;
MPRINT(EM_DIAGRAM):   ELSE S_REP_length = -15.2378498365576 + 0.08781104037663 * REP_length ;
112991    +   IF MISSING( REP_peak_rpm ) THEN S_REP_peak_rpm  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( REP_peak_rpm ) THEN S_REP_peak_rpm = . ;
112992    +   ELSE S_REP_peak_rpm  =    -10.6885709541859 +     0.00208333904184 *
112993    +        REP_peak_rpm ;
MPRINT(EM_DIAGRAM):   ELSE S_REP_peak_rpm = -10.6885709541859 + 0.00208333904184 * 
REP_peak_rpm ;
112994    +   IF MISSING( REP_wheel_base ) THEN S_REP_wheel_base  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( REP_wheel_base ) THEN S_REP_wheel_base = . ;
112995    +   ELSE S_REP_wheel_base  =    -17.8009087180129 +     0.18059887504832 *
112996    +        REP_wheel_base ;
MPRINT(EM_DIAGRAM):   ELSE S_REP_wheel_base = -17.8009087180129 + 0.18059887504832 * 
REP_wheel_base ;
112997    +   IF MISSING( REP_width ) THEN S_REP_width  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( REP_width ) THEN S_REP_width = . ;
112998    +   ELSE S_REP_width  =    -35.9167499004784 +     0.54673628301566 * REP_width
112999    +         ;
MPRINT(EM_DIAGRAM):   ELSE S_REP_width = -35.9167499004784 + 0.54673628301566 * REP_width ;
113000    +END;
MPRINT(EM_DIAGRAM):   END;
113001    +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
113002    +*** Writing the Node bin ;
MPRINT(EM_DIAGRAM):   *** Writing the Node bin ;
113003    +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
113004    +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
113005    +*** Writing the Node nom ;
MPRINT(EM_DIAGRAM):   *** Writing the Node nom ;
113006    +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
113007    +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
113008    +*** Writing the Node H1 ;
MPRINT(EM_DIAGRAM):   *** Writing the Node H1 ;
113009    +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
113010    +IF _DM_BAD EQ 0 THEN DO;
MPRINT(EM_DIAGRAM):   IF _DM_BAD EQ 0 THEN DO;
113011    +   H11  =    -0.05945014320178 * S_LOG_REP_IMP_price
113012    +          +     0.23028408042981 * S_LOG_REP_compression_ratio
113013    +          +    -0.55947033299445 * S_LOG_REP_engine_size
113014    +          +    -0.14523273532281 * S_REP_IMP_bore  +     0.33601025614724 *
113015    +        S_REP_IMP_stroke  +    -0.88654773082892 * S_REP_city_mpg
113016    +          +    -0.51801568326425 * S_REP_curb_weight
113017    +          +    -0.05802738940523 * S_REP_height  +    -0.03810113319956 *
113018    +        S_REP_highway_mpg  +     0.03924459552049 * S_REP_horsepower
113019    +          +     0.21002997468069 * S_REP_length  +     0.61749212318384 *
113020    +        S_REP_peak_rpm  +    -1.16690362615029 * S_REP_wheel_base
113021    +          +     0.56523113334313 * S_REP_width ;
MPRINT(EM_DIAGRAM):   H11 = -0.05945014320178 * S_LOG_REP_IMP_price + 0.23028408042981 * 
S_LOG_REP_compression_ratio + -0.55947033299445 * S_LOG_REP_engine_size + -0.14523273532281 * 
S_REP_IMP_bore + 0.33601025614724 * S_REP_IMP_stroke + -0.88654773082892 * S_REP_city_mpg + 
-0.51801568326425 * S_REP_curb_weight + -0.05802738940523 * S_REP_height + -0.03810113319956 * 
S_REP_highway_mpg + 0.03924459552049 * S_REP_horsepower + 0.21002997468069 * S_REP_length + 
0.61749212318384 * S_REP_peak_rpm + -1.16690362615029 * S_REP_wheel_base + 0.56523113334313 * 
S_REP_width ;
113022    +   H12  =    -0.04519390964671 * S_LOG_REP_IMP_price
113023    +          +     0.20636780304144 * S_LOG_REP_compression_ratio
113024    +          +     0.38610029587113 * S_LOG_REP_engine_size
113025    +          +     0.02122891644848 * S_REP_IMP_bore  +     0.72819142903819 *
113026    +        S_REP_IMP_stroke  +     0.45607954634849 * S_REP_city_mpg
113027    +          +     0.39788671190423 * S_REP_curb_weight
113028    +          +     0.58866221273788 * S_REP_height  +     -0.2991223373507 *
113029    +        S_REP_highway_mpg  +    -0.14997208033764 * S_REP_horsepower
113030    +          +     0.19770445044787 * S_REP_length  +     1.03487555197917 *
113031    +        S_REP_peak_rpm  +     0.37505053462771 * S_REP_wheel_base
113032    +          +    -0.36159431110716 * S_REP_width ;
MPRINT(EM_DIAGRAM):   H12 = -0.04519390964671 * S_LOG_REP_IMP_price + 0.20636780304144 * 
S_LOG_REP_compression_ratio + 0.38610029587113 * S_LOG_REP_engine_size + 0.02122891644848 * 
S_REP_IMP_bore + 0.72819142903819 * S_REP_IMP_stroke + 0.45607954634849 * S_REP_city_mpg + 
0.39788671190423 * S_REP_curb_weight + 0.58866221273788 * S_REP_height + -0.2991223373507 * 
S_REP_highway_mpg + -0.14997208033764 * S_REP_horsepower + 0.19770445044787 * S_REP_length + 
1.03487555197917 * S_REP_peak_rpm + 0.37505053462771 * S_REP_wheel_base + -0.36159431110716 * 
S_REP_width ;
113033    +   H11  = H11  +    -0.40247462393464 * M_bore0  +    -0.25246866470873 *
113034    +        M_num_of_doors0  +     0.29358262174114 * M_price0
113035    +          +    -0.35755285679311 * M_stroke0 ;
MPRINT(EM_DIAGRAM):   H11 = H11 + -0.40247462393464 * M_bore0 + -0.25246866470873 * 
M_num_of_doors0 + 0.29358262174114 * M_price0 + -0.35755285679311 * M_stroke0 ;
113036    +   H12  = H12  +     0.08024821292732 * M_bore0  +    -0.06359251950002 *
113037    +        M_num_of_doors0  +    -0.40464698886501 * M_price0
113038    +          +    -0.13913068986552 * M_stroke0 ;
MPRINT(EM_DIAGRAM):   H12 = H12 + 0.08024821292732 * M_bore0 + -0.06359251950002 * 
M_num_of_doors0 + -0.40464698886501 * M_price0 + -0.13913068986552 * M_stroke0 ;
113039    +   H11  = H11  +     1.06135788272891 * IMP_num_of_doors2
113040    +          +    -0.14271127694006 * REP_aspirationS  +     0.36486615758056 *
113041    +        REP_body_styleC  +     0.16638919064823 * REP_body_styleH
113042    +          +    -0.20034443648902 * REP_body_styleS  +     0.24076662872441 *
113043    +        REP_drive_wheels4  +     0.26823357856593 * REP_drive_wheelsF
113044    +          +     0.01216030599789 * REP_engine_locationF
113045    +          +    -0.20794679840242 * REP_fuel_systemnon_spdi
113046    +          +    -0.14424463363172 * REP_fuel_typeD  +     0.27719722840907 *
113047    +        REP_num_of_cylinders__4  +      0.4631346933705 * engine_typedohc
113048    +          +    -0.00348674456935 * engine_typel  +    -0.09101365786253 *
113049    +        engine_typeohc  +    -0.60243729714628 * engine_typeohcf
113050    +          +     0.00552330628134 * engine_typeohcv ;
MPRINT(EM_DIAGRAM):   H11 = H11 + 1.06135788272891 * IMP_num_of_doors2 + -0.14271127694006 * 
REP_aspirationS + 0.36486615758056 * REP_body_styleC + 0.16638919064823 * REP_body_styleH + 
-0.20034443648902 * REP_body_styleS + 0.24076662872441 * REP_drive_wheels4 + 0.26823357856593 
* REP_drive_wheelsF + 0.01216030599789 * REP_engine_locationF + -0.20794679840242 * 
REP_fuel_systemnon_spdi + -0.14424463363172 * REP_fuel_typeD + 0.27719722840907 * 
REP_num_of_cylinders__4 + 0.4631346933705 * engine_typedohc + -0.00348674456935 * engine_typel 
+ -0.09101365786253 * engine_typeohc + -0.60243729714628 * engine_typeohcf + 0.00552330628134 
* engine_typeohcv ;
113051    +   H12  = H12  +    -0.26520980153166 * IMP_num_of_doors2
113052    +          +    -0.23036271899934 * REP_aspirationS  +    -0.11289541849347 *
113053    +        REP_body_styleC  +     0.29085726156181 * REP_body_styleH
113054    +          +    -0.40563301302664 * REP_body_styleS  +    -0.15690978888542 *
113055    +        REP_drive_wheels4  +    -0.04649324093232 * REP_drive_wheelsF
113056    +          +     0.19888563265162 * REP_engine_locationF
113057    +          +     0.14250615398431 * REP_fuel_systemnon_spdi
113058    +          +     0.20472143332967 * REP_fuel_typeD  +     0.22871373636412 *
113059    +        REP_num_of_cylinders__4  +     0.09726112642423 * engine_typedohc
113060    +          +    -0.06367563895304 * engine_typel  +    -0.10610223785692 *
113061    +        engine_typeohc  +     0.31078965445942 * engine_typeohcf
113062    +          +     -0.0252088697624 * engine_typeohcv ;
MPRINT(EM_DIAGRAM):   H12 = H12 + -0.26520980153166 * IMP_num_of_doors2 + -0.23036271899934 * 
REP_aspirationS + -0.11289541849347 * REP_body_styleC + 0.29085726156181 * REP_body_styleH + 
-0.40563301302664 * REP_body_styleS + -0.15690978888542 * REP_drive_wheels4 + 
-0.04649324093232 * REP_drive_wheelsF + 0.19888563265162 * REP_engine_locationF + 
0.14250615398431 * REP_fuel_systemnon_spdi + 0.20472143332967 * REP_fuel_typeD + 
0.22871373636412 * REP_num_of_cylinders__4 + 0.09726112642423 * engine_typedohc + 
-0.06367563895304 * engine_typel + -0.10610223785692 * engine_typeohc + 0.31078965445942 * 
engine_typeohcf + -0.0252088697624 * engine_typeohcv ;
113063    +   H11  =     1.38027470319246 + H11 ;
MPRINT(EM_DIAGRAM):   H11 = 1.38027470319246 + H11 ;
113064    +   H12  =    -0.62757281657758 + H12 ;
MPRINT(EM_DIAGRAM):   H12 = -0.62757281657758 + H12 ;
113065    +   H11  = TANH(H11 );
MPRINT(EM_DIAGRAM):   H11 = TANH(H11 );
113066    +   H12  = TANH(H12 );
MPRINT(EM_DIAGRAM):   H12 = TANH(H12 );
113067    +END;
MPRINT(EM_DIAGRAM):   END;
113068    +ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
113069    +   H11  = .;
MPRINT(EM_DIAGRAM):   H11 = .;
113070    +   H12  = .;
MPRINT(EM_DIAGRAM):   H12 = .;
113071    +END;
MPRINT(EM_DIAGRAM):   END;
113072    +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
113073    +*** Writing the Node Risk ;
MPRINT(EM_DIAGRAM):   *** Writing the Node Risk ;
113074    +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
113075    +
113076    +*** Generate dummy variables for Risk ;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for Risk ;
113077    +drop Risk1 Risk0 ;
MPRINT(EM_DIAGRAM):   drop Risk1 Risk0 ;
113078    +label F_Risk = 'From: Risk' ;
MPRINT(EM_DIAGRAM):   label F_Risk = 'From: Risk' ;
113079    +length F_Risk $ 12;
MPRINT(EM_DIAGRAM):   length F_Risk $ 12;
113080    +F_Risk = put( Risk , BEST12. );
MPRINT(EM_DIAGRAM):   F_Risk = put( Risk , BEST12. );
113081    +%DMNORMIP( F_Risk )
MPRINT(DMNORMIP):   call dmnorm(F_Risk,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
113082    +if missing( Risk ) then do;
MPRINT(EM_DIAGRAM):   if missing( Risk ) then do;
113083    +   Risk1 = .;
MPRINT(EM_DIAGRAM):   Risk1 = .;
113084    +   Risk0 = .;
MPRINT(EM_DIAGRAM):   Risk0 = .;
113085    +end;
MPRINT(EM_DIAGRAM):   end;
113086    +else do;
MPRINT(EM_DIAGRAM):   else do;
113087    +   if F_Risk = '1'  then do;
MPRINT(EM_DIAGRAM):   if F_Risk = '1' then do;
113088    +      Risk1 = 1;
MPRINT(EM_DIAGRAM):   Risk1 = 1;
113089    +      Risk0 = 0;
MPRINT(EM_DIAGRAM):   Risk0 = 0;
113090    +   end;
MPRINT(EM_DIAGRAM):   end;
113091    +   else if F_Risk = '0'  then do;
MPRINT(EM_DIAGRAM):   else if F_Risk = '0' then do;
113092    +      Risk1 = 0;
MPRINT(EM_DIAGRAM):   Risk1 = 0;
113093    +      Risk0 = 1;
MPRINT(EM_DIAGRAM):   Risk0 = 1;
113094    +   end;
MPRINT(EM_DIAGRAM):   end;
113095    +   else do;
MPRINT(EM_DIAGRAM):   else do;
113096    +      Risk1 = .;
MPRINT(EM_DIAGRAM):   Risk1 = .;
113097    +      Risk0 = .;
MPRINT(EM_DIAGRAM):   Risk0 = .;
113098    +   end;
MPRINT(EM_DIAGRAM):   end;
113099    +end;
MPRINT(EM_DIAGRAM):   end;
113100    +IF _DM_BAD EQ 0 THEN DO;
MPRINT(EM_DIAGRAM):   IF _DM_BAD EQ 0 THEN DO;
113101    +   P_Risk1  =     2.97301617245243 * H11  +    -2.28437588370032 * H12 ;
MPRINT(EM_DIAGRAM):   P_Risk1 = 2.97301617245243 * H11 + -2.28437588370032 * H12 ;
113102    +   P_Risk1  =     -1.3124328498497 + P_Risk1 ;
MPRINT(EM_DIAGRAM):   P_Risk1 = -1.3124328498497 + P_Risk1 ;
113103    +   P_Risk0  = 0;
MPRINT(EM_DIAGRAM):   P_Risk0 = 0;
113104    +   _MAX_ = MAX (P_Risk1 , P_Risk0 );
MPRINT(EM_DIAGRAM):   _MAX_ = MAX (P_Risk1 , P_Risk0 );
113105    +   _SUM_ = 0.;
MPRINT(EM_DIAGRAM):   _SUM_ = 0.;
113106    +   P_Risk1  = EXP(P_Risk1  - _MAX_);
MPRINT(EM_DIAGRAM):   P_Risk1 = EXP(P_Risk1 - _MAX_);
113107    +   _SUM_ = _SUM_ + P_Risk1 ;
MPRINT(EM_DIAGRAM):   _SUM_ = _SUM_ + P_Risk1 ;
113108    +   P_Risk0  = EXP(P_Risk0  - _MAX_);
MPRINT(EM_DIAGRAM):   P_Risk0 = EXP(P_Risk0 - _MAX_);
113109    +   _SUM_ = _SUM_ + P_Risk0 ;
MPRINT(EM_DIAGRAM):   _SUM_ = _SUM_ + P_Risk0 ;
113110    +   P_Risk1  = P_Risk1  / _SUM_;
MPRINT(EM_DIAGRAM):   P_Risk1 = P_Risk1 / _SUM_;
113111    +   P_Risk0  = P_Risk0  / _SUM_;
MPRINT(EM_DIAGRAM):   P_Risk0 = P_Risk0 / _SUM_;
113112    +END;
MPRINT(EM_DIAGRAM):   END;
113113    +ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
113114    +   P_Risk1  = .;
MPRINT(EM_DIAGRAM):   P_Risk1 = .;
113115    +   P_Risk0  = .;
MPRINT(EM_DIAGRAM):   P_Risk0 = .;
113116    +END;
MPRINT(EM_DIAGRAM):   END;
113117    +IF _DM_BAD EQ 1 THEN DO;
MPRINT(EM_DIAGRAM):   IF _DM_BAD EQ 1 THEN DO;
113118    +   P_Risk1  =                 0.54;
MPRINT(EM_DIAGRAM):   P_Risk1 = 0.54;
113119    +   P_Risk0  =                 0.46;
MPRINT(EM_DIAGRAM):   P_Risk0 = 0.46;
113120    +END;
MPRINT(EM_DIAGRAM):   END;
113121    +*** *****************************;
MPRINT(EM_DIAGRAM):   *** *****************************;
113122    +*** Writing the Residuals  of the Node Risk ;
MPRINT(EM_DIAGRAM):   *** Writing the Residuals of the Node Risk ;
113123    +*** ******************************;
MPRINT(EM_DIAGRAM):   *** ******************************;
113124    +IF MISSING( Risk1 ) THEN R_Risk1  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( Risk1 ) THEN R_Risk1 = . ;
113125    +ELSE R_Risk1  = Risk1  - P_Risk1 ;
MPRINT(EM_DIAGRAM):   ELSE R_Risk1 = Risk1 - P_Risk1 ;
113126    +IF MISSING( Risk0 ) THEN R_Risk0  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( Risk0 ) THEN R_Risk0 = . ;
113127    +ELSE R_Risk0  = Risk0  - P_Risk0 ;
MPRINT(EM_DIAGRAM):   ELSE R_Risk0 = Risk0 - P_Risk0 ;
113128    +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
113129    +*** Writing the I_Risk  AND U_Risk ;
MPRINT(EM_DIAGRAM):   *** Writing the I_Risk AND U_Risk ;
113130    +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
113131    +_MAXP_ = P_Risk1 ;
MPRINT(EM_DIAGRAM):   _MAXP_ = P_Risk1 ;
113132    +I_Risk  = "1           " ;
MPRINT(EM_DIAGRAM):   I_Risk = "1           " ;
113133    +U_Risk  =                    1;
MPRINT(EM_DIAGRAM):   U_Risk = 1;
113134    +IF( _MAXP_ LT P_Risk0  ) THEN DO;
MPRINT(EM_DIAGRAM):   IF( _MAXP_ LT P_Risk0 ) THEN DO;
113135    +   _MAXP_ = P_Risk0 ;
MPRINT(EM_DIAGRAM):   _MAXP_ = P_Risk0 ;
113136    +   I_Risk  = "0           " ;
MPRINT(EM_DIAGRAM):   I_Risk = "0           " ;
113137    +   U_Risk  =                    0;
MPRINT(EM_DIAGRAM):   U_Risk = 0;
113138    +END;
MPRINT(EM_DIAGRAM):   END;
113139    +********************************;
MPRINT(EM_DIAGRAM):   ********************************;
113140    +*** End Scoring Code for Neural;
MPRINT(EM_DIAGRAM):   *** End Scoring Code for Neural;
113141    +********************************;
MPRINT(EM_DIAGRAM):   ********************************;
113142    +drop
113143    +H11
113144    +H12
113145    +;
MPRINT(EM_DIAGRAM):   drop H11 H12 ;
113146    +drop S_:;
MPRINT(EM_DIAGRAM):   drop S_:;
NOTE: %INCLUDE (level 1) ending.
MPRINT(EM_DIAGRAM):   run;
113147     run;

NOTE: DATA STEP view saved on file EMWS1.NEURAL3_VALIDATE.
NOTE: A stored DATA STEP view cannot run under a different operating system.
NOTE: View EMWS1.REPL2_VALIDATE.VIEW used (Total process time):
      real time           0.24 seconds
      cpu time            0.18 seconds
      
NOTE: DATA statement used (Total process time):
      real time           0.25 seconds
      cpu time            0.21 seconds
      

MPRINT(EM_DIAGRAM):   quit;
113148     quit;
113149     filename emflow;
MPRINT(EM_DIAGRAM):   filename emflow;
NOTE: Fileref EMFLOW has been deassigned.
113150     *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
113151     * Neural3: Computing metadata for TRAIN data;
MPRINT(EM_DIAGRAM):   * Neural3: Computing metadata for TRAIN data;
113152     *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;

NOTE: View EMWS1.NEURAL3_TRAIN.VIEW used (Total process time):
      real time           0.22 seconds
      cpu time            0.23 seconds
      
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * &nodeid: Computing Metadata for TRAIN data;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   filename _delta "H:\746\Decision Tree 
test\Workspaces\EMWS1\Neural3\CDELTA_TRAIN.sas";
MPRINT(EMADVISECOLUMNS):   proc display c=sashelp.emmeta.advisecolumns.scl;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    options validvarname=any;
MPRINT(EMADVISECOLUMNS):   proc contents data=EMWS1.Neural3_TRAIN out=_tempAdvisor noprint;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):   options validvarname=V7;
MPRINT(EMADVISECOLUMNS):    data _null_;
MPRINT(EMADVISECOLUMNS):   dsid = open('EMWS1.Neural3_TRAIN');
MPRINT(EMADVISECOLUMNS):   call symput('_dsidTable', strip(put(dsid, best.)));
MPRINT(EMADVISECOLUMNS):   if dsid then do;
MPRINT(EMADVISECOLUMNS):   call symput('_engineTable', attrc(dsid, 'ENGINE'));
MPRINT(EMADVISECOLUMNS):   dsid = close(dsid);
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    proc contents data=EMWS1.Neural3_TRAIN out=WORK.M2Z9RG99 noprint;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M2Z9RG99;
MPRINT(EMADVISECOLUMNS):   length NAME $ 64 TYPE $ 1 LABEL $ 200 FORMAT $ 36 INFORMAT $36 
INDEX $ 1 INDEXTYPE $ 9;
MPRINT(EMADVISECOLUMNS):   label NAME =;
MPRINT(EMADVISECOLUMNS):   set WORK.M2Z9RG99(keep=name type length label format formatl 
formatd informat informl informd idxusage rename=(type=itype));
MPRINT(EMADVISECOLUMNS):   if itype = 1 then type = 'N';
MPRINT(EMADVISECOLUMNS):   else type = 'C';
MPRINT(EMADVISECOLUMNS):   if formatl > 0 then do;
MPRINT(EMADVISECOLUMNS):   if format ne ' ' then format = strip(format)!!strip(put(formatl, 
best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EMADVISECOLUMNS):   else format = strip(put(formatl, best12.))!!'.'!!strip(put(formatd, 
best12.));
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if format ne '' then format = strip(format)!!'.';
MPRINT(EMADVISECOLUMNS):   if informl > 0 then do;
MPRINT(EMADVISECOLUMNS):   if informat ne ' ' then informat = 
strip(informat)!!strip(put(informl, best12.))!!'.'!!strip(put(informd, best12.));
MPRINT(EMADVISECOLUMNS):   else informat = strip(put(informl, 
best12.))!!'.'!!strip(put(informd, best12.));
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if informat ne '' then informat = strip(informat)!!'.';
MPRINT(EMADVISECOLUMNS):   if idxusage = 'NONE' then index ="N";
MPRINT(EMADVISECOLUMNS):   else index = "Y";
MPRINT(EMADVISECOLUMNS):   indextype = idxusage;
MPRINT(EMADVISECOLUMNS):   drop idxusage itype formatl formatd informl informd;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M2Z9RG99;
MPRINT(EMADVISECOLUMNS):   length UNAME $64;
MPRINT(EMADVISECOLUMNS):   set WORK.M2Z9RG99;
MPRINT(EMADVISECOLUMNS):   UNAME = upcase(NAME);
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    proc sort data=WORK.M3H3JPFC NOTHREADS;
MPRINT(EMADVISECOLUMNS):   by UNAME;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M3H3JPFC;
MPRINT(EMADVISECOLUMNS):   drop UNAME;
MPRINT(EMADVISECOLUMNS):   set WORK.M3H3JPFC;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M3E5NAMK(keep=NAME ATTR);
MPRINT(EMADVISECOLUMNS):   length ATTR $ 20;
MPRINT(EMADVISECOLUMNS):   set WORK.M3H3JPFC;
MPRINT(EMADVISECOLUMNS):   if level ne "INTERVAL" then do;
MPRINT(EMADVISECOLUMNS):   if order = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'ORDER';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if format ne ' ' and formattype = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'FORMATTYPE';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if role = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'ROLE';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if level = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'LEVEL';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if type = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'TYPE';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if index = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'INDEX';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if report = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'REPORT';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):   proc sort NOTHREADS;
MPRINT(EMADVISECOLUMNS):   by attr;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M3H3JPFC;
MPRINT(EMADVISECOLUMNS):   length NAME $64 ROLE $ 32 LEVEL $ 10 ORDER $ 8 CREATOR $32 
FORMATTYPE $ 10 FAMILY $ 10 LOWERLIMIT 8 UPPERLIMIT 8 REPORT $1 DISTRIBUTION $ 20 COMMENT $64;
MPRINT(EMADVISECOLUMNS):   length levelAssigned 8 roleAssigned 8 PRICE 8;
MPRINT(EMADVISECOLUMNS):   set WORK.M3H3JPFC;
MPRINT(EMADVISECOLUMNS):   if formattype = ' ' then do;
MPRINT(EMADVISECOLUMNS):   if format ne ' ' then do;
MPRINT(EMADVISECOLUMNS):   if type = 'N' then do;
MPRINT(EMADVISECOLUMNS):   pos = indexc(format,'.1234567890');
MPRINT(EMADVISECOLUMNS):   if pos > 1 then tempfmt = substr(format,1, pos-1);
MPRINT(EMADVISECOLUMNS):   else tempfmt = ' ';
MPRINT(EMADVISECOLUMNS):   flen = length(tempfmt);
MPRINT(EMADVISECOLUMNS):   select;
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("DATE" "DAY" "DDMMYY" "DOWNAME" "JULDAY" "JULIAN" 
"MMDDYY" "MMDDYYD" "MMDDYYC" "MMDDYYN" "MMDDYYP" "MMDDYYS" "MONNAME" "MONTH" "MONYY" "NENGO" 
"QTR" "QTRR" "WEEKDATE" "WEEKDATX" "WEEKDAY" "WORDDATE" "WORDDATX" "YEAR" "YYMMDD" "YYMON" 
"YYMMDDC" "YYMMDDD" "YYMMDDN" "YYMMDDP" "YYMMDDS" "EURDFDE" "NJDATE" "NLDATE" "EURDFDD" 
"EURDFDWN" "EURDFMN" "EURDFMY" "EURDFWK" "EURDFWKX" "EURDFWDX" "EURDFDN" "EURDFDE" )) 
formattype = 'DATE';
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("DATETIME" "EURDFDT" "TOD" )) formattype = 
"DATETIME";
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("HHMM" "HOUR" "MMSS" "TIME" "TIMEAMPM" )) 
formattype = "TIME";
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("COMMA" "COMMAX" "DOLLAR" "DOLLARX" "E" "FRACT" 
"NEGPAREN" "PERCENT")) formattype="QUANTITY";
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("BINARY" "HEX" "IB" "OCTAL" "PD" "PIB" "PK" "RB" 
"SSN" "Z" "ZD")) formattype = "CODING";
MPRINT(EMADVISECOLUMNS):   otherwise do;
MPRINT(EMADVISECOLUMNS):   formattype = "USER";
MPRINT(EMADVISECOLUMNS):   if substr(tempfmt, 1, 6)='NLDATE' then formattype = "DATE";
MPRINT(EMADVISECOLUMNS):   else if substr(tempfmt, 1, 6)='NLDATM' then formattype = "DATETIME";
MPRINT(EMADVISECOLUMNS):   else if substr(tempfmt, 1, 4)='NLTIM' then formattype = "TIME";
MPRINT(EMADVISECOLUMNS):   else if flen >= 4 then do;
MPRINT(EMADVISECOLUMNS):   str = substr(tempfmt,1,4);
MPRINT(EMADVISECOLUMNS):   if str in ("MMYY" "YYMM" "YYQR") then formattype ="DATE";
MPRINT(EMADVISECOLUMNS):   else if str = "S370" then formattype = "CODING";
MPRINT(EMADVISECOLUMNS):   else if str = "BEST" then formattype = "NUM";
MPRINT(EMADVISECOLUMNS):   drop str;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if flen >=3 and substr(tempfmt,1,3) = "YYQ" then formatType = 
"DATE";
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   drop flen tempfmt pos;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else do;
MPRINT(EMADVISECOLUMNS):   formatType = "CATEGORY";
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if formatType = "NUM" then do;
MPRINT(EMADVISECOLUMNS):   if index = "Y" then formatType = "DISCRETE";
MPRINT(EMADVISECOLUMNS):   else formatType = "QUANTITY";
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if level = ' ' then do;
MPRINT(EMADVISECOLUMNS):   if formatType in ("CATEGORY", "CODING", "ID") or type = "C" then 
level = "NOMINAL";
MPRINT(EMADVISECOLUMNS):   else level = "INTERVAL";
MPRINT(EMADVISECOLUMNS):   levelAssigned = 1;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else level = upcase(level);
MPRINT(EMADVISECOLUMNS):   if role = ' ' then do;
MPRINT(EMADVISECOLUMNS):   length name_prefix $8 _uname $64;
MPRINT(EMADVISECOLUMNS):   drop name_prefix _uname _freqflag;
MPRINT(EMADVISECOLUMNS):   retain _freqflag;
MPRINT(EMADVISECOLUMNS):   if LENGTH> 80 then ROLE = 'TEXT';
MPRINT(EMADVISECOLUMNS):   _uname = upcase(NAME);
MPRINT(EMADVISECOLUMNS):   select(_uname);
MPRINT(EMADVISECOLUMNS):   when('_PARTIND_') do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'ID';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   when('_WARN_') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_SEGMENT') do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'SEGMENT';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   when('_NODE_') do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'SEGMENT';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   when('EM_CLASSTARGET') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_VALUETARGET') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_PREDICTION') ROLE = 'PREDICT';
MPRINT(EMADVISECOLUMNS):   when('EM_PROBABILITY') ROLE = 'PREDICT';
MPRINT(EMADVISECOLUMNS):   when('EM_EVENTPROBABILITY') ROLE = 'PREDICT';
MPRINT(EMADVISECOLUMNS):   when('EM_CLASSIFICATION') ROLE = 'CLASSIFICATION';
MPRINT(EMADVISECOLUMNS):   when('EM_DECISION') ROLE = 'DECISION';
MPRINT(EMADVISECOLUMNS):   when('EM_PROFIT') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_LOSS') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_ROI') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('URI') ROLE = 'URL';
MPRINT(EMADVISECOLUMNS):   when('FILTERED') ROLE = 'TEXTLOC';
MPRINT(EMADVISECOLUMNS):   otherwise do;
MPRINT(EMADVISECOLUMNS):   if upcase(NAME) =: 'ZIP' then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'REJECTED';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   COMMENT = 'Rejected by: Exceed the maximum class level of %s';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if upcase(NAME) in('FREQ', 'FREQUENCY') then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'FREQ';
MPRINT(EMADVISECOLUMNS):   if TYPE = 'C' then ROLE = 'INPUT';
MPRINT(EMADVISECOLUMNS):   else if _freqflag =1 then ROLE='REJECTED';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else do;
MPRINT(EMADVISECOLUMNS):   name_prefix = scan(_uname, 1, '_');
MPRINT(EMADVISECOLUMNS):   if scan(_uname, 2, '_') = '' then name_prefix='';
MPRINT(EMADVISECOLUMNS):   if name_prefix in('F', 'I', 'U') then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'CLASSIFICATION';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if name_prefix in('P', 'V') then ROLE = 'PREDICT';
MPRINT(EMADVISECOLUMNS):   else if name_prefix in('R', 'RS', 'RT', 'RD', 'RDS', 'RDT', 'RA', 
'RAS', 'RAT') then ROLE = 'RESIDUAL';
MPRINT(EMADVISECOLUMNS):   else if name_prefix ='D' then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'DECISION';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if name_prefix ='B' then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'SEGMENT';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if name_prefix in('EP', 'BP', 'CP', 'EL', 'CL', 'BL', 'W', 
'ROI', 'IC') then ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   else do;
MPRINT(EMADVISECOLUMNS):   array _ROLE_ (19) $32 _TEMPORARY_ 
('ASSESS','CLASSIFICATION','CENSOR', 'COST', 'CROSSID', 'DECISION', 'ID','INPUT', 'LABEL', 
'MISSING','PREDICT','REFERRER','REJECTED', 'RESIDUAL','SEGMENT', 'SEQUENCE','TARGET', 'TEXT', 
'TIMEID');
MPRINT(EMADVISECOLUMNS):   drop _found_ i;
MPRINT(EMADVISECOLUMNS):   _found_=0;
MPRINT(EMADVISECOLUMNS):   do i=1 to 19 until(_found_=1);
MPRINT(EMADVISECOLUMNS):   if index(_uname, trim(_ROLE_{i}))=1 then do;
MPRINT(EMADVISECOLUMNS):   ROLE=_ROLE_{i};
MPRINT(EMADVISECOLUMNS):   if ROLE = 'ID' then LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   else if ROLE = 'SEGMENT' then LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   else if ROLE = 'TIMEID' and TYPE='N' then LEVEL = 'INTERVAL';
MPRINT(EMADVISECOLUMNS):   _found_=1;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if length(_uname)>2 then do;
MPRINT(EMADVISECOLUMNS):   if substr(reverse(trim(_uname)), 1, 3) = 'DI_' then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'ID';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if ROLE='FREQ' then _freqflag=1;
MPRINT(EMADVISECOLUMNS):   else if ROLE = 'CLASSIFICATION' then LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   if symexist('RATEMKG_ROLE') then do;
MPRINT(EMADVISECOLUMNS):   if upcase(symget('RATEMKG_ROLE')) in('Y', 'YES') then do;
MPRINT(EMADVISECOLUMNS):   if _uname =: 'POLICY' then ROLE = 'POLICYID';
MPRINT(EMADVISECOLUMNS):   else if _uname in ('PARTITION', '_PARTIND_') then ROLE = 
'PARTITION';
MPRINT(EMADVISECOLUMNS):   else if type = 'N' then do;
MPRINT(EMADVISECOLUMNS):   if _uname = 'EXPOSURE' then ROLE = 'EXPOSURE';
MPRINT(EMADVISECOLUMNS):   else if _uname = 'YEAR' then ROLE = 'YEAR';
MPRINT(EMADVISECOLUMNS):   else if _uname = 'WEIGHT' then ROLE = 'WEIGHT';
MPRINT(EMADVISECOLUMNS):   else if _uname = 'OFFSET' then ROLE = 'OFFSET';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if role = ' ' then do;
MPRINT(EMADVISECOLUMNS):   if formattype in('DATE', 'DATETIME', 'TIME') then role = 'TIMEID';
MPRINT(EMADVISECOLUMNS):   else role = 'INPUT';
MPRINT(EMADVISECOLUMNS):   roleAssigned = 1;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else role = upcase(role);
MPRINT(EMADVISECOLUMNS):   if REPORT = '' then REPORT = 'N';
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M3H3JPFC;
MPRINT(EMADVISECOLUMNS):   set WORK.M3H3JPFC;
MPRINT(EMADVISECOLUMNS):   label NAME = "Variable Name" TYPE = "Type" ROLE = "Role" LEVEL= 
"Measurement Level" ORDER= "Order" CREATOR= "Creator" FORMATTYPE= "Format Type" FAMILY= 
"Family" DISTRIBUTION= "Distribution" PRICE= "Price" LOWERLIMIT= "Lower limit" UPPERLIMIT= 
"Upper Limit" REPORT= "Report" COMMENT= "Comment" INDEX= "Index" INDEXTYPE= "IndexType" LABEL= 
"Label" LENGTH= "Length";
MPRINT(EMADVISECOLUMNS):   drop levelAssigned roleAssigned;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):   
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   proc sort data=WORK.COLUMNMETA;
MPRINT(EM_DIAGRAM):   by NAME;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * &nodeid: Merge incoming metadata;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   proc contents data=EMWS1.Repl2_TRAIN noprint out=_temp2(keep=NAME);
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=_temp2;
MPRINT(EM_DIAGRAM):   by NAME;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=EMWS1.Repl2_CMeta_TRAIN out=_temp;
MPRINT(EM_DIAGRAM):   by NAME;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data EMWS1.Neural3_CMeta_TRAIN;
MPRINT(EM_DIAGRAM):   merge WORK.COLUMNMETA(in=_a) _temp2(in=_b) _temp(drop=FORMAT INFORMAT 
LENGTH INDEX INDEXTYPE in=_c) end=_eof_;
MPRINT(EM_DIAGRAM):   by NAME;
MPRINT(EM_DIAGRAM):   if (^_a and _b) or (^_c and _a and _b) then delete;
MPRINT(EM_DIAGRAM):   if ^_b then CREATOR = "Neural3";
MPRINT(EM_DIAGRAM):   length model $200;
MPRINT(EM_DIAGRAM):   label MODEL = "Model Node";
MPRINT(EM_DIAGRAM):   select(upcase(name));
MPRINT(EM_DIAGRAM):   when("P_RISK1") creator = "Neural3";
MPRINT(EM_DIAGRAM):   when("R_RISK1") creator = "Neural3";
MPRINT(EM_DIAGRAM):   when("P_RISK0") creator = "Neural3";
MPRINT(EM_DIAGRAM):   when("R_RISK0") creator = "Neural3";
MPRINT(EM_DIAGRAM):   when("F_RISK") creator = "Neural3";
MPRINT(EM_DIAGRAM):   when("I_RISK") creator = "Neural3";
MPRINT(EM_DIAGRAM):   when("U_RISK") creator = "Neural3";
MPRINT(EM_DIAGRAM):   when("_WARN_") creator = "Neural3";
MPRINT(EM_DIAGRAM):   when("RISK") model = "Neural3";
MPRINT(EM_DIAGRAM):   when('');
MPRINT(EM_DIAGRAM):   otherwise;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Neural3: Apply Delta Code;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   filename _delta;
113491     data WORK.MODELTEMP_INFO;
MPRINT(EM_DIAGRAM):    data WORK.MODELTEMP_INFO;
113492     set EMWS1.Neural3_EMINFO;
MPRINT(EM_DIAGRAM):   set EMWS1.Neural3_EMINFO;
113493     where DATA='Neural3' and KEY ^in('DECDATA', 'DECMETA', 'IMPORTANCE', 'MODEL');
MPRINT(EM_DIAGRAM):   where DATA='Neural3' and KEY ^in('DECDATA', 'DECMETA', 'IMPORTANCE', 
'MODEL');
113494     run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 0 observations read from the data set EMWS1.NEURAL3_EMINFO.
      WHERE (DATA='Neural3') and KEY not in ('DECDATA', 'DECMETA', 'IMPORTANCE', 'MODEL');
NOTE: The data set WORK.MODELTEMP_INFO has 0 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

113495     data EMWS1.Neural3_EMINFO;
MPRINT(EM_DIAGRAM):    data EMWS1.Neural3_EMINFO;
113496     length TARGET KEY $32 DATA $43;
MPRINT(EM_DIAGRAM):   length TARGET KEY $32 DATA $43;
113497     input TARGET KEY DATA $;
MPRINT(EM_DIAGRAM):   input TARGET KEY DATA $;
113498     cards;
MPRINT(EM_DIAGRAM):   cards;

NOTE: The data set EMWS1.NEURAL3_EMINFO has 3 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.04 seconds
      cpu time            0.00 seconds
      

MPRINT(EM_DIAGRAM):   run;
113502     run;
113503     data EMWS1.Neural3_EMINFO;
MPRINT(EM_DIAGRAM):   data EMWS1.Neural3_EMINFO;
113504     set EMWS1.Neural3_EMINFO WORK.MODELTEMP_INFO;
MPRINT(EM_DIAGRAM):   set EMWS1.Neural3_EMINFO WORK.MODELTEMP_INFO;
113505     run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 3 observations read from the data set EMWS1.NEURAL3_EMINFO.
NOTE: There were 0 observations read from the data set WORK.MODELTEMP_INFO.
NOTE: The data set EMWS1.NEURAL3_EMINFO has 3 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.06 seconds
      cpu time            0.01 seconds
      

113506     proc sort data = EMWS1.Neural3_EMINFO NOTHREADS;
MPRINT(EM_DIAGRAM):    proc sort data = EMWS1.Neural3_EMINFO NOTHREADS;
113507     by TARGET KEY;
MPRINT(EM_DIAGRAM):   by TARGET KEY;
113508     run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 3 observations read from the data set EMWS1.NEURAL3_EMINFO.
NOTE: The data set EMWS1.NEURAL3_EMINFO has 3 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.08 seconds
      cpu time            0.00 seconds
      

113509     proc sort data = EMWS1.FIMPORT_EMINFO OUT=WORK.SORTEDEMINFO NOTHREADS;
MPRINT(EM_DIAGRAM):    proc sort data = EMWS1.FIMPORT_EMINFO OUT=WORK.SORTEDEMINFO NOTHREADS;
113510     by TARGET KEY;
MPRINT(EM_DIAGRAM):   by TARGET KEY;
113511     run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 1 observations read from the data set EMWS1.FIMPORT_EMINFO.
NOTE: The data set WORK.SORTEDEMINFO has 1 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
      

113512     proc sort data = EMWS1.Neural3_EMINFO OUT=WORK.TEMP_INFO NOTHREADS;
MPRINT(EM_DIAGRAM):   proc sort data = EMWS1.Neural3_EMINFO OUT=WORK.TEMP_INFO NOTHREADS;
113513     by TARGET KEY;
MPRINT(EM_DIAGRAM):   by TARGET KEY;
113514     run;
MPRINT(EM_DIAGRAM):   run;

NOTE: Input data set is already sorted; it has been copied to the output data set.
NOTE: There were 3 observations read from the data set EMWS1.NEURAL3_EMINFO.
NOTE: The data set WORK.TEMP_INFO has 3 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

113515     data EMWS1.Neural3_EMINFO;
MPRINT(EM_DIAGRAM):   data EMWS1.Neural3_EMINFO;
113516     merge WORK.SORTEDEMINFO WORK.TEMP_INFO;
MPRINT(EM_DIAGRAM):   merge WORK.SORTEDEMINFO WORK.TEMP_INFO;
113517     by TARGET KEY;
MPRINT(EM_DIAGRAM):   by TARGET KEY;
113518     run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 1 observations read from the data set WORK.SORTEDEMINFO.
NOTE: There were 3 observations read from the data set WORK.TEMP_INFO.
NOTE: The data set EMWS1.NEURAL3_EMINFO has 4 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.07 seconds
      cpu time            0.00 seconds
      

113519     proc datasets lib=work nolist;
MPRINT(EM_DIAGRAM):   proc datasets lib=work nolist;
113520     delete TEMP_INFO SORTEDEMINFO;
MPRINT(EM_DIAGRAM):   delete TEMP_INFO SORTEDEMINFO;
113521     run;
MPRINT(EM_DIAGRAM):   run;

NOTE: Deleting WORK.TEMP_INFO (memtype=DATA).
NOTE: Deleting WORK.SORTEDEMINFO (memtype=DATA).
113522     quit;
MPRINT(EM_DIAGRAM):   quit;

NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.02 seconds
      cpu time            0.01 seconds
      

NOTE: View EMWS1.NEURAL3_TRAIN.VIEW used (Total process time):
      real time           0.20 seconds
      cpu time            0.20 seconds
      
NOTE: View EMWS1.NEURAL3_VALIDATE.VIEW used (Total process time):
      real time           0.21 seconds
      cpu time            0.21 seconds
      
MPRINT(EM_DIAGRAM):    proc printto;
MPRINT(EM_DIAGRAM):   run;
