MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   call symput('NLDATE', strip(put(date(), NLDATE.)));
MPRINT(EM_DIAGRAM):   call symput('NLTIME', strip(put(datetime(), NLTIME.)));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   nldate= sasmsg("sashelp.dmine", "log_date_note", 'N', "April 16, 2021" );
MPRINT(EM_DIAGRAM):   nltime= sasmsg("sashelp.dmine", "log_time_note", 'N', "11:35:21 o'clock" 
);
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "* Score Log";
MPRINT(EM_DIAGRAM):   put nldate;
MPRINT(EM_DIAGRAM):   put nltime;
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   run;
*------------------------------------------------------------*
* Score Log
Date:                April 16, 2021
Time:                11:35:21 o'clock
*------------------------------------------------------------*
MPRINT(EM_DIAGRAM):    filename O24CP261 "H:\746\Decision Tree 
test\Workspaces\EMWS1\Neural7\EMSCORE.out" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):   proc printto print=O24CP261 new;
MPRINT(EM_DIAGRAM):   run;
191485     data work.outkey;
MPRINT(EM_DIAGRAM):    data work.outkey;
191486     set EMWS1.Neural7_OUTKEY;
MPRINT(EM_DIAGRAM):   set EMWS1.Neural7_OUTKEY;
191487     if upcase(ROLE) = 'HIDDEN';
MPRINT(EM_DIAGRAM):   if upcase(ROLE) = 'HIDDEN';
191488     run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 22 observations read from the data set EMWS1.NEURAL7_OUTKEY.
NOTE: The data set WORK.OUTKEY has 3 observations and 8 variables.
NOTE: DATA statement used (Total process time):
      real time           0.02 seconds
      cpu time            0.01 seconds
      

191489     filename emflow "H:\746\Decision Tree test\Workspaces\EMWS1\Neural7\EMFLOWSCORE.sas"
191489   ! ;
MPRINT(EM_DIAGRAM):    filename emflow "H:\746\Decision Tree 
test\Workspaces\EMWS1\Neural7\EMFLOWSCORE.sas";
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Neural7: Scoring DATA data;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
191490     *------------------------------------------------------------*;
191491     * Neural7: Scoring DATA data;
191492     *------------------------------------------------------------*;
191493     data EMWS1.Neural7_TRAIN
191494     / view=EMWS1.Neural7_TRAIN
191495     ;
MPRINT(EM_DIAGRAM):   data EMWS1.Neural7_TRAIN / view=EMWS1.Neural7_TRAIN ;
191496     set EMWS1.Reg3_TRAIN
191497     ;
MPRINT(EM_DIAGRAM):   set EMWS1.Reg3_TRAIN ;
191498     %inc emflow;
NOTE: %INCLUDE (level 1) file EMFLOW is file H:\746\Decision Tree 
      test\Workspaces\EMWS1\Neural7\EMFLOWSCORE.sas.
191499    +***********************************;
MPRINT(EM_DIAGRAM):   ***********************************;
191500    +*** Begin Scoring Code for Neural;
MPRINT(EM_DIAGRAM):   *** Begin Scoring Code for Neural;
191501    +***********************************;
MPRINT(EM_DIAGRAM):   ***********************************;
191502    +DROP _DM_BAD _EPS _NOCL_ _MAX_ _MAXP_ _SUM_ _NTRIALS;
MPRINT(EM_DIAGRAM):   DROP _DM_BAD _EPS _NOCL_ _MAX_ _MAXP_ _SUM_ _NTRIALS;
191503    + _DM_BAD = 0;
MPRINT(EM_DIAGRAM):   _DM_BAD = 0;
191504    + _NOCL_ = .;
MPRINT(EM_DIAGRAM):   _NOCL_ = .;
191505    + _MAX_ = .;
MPRINT(EM_DIAGRAM):   _MAX_ = .;
191506    + _MAXP_ = .;
MPRINT(EM_DIAGRAM):   _MAXP_ = .;
191507    + _SUM_ = .;
MPRINT(EM_DIAGRAM):   _SUM_ = .;
191508    + _NTRIALS = .;
MPRINT(EM_DIAGRAM):   _NTRIALS = .;
191509    + _EPS =                1E-10;
MPRINT(EM_DIAGRAM):   _EPS = 1E-10;
191510    +LENGTH _WARN_ $4
191511    +      F_Risk  $ 12
191512    +;
MPRINT(EM_DIAGRAM):   LENGTH _WARN_ $4 F_Risk $ 12 ;
191513    +      label S_LOG_REP_engine_size = 'Standard: LOG_REP_engine_size' ;
MPRINT(EM_DIAGRAM):   label S_LOG_REP_engine_size = 'Standard: LOG_REP_engine_size' ;
191514    +
191515    +      label S_REP_city_mpg = 'Standard: REP_city_mpg' ;
MPRINT(EM_DIAGRAM):   label S_REP_city_mpg = 'Standard: REP_city_mpg' ;
191516    +
191517    +      label S_REP_highway_mpg = 'Standard: REP_highway_mpg' ;
MPRINT(EM_DIAGRAM):   label S_REP_highway_mpg = 'Standard: REP_highway_mpg' ;
191518    +
191519    +      label S_REP_wheel_base = 'Standard: REP_wheel_base' ;
MPRINT(EM_DIAGRAM):   label S_REP_wheel_base = 'Standard: REP_wheel_base' ;
191520    +
191521    +      label S_REP_width = 'Standard: REP_width' ;
MPRINT(EM_DIAGRAM):   label S_REP_width = 'Standard: REP_width' ;
191522    +
191523    +      label IMP_num_of_doors2 = 'Dummy: IMP_num_of_doors=2' ;
MPRINT(EM_DIAGRAM):   label IMP_num_of_doors2 = 'Dummy: IMP_num_of_doors=2' ;
191524    +
191525    +      label REP_num_of_cylinders__4 = 'Dummy: REP_num_of_cylinders=<=4' ;
MPRINT(EM_DIAGRAM):   label REP_num_of_cylinders__4 = 'Dummy: REP_num_of_cylinders=<=4' ;
191526    +
191527    +      label H11 = 'Hidden: H1=1' ;
MPRINT(EM_DIAGRAM):   label H11 = 'Hidden: H1=1' ;
191528    +
191529    +      label H12 = 'Hidden: H1=2' ;
MPRINT(EM_DIAGRAM):   label H12 = 'Hidden: H1=2' ;
191530    +
191531    +      label H13 = 'Hidden: H1=3' ;
MPRINT(EM_DIAGRAM):   label H13 = 'Hidden: H1=3' ;
191532    +
191533    +      label I_Risk = 'Into: Risk' ;
MPRINT(EM_DIAGRAM):   label I_Risk = 'Into: Risk' ;
191534    +
191535    +      label F_Risk = 'From: Risk' ;
MPRINT(EM_DIAGRAM):   label F_Risk = 'From: Risk' ;
191536    +
191537    +      label U_Risk = 'Unnormalized Into: Risk' ;
MPRINT(EM_DIAGRAM):   label U_Risk = 'Unnormalized Into: Risk' ;
191538    +
191539    +      label P_Risk1 = 'Predicted: Risk=1' ;
MPRINT(EM_DIAGRAM):   label P_Risk1 = 'Predicted: Risk=1' ;
191540    +
191541    +      label R_Risk1 = 'Residual: Risk=1' ;
MPRINT(EM_DIAGRAM):   label R_Risk1 = 'Residual: Risk=1' ;
191542    +
191543    +      label P_Risk0 = 'Predicted: Risk=0' ;
MPRINT(EM_DIAGRAM):   label P_Risk0 = 'Predicted: Risk=0' ;
191544    +
191545    +      label R_Risk0 = 'Residual: Risk=0' ;
MPRINT(EM_DIAGRAM):   label R_Risk0 = 'Residual: Risk=0' ;
191546    +
191547    +      label  _WARN_ = "Warnings";
MPRINT(EM_DIAGRAM):   label _WARN_ = "Warnings";
191548    +
191549    +*** Generate dummy variables for IMP_num_of_doors ;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for IMP_num_of_doors ;
191550    +drop IMP_num_of_doors2 ;
MPRINT(EM_DIAGRAM):   drop IMP_num_of_doors2 ;
191551    +if missing( IMP_num_of_doors ) then do;
MPRINT(EM_DIAGRAM):   if missing( IMP_num_of_doors ) then do;
191552    +   IMP_num_of_doors2 = .;
MPRINT(EM_DIAGRAM):   IMP_num_of_doors2 = .;
191553    +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
191554    +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
191555    +end;
MPRINT(EM_DIAGRAM):   end;
191556    +else do;
MPRINT(EM_DIAGRAM):   else do;
191557    +   length _dm12 $ 12; drop _dm12 ;
MPRINT(EM_DIAGRAM):   length _dm12 $ 12;
MPRINT(EM_DIAGRAM):   drop _dm12 ;
191558    +   _dm12 = put( IMP_num_of_doors , BEST12. );
MPRINT(EM_DIAGRAM):   _dm12 = put( IMP_num_of_doors , BEST12. );
191559    +   %DMNORMIP( _dm12 )
MPRINT(DMNORMIP):   call dmnorm(_dm12,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
191560    +   if _dm12 = '4'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 = '4' then do;
191561    +      IMP_num_of_doors2 = -1;
MPRINT(EM_DIAGRAM):   IMP_num_of_doors2 = -1;
191562    +   end;
MPRINT(EM_DIAGRAM):   end;
191563    +   else if _dm12 = '2'  then do;
MPRINT(EM_DIAGRAM):   else if _dm12 = '2' then do;
191564    +      IMP_num_of_doors2 = 1;
MPRINT(EM_DIAGRAM):   IMP_num_of_doors2 = 1;
191565    +   end;
MPRINT(EM_DIAGRAM):   end;
191566    +   else do;
MPRINT(EM_DIAGRAM):   else do;
191567    +      IMP_num_of_doors2 = .;
MPRINT(EM_DIAGRAM):   IMP_num_of_doors2 = .;
191568    +      substr(_warn_,2,1) = 'U';
MPRINT(EM_DIAGRAM):   substr(_warn_,2,1) = 'U';
191569    +      _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
191570    +   end;
MPRINT(EM_DIAGRAM):   end;
191571    +end;
MPRINT(EM_DIAGRAM):   end;
191572    +
191573    +*** Generate dummy variables for REP_num_of_cylinders ;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for REP_num_of_cylinders ;
191574    +drop REP_num_of_cylinders__4 ;
MPRINT(EM_DIAGRAM):   drop REP_num_of_cylinders__4 ;
191575    +if missing( REP_num_of_cylinders ) then do;
MPRINT(EM_DIAGRAM):   if missing( REP_num_of_cylinders ) then do;
191576    +   REP_num_of_cylinders__4 = .;
MPRINT(EM_DIAGRAM):   REP_num_of_cylinders__4 = .;
191577    +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
191578    +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
191579    +end;
MPRINT(EM_DIAGRAM):   end;
191580    +else do;
MPRINT(EM_DIAGRAM):   else do;
191581    +   length _dm6 $ 6; drop _dm6 ;
MPRINT(EM_DIAGRAM):   length _dm6 $ 6;
MPRINT(EM_DIAGRAM):   drop _dm6 ;
191582    +   %DMNORMCP( REP_num_of_cylinders , _dm6 )
MPRINT(DMNORMCP):   _dm6=dmnorm(REP_num_of_cylinders,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMCP):  );
191583    +   if _dm6 = '<=4'  then do;
MPRINT(EM_DIAGRAM):   if _dm6 = '<=4' then do;
191584    +      REP_num_of_cylinders__4 = 1;
MPRINT(EM_DIAGRAM):   REP_num_of_cylinders__4 = 1;
191585    +   end;
MPRINT(EM_DIAGRAM):   end;
191586    +   else if _dm6 = '>4'  then do;
MPRINT(EM_DIAGRAM):   else if _dm6 = '>4' then do;
191587    +      REP_num_of_cylinders__4 = -1;
MPRINT(EM_DIAGRAM):   REP_num_of_cylinders__4 = -1;
191588    +   end;
MPRINT(EM_DIAGRAM):   end;
191589    +   else do;
MPRINT(EM_DIAGRAM):   else do;
191590    +      REP_num_of_cylinders__4 = .;
MPRINT(EM_DIAGRAM):   REP_num_of_cylinders__4 = .;
191591    +      substr(_warn_,2,1) = 'U';
MPRINT(EM_DIAGRAM):   substr(_warn_,2,1) = 'U';
191592    +      _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
191593    +   end;
MPRINT(EM_DIAGRAM):   end;
191594    +end;
MPRINT(EM_DIAGRAM):   end;
191595    +
191596    +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
191597    +*** Checking missing input Interval
191598    +*** *************************;
MPRINT(EM_DIAGRAM):   *** Checking missing input Interval *** *************************;
191599    +
191600    +IF NMISS(
191601    +   LOG_REP_engine_size ,
191602    +   REP_city_mpg ,
191603    +   REP_highway_mpg ,
191604    +   REP_wheel_base ,
191605    +   REP_width   ) THEN DO;
MPRINT(EM_DIAGRAM):   IF NMISS( LOG_REP_engine_size , REP_city_mpg , REP_highway_mpg , 
REP_wheel_base , REP_width ) THEN DO;
191606    +   SUBSTR(_WARN_, 1, 1) = 'M';
MPRINT(EM_DIAGRAM):   SUBSTR(_WARN_, 1, 1) = 'M';
191607    +
191608    +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
191609    +END;
MPRINT(EM_DIAGRAM):   END;
191610    +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
191611    +*** Writing the Node intvl ;
MPRINT(EM_DIAGRAM):   *** Writing the Node intvl ;
191612    +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
191613    +IF _DM_BAD EQ 0 THEN DO;
MPRINT(EM_DIAGRAM):   IF _DM_BAD EQ 0 THEN DO;
191614    +   S_LOG_REP_engine_size  =    -19.3053254119757 +     4.02929302984948 *
191615    +        LOG_REP_engine_size ;
MPRINT(EM_DIAGRAM):   S_LOG_REP_engine_size = -19.3053254119757 + 4.02929302984948 * 
LOG_REP_engine_size ;
191616    +   S_REP_city_mpg  =    -4.23279255832632 +     0.16535248553422 *
191617    +        REP_city_mpg ;
MPRINT(EM_DIAGRAM):   S_REP_city_mpg = -4.23279255832632 + 0.16535248553422 * REP_city_mpg ;
191618    +   S_REP_highway_mpg  =    -4.99166764925563 +     0.16020006928199 *
191619    +        REP_highway_mpg ;
MPRINT(EM_DIAGRAM):   S_REP_highway_mpg = -4.99166764925563 + 0.16020006928199 * 
REP_highway_mpg ;
191620    +   S_REP_wheel_base  =    -17.8009087180129 +     0.18059887504832 *
191621    +        REP_wheel_base ;
MPRINT(EM_DIAGRAM):   S_REP_wheel_base = -17.8009087180129 + 0.18059887504832 * REP_wheel_base 
;
191622    +   S_REP_width  =    -35.9167499004784 +     0.54673628301566 * REP_width ;
MPRINT(EM_DIAGRAM):   S_REP_width = -35.9167499004784 + 0.54673628301566 * REP_width ;
191623    +END;
MPRINT(EM_DIAGRAM):   END;
191624    +ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
191625    +   IF MISSING( LOG_REP_engine_size ) THEN S_LOG_REP_engine_size  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( LOG_REP_engine_size ) THEN S_LOG_REP_engine_size = . ;
191626    +   ELSE S_LOG_REP_engine_size
191627    +          =    -19.3053254119757 +     4.02929302984948 * LOG_REP_engine_size
191628    +         ;
MPRINT(EM_DIAGRAM):   ELSE S_LOG_REP_engine_size = -19.3053254119757 + 4.02929302984948 * 
LOG_REP_engine_size ;
191629    +   IF MISSING( REP_city_mpg ) THEN S_REP_city_mpg  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( REP_city_mpg ) THEN S_REP_city_mpg = . ;
191630    +   ELSE S_REP_city_mpg  =    -4.23279255832632 +     0.16535248553422 *
191631    +        REP_city_mpg ;
MPRINT(EM_DIAGRAM):   ELSE S_REP_city_mpg = -4.23279255832632 + 0.16535248553422 * 
REP_city_mpg ;
191632    +   IF MISSING( REP_highway_mpg ) THEN S_REP_highway_mpg  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( REP_highway_mpg ) THEN S_REP_highway_mpg = . ;
191633    +   ELSE S_REP_highway_mpg  =    -4.99166764925563 +     0.16020006928199 *
191634    +        REP_highway_mpg ;
MPRINT(EM_DIAGRAM):   ELSE S_REP_highway_mpg = -4.99166764925563 + 0.16020006928199 * 
REP_highway_mpg ;
191635    +   IF MISSING( REP_wheel_base ) THEN S_REP_wheel_base  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( REP_wheel_base ) THEN S_REP_wheel_base = . ;
191636    +   ELSE S_REP_wheel_base  =    -17.8009087180129 +     0.18059887504832 *
191637    +        REP_wheel_base ;
MPRINT(EM_DIAGRAM):   ELSE S_REP_wheel_base = -17.8009087180129 + 0.18059887504832 * 
REP_wheel_base ;
191638    +   IF MISSING( REP_width ) THEN S_REP_width  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( REP_width ) THEN S_REP_width = . ;
191639    +   ELSE S_REP_width  =    -35.9167499004784 +     0.54673628301566 * REP_width
191640    +         ;
MPRINT(EM_DIAGRAM):   ELSE S_REP_width = -35.9167499004784 + 0.54673628301566 * REP_width ;
191641    +END;
MPRINT(EM_DIAGRAM):   END;
191642    +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
191643    +*** Writing the Node nom ;
MPRINT(EM_DIAGRAM):   *** Writing the Node nom ;
191644    +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
191645    +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
191646    +*** Writing the Node H1 ;
MPRINT(EM_DIAGRAM):   *** Writing the Node H1 ;
191647    +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
191648    +IF _DM_BAD EQ 0 THEN DO;
MPRINT(EM_DIAGRAM):   IF _DM_BAD EQ 0 THEN DO;
191649    +   H11  =    -0.36366770006996 * S_LOG_REP_engine_size
191650    +          +    -1.13673742378883 * S_REP_city_mpg  +     0.91302518078464 *
191651    +        S_REP_highway_mpg  +    -0.34934074959931 * S_REP_wheel_base
191652    +          +     0.57246621702163 * S_REP_width ;
MPRINT(EM_DIAGRAM):   H11 = -0.36366770006996 * S_LOG_REP_engine_size + -1.13673742378883 * 
S_REP_city_mpg + 0.91302518078464 * S_REP_highway_mpg + -0.34934074959931 * S_REP_wheel_base + 
0.57246621702163 * S_REP_width ;
191653    +   H12  =     0.53048536219802 * S_LOG_REP_engine_size
191654    +          +    -0.67453234453218 * S_REP_city_mpg  +     0.24400439315045 *
191655    +        S_REP_highway_mpg  +     0.33233582789552 * S_REP_wheel_base
191656    +          +     -0.0304230255997 * S_REP_width ;
MPRINT(EM_DIAGRAM):   H12 = 0.53048536219802 * S_LOG_REP_engine_size + -0.67453234453218 * 
S_REP_city_mpg + 0.24400439315045 * S_REP_highway_mpg + 0.33233582789552 * S_REP_wheel_base + 
-0.0304230255997 * S_REP_width ;
191657    +   H13  =     0.07821121780931 * S_LOG_REP_engine_size
191658    +          +     0.69146336850495 * S_REP_city_mpg  +    -0.60866116430521 *
191659    +        S_REP_highway_mpg  +     1.46311014357332 * S_REP_wheel_base
191660    +          +     0.07372964019523 * S_REP_width ;
MPRINT(EM_DIAGRAM):   H13 = 0.07821121780931 * S_LOG_REP_engine_size + 0.69146336850495 * 
S_REP_city_mpg + -0.60866116430521 * S_REP_highway_mpg + 1.46311014357332 * S_REP_wheel_base + 
0.07372964019523 * S_REP_width ;
191661    +   H11  = H11  +     0.86004479703622 * IMP_num_of_doors2
191662    +          +     -0.3944119407107 * REP_num_of_cylinders__4 ;
MPRINT(EM_DIAGRAM):   H11 = H11 + 0.86004479703622 * IMP_num_of_doors2 + -0.3944119407107 * 
REP_num_of_cylinders__4 ;
191663    +   H12  = H12  +     0.24080030847293 * IMP_num_of_doors2
191664    +          +    -0.13639204314563 * REP_num_of_cylinders__4 ;
MPRINT(EM_DIAGRAM):   H12 = H12 + 0.24080030847293 * IMP_num_of_doors2 + -0.13639204314563 * 
REP_num_of_cylinders__4 ;
191665    +   H13  = H13  +     0.25638258728882 * IMP_num_of_doors2
191666    +          +    -0.27625855397288 * REP_num_of_cylinders__4 ;
MPRINT(EM_DIAGRAM):   H13 = H13 + 0.25638258728882 * IMP_num_of_doors2 + -0.27625855397288 * 
REP_num_of_cylinders__4 ;
191667    +   H11  =     0.80114065756396 + H11 ;
MPRINT(EM_DIAGRAM):   H11 = 0.80114065756396 + H11 ;
191668    +   H12  =    -1.03756364869211 + H12 ;
MPRINT(EM_DIAGRAM):   H12 = -1.03756364869211 + H12 ;
191669    +   H13  =     0.68488031057643 + H13 ;
MPRINT(EM_DIAGRAM):   H13 = 0.68488031057643 + H13 ;
191670    +   H11  = TANH(H11 );
MPRINT(EM_DIAGRAM):   H11 = TANH(H11 );
191671    +   H12  = TANH(H12 );
MPRINT(EM_DIAGRAM):   H12 = TANH(H12 );
191672    +   H13  = TANH(H13 );
MPRINT(EM_DIAGRAM):   H13 = TANH(H13 );
191673    +END;
MPRINT(EM_DIAGRAM):   END;
191674    +ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
191675    +   H11  = .;
MPRINT(EM_DIAGRAM):   H11 = .;
191676    +   H12  = .;
MPRINT(EM_DIAGRAM):   H12 = .;
191677    +   H13  = .;
MPRINT(EM_DIAGRAM):   H13 = .;
191678    +END;
MPRINT(EM_DIAGRAM):   END;
191679    +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
191680    +*** Writing the Node Risk ;
MPRINT(EM_DIAGRAM):   *** Writing the Node Risk ;
191681    +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
191682    +
191683    +*** Generate dummy variables for Risk ;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for Risk ;
191684    +drop Risk1 Risk0 ;
MPRINT(EM_DIAGRAM):   drop Risk1 Risk0 ;
191685    +label F_Risk = 'From: Risk' ;
MPRINT(EM_DIAGRAM):   label F_Risk = 'From: Risk' ;
191686    +length F_Risk $ 12;
MPRINT(EM_DIAGRAM):   length F_Risk $ 12;
191687    +F_Risk = put( Risk , BEST12. );
MPRINT(EM_DIAGRAM):   F_Risk = put( Risk , BEST12. );
191688    +%DMNORMIP( F_Risk )
MPRINT(DMNORMIP):   call dmnorm(F_Risk,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
191689    +if missing( Risk ) then do;
MPRINT(EM_DIAGRAM):   if missing( Risk ) then do;
191690    +   Risk1 = .;
MPRINT(EM_DIAGRAM):   Risk1 = .;
191691    +   Risk0 = .;
MPRINT(EM_DIAGRAM):   Risk0 = .;
191692    +end;
MPRINT(EM_DIAGRAM):   end;
191693    +else do;
MPRINT(EM_DIAGRAM):   else do;
191694    +   if F_Risk = '1'  then do;
MPRINT(EM_DIAGRAM):   if F_Risk = '1' then do;
191695    +      Risk1 = 1;
MPRINT(EM_DIAGRAM):   Risk1 = 1;
191696    +      Risk0 = 0;
MPRINT(EM_DIAGRAM):   Risk0 = 0;
191697    +   end;
MPRINT(EM_DIAGRAM):   end;
191698    +   else if F_Risk = '0'  then do;
MPRINT(EM_DIAGRAM):   else if F_Risk = '0' then do;
191699    +      Risk1 = 0;
MPRINT(EM_DIAGRAM):   Risk1 = 0;
191700    +      Risk0 = 1;
MPRINT(EM_DIAGRAM):   Risk0 = 1;
191701    +   end;
MPRINT(EM_DIAGRAM):   end;
191702    +   else do;
MPRINT(EM_DIAGRAM):   else do;
191703    +      Risk1 = .;
MPRINT(EM_DIAGRAM):   Risk1 = .;
191704    +      Risk0 = .;
MPRINT(EM_DIAGRAM):   Risk0 = .;
191705    +   end;
MPRINT(EM_DIAGRAM):   end;
191706    +end;
MPRINT(EM_DIAGRAM):   end;
191707    +IF _DM_BAD EQ 0 THEN DO;
MPRINT(EM_DIAGRAM):   IF _DM_BAD EQ 0 THEN DO;
191708    +   P_Risk1  =     3.58569458441064 * H11  +      -0.515832826571 * H12
191709    +          +    -1.66569368800451 * H13 ;
MPRINT(EM_DIAGRAM):   P_Risk1 = 3.58569458441064 * H11 + -0.515832826571 * H12 + 
-1.66569368800451 * H13 ;
191710    +   P_Risk1  =    -0.88552764641962 + P_Risk1 ;
MPRINT(EM_DIAGRAM):   P_Risk1 = -0.88552764641962 + P_Risk1 ;
191711    +   P_Risk0  = 0;
MPRINT(EM_DIAGRAM):   P_Risk0 = 0;
191712    +   _MAX_ = MAX (P_Risk1 , P_Risk0 );
MPRINT(EM_DIAGRAM):   _MAX_ = MAX (P_Risk1 , P_Risk0 );
191713    +   _SUM_ = 0.;
MPRINT(EM_DIAGRAM):   _SUM_ = 0.;
191714    +   P_Risk1  = EXP(P_Risk1  - _MAX_);
MPRINT(EM_DIAGRAM):   P_Risk1 = EXP(P_Risk1 - _MAX_);
191715    +   _SUM_ = _SUM_ + P_Risk1 ;
MPRINT(EM_DIAGRAM):   _SUM_ = _SUM_ + P_Risk1 ;
191716    +   P_Risk0  = EXP(P_Risk0  - _MAX_);
MPRINT(EM_DIAGRAM):   P_Risk0 = EXP(P_Risk0 - _MAX_);
191717    +   _SUM_ = _SUM_ + P_Risk0 ;
MPRINT(EM_DIAGRAM):   _SUM_ = _SUM_ + P_Risk0 ;
191718    +   P_Risk1  = P_Risk1  / _SUM_;
MPRINT(EM_DIAGRAM):   P_Risk1 = P_Risk1 / _SUM_;
191719    +   P_Risk0  = P_Risk0  / _SUM_;
MPRINT(EM_DIAGRAM):   P_Risk0 = P_Risk0 / _SUM_;
191720    +END;
MPRINT(EM_DIAGRAM):   END;
191721    +ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
191722    +   P_Risk1  = .;
MPRINT(EM_DIAGRAM):   P_Risk1 = .;
191723    +   P_Risk0  = .;
MPRINT(EM_DIAGRAM):   P_Risk0 = .;
191724    +END;
MPRINT(EM_DIAGRAM):   END;
191725    +IF _DM_BAD EQ 1 THEN DO;
MPRINT(EM_DIAGRAM):   IF _DM_BAD EQ 1 THEN DO;
191726    +   P_Risk1  =                 0.54;
MPRINT(EM_DIAGRAM):   P_Risk1 = 0.54;
191727    +   P_Risk0  =                 0.46;
MPRINT(EM_DIAGRAM):   P_Risk0 = 0.46;
191728    +END;
MPRINT(EM_DIAGRAM):   END;
191729    +*** *****************************;
MPRINT(EM_DIAGRAM):   *** *****************************;
191730    +*** Writing the Residuals  of the Node Risk ;
MPRINT(EM_DIAGRAM):   *** Writing the Residuals of the Node Risk ;
191731    +*** ******************************;
MPRINT(EM_DIAGRAM):   *** ******************************;
191732    +IF MISSING( Risk1 ) THEN R_Risk1  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( Risk1 ) THEN R_Risk1 = . ;
191733    +ELSE R_Risk1  = Risk1  - P_Risk1 ;
MPRINT(EM_DIAGRAM):   ELSE R_Risk1 = Risk1 - P_Risk1 ;
191734    +IF MISSING( Risk0 ) THEN R_Risk0  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( Risk0 ) THEN R_Risk0 = . ;
191735    +ELSE R_Risk0  = Risk0  - P_Risk0 ;
MPRINT(EM_DIAGRAM):   ELSE R_Risk0 = Risk0 - P_Risk0 ;
191736    +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
191737    +*** Writing the I_Risk  AND U_Risk ;
MPRINT(EM_DIAGRAM):   *** Writing the I_Risk AND U_Risk ;
191738    +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
191739    +_MAXP_ = P_Risk1 ;
MPRINT(EM_DIAGRAM):   _MAXP_ = P_Risk1 ;
191740    +I_Risk  = "1           " ;
MPRINT(EM_DIAGRAM):   I_Risk = "1           " ;
191741    +U_Risk  =                    1;
MPRINT(EM_DIAGRAM):   U_Risk = 1;
191742    +IF( _MAXP_ LT P_Risk0  ) THEN DO;
MPRINT(EM_DIAGRAM):   IF( _MAXP_ LT P_Risk0 ) THEN DO;
191743    +   _MAXP_ = P_Risk0 ;
MPRINT(EM_DIAGRAM):   _MAXP_ = P_Risk0 ;
191744    +   I_Risk  = "0           " ;
MPRINT(EM_DIAGRAM):   I_Risk = "0           " ;
191745    +   U_Risk  =                    0;
MPRINT(EM_DIAGRAM):   U_Risk = 0;
191746    +END;
MPRINT(EM_DIAGRAM):   END;
191747    +********************************;
MPRINT(EM_DIAGRAM):   ********************************;
191748    +*** End Scoring Code for Neural;
MPRINT(EM_DIAGRAM):   *** End Scoring Code for Neural;
191749    +********************************;
MPRINT(EM_DIAGRAM):   ********************************;
191750    +drop
191751    +H11
191752    +H12
191753    +H13
191754    +;
MPRINT(EM_DIAGRAM):   drop H11 H12 H13 ;
191755    +drop S_:;
MPRINT(EM_DIAGRAM):   drop S_:;
NOTE: %INCLUDE (level 1) ending.
MPRINT(EM_DIAGRAM):   run;
191756     run;

NOTE: DATA STEP view saved on file EMWS1.NEURAL7_TRAIN.
NOTE: A stored DATA STEP view cannot run under a different operating system.
NOTE: View EMWS1.REG3_TRAIN.VIEW used (Total process time):
      real time           0.25 seconds
      cpu time            0.21 seconds
      
NOTE: DATA statement used (Total process time):
      real time           0.26 seconds
      cpu time            0.23 seconds
      

MPRINT(EM_DIAGRAM):   quit;
191757     quit;
191758     filename emflow;
MPRINT(EM_DIAGRAM):   filename emflow;
NOTE: Fileref EMFLOW has been deassigned.
191759     filename emflow "H:\746\Decision Tree test\Workspaces\EMWS1\Neural7\EMFLOWSCORE.sas"
191759   ! ;
MPRINT(EM_DIAGRAM):    filename emflow "H:\746\Decision Tree 
test\Workspaces\EMWS1\Neural7\EMFLOWSCORE.sas";
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Neural7: Scoring VALIDATE data;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
191760     *------------------------------------------------------------*;
191761     * Neural7: Scoring VALIDATE data;
191762     *------------------------------------------------------------*;
191763     data EMWS1.Neural7_VALIDATE
191764     / view=EMWS1.Neural7_VALIDATE
191765     ;
MPRINT(EM_DIAGRAM):   data EMWS1.Neural7_VALIDATE / view=EMWS1.Neural7_VALIDATE ;
191766     set EMWS1.Reg3_VALIDATE
191767     ;
MPRINT(EM_DIAGRAM):   set EMWS1.Reg3_VALIDATE ;
191768     %inc emflow;
NOTE: %INCLUDE (level 1) file EMFLOW is file H:\746\Decision Tree 
      test\Workspaces\EMWS1\Neural7\EMFLOWSCORE.sas.
191769    +***********************************;
MPRINT(EM_DIAGRAM):   ***********************************;
191770    +*** Begin Scoring Code for Neural;
MPRINT(EM_DIAGRAM):   *** Begin Scoring Code for Neural;
191771    +***********************************;
MPRINT(EM_DIAGRAM):   ***********************************;
191772    +DROP _DM_BAD _EPS _NOCL_ _MAX_ _MAXP_ _SUM_ _NTRIALS;
MPRINT(EM_DIAGRAM):   DROP _DM_BAD _EPS _NOCL_ _MAX_ _MAXP_ _SUM_ _NTRIALS;
191773    + _DM_BAD = 0;
MPRINT(EM_DIAGRAM):   _DM_BAD = 0;
191774    + _NOCL_ = .;
MPRINT(EM_DIAGRAM):   _NOCL_ = .;
191775    + _MAX_ = .;
MPRINT(EM_DIAGRAM):   _MAX_ = .;
191776    + _MAXP_ = .;
MPRINT(EM_DIAGRAM):   _MAXP_ = .;
191777    + _SUM_ = .;
MPRINT(EM_DIAGRAM):   _SUM_ = .;
191778    + _NTRIALS = .;
MPRINT(EM_DIAGRAM):   _NTRIALS = .;
191779    + _EPS =                1E-10;
MPRINT(EM_DIAGRAM):   _EPS = 1E-10;
191780    +LENGTH _WARN_ $4
191781    +      F_Risk  $ 12
191782    +;
MPRINT(EM_DIAGRAM):   LENGTH _WARN_ $4 F_Risk $ 12 ;
191783    +      label S_LOG_REP_engine_size = 'Standard: LOG_REP_engine_size' ;
MPRINT(EM_DIAGRAM):   label S_LOG_REP_engine_size = 'Standard: LOG_REP_engine_size' ;
191784    +
191785    +      label S_REP_city_mpg = 'Standard: REP_city_mpg' ;
MPRINT(EM_DIAGRAM):   label S_REP_city_mpg = 'Standard: REP_city_mpg' ;
191786    +
191787    +      label S_REP_highway_mpg = 'Standard: REP_highway_mpg' ;
MPRINT(EM_DIAGRAM):   label S_REP_highway_mpg = 'Standard: REP_highway_mpg' ;
191788    +
191789    +      label S_REP_wheel_base = 'Standard: REP_wheel_base' ;
MPRINT(EM_DIAGRAM):   label S_REP_wheel_base = 'Standard: REP_wheel_base' ;
191790    +
191791    +      label S_REP_width = 'Standard: REP_width' ;
MPRINT(EM_DIAGRAM):   label S_REP_width = 'Standard: REP_width' ;
191792    +
191793    +      label IMP_num_of_doors2 = 'Dummy: IMP_num_of_doors=2' ;
MPRINT(EM_DIAGRAM):   label IMP_num_of_doors2 = 'Dummy: IMP_num_of_doors=2' ;
191794    +
191795    +      label REP_num_of_cylinders__4 = 'Dummy: REP_num_of_cylinders=<=4' ;
MPRINT(EM_DIAGRAM):   label REP_num_of_cylinders__4 = 'Dummy: REP_num_of_cylinders=<=4' ;
191796    +
191797    +      label H11 = 'Hidden: H1=1' ;
MPRINT(EM_DIAGRAM):   label H11 = 'Hidden: H1=1' ;
191798    +
191799    +      label H12 = 'Hidden: H1=2' ;
MPRINT(EM_DIAGRAM):   label H12 = 'Hidden: H1=2' ;
191800    +
191801    +      label H13 = 'Hidden: H1=3' ;
MPRINT(EM_DIAGRAM):   label H13 = 'Hidden: H1=3' ;
191802    +
191803    +      label I_Risk = 'Into: Risk' ;
MPRINT(EM_DIAGRAM):   label I_Risk = 'Into: Risk' ;
191804    +
191805    +      label F_Risk = 'From: Risk' ;
MPRINT(EM_DIAGRAM):   label F_Risk = 'From: Risk' ;
191806    +
191807    +      label U_Risk = 'Unnormalized Into: Risk' ;
MPRINT(EM_DIAGRAM):   label U_Risk = 'Unnormalized Into: Risk' ;
191808    +
191809    +      label P_Risk1 = 'Predicted: Risk=1' ;
MPRINT(EM_DIAGRAM):   label P_Risk1 = 'Predicted: Risk=1' ;
191810    +
191811    +      label R_Risk1 = 'Residual: Risk=1' ;
MPRINT(EM_DIAGRAM):   label R_Risk1 = 'Residual: Risk=1' ;
191812    +
191813    +      label P_Risk0 = 'Predicted: Risk=0' ;
MPRINT(EM_DIAGRAM):   label P_Risk0 = 'Predicted: Risk=0' ;
191814    +
191815    +      label R_Risk0 = 'Residual: Risk=0' ;
MPRINT(EM_DIAGRAM):   label R_Risk0 = 'Residual: Risk=0' ;
191816    +
191817    +      label  _WARN_ = "Warnings";
MPRINT(EM_DIAGRAM):   label _WARN_ = "Warnings";
191818    +
191819    +*** Generate dummy variables for IMP_num_of_doors ;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for IMP_num_of_doors ;
191820    +drop IMP_num_of_doors2 ;
MPRINT(EM_DIAGRAM):   drop IMP_num_of_doors2 ;
191821    +if missing( IMP_num_of_doors ) then do;
MPRINT(EM_DIAGRAM):   if missing( IMP_num_of_doors ) then do;
191822    +   IMP_num_of_doors2 = .;
MPRINT(EM_DIAGRAM):   IMP_num_of_doors2 = .;
191823    +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
191824    +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
191825    +end;
MPRINT(EM_DIAGRAM):   end;
191826    +else do;
MPRINT(EM_DIAGRAM):   else do;
191827    +   length _dm12 $ 12; drop _dm12 ;
MPRINT(EM_DIAGRAM):   length _dm12 $ 12;
MPRINT(EM_DIAGRAM):   drop _dm12 ;
191828    +   _dm12 = put( IMP_num_of_doors , BEST12. );
MPRINT(EM_DIAGRAM):   _dm12 = put( IMP_num_of_doors , BEST12. );
191829    +   %DMNORMIP( _dm12 )
MPRINT(DMNORMIP):   call dmnorm(_dm12,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
191830    +   if _dm12 = '4'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 = '4' then do;
191831    +      IMP_num_of_doors2 = -1;
MPRINT(EM_DIAGRAM):   IMP_num_of_doors2 = -1;
191832    +   end;
MPRINT(EM_DIAGRAM):   end;
191833    +   else if _dm12 = '2'  then do;
MPRINT(EM_DIAGRAM):   else if _dm12 = '2' then do;
191834    +      IMP_num_of_doors2 = 1;
MPRINT(EM_DIAGRAM):   IMP_num_of_doors2 = 1;
191835    +   end;
MPRINT(EM_DIAGRAM):   end;
191836    +   else do;
MPRINT(EM_DIAGRAM):   else do;
191837    +      IMP_num_of_doors2 = .;
MPRINT(EM_DIAGRAM):   IMP_num_of_doors2 = .;
191838    +      substr(_warn_,2,1) = 'U';
MPRINT(EM_DIAGRAM):   substr(_warn_,2,1) = 'U';
191839    +      _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
191840    +   end;
MPRINT(EM_DIAGRAM):   end;
191841    +end;
MPRINT(EM_DIAGRAM):   end;
191842    +
191843    +*** Generate dummy variables for REP_num_of_cylinders ;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for REP_num_of_cylinders ;
191844    +drop REP_num_of_cylinders__4 ;
MPRINT(EM_DIAGRAM):   drop REP_num_of_cylinders__4 ;
191845    +if missing( REP_num_of_cylinders ) then do;
MPRINT(EM_DIAGRAM):   if missing( REP_num_of_cylinders ) then do;
191846    +   REP_num_of_cylinders__4 = .;
MPRINT(EM_DIAGRAM):   REP_num_of_cylinders__4 = .;
191847    +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
191848    +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
191849    +end;
MPRINT(EM_DIAGRAM):   end;
191850    +else do;
MPRINT(EM_DIAGRAM):   else do;
191851    +   length _dm6 $ 6; drop _dm6 ;
MPRINT(EM_DIAGRAM):   length _dm6 $ 6;
MPRINT(EM_DIAGRAM):   drop _dm6 ;
191852    +   %DMNORMCP( REP_num_of_cylinders , _dm6 )
MPRINT(DMNORMCP):   _dm6=dmnorm(REP_num_of_cylinders,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMCP):  );
191853    +   if _dm6 = '<=4'  then do;
MPRINT(EM_DIAGRAM):   if _dm6 = '<=4' then do;
191854    +      REP_num_of_cylinders__4 = 1;
MPRINT(EM_DIAGRAM):   REP_num_of_cylinders__4 = 1;
191855    +   end;
MPRINT(EM_DIAGRAM):   end;
191856    +   else if _dm6 = '>4'  then do;
MPRINT(EM_DIAGRAM):   else if _dm6 = '>4' then do;
191857    +      REP_num_of_cylinders__4 = -1;
MPRINT(EM_DIAGRAM):   REP_num_of_cylinders__4 = -1;
191858    +   end;
MPRINT(EM_DIAGRAM):   end;
191859    +   else do;
MPRINT(EM_DIAGRAM):   else do;
191860    +      REP_num_of_cylinders__4 = .;
MPRINT(EM_DIAGRAM):   REP_num_of_cylinders__4 = .;
191861    +      substr(_warn_,2,1) = 'U';
MPRINT(EM_DIAGRAM):   substr(_warn_,2,1) = 'U';
191862    +      _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
191863    +   end;
MPRINT(EM_DIAGRAM):   end;
191864    +end;
MPRINT(EM_DIAGRAM):   end;
191865    +
191866    +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
191867    +*** Checking missing input Interval
191868    +*** *************************;
MPRINT(EM_DIAGRAM):   *** Checking missing input Interval *** *************************;
191869    +
191870    +IF NMISS(
191871    +   LOG_REP_engine_size ,
191872    +   REP_city_mpg ,
191873    +   REP_highway_mpg ,
191874    +   REP_wheel_base ,
191875    +   REP_width   ) THEN DO;
MPRINT(EM_DIAGRAM):   IF NMISS( LOG_REP_engine_size , REP_city_mpg , REP_highway_mpg , 
REP_wheel_base , REP_width ) THEN DO;
191876    +   SUBSTR(_WARN_, 1, 1) = 'M';
MPRINT(EM_DIAGRAM):   SUBSTR(_WARN_, 1, 1) = 'M';
191877    +
191878    +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
191879    +END;
MPRINT(EM_DIAGRAM):   END;
191880    +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
191881    +*** Writing the Node intvl ;
MPRINT(EM_DIAGRAM):   *** Writing the Node intvl ;
191882    +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
191883    +IF _DM_BAD EQ 0 THEN DO;
MPRINT(EM_DIAGRAM):   IF _DM_BAD EQ 0 THEN DO;
191884    +   S_LOG_REP_engine_size  =    -19.3053254119757 +     4.02929302984948 *
191885    +        LOG_REP_engine_size ;
MPRINT(EM_DIAGRAM):   S_LOG_REP_engine_size = -19.3053254119757 + 4.02929302984948 * 
LOG_REP_engine_size ;
191886    +   S_REP_city_mpg  =    -4.23279255832632 +     0.16535248553422 *
191887    +        REP_city_mpg ;
MPRINT(EM_DIAGRAM):   S_REP_city_mpg = -4.23279255832632 + 0.16535248553422 * REP_city_mpg ;
191888    +   S_REP_highway_mpg  =    -4.99166764925563 +     0.16020006928199 *
191889    +        REP_highway_mpg ;
MPRINT(EM_DIAGRAM):   S_REP_highway_mpg = -4.99166764925563 + 0.16020006928199 * 
REP_highway_mpg ;
191890    +   S_REP_wheel_base  =    -17.8009087180129 +     0.18059887504832 *
191891    +        REP_wheel_base ;
MPRINT(EM_DIAGRAM):   S_REP_wheel_base = -17.8009087180129 + 0.18059887504832 * REP_wheel_base 
;
191892    +   S_REP_width  =    -35.9167499004784 +     0.54673628301566 * REP_width ;
MPRINT(EM_DIAGRAM):   S_REP_width = -35.9167499004784 + 0.54673628301566 * REP_width ;
191893    +END;
MPRINT(EM_DIAGRAM):   END;
191894    +ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
191895    +   IF MISSING( LOG_REP_engine_size ) THEN S_LOG_REP_engine_size  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( LOG_REP_engine_size ) THEN S_LOG_REP_engine_size = . ;
191896    +   ELSE S_LOG_REP_engine_size
191897    +          =    -19.3053254119757 +     4.02929302984948 * LOG_REP_engine_size
191898    +         ;
MPRINT(EM_DIAGRAM):   ELSE S_LOG_REP_engine_size = -19.3053254119757 + 4.02929302984948 * 
LOG_REP_engine_size ;
191899    +   IF MISSING( REP_city_mpg ) THEN S_REP_city_mpg  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( REP_city_mpg ) THEN S_REP_city_mpg = . ;
191900    +   ELSE S_REP_city_mpg  =    -4.23279255832632 +     0.16535248553422 *
191901    +        REP_city_mpg ;
MPRINT(EM_DIAGRAM):   ELSE S_REP_city_mpg = -4.23279255832632 + 0.16535248553422 * 
REP_city_mpg ;
191902    +   IF MISSING( REP_highway_mpg ) THEN S_REP_highway_mpg  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( REP_highway_mpg ) THEN S_REP_highway_mpg = . ;
191903    +   ELSE S_REP_highway_mpg  =    -4.99166764925563 +     0.16020006928199 *
191904    +        REP_highway_mpg ;
MPRINT(EM_DIAGRAM):   ELSE S_REP_highway_mpg = -4.99166764925563 + 0.16020006928199 * 
REP_highway_mpg ;
191905    +   IF MISSING( REP_wheel_base ) THEN S_REP_wheel_base  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( REP_wheel_base ) THEN S_REP_wheel_base = . ;
191906    +   ELSE S_REP_wheel_base  =    -17.8009087180129 +     0.18059887504832 *
191907    +        REP_wheel_base ;
MPRINT(EM_DIAGRAM):   ELSE S_REP_wheel_base = -17.8009087180129 + 0.18059887504832 * 
REP_wheel_base ;
191908    +   IF MISSING( REP_width ) THEN S_REP_width  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( REP_width ) THEN S_REP_width = . ;
191909    +   ELSE S_REP_width  =    -35.9167499004784 +     0.54673628301566 * REP_width
191910    +         ;
MPRINT(EM_DIAGRAM):   ELSE S_REP_width = -35.9167499004784 + 0.54673628301566 * REP_width ;
191911    +END;
MPRINT(EM_DIAGRAM):   END;
191912    +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
191913    +*** Writing the Node nom ;
MPRINT(EM_DIAGRAM):   *** Writing the Node nom ;
191914    +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
191915    +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
191916    +*** Writing the Node H1 ;
MPRINT(EM_DIAGRAM):   *** Writing the Node H1 ;
191917    +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
191918    +IF _DM_BAD EQ 0 THEN DO;
MPRINT(EM_DIAGRAM):   IF _DM_BAD EQ 0 THEN DO;
191919    +   H11  =    -0.36366770006996 * S_LOG_REP_engine_size
191920    +          +    -1.13673742378883 * S_REP_city_mpg  +     0.91302518078464 *
191921    +        S_REP_highway_mpg  +    -0.34934074959931 * S_REP_wheel_base
191922    +          +     0.57246621702163 * S_REP_width ;
MPRINT(EM_DIAGRAM):   H11 = -0.36366770006996 * S_LOG_REP_engine_size + -1.13673742378883 * 
S_REP_city_mpg + 0.91302518078464 * S_REP_highway_mpg + -0.34934074959931 * S_REP_wheel_base + 
0.57246621702163 * S_REP_width ;
191923    +   H12  =     0.53048536219802 * S_LOG_REP_engine_size
191924    +          +    -0.67453234453218 * S_REP_city_mpg  +     0.24400439315045 *
191925    +        S_REP_highway_mpg  +     0.33233582789552 * S_REP_wheel_base
191926    +          +     -0.0304230255997 * S_REP_width ;
MPRINT(EM_DIAGRAM):   H12 = 0.53048536219802 * S_LOG_REP_engine_size + -0.67453234453218 * 
S_REP_city_mpg + 0.24400439315045 * S_REP_highway_mpg + 0.33233582789552 * S_REP_wheel_base + 
-0.0304230255997 * S_REP_width ;
191927    +   H13  =     0.07821121780931 * S_LOG_REP_engine_size
191928    +          +     0.69146336850495 * S_REP_city_mpg  +    -0.60866116430521 *
191929    +        S_REP_highway_mpg  +     1.46311014357332 * S_REP_wheel_base
191930    +          +     0.07372964019523 * S_REP_width ;
MPRINT(EM_DIAGRAM):   H13 = 0.07821121780931 * S_LOG_REP_engine_size + 0.69146336850495 * 
S_REP_city_mpg + -0.60866116430521 * S_REP_highway_mpg + 1.46311014357332 * S_REP_wheel_base + 
0.07372964019523 * S_REP_width ;
191931    +   H11  = H11  +     0.86004479703622 * IMP_num_of_doors2
191932    +          +     -0.3944119407107 * REP_num_of_cylinders__4 ;
MPRINT(EM_DIAGRAM):   H11 = H11 + 0.86004479703622 * IMP_num_of_doors2 + -0.3944119407107 * 
REP_num_of_cylinders__4 ;
191933    +   H12  = H12  +     0.24080030847293 * IMP_num_of_doors2
191934    +          +    -0.13639204314563 * REP_num_of_cylinders__4 ;
MPRINT(EM_DIAGRAM):   H12 = H12 + 0.24080030847293 * IMP_num_of_doors2 + -0.13639204314563 * 
REP_num_of_cylinders__4 ;
191935    +   H13  = H13  +     0.25638258728882 * IMP_num_of_doors2
191936    +          +    -0.27625855397288 * REP_num_of_cylinders__4 ;
MPRINT(EM_DIAGRAM):   H13 = H13 + 0.25638258728882 * IMP_num_of_doors2 + -0.27625855397288 * 
REP_num_of_cylinders__4 ;
191937    +   H11  =     0.80114065756396 + H11 ;
MPRINT(EM_DIAGRAM):   H11 = 0.80114065756396 + H11 ;
191938    +   H12  =    -1.03756364869211 + H12 ;
MPRINT(EM_DIAGRAM):   H12 = -1.03756364869211 + H12 ;
191939    +   H13  =     0.68488031057643 + H13 ;
MPRINT(EM_DIAGRAM):   H13 = 0.68488031057643 + H13 ;
191940    +   H11  = TANH(H11 );
MPRINT(EM_DIAGRAM):   H11 = TANH(H11 );
191941    +   H12  = TANH(H12 );
MPRINT(EM_DIAGRAM):   H12 = TANH(H12 );
191942    +   H13  = TANH(H13 );
MPRINT(EM_DIAGRAM):   H13 = TANH(H13 );
191943    +END;
MPRINT(EM_DIAGRAM):   END;
191944    +ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
191945    +   H11  = .;
MPRINT(EM_DIAGRAM):   H11 = .;
191946    +   H12  = .;
MPRINT(EM_DIAGRAM):   H12 = .;
191947    +   H13  = .;
MPRINT(EM_DIAGRAM):   H13 = .;
191948    +END;
MPRINT(EM_DIAGRAM):   END;
191949    +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
191950    +*** Writing the Node Risk ;
MPRINT(EM_DIAGRAM):   *** Writing the Node Risk ;
191951    +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
191952    +
191953    +*** Generate dummy variables for Risk ;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for Risk ;
191954    +drop Risk1 Risk0 ;
MPRINT(EM_DIAGRAM):   drop Risk1 Risk0 ;
191955    +label F_Risk = 'From: Risk' ;
MPRINT(EM_DIAGRAM):   label F_Risk = 'From: Risk' ;
191956    +length F_Risk $ 12;
MPRINT(EM_DIAGRAM):   length F_Risk $ 12;
191957    +F_Risk = put( Risk , BEST12. );
MPRINT(EM_DIAGRAM):   F_Risk = put( Risk , BEST12. );
191958    +%DMNORMIP( F_Risk )
MPRINT(DMNORMIP):   call dmnorm(F_Risk,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
191959    +if missing( Risk ) then do;
MPRINT(EM_DIAGRAM):   if missing( Risk ) then do;
191960    +   Risk1 = .;
MPRINT(EM_DIAGRAM):   Risk1 = .;
191961    +   Risk0 = .;
MPRINT(EM_DIAGRAM):   Risk0 = .;
191962    +end;
MPRINT(EM_DIAGRAM):   end;
191963    +else do;
MPRINT(EM_DIAGRAM):   else do;
191964    +   if F_Risk = '1'  then do;
MPRINT(EM_DIAGRAM):   if F_Risk = '1' then do;
191965    +      Risk1 = 1;
MPRINT(EM_DIAGRAM):   Risk1 = 1;
191966    +      Risk0 = 0;
MPRINT(EM_DIAGRAM):   Risk0 = 0;
191967    +   end;
MPRINT(EM_DIAGRAM):   end;
191968    +   else if F_Risk = '0'  then do;
MPRINT(EM_DIAGRAM):   else if F_Risk = '0' then do;
191969    +      Risk1 = 0;
MPRINT(EM_DIAGRAM):   Risk1 = 0;
191970    +      Risk0 = 1;
MPRINT(EM_DIAGRAM):   Risk0 = 1;
191971    +   end;
MPRINT(EM_DIAGRAM):   end;
191972    +   else do;
MPRINT(EM_DIAGRAM):   else do;
191973    +      Risk1 = .;
MPRINT(EM_DIAGRAM):   Risk1 = .;
191974    +      Risk0 = .;
MPRINT(EM_DIAGRAM):   Risk0 = .;
191975    +   end;
MPRINT(EM_DIAGRAM):   end;
191976    +end;
MPRINT(EM_DIAGRAM):   end;
191977    +IF _DM_BAD EQ 0 THEN DO;
MPRINT(EM_DIAGRAM):   IF _DM_BAD EQ 0 THEN DO;
191978    +   P_Risk1  =     3.58569458441064 * H11  +      -0.515832826571 * H12
191979    +          +    -1.66569368800451 * H13 ;
MPRINT(EM_DIAGRAM):   P_Risk1 = 3.58569458441064 * H11 + -0.515832826571 * H12 + 
-1.66569368800451 * H13 ;
191980    +   P_Risk1  =    -0.88552764641962 + P_Risk1 ;
MPRINT(EM_DIAGRAM):   P_Risk1 = -0.88552764641962 + P_Risk1 ;
191981    +   P_Risk0  = 0;
MPRINT(EM_DIAGRAM):   P_Risk0 = 0;
191982    +   _MAX_ = MAX (P_Risk1 , P_Risk0 );
MPRINT(EM_DIAGRAM):   _MAX_ = MAX (P_Risk1 , P_Risk0 );
191983    +   _SUM_ = 0.;
MPRINT(EM_DIAGRAM):   _SUM_ = 0.;
191984    +   P_Risk1  = EXP(P_Risk1  - _MAX_);
MPRINT(EM_DIAGRAM):   P_Risk1 = EXP(P_Risk1 - _MAX_);
191985    +   _SUM_ = _SUM_ + P_Risk1 ;
MPRINT(EM_DIAGRAM):   _SUM_ = _SUM_ + P_Risk1 ;
191986    +   P_Risk0  = EXP(P_Risk0  - _MAX_);
MPRINT(EM_DIAGRAM):   P_Risk0 = EXP(P_Risk0 - _MAX_);
191987    +   _SUM_ = _SUM_ + P_Risk0 ;
MPRINT(EM_DIAGRAM):   _SUM_ = _SUM_ + P_Risk0 ;
191988    +   P_Risk1  = P_Risk1  / _SUM_;
MPRINT(EM_DIAGRAM):   P_Risk1 = P_Risk1 / _SUM_;
191989    +   P_Risk0  = P_Risk0  / _SUM_;
MPRINT(EM_DIAGRAM):   P_Risk0 = P_Risk0 / _SUM_;
191990    +END;
MPRINT(EM_DIAGRAM):   END;
191991    +ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
191992    +   P_Risk1  = .;
MPRINT(EM_DIAGRAM):   P_Risk1 = .;
191993    +   P_Risk0  = .;
MPRINT(EM_DIAGRAM):   P_Risk0 = .;
191994    +END;
MPRINT(EM_DIAGRAM):   END;
191995    +IF _DM_BAD EQ 1 THEN DO;
MPRINT(EM_DIAGRAM):   IF _DM_BAD EQ 1 THEN DO;
191996    +   P_Risk1  =                 0.54;
MPRINT(EM_DIAGRAM):   P_Risk1 = 0.54;
191997    +   P_Risk0  =                 0.46;
MPRINT(EM_DIAGRAM):   P_Risk0 = 0.46;
191998    +END;
MPRINT(EM_DIAGRAM):   END;
191999    +*** *****************************;
MPRINT(EM_DIAGRAM):   *** *****************************;
192000    +*** Writing the Residuals  of the Node Risk ;
MPRINT(EM_DIAGRAM):   *** Writing the Residuals of the Node Risk ;
192001    +*** ******************************;
MPRINT(EM_DIAGRAM):   *** ******************************;
192002    +IF MISSING( Risk1 ) THEN R_Risk1  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( Risk1 ) THEN R_Risk1 = . ;
192003    +ELSE R_Risk1  = Risk1  - P_Risk1 ;
MPRINT(EM_DIAGRAM):   ELSE R_Risk1 = Risk1 - P_Risk1 ;
192004    +IF MISSING( Risk0 ) THEN R_Risk0  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( Risk0 ) THEN R_Risk0 = . ;
192005    +ELSE R_Risk0  = Risk0  - P_Risk0 ;
MPRINT(EM_DIAGRAM):   ELSE R_Risk0 = Risk0 - P_Risk0 ;
192006    +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
192007    +*** Writing the I_Risk  AND U_Risk ;
MPRINT(EM_DIAGRAM):   *** Writing the I_Risk AND U_Risk ;
192008    +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
192009    +_MAXP_ = P_Risk1 ;
MPRINT(EM_DIAGRAM):   _MAXP_ = P_Risk1 ;
192010    +I_Risk  = "1           " ;
MPRINT(EM_DIAGRAM):   I_Risk = "1           " ;
192011    +U_Risk  =                    1;
MPRINT(EM_DIAGRAM):   U_Risk = 1;
192012    +IF( _MAXP_ LT P_Risk0  ) THEN DO;
MPRINT(EM_DIAGRAM):   IF( _MAXP_ LT P_Risk0 ) THEN DO;
192013    +   _MAXP_ = P_Risk0 ;
MPRINT(EM_DIAGRAM):   _MAXP_ = P_Risk0 ;
192014    +   I_Risk  = "0           " ;
MPRINT(EM_DIAGRAM):   I_Risk = "0           " ;
192015    +   U_Risk  =                    0;
MPRINT(EM_DIAGRAM):   U_Risk = 0;
192016    +END;
MPRINT(EM_DIAGRAM):   END;
192017    +********************************;
MPRINT(EM_DIAGRAM):   ********************************;
192018    +*** End Scoring Code for Neural;
MPRINT(EM_DIAGRAM):   *** End Scoring Code for Neural;
192019    +********************************;
MPRINT(EM_DIAGRAM):   ********************************;
192020    +drop
192021    +H11
192022    +H12
192023    +H13
192024    +;
MPRINT(EM_DIAGRAM):   drop H11 H12 H13 ;
192025    +drop S_:;
MPRINT(EM_DIAGRAM):   drop S_:;
NOTE: %INCLUDE (level 1) ending.
MPRINT(EM_DIAGRAM):   run;
192026     run;

NOTE: DATA STEP view saved on file EMWS1.NEURAL7_VALIDATE.
NOTE: A stored DATA STEP view cannot run under a different operating system.
NOTE: View EMWS1.REG3_VALIDATE.VIEW used (Total process time):
      real time           4.13 seconds
      cpu time            0.21 seconds
      
NOTE: DATA statement used (Total process time):
      real time           4.14 seconds
      cpu time            0.21 seconds
      

MPRINT(EM_DIAGRAM):   quit;
192027     quit;
192028     filename emflow;
MPRINT(EM_DIAGRAM):   filename emflow;
NOTE: Fileref EMFLOW has been deassigned.
192029     *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
192030     * Neural7: Computing metadata for TRAIN data;
MPRINT(EM_DIAGRAM):   * Neural7: Computing metadata for TRAIN data;
192031     *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;

NOTE: View EMWS1.NEURAL7_TRAIN.VIEW used (Total process time):
      real time           0.28 seconds
      cpu time            0.29 seconds
      
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * &nodeid: Computing Metadata for TRAIN data;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   filename _delta "H:\746\Decision Tree 
test\Workspaces\EMWS1\Neural7\CDELTA_TRAIN.sas";
MPRINT(EMADVISECOLUMNS):   proc display c=sashelp.emmeta.advisecolumns.scl;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    options validvarname=any;
MPRINT(EMADVISECOLUMNS):   proc contents data=EMWS1.Neural7_TRAIN out=_tempAdvisor noprint;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):   options validvarname=V7;
MPRINT(EMADVISECOLUMNS):    data _null_;
MPRINT(EMADVISECOLUMNS):   dsid = open('EMWS1.Neural7_TRAIN');
MPRINT(EMADVISECOLUMNS):   call symput('_dsidTable', strip(put(dsid, best.)));
MPRINT(EMADVISECOLUMNS):   if dsid then do;
MPRINT(EMADVISECOLUMNS):   call symput('_engineTable', attrc(dsid, 'ENGINE'));
MPRINT(EMADVISECOLUMNS):   dsid = close(dsid);
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    proc contents data=EMWS1.Neural7_TRAIN out=WORK.M0XAQRRG noprint;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M0XAQRRG;
MPRINT(EMADVISECOLUMNS):   length NAME $ 64 TYPE $ 1 LABEL $ 200 FORMAT $ 36 INFORMAT $36 
INDEX $ 1 INDEXTYPE $ 9;
MPRINT(EMADVISECOLUMNS):   label NAME =;
MPRINT(EMADVISECOLUMNS):   set WORK.M0XAQRRG(keep=name type length label format formatl 
formatd informat informl informd idxusage rename=(type=itype));
MPRINT(EMADVISECOLUMNS):   if itype = 1 then type = 'N';
MPRINT(EMADVISECOLUMNS):   else type = 'C';
MPRINT(EMADVISECOLUMNS):   if formatl > 0 then do;
MPRINT(EMADVISECOLUMNS):   if format ne ' ' then format = strip(format)!!strip(put(formatl, 
best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EMADVISECOLUMNS):   else format = strip(put(formatl, best12.))!!'.'!!strip(put(formatd, 
best12.));
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if format ne '' then format = strip(format)!!'.';
MPRINT(EMADVISECOLUMNS):   if informl > 0 then do;
MPRINT(EMADVISECOLUMNS):   if informat ne ' ' then informat = 
strip(informat)!!strip(put(informl, best12.))!!'.'!!strip(put(informd, best12.));
MPRINT(EMADVISECOLUMNS):   else informat = strip(put(informl, 
best12.))!!'.'!!strip(put(informd, best12.));
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if informat ne '' then informat = strip(informat)!!'.';
MPRINT(EMADVISECOLUMNS):   if idxusage = 'NONE' then index ="N";
MPRINT(EMADVISECOLUMNS):   else index = "Y";
MPRINT(EMADVISECOLUMNS):   indextype = idxusage;
MPRINT(EMADVISECOLUMNS):   drop idxusage itype formatl formatd informl informd;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M0XAQRRG;
MPRINT(EMADVISECOLUMNS):   length UNAME $64;
MPRINT(EMADVISECOLUMNS):   set WORK.M0XAQRRG;
MPRINT(EMADVISECOLUMNS):   UNAME = upcase(NAME);
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    proc sort data=WORK.M3PAVYMK NOTHREADS;
MPRINT(EMADVISECOLUMNS):   by UNAME;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M3PAVYMK;
MPRINT(EMADVISECOLUMNS):   drop UNAME;
MPRINT(EMADVISECOLUMNS):   set WORK.M3PAVYMK;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M334N87G(keep=NAME ATTR);
MPRINT(EMADVISECOLUMNS):   length ATTR $ 20;
MPRINT(EMADVISECOLUMNS):   set WORK.M3PAVYMK;
MPRINT(EMADVISECOLUMNS):   if level ne "INTERVAL" then do;
MPRINT(EMADVISECOLUMNS):   if order = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'ORDER';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if format ne ' ' and formattype = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'FORMATTYPE';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if role = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'ROLE';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if level = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'LEVEL';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if type = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'TYPE';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if index = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'INDEX';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if report = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'REPORT';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):   proc sort NOTHREADS;
MPRINT(EMADVISECOLUMNS):   by attr;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M3PAVYMK;
MPRINT(EMADVISECOLUMNS):   length NAME $64 ROLE $ 32 LEVEL $ 10 ORDER $ 8 CREATOR $32 
FORMATTYPE $ 10 FAMILY $ 10 LOWERLIMIT 8 UPPERLIMIT 8 REPORT $1 DISTRIBUTION $ 20 COMMENT $64;
MPRINT(EMADVISECOLUMNS):   length levelAssigned 8 roleAssigned 8 PRICE 8;
MPRINT(EMADVISECOLUMNS):   set WORK.M3PAVYMK;
MPRINT(EMADVISECOLUMNS):   if formattype = ' ' then do;
MPRINT(EMADVISECOLUMNS):   if format ne ' ' then do;
MPRINT(EMADVISECOLUMNS):   if type = 'N' then do;
MPRINT(EMADVISECOLUMNS):   pos = indexc(format,'.1234567890');
MPRINT(EMADVISECOLUMNS):   if pos > 1 then tempfmt = substr(format,1, pos-1);
MPRINT(EMADVISECOLUMNS):   else tempfmt = ' ';
MPRINT(EMADVISECOLUMNS):   flen = length(tempfmt);
MPRINT(EMADVISECOLUMNS):   select;
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("DATE" "DAY" "DDMMYY" "DOWNAME" "JULDAY" "JULIAN" 
"MMDDYY" "MMDDYYD" "MMDDYYC" "MMDDYYN" "MMDDYYP" "MMDDYYS" "MONNAME" "MONTH" "MONYY" "NENGO" 
"QTR" "QTRR" "WEEKDATE" "WEEKDATX" "WEEKDAY" "WORDDATE" "WORDDATX" "YEAR" "YYMMDD" "YYMON" 
"YYMMDDC" "YYMMDDD" "YYMMDDN" "YYMMDDP" "YYMMDDS" "EURDFDE" "NJDATE" "NLDATE" "EURDFDD" 
"EURDFDWN" "EURDFMN" "EURDFMY" "EURDFWK" "EURDFWKX" "EURDFWDX" "EURDFDN" "EURDFDE" )) 
formattype = 'DATE';
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("DATETIME" "EURDFDT" "TOD" )) formattype = 
"DATETIME";
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("HHMM" "HOUR" "MMSS" "TIME" "TIMEAMPM" )) 
formattype = "TIME";
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("COMMA" "COMMAX" "DOLLAR" "DOLLARX" "E" "FRACT" 
"NEGPAREN" "PERCENT")) formattype="QUANTITY";
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("BINARY" "HEX" "IB" "OCTAL" "PD" "PIB" "PK" "RB" 
"SSN" "Z" "ZD")) formattype = "CODING";
MPRINT(EMADVISECOLUMNS):   otherwise do;
MPRINT(EMADVISECOLUMNS):   formattype = "USER";
MPRINT(EMADVISECOLUMNS):   if substr(tempfmt, 1, 6)='NLDATE' then formattype = "DATE";
MPRINT(EMADVISECOLUMNS):   else if substr(tempfmt, 1, 6)='NLDATM' then formattype = "DATETIME";
MPRINT(EMADVISECOLUMNS):   else if substr(tempfmt, 1, 4)='NLTIM' then formattype = "TIME";
MPRINT(EMADVISECOLUMNS):   else if flen >= 4 then do;
MPRINT(EMADVISECOLUMNS):   str = substr(tempfmt,1,4);
MPRINT(EMADVISECOLUMNS):   if str in ("MMYY" "YYMM" "YYQR") then formattype ="DATE";
MPRINT(EMADVISECOLUMNS):   else if str = "S370" then formattype = "CODING";
MPRINT(EMADVISECOLUMNS):   else if str = "BEST" then formattype = "NUM";
MPRINT(EMADVISECOLUMNS):   drop str;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if flen >=3 and substr(tempfmt,1,3) = "YYQ" then formatType = 
"DATE";
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   drop flen tempfmt pos;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else do;
MPRINT(EMADVISECOLUMNS):   formatType = "CATEGORY";
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if formatType = "NUM" then do;
MPRINT(EMADVISECOLUMNS):   if index = "Y" then formatType = "DISCRETE";
MPRINT(EMADVISECOLUMNS):   else formatType = "QUANTITY";
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if level = ' ' then do;
MPRINT(EMADVISECOLUMNS):   if formatType in ("CATEGORY", "CODING", "ID") or type = "C" then 
level = "NOMINAL";
MPRINT(EMADVISECOLUMNS):   else level = "INTERVAL";
MPRINT(EMADVISECOLUMNS):   levelAssigned = 1;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else level = upcase(level);
MPRINT(EMADVISECOLUMNS):   if role = ' ' then do;
MPRINT(EMADVISECOLUMNS):   length name_prefix $8 _uname $64;
MPRINT(EMADVISECOLUMNS):   drop name_prefix _uname _freqflag;
MPRINT(EMADVISECOLUMNS):   retain _freqflag;
MPRINT(EMADVISECOLUMNS):   if LENGTH> 80 then ROLE = 'TEXT';
MPRINT(EMADVISECOLUMNS):   _uname = upcase(NAME);
MPRINT(EMADVISECOLUMNS):   select(_uname);
MPRINT(EMADVISECOLUMNS):   when('_PARTIND_') do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'ID';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   when('_WARN_') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_SEGMENT') do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'SEGMENT';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   when('_NODE_') do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'SEGMENT';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   when('EM_CLASSTARGET') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_VALUETARGET') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_PREDICTION') ROLE = 'PREDICT';
MPRINT(EMADVISECOLUMNS):   when('EM_PROBABILITY') ROLE = 'PREDICT';
MPRINT(EMADVISECOLUMNS):   when('EM_EVENTPROBABILITY') ROLE = 'PREDICT';
MPRINT(EMADVISECOLUMNS):   when('EM_CLASSIFICATION') ROLE = 'CLASSIFICATION';
MPRINT(EMADVISECOLUMNS):   when('EM_DECISION') ROLE = 'DECISION';
MPRINT(EMADVISECOLUMNS):   when('EM_PROFIT') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_LOSS') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_ROI') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('URI') ROLE = 'URL';
MPRINT(EMADVISECOLUMNS):   when('FILTERED') ROLE = 'TEXTLOC';
MPRINT(EMADVISECOLUMNS):   otherwise do;
MPRINT(EMADVISECOLUMNS):   if upcase(NAME) =: 'ZIP' then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'REJECTED';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   COMMENT = 'Rejected by: Exceed the maximum class level of %s';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if upcase(NAME) in('FREQ', 'FREQUENCY') then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'FREQ';
MPRINT(EMADVISECOLUMNS):   if TYPE = 'C' then ROLE = 'INPUT';
MPRINT(EMADVISECOLUMNS):   else if _freqflag =1 then ROLE='REJECTED';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else do;
MPRINT(EMADVISECOLUMNS):   name_prefix = scan(_uname, 1, '_');
MPRINT(EMADVISECOLUMNS):   if scan(_uname, 2, '_') = '' then name_prefix='';
MPRINT(EMADVISECOLUMNS):   if name_prefix in('F', 'I', 'U') then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'CLASSIFICATION';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if name_prefix in('P', 'V') then ROLE = 'PREDICT';
MPRINT(EMADVISECOLUMNS):   else if name_prefix in('R', 'RS', 'RT', 'RD', 'RDS', 'RDT', 'RA', 
'RAS', 'RAT') then ROLE = 'RESIDUAL';
MPRINT(EMADVISECOLUMNS):   else if name_prefix ='D' then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'DECISION';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if name_prefix ='B' then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'SEGMENT';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if name_prefix in('EP', 'BP', 'CP', 'EL', 'CL', 'BL', 'W', 
'ROI', 'IC') then ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   else do;
MPRINT(EMADVISECOLUMNS):   array _ROLE_ (19) $32 _TEMPORARY_ 
('ASSESS','CLASSIFICATION','CENSOR', 'COST', 'CROSSID', 'DECISION', 'ID','INPUT', 'LABEL', 
'MISSING','PREDICT','REFERRER','REJECTED', 'RESIDUAL','SEGMENT', 'SEQUENCE','TARGET', 'TEXT', 
'TIMEID');
MPRINT(EMADVISECOLUMNS):   drop _found_ i;
MPRINT(EMADVISECOLUMNS):   _found_=0;
MPRINT(EMADVISECOLUMNS):   do i=1 to 19 until(_found_=1);
MPRINT(EMADVISECOLUMNS):   if index(_uname, trim(_ROLE_{i}))=1 then do;
MPRINT(EMADVISECOLUMNS):   ROLE=_ROLE_{i};
MPRINT(EMADVISECOLUMNS):   if ROLE = 'ID' then LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   else if ROLE = 'SEGMENT' then LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   else if ROLE = 'TIMEID' and TYPE='N' then LEVEL = 'INTERVAL';
MPRINT(EMADVISECOLUMNS):   _found_=1;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if length(_uname)>2 then do;
MPRINT(EMADVISECOLUMNS):   if substr(reverse(trim(_uname)), 1, 3) = 'DI_' then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'ID';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if ROLE='FREQ' then _freqflag=1;
MPRINT(EMADVISECOLUMNS):   else if ROLE = 'CLASSIFICATION' then LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   if symexist('RATEMKG_ROLE') then do;
MPRINT(EMADVISECOLUMNS):   if upcase(symget('RATEMKG_ROLE')) in('Y', 'YES') then do;
MPRINT(EMADVISECOLUMNS):   if _uname =: 'POLICY' then ROLE = 'POLICYID';
MPRINT(EMADVISECOLUMNS):   else if _uname in ('PARTITION', '_PARTIND_') then ROLE = 
'PARTITION';
MPRINT(EMADVISECOLUMNS):   else if type = 'N' then do;
MPRINT(EMADVISECOLUMNS):   if _uname = 'EXPOSURE' then ROLE = 'EXPOSURE';
MPRINT(EMADVISECOLUMNS):   else if _uname = 'YEAR' then ROLE = 'YEAR';
MPRINT(EMADVISECOLUMNS):   else if _uname = 'WEIGHT' then ROLE = 'WEIGHT';
MPRINT(EMADVISECOLUMNS):   else if _uname = 'OFFSET' then ROLE = 'OFFSET';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if role = ' ' then do;
MPRINT(EMADVISECOLUMNS):   if formattype in('DATE', 'DATETIME', 'TIME') then role = 'TIMEID';
MPRINT(EMADVISECOLUMNS):   else role = 'INPUT';
MPRINT(EMADVISECOLUMNS):   roleAssigned = 1;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else role = upcase(role);
MPRINT(EMADVISECOLUMNS):   if REPORT = '' then REPORT = 'N';
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M3PAVYMK;
MPRINT(EMADVISECOLUMNS):   set WORK.M3PAVYMK;
MPRINT(EMADVISECOLUMNS):   label NAME = "Variable Name" TYPE = "Type" ROLE = "Role" LEVEL= 
"Measurement Level" ORDER= "Order" CREATOR= "Creator" FORMATTYPE= "Format Type" FAMILY= 
"Family" DISTRIBUTION= "Distribution" PRICE= "Price" LOWERLIMIT= "Lower limit" UPPERLIMIT= 
"Upper Limit" REPORT= "Report" COMMENT= "Comment" INDEX= "Index" INDEXTYPE= "IndexType" LABEL= 
"Label" LENGTH= "Length";
MPRINT(EMADVISECOLUMNS):   drop levelAssigned roleAssigned;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):   
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   proc sort data=WORK.COLUMNMETA;
MPRINT(EM_DIAGRAM):   by NAME;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * &nodeid: Merge incoming metadata;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   proc contents data=EMWS1.Reg3_TRAIN noprint out=_temp2(keep=NAME);
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=_temp2;
MPRINT(EM_DIAGRAM):   by NAME;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=EMWS1.Reg3_CMeta_TRAIN out=_temp;
MPRINT(EM_DIAGRAM):   by NAME;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data EMWS1.Neural7_CMeta_TRAIN;
MPRINT(EM_DIAGRAM):   merge WORK.COLUMNMETA(in=_a) _temp2(in=_b) _temp(drop=FORMAT INFORMAT 
LENGTH INDEX INDEXTYPE in=_c) end=_eof_;
MPRINT(EM_DIAGRAM):   by NAME;
MPRINT(EM_DIAGRAM):   if (^_a and _b) or (^_c and _a and _b) then delete;
MPRINT(EM_DIAGRAM):   if ^_b then CREATOR = "Neural7";
MPRINT(EM_DIAGRAM):   length model $200;
MPRINT(EM_DIAGRAM):   label MODEL = "Model Node";
MPRINT(EM_DIAGRAM):   select(upcase(name));
MPRINT(EM_DIAGRAM):   when("P_RISK1") creator = "Neural7";
MPRINT(EM_DIAGRAM):   when("R_RISK1") creator = "Neural7";
MPRINT(EM_DIAGRAM):   when("P_RISK0") creator = "Neural7";
MPRINT(EM_DIAGRAM):   when("R_RISK0") creator = "Neural7";
MPRINT(EM_DIAGRAM):   when("F_RISK") creator = "Neural7";
MPRINT(EM_DIAGRAM):   when("I_RISK") creator = "Neural7";
MPRINT(EM_DIAGRAM):   when("U_RISK") creator = "Neural7";
MPRINT(EM_DIAGRAM):   when("_WARN_") creator = "Neural7";
MPRINT(EM_DIAGRAM):   when("RISK") model = "Neural7";
MPRINT(EM_DIAGRAM):   when('');
MPRINT(EM_DIAGRAM):   otherwise;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Neural7: Apply Delta Code;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   filename _delta;
192370     data WORK.MODELTEMP_INFO;
MPRINT(EM_DIAGRAM):    data WORK.MODELTEMP_INFO;
192371     set EMWS1.Neural7_EMINFO;
MPRINT(EM_DIAGRAM):   set EMWS1.Neural7_EMINFO;
192372     where DATA='Neural7' and KEY ^in('DECDATA', 'DECMETA', 'IMPORTANCE', 'MODEL');
MPRINT(EM_DIAGRAM):   where DATA='Neural7' and KEY ^in('DECDATA', 'DECMETA', 'IMPORTANCE', 
'MODEL');
192373     run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 0 observations read from the data set EMWS1.NEURAL7_EMINFO.
      WHERE (DATA='Neural7') and KEY not in ('DECDATA', 'DECMETA', 'IMPORTANCE', 'MODEL');
NOTE: The data set WORK.MODELTEMP_INFO has 0 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
      

192374     data EMWS1.Neural7_EMINFO;
MPRINT(EM_DIAGRAM):    data EMWS1.Neural7_EMINFO;
192375     length TARGET KEY $32 DATA $43;
MPRINT(EM_DIAGRAM):   length TARGET KEY $32 DATA $43;
192376     input TARGET KEY DATA $;
MPRINT(EM_DIAGRAM):   input TARGET KEY DATA $;
192377     cards;
MPRINT(EM_DIAGRAM):   cards;

NOTE: The data set EMWS1.NEURAL7_EMINFO has 3 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.04 seconds
      cpu time            0.01 seconds
      

MPRINT(EM_DIAGRAM):   run;
192381     run;
192382     data EMWS1.Neural7_EMINFO;
MPRINT(EM_DIAGRAM):   data EMWS1.Neural7_EMINFO;
192383     set EMWS1.Neural7_EMINFO WORK.MODELTEMP_INFO;
MPRINT(EM_DIAGRAM):   set EMWS1.Neural7_EMINFO WORK.MODELTEMP_INFO;
192384     run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 3 observations read from the data set EMWS1.NEURAL7_EMINFO.
NOTE: There were 0 observations read from the data set WORK.MODELTEMP_INFO.
NOTE: The data set EMWS1.NEURAL7_EMINFO has 3 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.06 seconds
      cpu time            0.01 seconds
      

192385     proc sort data = EMWS1.Neural7_EMINFO NOTHREADS;
MPRINT(EM_DIAGRAM):    proc sort data = EMWS1.Neural7_EMINFO NOTHREADS;
192386     by TARGET KEY;
MPRINT(EM_DIAGRAM):   by TARGET KEY;
192387     run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 3 observations read from the data set EMWS1.NEURAL7_EMINFO.
NOTE: The data set EMWS1.NEURAL7_EMINFO has 3 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.07 seconds
      cpu time            0.01 seconds
      

192388     proc sort data = EMWS1.Reg3_EMINFO OUT=WORK.SORTEDEMINFO NOTHREADS;
MPRINT(EM_DIAGRAM):    proc sort data = EMWS1.Reg3_EMINFO OUT=WORK.SORTEDEMINFO NOTHREADS;
192389     by TARGET KEY;
MPRINT(EM_DIAGRAM):   by TARGET KEY;
192390     run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 4 observations read from the data set EMWS1.REG3_EMINFO.
NOTE: The data set WORK.SORTEDEMINFO has 4 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.02 seconds
      cpu time            0.01 seconds
      

192391     proc sort data = EMWS1.Neural7_EMINFO OUT=WORK.TEMP_INFO NOTHREADS;
MPRINT(EM_DIAGRAM):   proc sort data = EMWS1.Neural7_EMINFO OUT=WORK.TEMP_INFO NOTHREADS;
192392     by TARGET KEY;
MPRINT(EM_DIAGRAM):   by TARGET KEY;
192393     run;
MPRINT(EM_DIAGRAM):   run;

NOTE: Input data set is already sorted; it has been copied to the output data set.
NOTE: There were 3 observations read from the data set EMWS1.NEURAL7_EMINFO.
NOTE: The data set WORK.TEMP_INFO has 3 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.02 seconds
      cpu time            0.00 seconds
      

192394     data EMWS1.Neural7_EMINFO;
MPRINT(EM_DIAGRAM):   data EMWS1.Neural7_EMINFO;
192395     merge WORK.SORTEDEMINFO WORK.TEMP_INFO;
MPRINT(EM_DIAGRAM):   merge WORK.SORTEDEMINFO WORK.TEMP_INFO;
192396     by TARGET KEY;
MPRINT(EM_DIAGRAM):   by TARGET KEY;
192397     run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 4 observations read from the data set WORK.SORTEDEMINFO.
NOTE: There were 3 observations read from the data set WORK.TEMP_INFO.
NOTE: The data set EMWS1.NEURAL7_EMINFO has 4 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.05 seconds
      cpu time            0.01 seconds
      

192398     proc datasets lib=work nolist;
MPRINT(EM_DIAGRAM):   proc datasets lib=work nolist;
192399     delete TEMP_INFO SORTEDEMINFO;
MPRINT(EM_DIAGRAM):   delete TEMP_INFO SORTEDEMINFO;
192400     run;
MPRINT(EM_DIAGRAM):   run;

NOTE: Deleting WORK.TEMP_INFO (memtype=DATA).
NOTE: Deleting WORK.SORTEDEMINFO (memtype=DATA).
192401     quit;
MPRINT(EM_DIAGRAM):   quit;

NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.02 seconds
      cpu time            0.01 seconds
      

NOTE: View EMWS1.NEURAL7_TRAIN.VIEW used (Total process time):
      real time           0.23 seconds
      cpu time            0.23 seconds
      
NOTE: View EMWS1.NEURAL7_VALIDATE.VIEW used (Total process time):
      real time           0.22 seconds
      cpu time            0.23 seconds
      
MPRINT(EM_DIAGRAM):    proc printto;
MPRINT(EM_DIAGRAM):   run;
